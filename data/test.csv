bugid	bug	buggy	additional_info	patch
0	briannesbitt_Carbon_0dc23776da34166686d94a0832a20ca426f124e5_1_0	buggy: 'month' => 'એક મહિનો|:count મહિનો', context: <?php return [ 'year' => 'એક વર્ષ|:count વર્ષ', 'y' => ':countવર્ષ|:countવર્ષો', 'month' => 'એક મહિનો|:count મહિનો', 'month' => 'એક મહિનો|:count મહિનો', 'm' => ':countમહિનો|:countમહિના', 'week' => ':count અઠવાડિયું|:count અઠવાડિયા', 'w' => ':countઅઠ.|:countઅઠ.', 'day' => 'એક દિવસ|:count દિવસ', 'd' => ':countદિ.|:countદિ.',	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	briannesbitt_Carbon_a95bd1d551d475810a68babd9a87e21dde5f417b_2_0	buggy:  context: 'meridiem' => function ($hour) { if ($hour < 12) { return 'pagi'; } if ($hour < 15) { return 'tengah hari'; } if ($hour < 19) { return 'petang'; }	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	briannesbitt_Carbon_a95bd1d551d475810a68babd9a87e21dde5f417b_2_0	buggy: if ($hour < 15) { context: 'meridiem' => function ($hour) { if ($hour < 12) { return 'pagi'; } if ($hour < 15) { if ($hour < 15) { return 'tengah hari'; } if ($hour < 19) { return 'petang'; } return 'malam'; }, 'months' => ['Januari', 'Februari', 'Mac', 'April', 'Mei', 'Jun', 'Julai', 'Ogos', 'September', 'Oktober', 'November', 'Disember'], 'months_short' => ['Jan', 'Feb', 'Mac', 'Apr', 'Mei', 'Jun', 'Jul', 'Ogs', 'Sep', 'Okt', 'Nov', 'Dis'],	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	briannesbitt_Carbon_2ed7883622e7ba361c73948b20da6bbe3f3f921b_3_0	buggy: 'from_now' => 'za :time', context: 'hour' => ':count godzina|:count godziny|:count godzin', 'a_hour' => 'godzina|:count godziny|:count godzin', 'h' => ':count godz.', 'minute' => ':count minuta|:count minuty|:count minut', 'a_minute' => 'minuta|:count minuty|:count minut', 'min' => ':count min', 'second' => ':count sekunda|:count sekundy|:count sekund', 'a_second' => '{1}kilka sekund|:count sekunda|:count sekundy|:count sekund', 's' => ':count sek.', 'ago' => ':time temu', 'from_now' => 'za :time', 'from_now' => 'za :time', 'after' => ':time po', 'before' => ':time przed', 'diff_now' => 'przed chwilą', 'diff_today' => 'Dziś', 'diff_today_regexp' => 'Dziś(?:\\s+o)?', 'diff_yesterday' => 'wczoraj', 'diff_yesterday_regexp' => 'Wczoraj(?:\\s+o)?', 'diff_tomorrow' => 'jutro', 'diff_tomorrow_regexp' => 'Jutro(?:\\s+o)?',	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	briannesbitt_Carbon_36d95ba21c3e147f8f0712c86ce4ec066850db07_4_0	buggy: 'weekdays_short' => ['Sdag', 'Maan', 'Ding', 'Migg', 'Dunn', 'Free', 'Svd.'], 'weekdays_min' => ['Sdag', 'Maan', 'Ding', 'Migg', 'Dunn', 'Free', 'Svd.'], context: return array_replace_recursive(require __DIR__.'/en.php', [ 'formats' => [ 'L' => 'DD.MM.YYYY', ], 'months' => ['Jannuaar', 'Feberwaar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'], 'months_short' => ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'], 'weekdays' => ['Sünndag', 'Maandag', 'Dingsdag', 'Middeweek', 'Dunnersdag', 'Freedag', 'Sünnavend'], 'weekdays_short' => ['Sdag', 'Maan', 'Ding', 'Migg', 'Dunn', 'Free', 'Svd.'], 'weekdays_min' => ['Sdag', 'Maan', 'Ding', 'Migg', 'Dunn', 'Free', 'Svd.'], 'weekdays_short' => ['Sdag', 'Maan', 'Ding', 'Migg', 'Dunn', 'Free', 'Svd.'], 'weekdays_min' => ['Sdag', 'Maan', 'Ding', 'Migg', 'Dunn', 'Free', 'Svd.'], 'first_day_of_week' => 1, 'day_of_first_week_of_year' => 4, 'year' => ':count Johr', 'y' => ':count Johr',	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	briannesbitt_Carbon_36d95ba21c3e147f8f0712c86ce4ec066850db07_4_0	buggy: 'y' => ':count Johr', 'a_year' => ':count Johr', context: 'weekdays' => ['Sünndag', 'Maandag', 'Dingsdag', 'Middeweek', 'Dunnersdag', 'Freedag', 'Sünnavend'], 'weekdays_short' => ['Sdag', 'Maan', 'Ding', 'Migg', 'Dunn', 'Free', 'Svd.'], 'weekdays_min' => ['Sdag', 'Maan', 'Ding', 'Migg', 'Dunn', 'Free', 'Svd.'], 'first_day_of_week' => 1, 'day_of_first_week_of_year' => 4, 'year' => ':count Johr', 'y' => ':count Johr', 'a_year' => ':count Johr', 'y' => ':count Johr', 'a_year' => ':count Johr', 'month' => ':count Maand', 'm' => ':count Maand', 'a_month' => ':count Maand',	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	briannesbitt_Carbon_36d95ba21c3e147f8f0712c86ce4ec066850db07_4_0	buggy: 'm' => ':count Maand', 'a_month' => ':count Maand', context: 'weekdays_short' => ['Sdag', 'Maan', 'Ding', 'Migg', 'Dunn', 'Free', 'Svd.'], 'weekdays_min' => ['Sdag', 'Maan', 'Ding', 'Migg', 'Dunn', 'Free', 'Svd.'], 'first_day_of_week' => 1, 'day_of_first_week_of_year' => 4, 'year' => ':count Johr', 'y' => ':count Johr', 'a_year' => ':count Johr', 'month' => ':count Maand', 'm' => ':count Maand', 'a_month' => ':count Maand', 'm' => ':count Maand', 'a_month' => ':count Maand', 'week' => ':count Week', 'w' => ':count Week', 'a_week' => ':count Week', 'day' => ':count Dag', 'd' => ':count Dag', 'a_day' => ':count Dag',	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	briannesbitt_Carbon_36d95ba21c3e147f8f0712c86ce4ec066850db07_4_0	buggy: 'week' => ':count Week', 'w' => ':count Week', 'a_week' => ':count Week', context: 'day_of_first_week_of_year' => 4, 'year' => ':count Johr', 'y' => ':count Johr', 'a_year' => ':count Johr', 'month' => ':count Maand', 'm' => ':count Maand', 'a_month' => ':count Maand', 'week' => ':count Week', 'w' => ':count Week', 'a_week' => ':count Week', 'week' => ':count Week', 'w' => ':count Week', 'a_week' => ':count Week', 'day' => ':count Dag', 'd' => ':count Dag', 'a_day' => ':count Dag', 'hour' => ':count Stünn', 'h' => ':count Stünn',	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	briannesbitt_Carbon_36d95ba21c3e147f8f0712c86ce4ec066850db07_4_0	buggy: 'day' => ':count Dag', 'd' => ':count Dag', 'a_day' => ':count Dag', context: 'a_year' => ':count Johr', 'month' => ':count Maand', 'm' => ':count Maand', 'a_month' => ':count Maand', 'week' => ':count Week', 'w' => ':count Week', 'a_week' => ':count Week', 'day' => ':count Dag', 'd' => ':count Dag', 'a_day' => ':count Dag', 'day' => ':count Dag', 'd' => ':count Dag', 'a_day' => ':count Dag', 'hour' => ':count Stünn', 'h' => ':count Stünn', 'a_hour' => ':count Stünn', 'minute' => ':count Minuut', 'min' => ':count Minuut',	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	briannesbitt_Carbon_36d95ba21c3e147f8f0712c86ce4ec066850db07_4_0	buggy: 'hour' => ':count Stünn', 'h' => ':count Stünn', 'a_hour' => ':count Stünn', context: 'a_month' => ':count Maand', 'week' => ':count Week', 'w' => ':count Week', 'a_week' => ':count Week', 'day' => ':count Dag', 'd' => ':count Dag', 'a_day' => ':count Dag', 'hour' => ':count Stünn', 'h' => ':count Stünn', 'a_hour' => ':count Stünn', 'hour' => ':count Stünn', 'h' => ':count Stünn', 'a_hour' => ':count Stünn', 'minute' => ':count Minuut', 'min' => ':count Minuut', 'a_minute' => ':count Minuut', 'second' => ':count sekunn', 's' => ':count sekunn',	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	briannesbitt_Carbon_36d95ba21c3e147f8f0712c86ce4ec066850db07_4_0	buggy: 'minute' => ':count Minuut', 'min' => ':count Minuut', 'a_minute' => ':count Minuut', context: 'a_week' => ':count Week', 'day' => ':count Dag', 'd' => ':count Dag', 'a_day' => ':count Dag', 'hour' => ':count Stünn', 'h' => ':count Stünn', 'a_hour' => ':count Stünn', 'minute' => ':count Minuut', 'min' => ':count Minuut', 'a_minute' => ':count Minuut', 'minute' => ':count Minuut', 'min' => ':count Minuut', 'a_minute' => ':count Minuut', 'second' => ':count sekunn', 's' => ':count sekunn', 'a_second' => ':count sekunn', ]);	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	briannesbitt_Carbon_36d95ba21c3e147f8f0712c86ce4ec066850db07_4_0	buggy: 'second' => ':count sekunn', 's' => ':count sekunn', 'a_second' => ':count sekunn', context: 'a_day' => ':count Dag', 'hour' => ':count Stünn', 'h' => ':count Stünn', 'a_hour' => ':count Stünn', 'minute' => ':count Minuut', 'min' => ':count Minuut', 'a_minute' => ':count Minuut', 'second' => ':count sekunn', 's' => ':count sekunn', 'a_second' => ':count sekunn', 'second' => ':count sekunn', 's' => ':count sekunn', 'a_second' => ':count sekunn', ]);	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	w7corp_easywechat_bcd116e703871870b2e2a207c6af3c2ed2617e16_1_0	buggy: $ciphertext = $message->attributes['Encrypt']; context: public function decryptMessage(Message $message, Encryptor $encryptor, string $signature, int | string $timestamp, string $nonce): Message { $ciphertext = $message->attributes['Encrypt']; $ciphertext = $message->attributes['Encrypt']; $this->validateSignature($encryptor->getToken(), $ciphertext, $signature, $timestamp, $nonce); $message->attributes = Xml::parse( $encryptor->decrypt( ciphertext: $ciphertext, msgSignature: $signature, nonce: $nonce, timestamp: $timestamp )	type_info: ciphertext:unknown  global_variable:  function_name: decryptMessage validateSignature	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	w7corp_easywechat_bcd116e703871870b2e2a207c6af3c2ed2617e16_1_1	buggy: $response = $this->handle(new Response(200, [], 'SUCCESS'), $message); context: $message = \EasyWeChat\OpenWork\Message::createFromRequest($this->request); $query = $this->request->getQueryParams(); $this->with(function (\EasyWeChat\Kernel\Message $message, \Closure $next) use ($query) { $this->decryptMessage($message, $this->encryptor, $query['msg_signature'], $query['timestamp'], $query['nonce']); return $next($message); }); $response = $this->handle(new Response(200, [], 'SUCCESS'), $message); $response = $this->handle(new Response(200, [], 'SUCCESS'), $message); if ($response instanceof ResponseInterface) { return $response; } return $this->transformToReply($response, $message, $this->encryptor); } public function withDefaultSuiteTicketHandler(callable | string $handler)	type_info: message:unknown query:unknown response:unknown  global_variable:  function_name: __construct serve withDefaultSuiteTicketHandler handleSuiteTicketRefreshed handleAuthCreated handleAuthChanged handleAuthCancelled handleUserCreated handleUserUpdated handleUserDeleted handlePartyCreated handlePartyUpdated handlePartyDeleted handleUserTagUpdated handleShareAgentChanged handleUrlValidate resolveResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	w7corp_easywechat_fe870d8b0b72198690f14a560f220496fe926d31_2_0	buggy: $this->with($this->decryptRequestMessage()); context: public function serve(): ResponseInterface { if (!!($str = $this->request->getQueryParams()['echostr'] ?? '')) { return new ServerResponse(200, [], $str); } $message = Message::createFromRequest($this->request); $this->with($this->decryptRequestMessage()); $this->with($this->decryptRequestMessage()); $response = $this->handle(new ServerResponse(200, [], 'success'), $message); if ($response instanceof ResponseInterface) { return $response; } return $this->transformToReply($response, $message, $this->encryptor); }	type_info: str:unknown message:unknown response:unknown  global_variable:  function_name: __construct serve handleAuthorized handleUnauthorized handleAuthorizeUpdated handleVerifyTicketRefreshed resolveResponse decryptRequestMessage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	w7corp_easywechat_fe870d8b0b72198690f14a560f220496fe926d31_2_1	buggy: $this->with($this->decryptRequestMessage()); context: $query['msg_signature'] ?? '', $query['nonce'] ?? '', $query['timestamp'] ?? '' ); return new ServerResponse(200, [], $response); } $message = Message::createFromRequest($this->request); $this->with($this->decryptRequestMessage()); $this->with($this->decryptRequestMessage()); $response = $this->handle(new ServerResponse(200, [], 'success'), $message); if ($response instanceof ResponseInterface) { return $response; } return $this->transformToReply($response, $message, $this->encryptor); }	type_info: query:unknown message:unknown response:unknown  global_variable:  function_name: __construct serve withDefaultSuiteTicketHandler handleSuiteTicketRefreshed handleAuthCreated handleAuthChanged handleAuthCancelled handleUserCreated handleUserUpdated handleUserDeleted handlePartyCreated handlePartyUpdated handlePartyDeleted handleUserTagUpdated handleShareAgentChanged decryptRequestMessage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	w7corp_easywechat_fe870d8b0b72198690f14a560f220496fe926d31_2_2	buggy: $this->when($message->has('Encrypt'), $this->decryptRequestMessage()); context: $query['msg_signature'] ?? '', $query['nonce'] ?? '', $query['timestamp'] ?? '' ); return new ServerResponse(200, [], $response); } $message = Message::createFromRequest($this->request); $this->when($message->has('Encrypt'), $this->decryptRequestMessage()); $this->when($message->has('Encrypt'), $this->decryptRequestMessage()); $response = $this->handle(new ServerResponse(200, [], 'SUCCESS'), $message); if ($response instanceof ResponseInterface) { return $response; } return $this->transformToReply($response, $message, $this->encryptor); }	type_info: query:unknown response:unknown message:unknown  global_variable:  function_name: __construct serve handleContactChanged handleUserTagUpdated handleUserCreated handleUserUpdated handleUserDeleted handlePartyCreated handlePartyUpdated handlePartyDeleted handleBatchJobsFinished addMessageListener addEventListener validateUrl decryptRequestMessage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	w7corp_easywechat_f979a98cacc5a8436828a56fe400e0e601ad4b57_3_0	buggy:  context: <?php declare(strict_types=1); namespace EasyWeChat\Kernel; use EasyWeChat\Kernel\Exceptions\BadRequestException; use EasyWeChat\Kernel\Support\Xml; use EasyWeChat\Kernel\Traits\HasAttributes; use Psr\Http\Message\ServerRequestInterface; abstract class Message	type_info:  global_variable:  function_name: __construct getOriginalContents __toString format createFromRequest	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	w7corp_easywechat_f979a98cacc5a8436828a56fe400e0e601ad4b57_3_0	buggy: abstract class Message context: declare(strict_types=1); namespace EasyWeChat\Kernel; use EasyWeChat\Kernel\Exceptions\BadRequestException; use EasyWeChat\Kernel\Support\Xml; use EasyWeChat\Kernel\Traits\HasAttributes; use Psr\Http\Message\ServerRequestInterface; abstract class Message abstract class Message { use HasAttributes; final public function __construct(array $attributes = [], protected ?string $originContent = '') { $this->attributes = $attributes; } public function getOriginalContents(): ?string	type_info: attributes:unknown  global_variable:  function_name: __construct getOriginalContents __toString format createFromRequest	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	w7corp_easywechat_58cad625f1829a33249a81855d5e50989bf143e2_4_0	buggy:  context: <?php declare(strict_types=1); namespace EasyWeChat\Pay; use EasyWeChat\Kernel\Support\PrivateKey; use EasyWeChat\Kernel\Support\PublicKey; use EasyWeChat\Kernel\Support\UserAgent; use EasyWeChat\Kernel\Traits\HttpClientMethods; use EasyWeChat\Kernel\Traits\MockableHttpClient; use Mockery\Mock; use Nyholm\Psr7\Uri; use Symfony\Component\HttpClient\DecoratorTrait; use Symfony\Component\HttpClient\HttpClient as SymfonyHttpClient; use Symfony\Component\HttpClient\HttpClientTrait; use Symfony\Component\HttpClient\MockHttpClient; use Symfony\Contracts\HttpClient\HttpClientInterface;	type_info:  global_variable:  function_name: __construct request isV3Request __call createSignature attachLegacySignature createMockClient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	w7corp_easywechat_58cad625f1829a33249a81855d5e50989bf143e2_4_0	buggy: } elseif (!empty($options['json']) && \is_array($options['json'])) { $options['json'] = $this->attachLegacySignature($options['json']); } elseif (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = $this->attachLegacySignature($options['body']); context: public function request(string $method, string $url, array $options = []): ResponseInterface { $options['headers']['User-Agent'] = UserAgent::create([$options['headers']['User-Agent'] ?? '']); if ($this->isV3Request($url)) { [, $options] = $this->prepareRequest($method, $url, $options, $this->defaultOptions, true); $options['headers']['Authorization'] = $this->createSignature($method, $url, $options); } elseif (!empty($options['json']) && \is_array($options['json'])) { $options['json'] = $this->attachLegacySignature($options['json']); } elseif (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = $this->attachLegacySignature($options['body']); } elseif (!empty($options['json']) && \is_array($options['json'])) { $options['json'] = $this->attachLegacySignature($options['json']); } elseif (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = $this->attachLegacySignature($options['body']); } return $this->client->request($method, $url, $options); } protected function isV3Request(string $url): bool {	type_info: options:unknown  global_variable:  function_name: __construct request isV3Request __call createSignature attachLegacySignature createMockClient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	w7corp_easywechat_8ea3c9a59ddbdf323e050b62f9b999d372f6a98c_5_0	buggy:  context: public function getHeader(string $name, ?bool $throw = null): array { $throw ??= $this->throw; return $this->hasHeader($name, $throw) ? $this->getHeaders($throw)[$name] : []; }	type_info: throw:unknown  global_variable:  function_name: __construct throw throwOnFailure quietly judgeFailureUsing isSuccessful isFailed toArray offsetExists offsetGet offsetSet offsetUnset toJson __call getStatusCode getHeaders getContent cancel getInfo __toString hasHeader getHeader getHeaderLine saveAs toDataUrl is	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	w7corp_easywechat_8ea3c9a59ddbdf323e050b62f9b999d372f6a98c_5_0	buggy:  context: public function getHeaderLine(string $name, ?bool $throw = null): string { $throw ??= $this->throw; return $this->hasHeader($name, $throw) ? implode(',', $this->getHeader($name, $throw)) : ''; }	type_info: throw:unknown  global_variable:  function_name: __construct throw throwOnFailure quietly judgeFailureUsing isSuccessful isFailed toArray offsetExists offsetGet offsetSet offsetUnset toJson __call getStatusCode getHeaders getContent cancel getInfo __toString hasHeader getHeader getHeaderLine saveAs toDataUrl is	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	w7corp_easywechat_8ea3c9a59ddbdf323e050b62f9b999d372f6a98c_5_0	buggy: return 'data:'.$this->getHeaderLine('Content-Type').';base64,'.\base64_encode($this->getContent()); context: public function toDataUrl(): string { return 'data:'.$this->getHeaderLine('Content-Type').';base64,'.\base64_encode($this->getContent()); return 'data:'.$this->getHeaderLine('Content-Type').';base64,'.\base64_encode($this->getContent()); }	type_info:  global_variable:  function_name: __construct throw throwOnFailure quietly judgeFailureUsing isSuccessful isFailed toArray offsetExists offsetGet offsetSet offsetUnset toJson __call getStatusCode getHeaders getContent cancel getInfo __toString hasHeader getHeader getHeaderLine saveAs toDataUrl is	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	w7corp_easywechat_8ea3c9a59ddbdf323e050b62f9b999d372f6a98c_5_0	buggy: $contentType = $this->getHeaderLine('Content-Type'); context: public function is(string $type): bool { $contentType = $this->getHeaderLine('Content-Type'); $contentType = $this->getHeaderLine('Content-Type'); return match (\strtolower($type)) { 'json' => \str_contains($contentType, '/json') !== false, 'xml' => \str_contains($contentType, '/xml') !== false, 'html' => \str_contains($contentType, '/html') !== false, 'image' => \str_contains($contentType, 'image/') !== false, 'audio' => \str_contains($contentType, 'audio/') !== false, 'video' => \str_contains($contentType, 'video/') !== false, 'text' => \str_contains($contentType, 'text/') !== false || \str_contains($contentType, '/json') !== false	type_info: contentType:unknown type:unknown  global_variable:  function_name: __construct throw throwOnFailure quietly judgeFailureUsing isSuccessful isFailed toArray offsetExists offsetGet offsetSet offsetUnset toJson __call getStatusCode getHeaders getContent cancel getInfo __toString hasHeader getHeader getHeaderLine saveAs toDataUrl is	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	w7corp_easywechat_8ea3c9a59ddbdf323e050b62f9b999d372f6a98c_5_0	buggy: 'json' => \str_contains($contentType, '/json') !== false, 'xml' => \str_contains($contentType, '/xml') !== false, 'html' => \str_contains($contentType, '/html') !== false, 'image' => \str_contains($contentType, 'image/') !== false, 'audio' => \str_contains($contentType, 'audio/') !== false, 'video' => \str_contains($contentType, 'video/') !== false, 'text' => \str_contains($contentType, 'text/') !== false || \str_contains($contentType, '/json') !== false || \str_contains($contentType, '/xml') !== false, context: public function is(string $type): bool { $contentType = $this->getHeaderLine('Content-Type'); return match (\strtolower($type)) { 'json' => \str_contains($contentType, '/json') !== false, 'xml' => \str_contains($contentType, '/xml') !== false, 'html' => \str_contains($contentType, '/html') !== false, 'image' => \str_contains($contentType, 'image/') !== false, 'audio' => \str_contains($contentType, 'audio/') !== false, 'video' => \str_contains($contentType, 'video/') !== false, 'text' => \str_contains($contentType, 'text/') !== false || \str_contains($contentType, '/json') !== false || \str_contains($contentType, '/xml') !== false, 'json' => \str_contains($contentType, '/json') !== false, 'xml' => \str_contains($contentType, '/xml') !== false, 'html' => \str_contains($contentType, '/html') !== false, 'image' => \str_contains($contentType, 'image/') !== false, 'audio' => \str_contains($contentType, 'audio/') !== false, 'video' => \str_contains($contentType, 'video/') !== false, 'text' => \str_contains($contentType, 'text/') !== false || \str_contains($contentType, '/json') !== false || \str_contains($contentType, '/xml') !== false, default => false, }; } }	type_info: contentType:unknown type:unknown  global_variable:  function_name: __construct throw throwOnFailure quietly judgeFailureUsing isSuccessful isFailed toArray offsetExists offsetGet offsetSet offsetUnset toJson __call getStatusCode getHeaders getContent cancel getInfo __toString hasHeader getHeader getHeaderLine saveAs toDataUrl is	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	w7corp_easywechat_8feb208a4d8714b7e9073d3f57ac6173da4c9d8c_6_0	buggy: if (array_key_exists('query', $options) || array_key_exists('body', $options) context: public static function formatOptions(array $options, string $method): array { if (array_key_exists('query', $options) || array_key_exists('body', $options) if (array_key_exists('query', $options) || array_key_exists('body', $options) || array_key_exists('json', $options) || array_key_exists('xml', $options) ) { return $options; } $name = in_array($method, ['GET', 'HEAD', 'DELETE']) ? 'query' : 'body'; if (($options['headers']['Content-Type'] ?? $options['headers']['content-type'] ?? null) === 'application/json') { $name = 'json';	type_info: name:string  global_variable:  function_name: mergeDefaultRetryOptions formatDefaultOptions formatOptions formatBody createDefaultServerRequest	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	w7corp_easywechat_8feb208a4d8714b7e9073d3f57ac6173da4c9d8c_6_0	buggy: $options[$name][$key] = $value; context: } $name = in_array($method, ['GET', 'HEAD', 'DELETE']) ? 'query' : 'body'; if (($options['headers']['Content-Type'] ?? $options['headers']['content-type'] ?? null) === 'application/json') { $name = 'json'; } foreach ($options as $key => $value) { if (!array_key_exists($key, HttpClientInterface::OPTIONS_DEFAULTS)) { $options[$name][$key] = $value; $options[$name][$key] = $value; unset($options[$key]); } } return $options; } public static function formatBody(array $options): array {	type_info: name:string key:unknown  global_variable:  function_name: mergeDefaultRetryOptions formatDefaultOptions formatOptions formatBody createDefaultServerRequest	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	w7corp_easywechat_33105e760c16aaa68ef2133416caf394fffdb58f_7_0	buggy: $handler = $this->makeClosure($handler); context: public function addMessageListener(string $type, callable|string $handler): static { $handler = $this->makeClosure($handler); $handler = $this->makeClosure($handler); $this->withHandler( function (Message $message, Closure $next) use ($type, $handler): mixed { return $message->MsgType === $type ? $handler($message, $next) : $next($message); } ); return $this; }	type_info: message:unknown handler:unknown  global_variable:  function_name: __construct serve addMessageListener addEventListener decryptRequestMessage getRequestMessage getDecryptedMessage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	w7corp_easywechat_33105e760c16aaa68ef2133416caf394fffdb58f_7_0	buggy: $handler = $this->makeClosure($handler); context: public function addEventListener(string $event, callable|string $handler): static { $handler = $this->makeClosure($handler); $handler = $this->makeClosure($handler); $this->withHandler( function (Message $message, Closure $next) use ($event, $handler): mixed { return $message->Event === $event ? $handler($message, $next) : $next($message); } ); return $this; }	type_info: message:unknown handler:unknown  global_variable:  function_name: __construct serve addMessageListener addEventListener decryptRequestMessage getRequestMessage getDecryptedMessage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	w7corp_easywechat_33105e760c16aaa68ef2133416caf394fffdb58f_7_1	buggy:  context: } if (!empty($options['body']) && is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); } if (!isset($options['headers']['Content-Type']) && !isset($options['headers']['content-type'])) { $options['headers']['Content-Type'] = 'text/xml'; } } if (!empty($this->prependHeaders)) { $options['headers'] = array_merge($this->prependHeaders, $options['headers'] ?? []); } return new Response($this->client->request($method, $url, $options), throw: $this->throw); } protected function isV3Request(string $url): bool {	type_info: options:array  global_variable:  function_name: __construct request isV3Request __call createSignature attachLegacySignature createMockClient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	w7corp_easywechat_33105e760c16aaa68ef2133416caf394fffdb58f_7_2	buggy:  context: public function setAccessToken(AccessTokenInterface $accessToken): static { $this->accessToken = $accessToken; return $this; } public function createClient(): AccessTokenAwareClient	type_info: accessToken:unknown  global_variable:  function_name: getAccount setAccount getEncryptor setEncryptor getServer setServer getAccessToken setAccessToken createClient getOAuth getTicket setTicket getHttpClientDefaultOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	w7corp_easywechat_3e5f85d4cc04a0fa9ad4bdb6bb20b6f1dbbc51eb_8_0	buggy:  context: protected function getHandlerHash(callable|string $handler): string { return match (true) { is_string($handler) => $handler, is_array($handler) => is_string($handler[0]) ? $handler[0].'::'.$handler[1] : get_class( $handler[0] ).$handler[1], $handler instanceof Closure => spl_object_hash($handler), default => throw new InvalidArgumentException('Invalid handler: '.gettype($handler)), }; } protected function makeClosure(callable|string $handler): callable { if (is_callable($handler)) { return $handler; }	type_info:  global_variable:  function_name: getHandlers with withHandler createHandlerItem getHandlerHash makeClosure prepend prependHandler without withoutHandler indexOf when handle has	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	w7corp_easywechat_858594c451dd2a1497a4e31d24e1e541f4a1cb3a_9_0	buggy:  context: public function request(string $method, string $url, array $options = []): ResponseInterface { if (empty($options['headers'])) { $options['headers'] = []; } $options['headers']['User-Agent'] = UserAgent::create(); if ($this->isV3Request($url)) { [, $options] = $this->prepareRequest($method, $url, $options, $this->defaultOptions, true); $options['headers']['Authorization'] ??= $this->createSignature($method, $url, $options); } else {	type_info: options:array  global_variable:  function_name: __construct request isV3Request __call uploadMedia createSignature attachLegacySignature createMockClient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	w7corp_easywechat_858594c451dd2a1497a4e31d24e1e541f4a1cb3a_9_0	buggy:  context: public function request(string $method, string $url, array $options = []): ResponseInterface { if (empty($options['headers'])) { $options['headers'] = []; } $options['headers']['User-Agent'] = UserAgent::create(); if ($this->isV3Request($url)) { [, $options] = $this->prepareRequest($method, $url, $options, $this->defaultOptions, true); $options['headers']['Authorization'] ??= $this->createSignature($method, $url, $options); } else { if (! empty($options['xml'])) { if (is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }	type_info: options:array  global_variable:  function_name: __construct request isV3Request __call uploadMedia createSignature attachLegacySignature createMockClient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	w7corp_easywechat_858594c451dd2a1497a4e31d24e1e541f4a1cb3a_9_0	buggy: if ($this->isV3Request($url)) { [, $options] = $this->prepareRequest($method, $url, $options, $this->defaultOptions, true); $options['headers']['Authorization'] ??= $this->createSignature($method, $url, $options); context: public function request(string $method, string $url, array $options = []): ResponseInterface { if (empty($options['headers'])) { $options['headers'] = []; } $options['headers']['User-Agent'] = UserAgent::create(); if ($this->isV3Request($url)) { [, $options] = $this->prepareRequest($method, $url, $options, $this->defaultOptions, true); $options['headers']['Authorization'] ??= $this->createSignature($method, $url, $options); if ($this->isV3Request($url)) { [, $options] = $this->prepareRequest($method, $url, $options, $this->defaultOptions, true); $options['headers']['Authorization'] ??= $this->createSignature($method, $url, $options); } else { if (! empty($options['xml'])) { if (is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); } if (! is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }	type_info: options:array  global_variable:  function_name: __construct request isV3Request __call uploadMedia createSignature attachLegacySignature createMockClient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	w7corp_easywechat_858594c451dd2a1497a4e31d24e1e541f4a1cb3a_9_0	buggy:  context: } $options['body'] = $options['xml']; unset($options['xml']); } if (! empty($options['body']) && is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); } if (! isset($options['headers']['Content-Type']) && ! isset($options['headers']['content-type'])) { $options['headers']['Content-Type'] = 'text/xml'; } } if (! empty($this->prependHeaders)) { $options['headers'] = array_merge($this->prependHeaders, $options['headers'] ?? []); } return new Response(	type_info: options:array  global_variable:  function_name: __construct request isV3Request __call uploadMedia createSignature attachLegacySignature createMockClient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	w7corp_easywechat_858594c451dd2a1497a4e31d24e1e541f4a1cb3a_9_0	buggy: $options['headers']['Content-Type'] = 'text/xml'; context: $options['body'] = $options['xml']; unset($options['xml']); } if (! empty($options['body']) && is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); } if (! isset($options['headers']['Content-Type']) && ! isset($options['headers']['content-type'])) { $options['headers']['Content-Type'] = 'text/xml'; $options['headers']['Content-Type'] = 'text/xml'; } } if (! empty($this->prependHeaders)) { $options['headers'] = array_merge($this->prependHeaders, $options['headers'] ?? []); } return new Response( $this->client->request($method, $url, $options),	type_info: options:array  global_variable:  function_name: __construct request isV3Request __call uploadMedia createSignature attachLegacySignature createMockClient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	w7corp_easywechat_858594c451dd2a1497a4e31d24e1e541f4a1cb3a_9_0	buggy: public function uploadMedia(string $uri, string $pathOrContents, string $filename = null): ResponseInterface context: public function __call(string $name, array $arguments): mixed { if (\str_starts_with($name, 'with')) { return $this->handleMagicWithCall($name, $arguments[0] ?? null); } return $this->client->$name(...$arguments); } public function uploadMedia(string $uri, string $pathOrContents, string $filename = null): ResponseInterface public function uploadMedia(string $uri, string $pathOrContents, string $filename = null): ResponseInterface	type_info: uri:unknown filename:unknown  global_variable:  function_name: __construct request isV3Request __call uploadMedia createSignature attachLegacySignature createMockClient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	w7corp_easywechat_858594c451dd2a1497a4e31d24e1e541f4a1cb3a_9_0	buggy: $meta = self::jsonEncode([ 'filename' => $filename ?? basename($pathOrContents), 'sha256' => hash_file('sha256', $pathOrContents), context: public function uploadMedia(string $uri, string $pathOrContents, string $filename = null): ResponseInterface { $meta = self::jsonEncode([ 'filename' => $filename ?? basename($pathOrContents), 'sha256' => hash_file('sha256', $pathOrContents), $meta = self::jsonEncode([ 'filename' => $filename ?? basename($pathOrContents), 'sha256' => hash_file('sha256', $pathOrContents), ]); $form = Form::create([ 'file' => File::from($pathOrContents), 'meta' => new DataPart($meta, null, 'application/json'), ]); $options = $signatureOptions = $form->toOptions(); $signatureOptions['body'] = $meta;	type_info: options:array uri:unknown filename:unknown form:unknown  global_variable:  function_name: __construct request isV3Request __call uploadMedia createSignature attachLegacySignature createMockClient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	symfony_symfony_c87ac90c42c10895bdebe195f8b2963fddde5284_1_0	"buggy:  context: if ($constructor) { if (true !== $constructor->isPublic()) { return $reflectionClass->newInstanceWithoutConstructor(); } $constructorParameters = $constructor->getParameters(); $params = []; foreach ($constructorParameters as $constructorParameter) { $paramName = $constructorParameter->name; $key = $this->nameConverter ? $this->nameConverter->normalize($paramName, $class, $format, $context) : $paramName; $attributeContext = $this->getAttributeDenormalizationContext($class, $key, $context); $allowed = false === $allowedAttributes || \in_array($paramName, $allowedAttributes); $ignored = !$this->isAllowedAttribute($class, $paramName, $format, $context); if ($constructorParameter->isVariadic()) { if ($allowed && !$ignored && (isset($data[$key]) || \array_key_exists($key, $data))) { if (!\is_array($data[$paramName])) { throw new RuntimeException(sprintf('Cannot create an instance of ""%s"" from serialized data because the variadic parameter ""%s"" can only accept an array.', $class, $constructorParameter->name)); }"	type_info: classMetadataFactory:unknown format:unknown allowedAttributes:array constructor:unknown constructorParameters:unknown params:array paramName:unknown key:unknown attributeContext:unknown allowed:unknown ignored:unknown  global_variable: classMetadataFactory: unknown function_name: __construct hasCacheableSupportsMethod isCircularReference handleCircularReference getAllowedAttributes getGroups isAllowedAttribute prepareForDenormalization getConstructor instantiateObject denormalizeParameter createChildContext validateCallbackContext applyCallbacks getAttributeNormalizationContext getAttributeDenormalizationContext getAttributeMetadata	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	symfony_symfony_c87ac90c42c10895bdebe195f8b2963fddde5284_1_0	"buggy: $attributeContext = $this->getAttributeDenormalizationContext($class, $key, $context); context: if (true !== $constructor->isPublic()) { return $reflectionClass->newInstanceWithoutConstructor(); } $constructorParameters = $constructor->getParameters(); $params = []; foreach ($constructorParameters as $constructorParameter) { $paramName = $constructorParameter->name; $key = $this->nameConverter ? $this->nameConverter->normalize($paramName, $class, $format, $context) : $paramName; $attributeContext = $this->getAttributeDenormalizationContext($class, $key, $context); $attributeContext = $this->getAttributeDenormalizationContext($class, $key, $context); $allowed = false === $allowedAttributes || \in_array($paramName, $allowedAttributes); $ignored = !$this->isAllowedAttribute($class, $paramName, $format, $context); if ($constructorParameter->isVariadic()) { if ($allowed && !$ignored && (isset($data[$key]) || \array_key_exists($key, $data))) { if (!\is_array($data[$paramName])) { throw new RuntimeException(sprintf('Cannot create an instance of ""%s"" from serialized data because the variadic parameter ""%s"" can only accept an array.', $class, $constructorParameter->name)); }"	type_info: classMetadataFactory:unknown format:unknown allowedAttributes:array constructor:unknown constructorParameters:unknown params:array paramName:unknown key:unknown attributeContext:unknown allowed:unknown ignored:unknown  global_variable: classMetadataFactory: unknown function_name: __construct hasCacheableSupportsMethod isCircularReference handleCircularReference getAllowedAttributes getGroups isAllowedAttribute prepareForDenormalization getConstructor instantiateObject denormalizeParameter createChildContext validateCallbackContext applyCallbacks getAttributeNormalizationContext getAttributeDenormalizationContext getAttributeMetadata	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	symfony_symfony_e100562fed39ee64fee523b2eacf6ec361429bad_2_0	buggy: if ($chunk->isTimeout() || null !== $chunk->getInformationalStatus() || $context->getInfo('canceled')) { context: return new AsyncResponse($this->client, $method, $url, $options, function (ChunkInterface $chunk, AsyncContext $context) use ($method, $url, $options, &$retryCount, &$content, &$firstChunk) { $exception = null; try { if ($chunk->isTimeout() || null !== $chunk->getInformationalStatus() || $context->getInfo('canceled')) { if ($chunk->isTimeout() || null !== $chunk->getInformationalStatus() || $context->getInfo('canceled')) { yield $chunk; return; } } catch (TransportExceptionInterface $exception) { } if (null !== $exception) { if ('' !== $context->getInfo('primary_ip')) { $shouldRetry = $this->strategy->shouldRetry($context, null, $exception); if (null === $shouldRetry) {	type_info: strategy:unknown options:unknown retryCount:integer content:string firstChunk:unknown exception:unknown shouldRetry:unknown chunk:unknown  global_variable: strategy: unknown function_name: __construct request getDelayFromHeader passthru	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	symfony_symfony_e100562fed39ee64fee523b2eacf6ec361429bad_2_0	buggy:  context: yield from $this->passthru($context, $firstChunk, $content, $chunk); return; } } $context->getResponse()->cancel(); $delay = $this->getDelayFromHeader($context->getHeaders()) ?? $this->strategy->getDelay($context, !$exception && $chunk->isLast() ? $content : null, $exception); ++$retryCount; $this->logger->info('Try #{count} after {delay}ms'.($exception ? ': '.$exception->getMessage() : ', status code: '.$context->getStatusCode()), [ 'count' => $retryCount, 'delay' => $delay, ]); $context->setInfo('retry_count', $retryCount); $context->replaceRequest($method, $url, $options); $context->pause($delay / 1000);	type_info: strategy:unknown options:unknown retryCount:integer content:string firstChunk:unknown exception:unknown delay:unknown chunk:unknown  global_variable: strategy: unknown function_name: __construct request getDelayFromHeader passthru	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	symfony_symfony_c4f651e9fc2188e52d68b75491691146338b77de_3_0	buggy: $keysToDelete = []; foreach (array_keys($catalogue->all($domain)) as $key) { $keysToDelete[] = $key; context: { $catalogue = $translatorBag->getCatalogue($this->defaultLocale); if (!$catalogue) { $catalogue = $translatorBag->getCatalogues()[0]; } $keysIds = []; foreach ($catalogue->getDomains() as $domain) { $keysToDelete = []; foreach (array_keys($catalogue->all($domain)) as $key) { $keysToDelete[] = $key; $keysToDelete = []; foreach (array_keys($catalogue->all($domain)) as $key) { $keysToDelete[] = $key; } $keysIds += $this->getKeysIds($keysToDelete, $domain); } $response = $this->client->request('DELETE', 'keys', [ 'json' => ['keys' => array_values($keysIds)], ]);	type_info: domain:unknown translatorBag:unknown catalogue:unknown keysIds:array keysToDelete:array response:unknown  global_variable:  function_name: __construct __toString write read delete exportFiles createKeys updateTranslations getKeysIds ensureAllLocalesAreCreated getLanguages createLanguages getLokaliseFilenameFromDomain	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	symfony_symfony_8150678fa85a85f08992d620e11b64825df7f694_4_0	"buggy: $width += $this->wcswidth($s); context: foreach (explode(""\n"", $s) as $s) { if ($ignoreAnsiDecoration) { $s = preg_replace('/(?:\x1B(?: \[ [\x30-\x3F]*+ [\x20-\x2F]*+ [\x40-\x7E] | [P\]X^_] .*? \x1B\\\\ | [\x41-\x7E] )|[\p{Cc}\x7F]++)/xu', '', $s); } $width += $this->wcswidth($s); $width += $this->wcswidth($s); } return $width; } private function pad(int $len, self $pad, int $type): parent { $sLen = $this->length();"	type_info: s:unknown pad:unknown ignoreAnsiDecoration:unknown sLen:unknown len:unknown width:integer tableZero:unknown tableWide:unknown  global_variable: tableZero: unknown tableWide: unknown function_name: fromCodePoints ascii camel codePointsAt folded join lower match normalize padBoth padEnd padStart replaceMatches reverse snake title trim trimEnd trimPrefix trimStart trimSuffix upper width pad wcswidth	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	symfony_symfony_b301d926866ddcc2d05a99a1bd839a427e918558_5_0	buggy:  context: foreach ($object->getParameterBag()->all() as $k => $v) { $parameters[$k] = $object->resolveEnvPlaceholders($v); } $object = new ParameterBag($parameters); $options = []; } elseif ($parameter = $input->getOption('parameter')) { $options = ['parameter' => $parameter]; } elseif ($input->getOption('tags')) { $options = ['group_by' => 'tags']; } elseif ($tag = $input->getOption('tag')) { $options = ['tag' => $tag]; } elseif ($name = $input->getArgument('name')) { $name = $this->findProperServiceName($input, $errorIo, $object, $name, $input->getOption('show-hidden')); $options = ['id' => $name]; } elseif ($input->getOption('deprecations')) { $options = ['deprecations' => true]; } else { $options = []; }	type_info: errorIo:unknown object:unknown options:array parameters:array k:unknown parameter:unknown tag:unknown name:unknown  global_variable:  function_name: configure execute complete validateInput findProperServiceName findServiceIdsContaining filterToServiceTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	symfony_symfony_b301d926866ddcc2d05a99a1bd839a427e918558_5_0	"buggy:  context: throw new InvalidArgumentException(sprintf('No services found that match ""%s"".', $name)); } if (1 === \count($matchingServices)) { return $matchingServices[0]; } return $io->choice('Select one of the following services to display its information', $matchingServices); } private function findServiceIdsContaining(ContainerBuilder $builder, string $name, bool $showHidden): array { $serviceIds = $builder->getServiceIds(); $foundServiceIds = $foundServiceIdsIgnoringBackslashes = []; foreach ($serviceIds as $serviceId) { if (!$showHidden && str_starts_with($serviceId, '.')) { continue; } if (false !== stripos(str_replace('\\', '', $serviceId), $name)) { $foundServiceIdsIgnoringBackslashes[] = $serviceId;"	type_info: io:unknown name:unknown matchingServices:unknown serviceIds:unknown foundServiceIds:array  global_variable:  function_name: configure execute complete validateInput findProperServiceName findServiceIdsContaining filterToServiceTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	symfony_symfony_b301d926866ddcc2d05a99a1bd839a427e918558_5_0	buggy:  context: $foundServiceIdsIgnoringBackslashes[] = $serviceId; } if ('' === $name || false !== stripos($serviceId, $name)) { $foundServiceIds[] = $serviceId; } } return $foundServiceIds ?: $foundServiceIdsIgnoringBackslashes; } public function filterToServiceTypes(string $serviceId): bool { if (!preg_match('/(?(DEFINE)(?<V>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*+))^(?&V)(?:\\\\(?&V))*+(?: \$(?&V))?$/', $serviceId)) { return false; } if (str_contains($serviceId, '\\')) { return true; }	type_info: name:unknown foundServiceIds:array  global_variable:  function_name: configure execute complete validateInput findProperServiceName findServiceIdsContaining filterToServiceTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	symfony_symfony_f3aae33345008d135ca5348261f3e401d900d9d8_6_0	buggy:  context: class ResponseCacheStrategy implements ResponseCacheStrategyInterface { private const OVERRIDE_DIRECTIVES = ['private', 'no-cache', 'no-store', 'no-transform', 'must-revalidate', 'proxy-revalidate']; private const INHERIT_DIRECTIVES = ['public', 'immutable']; private int $embeddedResponses = 0; private bool $isNotCacheableResponseEmbedded = false; private int $age = 0; private array $flagDirectives = [ 'no-cache' => null, 'no-store' => null, 'no-transform' => null, 'must-revalidate' => null, 'proxy-revalidate' => null, 'public' => null, 'private' => null, 'immutable' => null, ];	type_info: embeddedResponses:integer isNotCacheableResponseEmbedded:boolean age:integer flagDirectives:array  global_variable:  function_name: add update willMakeFinalResponseUncacheable storeRelativeAgeDirective	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	symfony_symfony_f3aae33345008d135ca5348261f3e401d900d9d8_6_0	buggy:  context: $isHeuristicallyCacheable = $response->headers->hasCacheControlDirective('public'); $maxAge = $response->headers->hasCacheControlDirective('max-age') ? (int) $response->headers->getCacheControlDirective('max-age') : null; $this->storeRelativeAgeDirective('max-age', $maxAge, $age, $isHeuristicallyCacheable); $sharedMaxAge = $response->headers->hasCacheControlDirective('s-maxage') ? (int) $response->headers->getCacheControlDirective('s-maxage') : $maxAge; $this->storeRelativeAgeDirective('s-maxage', $sharedMaxAge, $age, $isHeuristicallyCacheable); $expires = $response->getExpires(); $expires = null !== $expires ? (int) $expires->format('U') - (int) $response->getDate()->format('U') : null; $this->storeRelativeAgeDirective('expires', $expires >= 0 ? $expires : null, 0, $isHeuristicallyCacheable); } public function update(Response $response) { if (0 === $this->embeddedResponses) { return; } $response->setEtag(null); $response->setLastModified(null);	type_info: age:integer isHeuristicallyCacheable:unknown maxAge:unknown sharedMaxAge:unknown expires:unknown  global_variable:  function_name: add update willMakeFinalResponseUncacheable storeRelativeAgeDirective	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	symfony_symfony_f3aae33345008d135ca5348261f3e401d900d9d8_6_0	buggy:  context: public function update(Response $response) { if (0 === $this->embeddedResponses) { return; } $response->setEtag(null); $response->setLastModified(null); $this->add($response); $response->headers->set('Age', $this->age); if ($this->isNotCacheableResponseEmbedded) { if ($this->flagDirectives['no-store']) { $response->headers->set('Cache-Control', 'no-cache, no-store, must-revalidate'); } else { $response->headers->set('Cache-Control', 'no-cache, must-revalidate'); }	type_info:  global_variable:  function_name: add update willMakeFinalResponseUncacheable storeRelativeAgeDirective	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	symfony_symfony_f3aae33345008d135ca5348261f3e401d900d9d8_6_0	buggy: $response->setLastModified(null); context: public function update(Response $response) { if (0 === $this->embeddedResponses) { return; } $response->setEtag(null); $response->setLastModified(null); $response->setLastModified(null); $this->add($response); $response->headers->set('Age', $this->age); if ($this->isNotCacheableResponseEmbedded) { if ($this->flagDirectives['no-store']) { $response->headers->set('Cache-Control', 'no-cache, no-store, must-revalidate'); } else { $response->headers->set('Cache-Control', 'no-cache, must-revalidate');	type_info:  global_variable:  function_name: add update willMakeFinalResponseUncacheable storeRelativeAgeDirective	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	symfony_symfony_f3aae33345008d135ca5348261f3e401d900d9d8_6_0	buggy:  context: } $response->setEtag(null); $response->setLastModified(null); $this->add($response); $response->headers->set('Age', $this->age); if ($this->isNotCacheableResponseEmbedded) { if ($this->flagDirectives['no-store']) { $response->headers->set('Cache-Control', 'no-cache, no-store, must-revalidate'); } else { $response->headers->set('Cache-Control', 'no-cache, must-revalidate'); } return; } $flags = array_filter($this->flagDirectives);	type_info: flags:unknown  global_variable:  function_name: add update willMakeFinalResponseUncacheable storeRelativeAgeDirective	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	symfony_symfony_f3aae33345008d135ca5348261f3e401d900d9d8_6_0	buggy:  context: if ($this->isNotCacheableResponseEmbedded) { if ($this->flagDirectives['no-store']) { $response->headers->set('Cache-Control', 'no-cache, no-store, must-revalidate'); } else { $response->headers->set('Cache-Control', 'no-cache, must-revalidate'); } return; } $flags = array_filter($this->flagDirectives); if (isset($flags['must-revalidate'])) { $flags['no-cache'] = true; } $response->headers->set('Cache-Control', implode(', ', array_keys($flags))); $maxAge = null;	type_info: maxAge:unknown flags:unknown  global_variable:  function_name: add update willMakeFinalResponseUncacheable storeRelativeAgeDirective	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	symfony_symfony_f3aae33345008d135ca5348261f3e401d900d9d8_6_0	buggy: || $response->headers->getCacheControlDirective('no-store') context: private function willMakeFinalResponseUncacheable(Response $response): bool { if ($response->headers->hasCacheControlDirective('no-cache') || $response->headers->getCacheControlDirective('no-store') || $response->headers->getCacheControlDirective('no-store') ) { return true; } if (\in_array($response->getStatusCode(), [200, 203, 300, 301, 410]) && null === $response->getLastModified() && null === $response->getEtag() ) { return false; }	type_info:  global_variable:  function_name: add update willMakeFinalResponseUncacheable storeRelativeAgeDirective	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	symfony_symfony_f3aae33345008d135ca5348261f3e401d900d9d8_6_0	buggy:  context: private function willMakeFinalResponseUncacheable(Response $response): bool { if ($response->headers->hasCacheControlDirective('no-cache') || $response->headers->getCacheControlDirective('no-store') ) { return true; } if (\in_array($response->getStatusCode(), [200, 203, 300, 301, 410]) && null === $response->getLastModified() && null === $response->getEtag() ) { return false; } $cacheControl = ['max-age', 's-maxage', 'must-revalidate', 'proxy-revalidate', 'public', 'private']; foreach ($cacheControl as $key) { if ($response->headers->hasCacheControlDirective($key)) { return false;	type_info: cacheControl:array  global_variable:  function_name: add update willMakeFinalResponseUncacheable storeRelativeAgeDirective	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	symfony_symfony_f3aae33345008d135ca5348261f3e401d900d9d8_6_0	buggy: if (\in_array($response->getStatusCode(), [200, 203, 300, 301, 410]) && null === $response->getLastModified() && null === $response->getEtag() ) { context: private function willMakeFinalResponseUncacheable(Response $response): bool { if ($response->headers->hasCacheControlDirective('no-cache') || $response->headers->getCacheControlDirective('no-store') ) { return true; } if (\in_array($response->getStatusCode(), [200, 203, 300, 301, 410]) && null === $response->getLastModified() && null === $response->getEtag() ) { if (\in_array($response->getStatusCode(), [200, 203, 300, 301, 410]) && null === $response->getLastModified() && null === $response->getEtag() ) { return false; } $cacheControl = ['max-age', 's-maxage', 'must-revalidate', 'proxy-revalidate', 'public', 'private']; foreach ($cacheControl as $key) { if ($response->headers->hasCacheControlDirective($key)) { return false; } }	type_info: cacheControl:array  global_variable:  function_name: add update willMakeFinalResponseUncacheable storeRelativeAgeDirective	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	symfony_symfony_4b843d1eeae5e3b8b62affbcc08fa9e9acf72b0a_7_0	buggy: return [$this->context, parent::__serialize()]; context: public function __serialize(): array { return [$this->context, parent::__serialize()]; return [$this->context, parent::__serialize()]; }	type_info:  global_variable:  function_name: __construct markdown content action importance exception theme getTextTemplate getHtmlTemplate getContext getPreparedHeaders determinePriority getExceptionAsString __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	symfony_symfony_4b843d1eeae5e3b8b62affbcc08fa9e9acf72b0a_7_0	buggy: [$this->context, $parentData] = $data; context: public function __unserialize(array $data): void { [$this->context, $parentData] = $data; [$this->context, $parentData] = $data; parent::__unserialize($parentData); }	type_info:  global_variable:  function_name: __construct markdown content action importance exception theme getTextTemplate getHtmlTemplate getContext getPreparedHeaders determinePriority getExceptionAsString __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	symfony_symfony_6ccb85e185bb1774778f687f866d80ab0db96e76_8_0	"buggy:  context: } elseif ('Exception' === $c) { $c = 'ErrorException'; } } else { $i = strpos($n, ""\0"", 2); $c = substr($n, 1, $i - 1); $n = substr($n, 1 + $i); } if (null !== $sleep) { if (!isset($sleep[$n]) || ($i && $c !== $class)) { continue; } $sleep[$n] = false; } if (!\array_key_exists($name, $proto) || $proto[$name] !== $v || ""\x00Error\x00trace"" === $name || ""\x00Exception\x00trace"" === $name) { $properties[$c][$n] = $v; } } if ($sleep) { foreach ($sleep as $n => $v) {"	type_info: class:unknown properties:array sleep:unknown proto:unknown name:unknown n:unknown c:string i:unknown  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	symfony_symfony_6ccb85e185bb1774778f687f866d80ab0db96e76_8_0	"buggy:  context: $properties[$c][$n] = $v; } } if ($sleep) { foreach ($sleep as $n => $v) { if (false !== $v) { trigger_error(sprintf('serialize(): ""%s"" returned as member variable from __sleep() but does not exist', $n), \E_USER_NOTICE); } } } prepare_value: $objectsPool[$value] = [$id = \count($objectsPool)]; $properties = self::prepare($properties, $objectsPool, $refsPool, $objectsCount, $valueIsStatic); ++$objectsCount; $objectsPool[$value] = [$id, $class, $properties, method_exists($class, '__unserialize') ? -$objectsCount : (method_exists($class, '__wakeup') ? $objectsCount : 0)]; $value = new Reference($id); handle_value:"	type_info: value:unknown valueIsStatic:boolean class:unknown properties:array sleep:unknown id:unknown n:unknown c:string  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	buggy: [$htmlPart, $attachmentParts, $inlineParts] = $this->prepareParts(); context: private function generateBody(): AbstractPart { if (null !== $this->cachedBody) { return $this->cachedBody; } $this->ensureValidity(); [$htmlPart, $attachmentParts, $inlineParts] = $this->prepareParts(); [$htmlPart, $attachmentParts, $inlineParts] = $this->prepareParts(); $part = null === $this->text ? null : new TextPart($this->text, $this->textCharset); if (null !== $htmlPart) { if (null !== $part) { $part = new AlternativePart($part, $htmlPart); } else { $part = $htmlPart; } }	type_info: part:unknown htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	buggy: if ($inlineParts) { $part = new RelatedPart($part, ...$inlineParts); context: $part = null === $this->text ? null : new TextPart($this->text, $this->textCharset); if (null !== $htmlPart) { if (null !== $part) { $part = new AlternativePart($part, $htmlPart); } else { $part = $htmlPart; } } if ($inlineParts) { $part = new RelatedPart($part, ...$inlineParts); if ($inlineParts) { $part = new RelatedPart($part, ...$inlineParts); } if ($attachmentParts) { if ($part) { $part = new MixedPart($part, ...$attachmentParts); } else { $part = new MixedPart(...$attachmentParts); }	type_info: part:unknown htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	buggy: if ($attachmentParts) { context: $part = new AlternativePart($part, $htmlPart); } else { $part = $htmlPart; } } if ($inlineParts) { $part = new RelatedPart($part, ...$inlineParts); } if ($attachmentParts) { if ($attachmentParts) { if ($part) { $part = new MixedPart($part, ...$attachmentParts); } else { $part = new MixedPart(...$attachmentParts); } } return $this->cachedBody = $part; }	type_info: part:unknown htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	buggy: $part = new MixedPart($part, ...$attachmentParts); context: $part = $htmlPart; } } if ($inlineParts) { $part = new RelatedPart($part, ...$inlineParts); } if ($attachmentParts) { if ($part) { $part = new MixedPart($part, ...$attachmentParts); $part = new MixedPart($part, ...$attachmentParts); } else { $part = new MixedPart(...$attachmentParts); } } return $this->cachedBody = $part; } private function prepareParts(): ?array	type_info: part:unknown htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	buggy: $part = new MixedPart(...$attachmentParts); context: } if ($inlineParts) { $part = new RelatedPart($part, ...$inlineParts); } if ($attachmentParts) { if ($part) { $part = new MixedPart($part, ...$attachmentParts); } else { $part = new MixedPart(...$attachmentParts); $part = new MixedPart(...$attachmentParts); } } return $this->cachedBody = $part; } private function prepareParts(): ?array { $names = [];	type_info: part:unknown names:array html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
67	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	"buggy: $dispositionRef = new \ReflectionProperty(TextPart::class, 'disposition'); $dispositionRef->setAccessible(true); context: rewind($html); } $html = stream_get_contents($html); } $htmlPart = new TextPart($html, $this->htmlCharset, 'html'); preg_match_all('(<img\s+[^>]*src\s*=\s*(?:([\'""])cid:(.+?)\\1|cid:([^>\s]+)))i', $html, $names); $names = array_filter(array_unique(array_merge($names[2], $names[3]))); } $dispositionRef = new \ReflectionProperty(TextPart::class, 'disposition'); $dispositionRef->setAccessible(true); $dispositionRef = new \ReflectionProperty(TextPart::class, 'disposition'); $dispositionRef->setAccessible(true); $nameRef = new \ReflectionProperty(TextPart::class, 'name'); $nameRef->setAccessible(true); $attachmentParts = $inlineParts = []; foreach ($this->attachments as $attachment) { $part = $this->createDataPart($attachment); if (isset($attachment['part'])) { $attachment['name'] = $nameRef->getValue($part); }"	type_info: part:unknown names:array htmlPart:unknown html:unknown dispositionRef:unknown nameRef:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
68	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	"buggy: $attachmentParts = $inlineParts = []; context: } $htmlPart = new TextPart($html, $this->htmlCharset, 'html'); preg_match_all('(<img\s+[^>]*src\s*=\s*(?:([\'""])cid:(.+?)\\1|cid:([^>\s]+)))i', $html, $names); $names = array_filter(array_unique(array_merge($names[2], $names[3]))); } $dispositionRef = new \ReflectionProperty(TextPart::class, 'disposition'); $dispositionRef->setAccessible(true); $nameRef = new \ReflectionProperty(TextPart::class, 'name'); $nameRef->setAccessible(true); $attachmentParts = $inlineParts = []; $attachmentParts = $inlineParts = []; foreach ($this->attachments as $attachment) { $part = $this->createDataPart($attachment); if (isset($attachment['part'])) { $attachment['name'] = $nameRef->getValue($part); } foreach ($names as $name) { if ($name !== $attachment['name']) { continue;"	type_info: name:unknown part:unknown names:array htmlPart:unknown html:unknown dispositionRef:unknown nameRef:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
69	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	buggy:  context: $dispositionRef->setAccessible(true); $nameRef = new \ReflectionProperty(TextPart::class, 'name'); $nameRef->setAccessible(true); $attachmentParts = $inlineParts = []; foreach ($this->attachments as $attachment) { $part = $this->createDataPart($attachment); if (isset($attachment['part'])) { $attachment['name'] = $nameRef->getValue($part); } foreach ($names as $name) { if ($name !== $attachment['name']) { continue; } if (isset($inlineParts[$name])) { continue 2; } $part->setDisposition('inline'); $html = str_replace('cid:'.$name, 'cid:'.$part->getContentId(), $html); $part->setName($part->getContentId());	type_info: name:unknown part:unknown names:array html:unknown dispositionRef:unknown nameRef:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
70	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	buggy: if (isset($inlineParts[$name])) { context: foreach ($this->attachments as $attachment) { $part = $this->createDataPart($attachment); if (isset($attachment['part'])) { $attachment['name'] = $nameRef->getValue($part); } foreach ($names as $name) { if ($name !== $attachment['name']) { continue; } if (isset($inlineParts[$name])) { if (isset($inlineParts[$name])) { continue 2; } $part->setDisposition('inline'); $html = str_replace('cid:'.$name, 'cid:'.$part->getContentId(), $html); $part->setName($part->getContentId()); break; }	type_info: name:unknown part:unknown names:array html:unknown nameRef:unknown  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
71	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	buggy: $html = str_replace('cid:'.$name, 'cid:'.$part->getContentId(), $html); context: } foreach ($names as $name) { if ($name !== $attachment['name']) { continue; } if (isset($inlineParts[$name])) { continue 2; } $part->setDisposition('inline'); $html = str_replace('cid:'.$name, 'cid:'.$part->getContentId(), $html); $html = str_replace('cid:'.$name, 'cid:'.$part->getContentId(), $html); $part->setName($part->getContentId()); break; } if ('inline' === $dispositionRef->getValue($part)) { $inlineParts[$attachment['name']] = $part; } else { $attachmentParts[] = $part;	type_info: name:unknown part:unknown names:array html:unknown dispositionRef:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
72	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	buggy: if ('inline' === $dispositionRef->getValue($part)) { $inlineParts[$attachment['name']] = $part; context: if (isset($inlineParts[$name])) { continue 2; } $part->setDisposition('inline'); $html = str_replace('cid:'.$name, 'cid:'.$part->getContentId(), $html); $part->setName($part->getContentId()); break; } if ('inline' === $dispositionRef->getValue($part)) { $inlineParts[$attachment['name']] = $part; if ('inline' === $dispositionRef->getValue($part)) { $inlineParts[$attachment['name']] = $part; } else { $attachmentParts[] = $part; } } if (null !== $htmlPart) { $htmlPart = new TextPart($html, $this->htmlCharset, 'html'); }	type_info: name:unknown part:unknown htmlPart:unknown html:unknown dispositionRef:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
73	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	buggy: $attachmentParts[] = $part; context: $part->setDisposition('inline'); $html = str_replace('cid:'.$name, 'cid:'.$part->getContentId(), $html); $part->setName($part->getContentId()); break; } if ('inline' === $dispositionRef->getValue($part)) { $inlineParts[$attachment['name']] = $part; } else { $attachmentParts[] = $part; $attachmentParts[] = $part; } } if (null !== $htmlPart) { $htmlPart = new TextPart($html, $this->htmlCharset, 'html'); } return [$htmlPart, $attachmentParts, array_values($inlineParts)]; }	type_info: name:unknown part:unknown htmlPart:unknown html:unknown dispositionRef:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
74	symfony_symfony_be97af45d411daf532da9ade42fda76b02616063_9_0	buggy: return [$htmlPart, $attachmentParts, array_values($inlineParts)]; context: if ('inline' === $dispositionRef->getValue($part)) { $inlineParts[$attachment['name']] = $part; } else { $attachmentParts[] = $part; } } if (null !== $htmlPart) { $htmlPart = new TextPart($html, $this->htmlCharset, 'html'); } return [$htmlPart, $attachmentParts, array_values($inlineParts)]; return [$htmlPart, $attachmentParts, array_values($inlineParts)]; } private function createDataPart(array $attachment): DataPart { if (isset($attachment['part'])) { return $attachment['part']; } if (isset($attachment['body'])) {	type_info: part:unknown htmlPart:unknown html:unknown dispositionRef:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
75	symfony_symfony_c305722f0248ba5e86294fb3d542aa48663dcec0_10_0	buggy: if ($container->fileExists($dir.'/'.$this->getMappingObjectDefaultName(), false)) { return $this->detectMappingType($dir, $container); context: $driver = 'yml'; } elseif (glob($dir.'/'.$configPath.'/*.'.$extension.'.php', \GLOB_NOSORT)) { $driver = 'php'; } else { $resource = $dir.'/'.$configPath; while (!is_dir($resource)) { $resource = \dirname($resource); } $container->fileExists($resource, false); if ($container->fileExists($dir.'/'.$this->getMappingObjectDefaultName(), false)) { return $this->detectMappingType($dir, $container); if ($container->fileExists($dir.'/'.$this->getMappingObjectDefaultName(), false)) { return $this->detectMappingType($dir, $container); } return null; } $container->fileExists($dir.'/'.$configPath, false); return $driver; }	type_info: configPath:unknown extension:unknown driver:string resource:unknown  global_variable:  function_name: loadMappingInformation setMappingDriverAlias setMappingDriverConfig getMappingDriverBundleConfigDefaults registerMappingDrivers assertValidMappingConfiguration detectMetadataDriver detectMappingType loadObjectManagerCacheDriver loadCacheDriver fixManagersAutoMappings getObjectManagerElementName getMappingObjectDefaultName getMappingResourceConfigDirectory getMappingResourceExtension getMetadataDriverClass validateAutoMapping	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
76	symfony_symfony_92db0030aad12d39abd8277f60bae9bfbd5bd0cb_11_0	"buggy:  context: if ($i + 1 < $propertyPath->getLength() && !\is_object($zval[self::VALUE]) && !\is_array($zval[self::VALUE]) && !$isNullSafe) { throw new UnexpectedTypeException($zval[self::VALUE], $propertyPath, $i + 1); } if (isset($zval[self::REF]) && (0 === $i || isset($propertyValues[$i - 1][self::IS_REF_CHAINED]))) { $zval[self::IS_REF_CHAINED] = true; } $propertyValues[] = $zval; } return $propertyValues; } private function readIndex(array $zval, string|int $index): array { if (!$zval[self::VALUE] instanceof \ArrayAccess && !\is_array($zval[self::VALUE])) { throw new NoSuchIndexException(sprintf('Cannot read index ""%s"" from object of type ""%s"" because it doesn\'t implement \ArrayAccess.', $index, get_debug_type($zval[self::VALUE]))); }"	type_info: zval:array propertyPath:unknown propertyValues:array i:integer ignoreInvalidIndices:unknown isNullSafe:boolean ignoreInvalidProperty:unknown  global_variable: ignoreInvalidIndices: unknown ignoreInvalidProperty: unknown function_name: __construct getValue setValue throwInvalidArgumentException isReadable isWritable readPropertiesUntil readIndex readProperty getReadInfo writeIndex writeProperty writeCollection getWriteInfo isPropertyWritable getPropertyPath createCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
77	symfony_symfony_64e7c9bf084e87c95dc5ff705fc8b4497d7c9c1e_12_0	buggy:  context: private function getTriggerSql(): array { return [ sprintf(<<<'SQL' CREATE OR REPLACE FUNCTION notify_%1$s() RETURNS TRIGGER AS $$ BEGIN PERFORM pg_notify('%1$s', NEW.queue_name::text); RETURN NEW; END; $$ LANGUAGE plpgsql; SQL , $this->configuration['table_name']),	type_info:  global_variable:  function_name: __sleep __wakeup __destruct reset get setup getExtraSetupSqlForTable getTriggerSql sprintf unlisten	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
78	symfony_symfony_64e7c9bf084e87c95dc5ff705fc8b4497d7c9c1e_12_0	buggy: CREATE OR REPLACE FUNCTION notify_%1$s() RETURNS TRIGGER AS $$ context: private function getTriggerSql(): array { return [ sprintf(<<<'SQL' CREATE OR REPLACE FUNCTION notify_%1$s() RETURNS TRIGGER AS $$ CREATE OR REPLACE FUNCTION notify_%1$s() RETURNS TRIGGER AS $$ BEGIN PERFORM pg_notify('%1$s', NEW.queue_name::text); RETURN NEW; END; $$ LANGUAGE plpgsql; SQL , $this->configuration['table_name']), sprintf('DROP TRIGGER IF EXISTS notify_trigger ON %s;', $this->configuration['table_name']), sprintf('CREATE TRIGGER notify_trigger AFTER INSERT OR UPDATE ON %1$s FOR EACH ROW EXECUTE PROCEDURE notify_%1$s();', $this->configuration['table_name']), ];	type_info:  global_variable:  function_name: __sleep __wakeup __destruct reset get setup getExtraSetupSqlForTable getTriggerSql sprintf unlisten	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
79	symfony_symfony_64e7c9bf084e87c95dc5ff705fc8b4497d7c9c1e_12_0	buggy: PERFORM pg_notify('%1$s', NEW.queue_name::text); context: private function getTriggerSql(): array { return [ sprintf(<<<'SQL' CREATE OR REPLACE FUNCTION notify_%1$s() RETURNS TRIGGER AS $$ BEGIN PERFORM pg_notify('%1$s', NEW.queue_name::text); PERFORM pg_notify('%1$s', NEW.queue_name::text); RETURN NEW; END; $$ LANGUAGE plpgsql; SQL , $this->configuration['table_name']), sprintf('DROP TRIGGER IF EXISTS notify_trigger ON %s;', $this->configuration['table_name']), sprintf('CREATE TRIGGER notify_trigger AFTER INSERT OR UPDATE ON %1$s FOR EACH ROW EXECUTE PROCEDURE notify_%1$s();', $this->configuration['table_name']), ]; }	type_info:  global_variable:  function_name: __sleep __wakeup __destruct reset get setup getExtraSetupSqlForTable getTriggerSql sprintf unlisten	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
80	symfony_symfony_64e7c9bf084e87c95dc5ff705fc8b4497d7c9c1e_12_0	buggy:  context: private function getTriggerSql(): array { return [ sprintf(<<<'SQL' CREATE OR REPLACE FUNCTION notify_%1$s() RETURNS TRIGGER AS $$ BEGIN PERFORM pg_notify('%1$s', NEW.queue_name::text); RETURN NEW; END; $$ LANGUAGE plpgsql; SQL , $this->configuration['table_name']), sprintf('DROP TRIGGER IF EXISTS notify_trigger ON %s;', $this->configuration['table_name']), sprintf('CREATE TRIGGER notify_trigger AFTER INSERT OR UPDATE ON %1$s FOR EACH ROW EXECUTE PROCEDURE notify_%1$s();', $this->configuration['table_name']), ]; }	type_info:  global_variable:  function_name: __sleep __wakeup __destruct reset get setup getExtraSetupSqlForTable getTriggerSql sprintf unlisten	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
81	symfony_symfony_64e7c9bf084e87c95dc5ff705fc8b4497d7c9c1e_12_0	buggy: , $this->configuration['table_name']), context: { return [ sprintf(<<<'SQL' CREATE OR REPLACE FUNCTION notify_%1$s() RETURNS TRIGGER AS $$ BEGIN PERFORM pg_notify('%1$s', NEW.queue_name::text); RETURN NEW; END; $$ LANGUAGE plpgsql; SQL , $this->configuration['table_name']), , $this->configuration['table_name']), sprintf('DROP TRIGGER IF EXISTS notify_trigger ON %s;', $this->configuration['table_name']), sprintf('CREATE TRIGGER notify_trigger AFTER INSERT OR UPDATE ON %1$s FOR EACH ROW EXECUTE PROCEDURE notify_%1$s();', $this->configuration['table_name']), ]; } private function unlisten() { if (!$this->listening) { return;	type_info:  global_variable:  function_name: __sleep __wakeup __destruct reset get setup getExtraSetupSqlForTable getTriggerSql sprintf unlisten	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
82	symfony_symfony_64e7c9bf084e87c95dc5ff705fc8b4497d7c9c1e_12_0	buggy:  context: return [ sprintf(<<<'SQL' CREATE OR REPLACE FUNCTION notify_%1$s() RETURNS TRIGGER AS $$ BEGIN PERFORM pg_notify('%1$s', NEW.queue_name::text); RETURN NEW; END; $$ LANGUAGE plpgsql; SQL , $this->configuration['table_name']), sprintf('DROP TRIGGER IF EXISTS notify_trigger ON %s;', $this->configuration['table_name']), sprintf('CREATE TRIGGER notify_trigger AFTER INSERT OR UPDATE ON %1$s FOR EACH ROW EXECUTE PROCEDURE notify_%1$s();', $this->configuration['table_name']), ]; } private function unlisten() { if (!$this->listening) { return; }	type_info:  global_variable:  function_name: __sleep __wakeup __destruct reset get setup getExtraSetupSqlForTable getTriggerSql sprintf unlisten	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
83	symfony_symfony_64e7c9bf084e87c95dc5ff705fc8b4497d7c9c1e_12_0	buggy: sprintf('CREATE TRIGGER notify_trigger AFTER INSERT OR UPDATE ON %1$s FOR EACH ROW EXECUTE PROCEDURE notify_%1$s();', $this->configuration['table_name']), context: sprintf(<<<'SQL' CREATE OR REPLACE FUNCTION notify_%1$s() RETURNS TRIGGER AS $$ BEGIN PERFORM pg_notify('%1$s', NEW.queue_name::text); RETURN NEW; END; $$ LANGUAGE plpgsql; SQL , $this->configuration['table_name']), sprintf('DROP TRIGGER IF EXISTS notify_trigger ON %s;', $this->configuration['table_name']), sprintf('CREATE TRIGGER notify_trigger AFTER INSERT OR UPDATE ON %1$s FOR EACH ROW EXECUTE PROCEDURE notify_%1$s();', $this->configuration['table_name']), sprintf('CREATE TRIGGER notify_trigger AFTER INSERT OR UPDATE ON %1$s FOR EACH ROW EXECUTE PROCEDURE notify_%1$s();', $this->configuration['table_name']), ]; } private function unlisten() { if (!$this->listening) { return; }	type_info:  global_variable:  function_name: __sleep __wakeup __destruct reset get setup getExtraSetupSqlForTable getTriggerSql sprintf unlisten	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
84	symfony_symfony_64e7c9bf084e87c95dc5ff705fc8b4497d7c9c1e_12_0	"buggy:  context: CREATE OR REPLACE FUNCTION notify_%1$s() RETURNS TRIGGER AS $$ BEGIN PERFORM pg_notify('%1$s', NEW.queue_name::text); RETURN NEW; END; $$ LANGUAGE plpgsql; SQL , $this->configuration['table_name']), sprintf('DROP TRIGGER IF EXISTS notify_trigger ON %s;', $this->configuration['table_name']), sprintf('CREATE TRIGGER notify_trigger AFTER INSERT OR UPDATE ON %1$s FOR EACH ROW EXECUTE PROCEDURE notify_%1$s();', $this->configuration['table_name']), ]; } private function unlisten() { if (!$this->listening) { return; } $this->executeStatement(sprintf('UNLISTEN ""%s""', $this->configuration['table_name']));"	type_info:  global_variable:  function_name: __sleep __wakeup __destruct reset get setup getExtraSetupSqlForTable getTriggerSql sprintf unlisten	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
85	symfony_symfony_64e7c9bf084e87c95dc5ff705fc8b4497d7c9c1e_12_0	"buggy:  context: RETURN NEW; END; $$ LANGUAGE plpgsql; SQL , $this->configuration['table_name']), sprintf('DROP TRIGGER IF EXISTS notify_trigger ON %s;', $this->configuration['table_name']), sprintf('CREATE TRIGGER notify_trigger AFTER INSERT OR UPDATE ON %1$s FOR EACH ROW EXECUTE PROCEDURE notify_%1$s();', $this->configuration['table_name']), ]; } private function unlisten() { if (!$this->listening) { return; } $this->executeStatement(sprintf('UNLISTEN ""%s""', $this->configuration['table_name'])); $this->listening = false; } }"	type_info:  global_variable:  function_name: __sleep __wakeup __destruct reset get setup getExtraSetupSqlForTable getTriggerSql sprintf unlisten	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
86	symfony_symfony_7de8f994a37e193593cd7f9d4ea56acb624bff46_13_0	buggy: $this->quotedStringPattern = '([^\n\r\f%s]|'.$this->stringEscapePattern.')*'; context: $this->stringEscapePattern = $this->newLineEscapePattern.'|'.$this->escapePattern; $this->nonAsciiPattern = '[^\x00-\x7F]'; $this->nmCharPattern = '[_a-z0-9-]|'.$this->escapePattern.'|'.$this->nonAsciiPattern; $this->nmStartPattern = '[_a-z]|'.$this->escapePattern.'|'.$this->nonAsciiPattern; $this->identifierPattern = '-?(?:'.$this->nmStartPattern.')(?:'.$this->nmCharPattern.')*'; $this->hashPattern = '#((?:'.$this->nmCharPattern.')+)'; $this->numberPattern = '[+-]?(?:[0-9]*\.[0-9]+|[0-9]+)'; $this->quotedStringPattern = '([^\n\r\f%s]|'.$this->stringEscapePattern.')*'; $this->quotedStringPattern = '([^\n\r\f%s]|'.$this->stringEscapePattern.')*'; } public function getNewLineEscapePattern(): string { return '~^'.$this->newLineEscapePattern.'~'; }	type_info:  global_variable:  function_name: __construct getNewLineEscapePattern getSimpleEscapePattern getUnicodeEscapePattern getIdentifierPattern getHashPattern getNumberPattern getQuotedStringPattern	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
87	symfony_symfony_7de8f994a37e193593cd7f9d4ea56acb624bff46_13_0	buggy: return '~^'.$this->newLineEscapePattern.'~'; context: public function getNewLineEscapePattern(): string { return '~^'.$this->newLineEscapePattern.'~'; return '~^'.$this->newLineEscapePattern.'~'; }	type_info:  global_variable:  function_name: __construct getNewLineEscapePattern getSimpleEscapePattern getUnicodeEscapePattern getIdentifierPattern getHashPattern getNumberPattern getQuotedStringPattern	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
88	symfony_symfony_7de8f994a37e193593cd7f9d4ea56acb624bff46_13_0	buggy: return '~^'.$this->simpleEscapePattern.'~'; context: public function getSimpleEscapePattern(): string { return '~^'.$this->simpleEscapePattern.'~'; return '~^'.$this->simpleEscapePattern.'~'; }	type_info:  global_variable:  function_name: __construct getNewLineEscapePattern getSimpleEscapePattern getUnicodeEscapePattern getIdentifierPattern getHashPattern getNumberPattern getQuotedStringPattern	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
89	symfony_symfony_7de8f994a37e193593cd7f9d4ea56acb624bff46_13_0	buggy: return '~^'.$this->unicodeEscapePattern.'~i'; context: public function getUnicodeEscapePattern(): string { return '~^'.$this->unicodeEscapePattern.'~i'; return '~^'.$this->unicodeEscapePattern.'~i'; }	type_info:  global_variable:  function_name: __construct getNewLineEscapePattern getSimpleEscapePattern getUnicodeEscapePattern getIdentifierPattern getHashPattern getNumberPattern getQuotedStringPattern	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
90	symfony_symfony_a1a1609b34110e5eb0bfc00891a16c31139be516_14_0	buggy:  context: public function __sleep() { if (null !== $this->seekable) { $this->body = $this->getBody(); } $this->_headers = $this->getHeaders(); return ['_headers', 'body', 'charset', 'subtype', 'disposition', 'name', 'encoding']; }	type_info: charset:unknown  global_variable: charset: unknown function_name: __construct getMediaType getMediaSubtype setDisposition setName getBody bodyToString bodyToIterable getPreparedHeaders asDebugString getEncoder chooseEncoding __sleep __wakeup	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy: use Symfony\Component\DependencyInjection\LazyProxy\PhpDumper\DumperInterface as ProxyDumper; context: use Symfony\Component\DependencyInjection\Definition; use Symfony\Component\DependencyInjection\Exception\EnvParameterException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException; use Symfony\Component\DependencyInjection\ExpressionLanguage; use Symfony\Component\DependencyInjection\LazyProxy\PhpDumper\DumperInterface as ProxyDumper; use Symfony\Component\DependencyInjection\LazyProxy\PhpDumper\DumperInterface as ProxyDumper; use Symfony\Component\DependencyInjection\LazyProxy\PhpDumper\NullDumper; use Symfony\Component\DependencyInjection\Loader\FileLoader; use Symfony\Component\DependencyInjection\Parameter; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ServiceLocator as BaseServiceLocator; use Symfony\Component\DependencyInjection\TypedReference;	type_info: baseClass:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy: * @var ProxyDumper context: private $circularReferences = []; private $singleUsePrivateIds = []; private $preload = []; private $addThrow = false; private $addGetService = false; private $locatedIds = []; private $serviceLocatorTag; private $exportedVariables = []; private $baseClass; * @var ProxyDumper private $proxyDumper; public function __construct(ContainerBuilder $container) { if (!$container->isCompiled()) { throw new LogicException('Cannot dump an uncompiled container.'); } parent::__construct($container); }	type_info: circularReferences:array singleUsePrivateIds:array preload:array addThrow:boolean addGetService:boolean locatedIds:array exportedVariables:array baseClass:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy:  context: private $singleUsePrivateIds = []; private $preload = []; private $addThrow = false; private $addGetService = false; private $locatedIds = []; private $serviceLocatorTag; private $exportedVariables = []; private $baseClass; private $proxyDumper; public function __construct(ContainerBuilder $container) { if (!$container->isCompiled()) { throw new LogicException('Cannot dump an uncompiled container.'); } parent::__construct($container); }	type_info: singleUsePrivateIds:array preload:array addThrow:boolean addGetService:boolean locatedIds:array exportedVariables:array baseClass:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy: public function setProxyDumper(ProxyDumper $proxyDumper) context: public function __construct(ContainerBuilder $container) { if (!$container->isCompiled()) { throw new LogicException('Cannot dump an uncompiled container.'); } parent::__construct($container); } public function setProxyDumper(ProxyDumper $proxyDumper) public function setProxyDumper(ProxyDumper $proxyDumper)	type_info: baseClass:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy:  context: public function setProxyDumper(ProxyDumper $proxyDumper) { $this->proxyDumper = $proxyDumper; }	type_info: baseClass:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	"buggy: if ($this->getProxyDumper() instanceof NullDumper) { context: $baseClass = sprintf('%s\%s', $options['namespace'] ? '\\'.$options['namespace'] : '', $baseClass); $this->baseClass = $baseClass; } elseif ('Container' === $baseClass) { $this->baseClass = Container::class; } else { $this->baseClass = $baseClass; } $this->initializeMethodNamesMap('Container' === $baseClass ? Container::class : $baseClass); if ($this->getProxyDumper() instanceof NullDumper) { if ($this->getProxyDumper() instanceof NullDumper) { (new AnalyzeServiceReferencesPass(true, false))->process($this->container); try { (new CheckCircularReferencesPass())->process($this->container); } catch (ServiceCircularReferenceException $e) { $path = $e->getPath(); end($path); $path[key($path)] .= '"". Try running ""composer require symfony/proxy-manager-bridge'; throw new ServiceCircularReferenceException($e->getServiceId(), $path);"	type_info: options:array baseClass:unknown path:array proxyDumper:unknown e:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	"buggy: private function getProxyDumper(): ProxyDumper context: $unusedEnvs[] = $env; } } if ($unusedEnvs) { throw new EnvParameterException($unusedEnvs, null, 'Environment variables ""%s"" are never used. Please, check your container\'s configuration.'); } return $code; } private function getProxyDumper(): ProxyDumper private function getProxyDumper(): ProxyDumper { if (!$this->proxyDumper) { $this->proxyDumper = new NullDumper(); } return $this->proxyDumper; } private function analyzeReferences()"	type_info: baseClass:unknown code:array unusedEnvs:array env:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy: (new AnalyzeServiceReferencesPass(false, !$this->getProxyDumper() instanceof NullDumper))->process($this->container); context: private function analyzeReferences() { (new AnalyzeServiceReferencesPass(false, !$this->getProxyDumper() instanceof NullDumper))->process($this->container); (new AnalyzeServiceReferencesPass(false, !$this->getProxyDumper() instanceof NullDumper))->process($this->container); $checkedNodes = []; $this->circularReferences = []; $this->singleUsePrivateIds = []; foreach ($this->container->getCompiler()->getServiceReferenceGraph()->getNodes() as $id => $node) { if (!$node->getValue() instanceof Definition) { continue; } if ($this->isSingleUsePrivateNode($node)) { $this->singleUsePrivateIds[$id] = $id;	type_info: baseClass:unknown id:unknown checkedNodes:array node:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy: if ($sourceId === $id || !$node->getValue() instanceof Definition || $edge->isLazy() || $edge->isWeak()) { context: private function collectCircularReferences(string $sourceId, array $edges, array &$checkedNodes, array &$loops = [], array $path = [], bool $byConstructor = true): void { $path[$sourceId] = $byConstructor; $checkedNodes[$sourceId] = true; foreach ($edges as $edge) { $node = $edge->getDestNode(); $id = $node->getId(); if ($sourceId === $id || !$node->getValue() instanceof Definition || $edge->isLazy() || $edge->isWeak()) { if ($sourceId === $id || !$node->getValue() instanceof Definition || $edge->isLazy() || $edge->isWeak()) { continue; } if (isset($path[$id])) { $loop = null; $loopByConstructor = $edge->isReferencedByConstructor(); $pathInLoop = [$id, []]; foreach ($path as $k => $pathByConstructor) { if (null !== $loop) { $loop[] = $k;	type_info: baseClass:unknown path:array id:unknown checkedNodes:array loops:unknown node:unknown sourceId:unknown loop:unknown loopByConstructor:unknown pathInLoop:array k:array proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy: $loopByConstructor = $edge->isReferencedByConstructor(); context: $checkedNodes[$sourceId] = true; foreach ($edges as $edge) { $node = $edge->getDestNode(); $id = $node->getId(); if ($sourceId === $id || !$node->getValue() instanceof Definition || $edge->isLazy() || $edge->isWeak()) { continue; } if (isset($path[$id])) { $loop = null; $loopByConstructor = $edge->isReferencedByConstructor(); $loopByConstructor = $edge->isReferencedByConstructor(); $pathInLoop = [$id, []]; foreach ($path as $k => $pathByConstructor) { if (null !== $loop) { $loop[] = $k; $pathInLoop[1][$k] = $pathByConstructor; $loops[$k][] = &$pathInLoop; $loopByConstructor = $loopByConstructor && $pathByConstructor; } elseif ($k === $id) { $loop = [];	type_info: baseClass:unknown path:array id:unknown checkedNodes:array loops:unknown node:unknown sourceId:unknown loop:unknown loopByConstructor:unknown pathInLoop:array k:array proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy: $this->collectCircularReferences($id, $node->getOutEdges(), $checkedNodes, $loops, $path, $edge->isReferencedByConstructor()); context: $loop[] = $k; $pathInLoop[1][$k] = $pathByConstructor; $loops[$k][] = &$pathInLoop; $loopByConstructor = $loopByConstructor && $pathByConstructor; } elseif ($k === $id) { $loop = []; } } $this->addCircularReferences($id, $loop, $loopByConstructor); } elseif (!isset($checkedNodes[$id])) { $this->collectCircularReferences($id, $node->getOutEdges(), $checkedNodes, $loops, $path, $edge->isReferencedByConstructor()); $this->collectCircularReferences($id, $node->getOutEdges(), $checkedNodes, $loops, $path, $edge->isReferencedByConstructor()); } elseif (isset($loops[$id])) { foreach ($loops[$id] as [$first, $loopPath]) { if (!isset($path[$first])) { continue; } $fillPath = null; foreach ($loopPath as $k => $pathByConstructor) { if (null !== $fillPath) { $fillPath[$k] = $pathByConstructor;	type_info: baseClass:unknown path:array id:unknown checkedNodes:array loops:unknown node:unknown loop:unknown loopByConstructor:unknown pathInLoop:array k:array fillPath:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy: $loopByConstructor = $edge->isReferencedByConstructor(); context: foreach ($loopPath as $k => $pathByConstructor) { if (null !== $fillPath) { $fillPath[$k] = $pathByConstructor; } elseif ($k === $id) { $fillPath = $path; $fillPath[$k] = $pathByConstructor; } } $loop = null; $loopByConstructor = $edge->isReferencedByConstructor(); $loopByConstructor = $edge->isReferencedByConstructor(); foreach ($fillPath as $k => $pathByConstructor) { if (null !== $loop) { $loop[] = $k; $loopByConstructor = $loopByConstructor && $pathByConstructor; } elseif ($k === $first) { $loop = []; } } $this->addCircularReferences($first, $loop, true);	type_info: baseClass:unknown path:array id:unknown loop:unknown loopByConstructor:unknown k:array fillPath:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy: $hasSelfRef = isset($this->circularReferences[$id][$targetId]) && !isset($this->definitionVariables[$definition]); context: } if ('service_container' === $targetId || isset($this->referenceVariables[$targetId])) { return ''; } if ($this->container->hasDefinition($targetId) && ($def = $this->container->getDefinition($targetId)) && !$def->isShared()) { return ''; } $hasSelfRef = isset($this->circularReferences[$id][$targetId]) && !isset($this->definitionVariables[$definition]); $hasSelfRef = isset($this->circularReferences[$id][$targetId]) && !isset($this->definitionVariables[$definition]); if ($hasSelfRef && !$forConstructor && !$forConstructor = !$this->circularReferences[$id][$targetId]) { $code = $this->addInlineService($id, $definition, $definition); } else { $code = ''; } if (isset($this->referenceVariables[$targetId]) || (2 > $callCount && (!$hasSelfRef || !$forConstructor))) { return $code;	type_info: baseClass:unknown code:array id:unknown proxyDumper:unknown targetId:unknown def:unknown hasSelfRef:unknown forConstructor:unknown inlinedDefinitions:unknown definition:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	symfony_symfony_7a6092b2f1e3ff80dfb2e00d565a04dba9f4c09d_15_0	buggy: if ($byConstructor && isset($this->circularReferences[$id][$targetId]) && !$this->circularReferences[$id][$targetId]) { context: private function addInlineService(string $id, Definition $definition, Definition $inlineDef = null, bool $forConstructor = true): string { $code = ''; if ($isSimpleInstance = $isRootInstance = null === $inlineDef) { foreach ($this->serviceCalls as $targetId => [$callCount, $behavior, $byConstructor]) { if ($byConstructor && isset($this->circularReferences[$id][$targetId]) && !$this->circularReferences[$id][$targetId]) { if ($byConstructor && isset($this->circularReferences[$id][$targetId]) && !$this->circularReferences[$id][$targetId]) { $code .= $this->addInlineReference($id, $definition, $targetId, $forConstructor); } } } if (isset($this->definitionVariables[$inlineDef = $inlineDef ?: $definition])) { return $code; } $arguments = [$inlineDef->getArguments(), $inlineDef->getFactory()];	type_info: baseClass:unknown code:array id:unknown proxyDumper:unknown targetId:unknown forConstructor:unknown inlineDef:unknown isSimpleInstance:boolean arguments:array inlinedDefinitions:unknown definition:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	symfony_symfony_33408bc882040c739653caafdfd82f4d5ec6164b_16_0	buggy: if (null !== $this->seekable) { context: public function __sleep(): array { if (null !== $this->seekable) { if (null !== $this->seekable) { $this->body = $this->getBody(); $this->seekable = null; } $this->_headers = $this->getHeaders(); return ['_headers', 'body', 'charset', 'subtype', 'disposition', 'name', 'encoding']; }	type_info: charset:unknown  global_variable: charset: unknown function_name: __construct getMediaType getMediaSubtype setDisposition setName getName getBody bodyToString bodyToIterable getPreparedHeaders asDebugString getEncoder chooseEncoding __sleep __wakeup	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	symfony_symfony_62ceded47ca4a581eefbe00c85387c6915a1f8e2_17_0	buggy: $tokenValue = $persistentToken->getTokenValue(); context: { if (!str_contains($rememberMeDetails->getValue(), ':')) { throw new AuthenticationException('The cookie is incorrectly formatted.'); } [$series, $tokenValue] = explode(':', $rememberMeDetails->getValue()); $persistentToken = $this->tokenProvider->loadTokenBySeries($series); if ($this->tokenVerifier) { $isTokenValid = $this->tokenVerifier->verifyToken($persistentToken, $tokenValue); $tokenValue = $persistentToken->getTokenValue(); $tokenValue = $persistentToken->getTokenValue(); } else { $isTokenValid = hash_equals($persistentToken->getTokenValue(), $tokenValue); } if (!$isTokenValid) { throw new CookieTheftException('This token was already used. The account is possibly compromised.'); } if ($persistentToken->getLastUsed()->getTimestamp() + $this->options['lifetime'] < time()) { throw new AuthenticationException('The cookie has expired.');	type_info: tokenVerifier:unknown series:unknown tokenValue:unknown persistentToken:unknown isTokenValid:unknown rememberMeDetails:unknown  global_variable: tokenVerifier: unknown function_name: __construct createRememberMeCookie processRememberMe clearRememberMeCookie getTokenProvider generateHash	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	symfony_symfony_62ceded47ca4a581eefbe00c85387c6915a1f8e2_17_0	buggy: } context: throw new AuthenticationException('The cookie has expired.'); } if ($persistentToken->getLastUsed()->getTimestamp() + 60 < time()) { $tokenValue = $this->generateHash(base64_encode(random_bytes(64))); $tokenLastUsed = new \DateTime(); if ($this->tokenVerifier) { $this->tokenVerifier->updateExistingToken($persistentToken, $tokenValue, $tokenLastUsed); } $this->tokenProvider->updateToken($series, $tokenValue, $tokenLastUsed); } } $this->createCookie($rememberMeDetails->withValue($series.':'.$tokenValue)); } public function clearRememberMeCookie(): void { parent::clearRememberMeCookie(); $cookie = $this->requestStack->getMainRequest()->cookies->get($this->options['name']);	type_info: tokenVerifier:unknown series:unknown tokenValue:unknown persistentToken:unknown tokenLastUsed:unknown cookie:unknown rememberMeDetails:unknown  global_variable: tokenVerifier: unknown function_name: __construct createRememberMeCookie processRememberMe clearRememberMeCookie getTokenProvider generateHash	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	symfony_symfony_62ceded47ca4a581eefbe00c85387c6915a1f8e2_17_0	buggy: $this->createCookie($rememberMeDetails->withValue($series.':'.$tokenValue)); context: if ($persistentToken->getLastUsed()->getTimestamp() + 60 < time()) { $tokenValue = $this->generateHash(base64_encode(random_bytes(64))); $tokenLastUsed = new \DateTime(); if ($this->tokenVerifier) { $this->tokenVerifier->updateExistingToken($persistentToken, $tokenValue, $tokenLastUsed); } $this->tokenProvider->updateToken($series, $tokenValue, $tokenLastUsed); } $this->createCookie($rememberMeDetails->withValue($series.':'.$tokenValue)); $this->createCookie($rememberMeDetails->withValue($series.':'.$tokenValue)); } public function clearRememberMeCookie(): void { parent::clearRememberMeCookie(); $cookie = $this->requestStack->getMainRequest()->cookies->get($this->options['name']); if (null === $cookie) { return;	type_info: tokenVerifier:unknown series:unknown tokenValue:unknown persistentToken:unknown tokenLastUsed:unknown cookie:unknown rememberMeDetails:unknown  global_variable: tokenVerifier: unknown function_name: __construct createRememberMeCookie processRememberMe clearRememberMeCookie getTokenProvider generateHash	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	symfony_symfony_a232a232803f51ea57c973476d82a1e664b0d042_18_0	buggy: if ('php' !== $file->getExtension() || !class_exists($className = $psr4Prefix.'\\'.$file->getBasename('.php'))) { context: usort($files, function (\SplFileInfo $a, \SplFileInfo $b) { return (string) $a > (string) $b ? 1 : -1; }); foreach ($files as $file) { if ($file->isDir()) { $collection->addCollection($this->loadFromDirectory($file->getPathname(), $psr4Prefix.'\\'.$file->getFilename())); continue; } if ('php' !== $file->getExtension() || !class_exists($className = $psr4Prefix.'\\'.$file->getBasename('.php'))) { if ('php' !== $file->getExtension() || !class_exists($className = $psr4Prefix.'\\'.$file->getBasename('.php'))) { continue; } $collection->addCollection($this->import($className, 'attribute')); } return $collection; }	type_info: collection:unknown files:unknown className:unknown  global_variable:  function_name: __construct load supports forDirectory loadFromDirectory	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	symfony_symfony_87738ba11894d740d76a157e723d34143f1c95ed_19_0	buggy: return (int) $after * 1000; context: private function getDelayFromHeader(array $headers): ?int { if (null !== $after = $headers['retry-after'][0] ?? null) { if (is_numeric($after)) { return (int) $after * 1000; return (int) $after * 1000; } if (false !== $time = strtotime($after)) { return max(0, $time - time()) * 1000; } } return null; }	type_info: strategy:unknown after:unknown time:unknown  global_variable: strategy: unknown function_name: __construct request getDelayFromHeader passthru	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	symfony_symfony_4760265edd7a3f3127c508e80eedd70c261df693_20_0	"buggy:  context: public function reverseTransform($value) { if (null === $value || '' === $value) { return null; } if (!\is_string($value)) { throw new TransformationFailedException('Expected a string.'); } try { $uuid = new Uuid($value); } catch (\InvalidArgumentException $e) { throw new TransformationFailedException(sprintf('The value ""%s"" is not a valid UUID.', $value), $e->getCode(), $e); } return $uuid; } }"	type_info: uuid:unknown  global_variable:  function_name: transform reverseTransform	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	symfony_symfony_4760265edd7a3f3127c508e80eedd70c261df693_20_0	"buggy: $uuid = new Uuid($value); context: { if (null === $value || '' === $value) { return null; } if (!\is_string($value)) { throw new TransformationFailedException('Expected a string.'); } try { $uuid = new Uuid($value); $uuid = new Uuid($value); } catch (\InvalidArgumentException $e) { throw new TransformationFailedException(sprintf('The value ""%s"" is not a valid UUID.', $value), $e->getCode(), $e); } return $uuid; } }"	type_info: uuid:unknown  global_variable:  function_name: transform reverseTransform	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	symfony_symfony_4760265edd7a3f3127c508e80eedd70c261df693_20_0	"buggy: return $uuid; context: if (!\is_string($value)) { throw new TransformationFailedException('Expected a string.'); } try { $uuid = new Uuid($value); } catch (\InvalidArgumentException $e) { throw new TransformationFailedException(sprintf('The value ""%s"" is not a valid UUID.', $value), $e->getCode(), $e); } return $uuid; return $uuid; } }"	type_info: uuid:unknown  global_variable:  function_name: transform reverseTransform	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	symfony_symfony_fc7aaa6123c3e0cf4543bb3faeb65cbde26112bc_21_0	buggy:  context: $container->removeAlias(TexterInterface::class); } if ($this->isInitializedConfigEnabled('mailer')) { $sender = $container->getDefinition('mailer.envelope_listener')->getArgument(0); $container->getDefinition('notifier.channel.email')->setArgument(2, $sender); } else { $container->removeDefinition('notifier.channel.email'); } if ($this->isInitializedConfigEnabled('messenger')) { if ($config['notification_on_failed_messages']) { $container->getDefinition('notifier.failed_message_listener')->addTag('kernel.event_subscriber'); } $container->getDefinition('notifier.channel.chat')->setArgument(0, null); if ($container->hasDefinition('notifier.channel.email')) { $container->getDefinition('notifier.channel.email')->setArgument(0, null); } $container->getDefinition('notifier.channel.sms')->setArgument(0, null);	type_info: config:unknown sender:unknown  global_variable:  function_name: load getConfiguration hasConsole registerFormConfiguration registerHttpCacheConfiguration registerEsiConfiguration registerSsiConfiguration registerFragmentsConfiguration registerProfilerConfiguration registerWorkflowConfiguration registerDebugConfiguration registerRouterConfiguration registerSessionConfiguration registerRequestConfiguration registerAssetsConfiguration createPackageDefinition createVersion registerTranslatorConfiguration registerValidationConfiguration registerValidatorMapping registerMappingFilesFromDir registerMappingFilesFromConfig registerAnnotationsConfiguration registerPropertyAccessConfiguration registerSecretsConfiguration registerSecurityCsrfConfiguration registerSerializerConfiguration registerPropertyInfoConfiguration registerLockConfiguration registerSemaphoreConfiguration registerMessengerConfiguration registerCacheConfiguration registerHttpClientConfiguration registerRetryableHttpClient registerMailerConfiguration registerNotifierConfiguration registerRateLimiterConfiguration registerRateLimiter registerUidConfiguration registerHtmlSanitizerConfiguration resolveTrustedHeaders getXsdValidationBasePath getNamespace isConfigEnabled isInitializedConfigEnabled readConfigEnabled writeConfigEnabled	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	symfony_symfony_bb5788005eed6255332697d377256a86a6b3df5c_22_0	"buggy: $ulid = new Ulid('00000000000000000000000000'); context: $uuid = str_pad(BinaryUtil::fromBase($uuid, BinaryUtil::BASE58), 16, ""\0"", \STR_PAD_LEFT); } if (16 === \strlen($uuid)) { $uuid = bin2hex($uuid); $uuid = substr_replace($uuid, '-', 8, 0); $uuid = substr_replace($uuid, '-', 13, 0); $uuid = substr_replace($uuid, '-', 18, 0); $uuid = substr_replace($uuid, '-', 23, 0); } elseif (26 === \strlen($uuid) && Ulid::isValid($uuid)) { $ulid = new Ulid('00000000000000000000000000'); $ulid = new Ulid('00000000000000000000000000'); $ulid->uid = strtoupper($uuid); $uuid = $ulid->toRfc4122(); } if (__CLASS__ !== static::class || 36 !== \strlen($uuid)) { return new static($uuid); } if (self::NIL === $uuid) {"	type_info: uuid:unknown ulid:unknown  global_variable:  function_name: __construct fromString v1 v3 v4 v5 v6 isValid toBinary toRfc4122 compare format	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	symfony_symfony_bb5788005eed6255332697d377256a86a6b3df5c_22_0	buggy:  context: public static function isValid(string $uuid): bool { if (!preg_match('{^[0-9a-f]{8}(?:-[0-9a-f]{4}){2}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$}Di', $uuid)) { return false; } return __CLASS__ === static::class || static::TYPE === (int) $uuid[14]; }	type_info: uuid:unknown  global_variable:  function_name: __construct fromString v1 v3 v4 v5 v6 isValid toBinary toRfc4122 compare format	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	symfony_symfony_a13b41adacdcd48d411c44632dc90b0309538fb2_23_0	"buggy: if (!is_numeric($timeLimit) || 0 >= $limit) { context: $stopsWhen[] = ""processed {$limit} messages""; $this->eventDispatcher->addSubscriber(new StopWorkerOnMessageLimitListener($limit, $this->logger)); } if ($memoryLimit = $input->getOption('memory-limit')) { $stopsWhen[] = ""exceeded {$memoryLimit} of memory""; $this->eventDispatcher->addSubscriber(new StopWorkerOnMemoryLimitListener($this->convertToBytes($memoryLimit), $this->logger)); } if (null !== ($timeLimit = $input->getOption('time-limit'))) { if (!is_numeric($timeLimit) || 0 >= $limit) { if (!is_numeric($timeLimit) || 0 >= $limit) { throw new InvalidOptionException(sprintf('Option ""time-limit"" must be a positive integer, ""%s"" passed.', $timeLimit)); } $stopsWhen[] = ""been running for {$timeLimit}s""; $this->eventDispatcher->addSubscriber(new StopWorkerOnTimeLimitListener($timeLimit, $this->logger)); } $stopsWhen[] = 'received a stop signal via the messenger:stop-workers command';"	type_info: logger:unknown routableBus:unknown receiverNames:unknown stopsWhen:array limit:unknown memoryLimit:unknown timeLimit:unknown  global_variable: logger: unknown routableBus: unknown receiverNames: unknown function_name: __construct configure interact execute convertToBytes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	symfony_symfony_252666e54303ee84f8c89dd9efde382e32bed4dd_24_0	"buggy: sprintf('Failed to create object because it misses the ""%s"" property.', $constructorParameter->name), context: } elseif ($constructorParameter->isDefaultValueAvailable()) { $params[] = $constructorParameter->getDefaultValue(); } elseif ($constructorParameter->hasType() && $constructorParameter->getType()->allowsNull()) { $params[] = null; } else { if (!isset($context['not_normalizable_value_exceptions'])) { throw new MissingConstructorArgumentsException(sprintf('Cannot create an instance of ""%s"" from serialized data because its constructor requires parameter ""%s"" to be present.', $class, $constructorParameter->name), 0, null, [$constructorParameter->name]); } $exception = NotNormalizableValueException::createForUnexpectedDataType( sprintf('Failed to create object because it misses the ""%s"" property.', $constructorParameter->name), sprintf('Failed to create object because it misses the ""%s"" property.', $constructorParameter->name), $data, ['unknown'], $context['deserialization_path'] ?? null, true ); $context['not_normalizable_value_exceptions'][] = $exception; return $reflectionClass->newInstanceWithoutConstructor(); }"	type_info: classMetadataFactory:unknown params:array exception:unknown  global_variable: classMetadataFactory: unknown function_name: __construct hasCacheableSupportsMethod isCircularReference handleCircularReference getAllowedAttributes getGroups isAllowedAttribute prepareForDenormalization getConstructor instantiateObject denormalizeParameter createChildContext validateCallbackContext applyCallbacks	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	symfony_symfony_627660b2c10519386c5f5ad2961623dbdf0a42ed_25_0	buggy: if ($this->receiverNames && 0 === \count($input->getArgument('receivers'))) { context: protected function interact(InputInterface $input, OutputInterface $output) { $io = new SymfonyStyle($input, $output instanceof ConsoleOutputInterface ? $output->getErrorOutput() : $output); if ($this->receiverNames && 0 === \count($input->getArgument('receivers'))) { if ($this->receiverNames && 0 === \count($input->getArgument('receivers'))) { $io->block('Which transports/receivers do you want to consume?', null, 'fg=white;bg=blue', ' ', true); $io->writeln('Choose which receivers you want to consume messages from in order of priority.'); if (\count($this->receiverNames) > 1) { $io->writeln(sprintf('Hint: to consume from multiple, use a list of their names, e.g. <comment>%s</comment>', implode(', ', $this->receiverNames))); } $question = new ChoiceQuestion('Select receivers to consume:', $this->receiverNames, 0); $question->setMultiselect(true);	type_info: logger:unknown routableBus:unknown io:unknown question:unknown receiverNames:unknown  global_variable: logger: unknown routableBus: unknown receiverNames: unknown function_name: __construct configure interact execute convertToBytes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	symfony_symfony_627660b2c10519386c5f5ad2961623dbdf0a42ed_25_0	"buggy: if (0 === \count($input->getArgument('receivers'))) { context: if (\count($this->receiverNames) > 1) { $io->writeln(sprintf('Hint: to consume from multiple, use a list of their names, e.g. <comment>%s</comment>', implode(', ', $this->receiverNames))); } $question = new ChoiceQuestion('Select receivers to consume:', $this->receiverNames, 0); $question->setMultiselect(true); $input->setArgument('receivers', $io->askQuestion($question)); } if (0 === \count($input->getArgument('receivers'))) { if (0 === \count($input->getArgument('receivers'))) { throw new RuntimeException('Please pass at least one receiver.'); } } protected function execute(InputInterface $input, OutputInterface $output) { if (str_contains($input->getFirstArgument(), ':consume-')) { $message = 'The use of the ""messenger:consume-messages"" command is deprecated since version 4.3 and will be removed in 5.0. Use ""messenger:consume"" instead.'; @trigger_error($message, \E_USER_DEPRECATED);"	type_info: logger:unknown routableBus:unknown io:unknown question:unknown message:string receiverNames:unknown  global_variable: logger: unknown routableBus: unknown receiverNames: unknown function_name: __construct configure interact execute convertToBytes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	symfony_symfony_627660b2c10519386c5f5ad2961623dbdf0a42ed_25_0	"buggy: if (null !== ($limit = $input->getOption('limit'))) { context: $message .= sprintf(' Valid receivers are: %s.', implode(', ', $this->receiverNames)); } throw new RuntimeException($message); } $receivers[$receiverName] = $this->receiverLocator->get($receiverName); } $stopsWhen = []; if (null !== ($limit = $input->getOption('limit'))) { if (null !== ($limit = $input->getOption('limit'))) { if (!is_numeric($limit) || 0 >= $limit) { throw new InvalidOptionException(sprintf('Option ""limit"" must be a positive integer, ""%s"" passed.', $limit)); } $stopsWhen[] = ""processed {$limit} messages""; $this->eventDispatcher->addSubscriber(new StopWorkerOnMessageLimitListener($limit, $this->logger)); } if ($memoryLimit = $input->getOption('memory-limit')) {"	type_info: logger:unknown routableBus:unknown message:string receivers:array receiverNames:unknown stopsWhen:array limit:unknown memoryLimit:unknown  global_variable: logger: unknown routableBus: unknown receiverNames: unknown function_name: __construct configure interact execute convertToBytes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	symfony_symfony_627660b2c10519386c5f5ad2961623dbdf0a42ed_25_0	"buggy: if (null !== ($timeLimit = $input->getOption('time-limit'))) { context: $stopsWhen[] = ""processed {$limit} messages""; $this->eventDispatcher->addSubscriber(new StopWorkerOnMessageLimitListener($limit, $this->logger)); } if ($memoryLimit = $input->getOption('memory-limit')) { $stopsWhen[] = ""exceeded {$memoryLimit} of memory""; $this->eventDispatcher->addSubscriber(new StopWorkerOnMemoryLimitListener($this->convertToBytes($memoryLimit), $this->logger)); } if (null !== ($timeLimit = $input->getOption('time-limit'))) { if (null !== ($timeLimit = $input->getOption('time-limit'))) { if (!is_numeric($timeLimit) || 0 >= $timeLimit) { throw new InvalidOptionException(sprintf('Option ""time-limit"" must be a positive integer, ""%s"" passed.', $timeLimit)); } $stopsWhen[] = ""been running for {$timeLimit}s""; $this->eventDispatcher->addSubscriber(new StopWorkerOnTimeLimitListener($timeLimit, $this->logger)); } $stopsWhen[] = 'received a stop signal via the messenger:stop-workers command';"	type_info: logger:unknown routableBus:unknown receiverNames:unknown stopsWhen:array limit:unknown memoryLimit:unknown timeLimit:unknown  global_variable: logger: unknown routableBus: unknown receiverNames: unknown function_name: __construct configure interact execute convertToBytes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	symfony_symfony_627660b2c10519386c5f5ad2961623dbdf0a42ed_25_0	"buggy: $io->success(sprintf('Consuming messages from transport%s ""%s"".', \count($receivers) > 0 ? 's' : '', implode(', ', $receiverNames))); context: throw new InvalidOptionException(sprintf('Option ""time-limit"" must be a positive integer, ""%s"" passed.', $timeLimit)); } $stopsWhen[] = ""been running for {$timeLimit}s""; $this->eventDispatcher->addSubscriber(new StopWorkerOnTimeLimitListener($timeLimit, $this->logger)); } $stopsWhen[] = 'received a stop signal via the messenger:stop-workers command'; $io = new SymfonyStyle($input, $output instanceof ConsoleOutputInterface ? $output->getErrorOutput() : $output); $io->success(sprintf('Consuming messages from transport%s ""%s"".', \count($receivers) > 0 ? 's' : '', implode(', ', $receiverNames))); $io->success(sprintf('Consuming messages from transport%s ""%s"".', \count($receivers) > 0 ? 's' : '', implode(', ', $receiverNames))); if ($stopsWhen) { $last = array_pop($stopsWhen); $stopsWhen = ($stopsWhen ? implode(', ', $stopsWhen).' or ' : '').$last; $io->comment(""The worker will automatically exit once it has {$stopsWhen}.""); } $io->comment('Quit the worker with CONTROL-C.');"	type_info: logger:unknown routableBus:unknown io:unknown receivers:array receiverNames:unknown stopsWhen:array timeLimit:unknown last:unknown  global_variable: logger: unknown routableBus: unknown receiverNames: unknown function_name: __construct configure interact execute convertToBytes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	symfony_symfony_62c8b0af3d5b802b2b8199ed4aba9715874a87f7_26_0	buggy:  context: private function exportFiles(array $locales, array $domains): array { $response = $this->client->request('POST', 'files/export', [ 'json' => [ 'format' => 'symfony_xliff', 'original_filenames' => true, 'directory_prefix' => '%LANG_ISO%', 'filter_langs' => array_values($locales), 'filter_filenames' => array_map([$this, 'getLokaliseFilenameFromDomain'], $domains), 'export_empty_as' => 'skip', ], ]); $responseContent = $response->toArray(false); if (406 === $response->getStatusCode() && 'No keys found with specified filenames.' === $responseContent['error']['message'] ) { return []; }	type_info: response:unknown responseContent:unknown  global_variable:  function_name: __construct __toString write read delete exportFiles createKeys updateTranslations getKeysIds ensureAllLocalesAreCreated getLanguages createLanguages getLokaliseFilenameFromDomain	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	symfony_symfony_c965b032f648181a9e08ae3ee175af4ba4187f2b_27_0	buggy:  context: ->replaceArgument(0, ServiceLocatorTagPass::register($container, $loaderRefs)) ->replaceArgument(3, $loaders) ; if ($container->hasDefinition('validator') && $container->hasDefinition('translation.extractor.visitor.constraint')) { $constraintVisitorDefinition = $container->getDefinition('translation.extractor.visitor.constraint'); $constraintClassNames = []; foreach ($container->findTaggedServiceIds('validator.constraint_validator', true) as $id => $attributes) { $serviceDefinition = $container->getDefinition($id); $constraintClassNames[] = str_replace('Validator', '', substr(strrchr($serviceDefinition->getClass(), '\\'), 1)); } $constraintVisitorDefinition->setArgument(0, $constraintClassNames); } if (!$container->hasParameter('twig.default_path')) { return; }	type_info: loaders:array loaderRefs:array id:unknown constraintVisitorDefinition:unknown constraintClassNames:array  global_variable:  function_name: process	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	symfony_symfony_c965b032f648181a9e08ae3ee175af4ba4187f2b_27_0	buggy: $constraintClassNames[] = str_replace('Validator', '', substr(strrchr($serviceDefinition->getClass(), '\\'), 1)); context: ->replaceArgument(0, ServiceLocatorTagPass::register($container, $loaderRefs)) ->replaceArgument(3, $loaders) ; if ($container->hasDefinition('validator') && $container->hasDefinition('translation.extractor.visitor.constraint')) { $constraintVisitorDefinition = $container->getDefinition('translation.extractor.visitor.constraint'); $constraintClassNames = []; foreach ($container->findTaggedServiceIds('validator.constraint_validator', true) as $id => $attributes) { $serviceDefinition = $container->getDefinition($id); $constraintClassNames[] = str_replace('Validator', '', substr(strrchr($serviceDefinition->getClass(), '\\'), 1)); $constraintClassNames[] = str_replace('Validator', '', substr(strrchr($serviceDefinition->getClass(), '\\'), 1)); } $constraintVisitorDefinition->setArgument(0, $constraintClassNames); } if (!$container->hasParameter('twig.default_path')) { return; }	type_info: loaders:array loaderRefs:array id:unknown constraintVisitorDefinition:unknown constraintClassNames:array  global_variable:  function_name: process	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	symfony_symfony_bd865f7f68701dba091ecada3ec2cea51139aa6e_28_0	buggy: public function get(string $name): array|bool|string|int|float|null context: class EnvPlaceholderParameterBag extends ParameterBag { private string $envPlaceholderUniquePrefix; private array $envPlaceholders = []; private array $unusedEnvPlaceholders = []; private array $providedTypes = []; private static int $counter = 0; public function get(string $name): array|bool|string|int|float|null public function get(string $name): array|bool|string|int|float|null { if (str_starts_with($name, 'env(') && str_ends_with($name, ')') && 'env()' !== $name) { $env = substr($name, 4, -1); if (isset($this->envPlaceholders[$env])) { foreach ($this->envPlaceholders[$env] as $placeholder) { return $placeholder; } }	type_info: envPlaceholders:array unusedEnvPlaceholders:array providedTypes:array counter:integer env:unknown placeholder:unknown  global_variable:  function_name: get getEnvPlaceholderUniquePrefix getEnvPlaceholders getUnusedEnvPlaceholders clearUnusedEnvPlaceholders mergeEnvPlaceholders setProvidedTypes getProvidedTypes resolve	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	symfony_symfony_a379c354ac145a44f926dfedf9bbeec861ef8e94_29_0	"buggy: $i = strrpos($controller, ':'); $controller = substr($controller, 0, $i).strtolower(substr($controller, $i)); context: { if (\is_array($controller = $request->attributes->get('_controller'))) { $controller = $controller[0].'::'.$controller[1]; } if ('\\' === $controller[0]) { $controller = ltrim($controller, '\\'); } if (!$this->container->has($controller)) { $i = strrpos($controller, ':'); $controller = substr($controller, 0, $i).strtolower(substr($controller, $i)); $i = strrpos($controller, ':'); $controller = substr($controller, 0, $i).strtolower(substr($controller, $i)); } $what = sprintf('argument $%s of ""%s()""', $argument->getName(), $controller); $message = sprintf('Could not resolve %s, maybe you forgot to register the controller as a service or missed tagging it with the ""controller.service_arguments""?', $what); throw new RuntimeException($message); } }"	type_info: controller:unknown i:unknown what:unknown message:unknown  global_variable:  function_name: __construct supports resolve	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	symfony_symfony_cbc616aa89a2a59c6b8b88063119fe2ce82aeaa1_30_0	"buggy:  context: $output = ''; $prefix = $indent ? str_repeat(' ', $indent) : ''; $dumpObjectAsInlineMap = true; if (Yaml::DUMP_OBJECT_AS_MAP & $flags && ($input instanceof \ArrayObject || $input instanceof \stdClass)) { $dumpObjectAsInlineMap = empty((array) $input); } if ($inline <= 0 || (!\is_array($input) && !$input instanceof TaggedValue && $dumpObjectAsInlineMap) || empty($input)) { $output .= $prefix.Inline::dump($input, $flags); } else { $dumpAsMap = Inline::isHash($input); foreach ($input as $key => $value) { if ('' !== $output && ""\n"" !== $output[-1]) { $output .= ""\n""; } if (Yaml::DUMP_MULTI_LINE_LITERAL_BLOCK & $flags && \is_string($value) && false !== strpos($value, ""\n"") && false === strpos($value, ""\r"")) { $blockIndentationIndicator = (' ' === substr($value, 0, 1)) ? (string) $this->indentation : '';"	type_info: indentation:unknown inline:unknown prefix:string dumpObjectAsInlineMap:boolean dumpAsMap:unknown key:unknown blockIndentationIndicator:string  global_variable: indentation: unknown function_name: __construct dump	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	symfony_symfony_cbc616aa89a2a59c6b8b88063119fe2ce82aeaa1_30_0	"buggy:  context: $prefix, $dumpAsMap ? Inline::dump($key, $flags).':' : '-', $willBeInlined ? ' ' : ""\n"", $this->dump($value, $inline - 1, $willBeInlined ? 0 : $indent + $this->indentation, $flags) ).($willBeInlined ? ""\n"" : ''); } } return $output; } }"	type_info: indentation:unknown inline:unknown prefix:string dumpAsMap:unknown key:unknown willBeInlined:unknown  global_variable: indentation: unknown function_name: __construct dump	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	symfony_symfony_ee9d357bfd4ce089957e0b7ecb93cddf86dff630_31_0	"buggy: $comments[] = 'Example: '.$example; context: $name = str_replace('_', '-', $child->getName()); $value = '%%%%not_defined%%%%'; $comments = []; if ($child instanceof BaseNode && $info = $child->getInfo()) { $comments[] = $info; } if ($child instanceof BaseNode && $example = $child->getExample()) { $comments[] = 'Example: '.$example; $comments[] = 'Example: '.$example; } if ($child->isRequired()) { $comments[] = 'Required'; } if ($child instanceof BaseNode && $child->isDeprecated()) { $deprecation = $child->getDeprecation($child->getName(), $node->getPath()); $comments[] = sprintf('Deprecated (%s)', ($deprecation['package'] || $deprecation['version'] ? ""Since {$deprecation['package']} {$deprecation['version']}: "" : '').$deprecation['message']);"	type_info: info:string name:unknown value:string comments:array example:unknown deprecation:unknown  global_variable:  function_name: dump dumpNode writeNode writeLine writeValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	symfony_symfony_fed1a5f8057d1fd8f7a4ba8409aae2ce2c07944c_32_0	"buggy: if (false === strpbrk($default, ""\\:('"")) { return $default; } context: if (\in_array($default, ['<default>', 'NULL'], true)) { return 'null'; } if (str_ends_with($default, ""...'"") && preg_match(""/^'(?:[^'\\\\]*+(?:\\\\.)*+)*+'$/"", $default)) { return VarExporter::export($param->getDefaultValue()); } if (false === strpbrk($default, ""\\:('"")) { return $default; } if (false === strpbrk($default, ""\\:('"")) { return $default; } $regexp = ""/(\""(?:[^\""\\\\]*+(?:\\\\.)*+)*+\""|'(?:[^'\\\\]*+(?:\\\\.)*+)*+')/""; $parts = preg_split($regexp, $default, -1, \PREG_SPLIT_DELIM_CAPTURE | \PREG_SPLIT_NO_EMPTY);"	type_info: default:unknown regexp:string parts:unknown  global_variable:  function_name: generateLazyGhost generateLazyProxy exportSignature exportType exportPropertyScopes exportDefault	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	symfony_symfony_fed1a5f8057d1fd8f7a4ba8409aae2ce2c07944c_32_0	"buggy: $regexp = '/([\( ]|^)([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*+(?:\\\\[a-zA-Z0-9_\x7f-\xff]++)*+)(?!: )/'; $callback = ($class = $param->getDeclaringClass()) context: if (false === strpbrk($default, ""\\:('"")) { return $default; } $regexp = ""/(\""(?:[^\""\\\\]*+(?:\\\\.)*+)*+\""|'(?:[^'\\\\]*+(?:\\\\.)*+)*+')/""; $parts = preg_split($regexp, $default, -1, \PREG_SPLIT_DELIM_CAPTURE | \PREG_SPLIT_NO_EMPTY); $regexp = '/([\( ]|^)([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*+(?:\\\\[a-zA-Z0-9_\x7f-\xff]++)*+)(?!: )/'; $callback = ($class = $param->getDeclaringClass()) $regexp = '/([\( ]|^)([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*+(?:\\\\[a-zA-Z0-9_\x7f-\xff]++)*+)(?!: )/'; $callback = ($class = $param->getDeclaringClass()) ? fn ($m) => $m[1].match ($m[2]) { 'new' => 'new', 'self' => '\\'.$class->name, 'namespace\\parent', 'parent' => ($parent = $class->getParentClass()) ? '\\'.$parent->name : 'parent',"	type_info: parent:string class:unknown default:unknown regexp:string parts:unknown callback:unknown  global_variable:  function_name: generateLazyGhost generateLazyProxy exportSignature exportType exportPropertyScopes exportDefault	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	symfony_symfony_99ca5f9fa7d0edae384b6dd626619bf352b73c21_33_0	buggy: if (!isset($this->messages[$domain])) { $this->messages[$domain] = []; } $intlDomain = $domain; if (!str_ends_with($domain, self::INTL_DOMAIN_SUFFIX)) { $intlDomain .= self::INTL_DOMAIN_SUFFIX; } context: public function add($messages, $domain = 'messages') { if (!isset($this->messages[$domain])) { $this->messages[$domain] = []; } $intlDomain = $domain; if (!str_ends_with($domain, self::INTL_DOMAIN_SUFFIX)) { $intlDomain .= self::INTL_DOMAIN_SUFFIX; } if (!isset($this->messages[$domain])) { $this->messages[$domain] = []; } $intlDomain = $domain; if (!str_ends_with($domain, self::INTL_DOMAIN_SUFFIX)) { $intlDomain .= self::INTL_DOMAIN_SUFFIX; } foreach ($messages as $id => $message) { if (isset($this->messages[$intlDomain]) && \array_key_exists($id, $this->messages[$intlDomain])) { $this->messages[$intlDomain][$id] = $message; } else { $this->messages[$domain][$id] = $message; } } } public function addCatalogue(MessageCatalogueInterface $catalogue)	type_info: messages:array domain:array intlDomain:unknown id:unknown  global_variable:  function_name: __construct getLocale getDomains all set has defines get replace add addCatalogue addFallbackCatalogue getFallbackCatalogue getResources addResource getMetadata setMetadata deleteMetadata addMetadata	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	symfony_symfony_99ca5f9fa7d0edae384b6dd626619bf352b73c21_33_0	buggy: if (isset($this->messages[$intlDomain]) && \array_key_exists($id, $this->messages[$intlDomain])) { $this->messages[$intlDomain][$id] = $message; } else { $this->messages[$domain][$id] = $message; } context: $this->messages[$domain] = []; } $intlDomain = $domain; if (!str_ends_with($domain, self::INTL_DOMAIN_SUFFIX)) { $intlDomain .= self::INTL_DOMAIN_SUFFIX; } foreach ($messages as $id => $message) { if (isset($this->messages[$intlDomain]) && \array_key_exists($id, $this->messages[$intlDomain])) { $this->messages[$intlDomain][$id] = $message; } else { $this->messages[$domain][$id] = $message; } if (isset($this->messages[$intlDomain]) && \array_key_exists($id, $this->messages[$intlDomain])) { $this->messages[$intlDomain][$id] = $message; } else { $this->messages[$domain][$id] = $message; } } }	type_info: messages:array domain:array intlDomain:unknown id:unknown  global_variable:  function_name: __construct getLocale getDomains all set has defines get replace add addCatalogue addFallbackCatalogue getFallbackCatalogue getResources addResource getMetadata setMetadata deleteMetadata addMetadata	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	symfony_symfony_6337bfd0437d35dac854a5cef19c9ba77192253c_34_0	buggy:  context: <?php namespace Symfony\Component\Serializer\Normalizer; use Symfony\Component\Serializer\Exception\BadMethodCallException; use Symfony\Component\Serializer\Exception\InvalidArgumentException; use Symfony\Component\Serializer\Exception\NotNormalizableValueException; use Symfony\Component\Serializer\Serializer; use Symfony\Component\Serializer\SerializerAwareInterface;	type_info:  global_variable:  function_name: denormalize supportsDenormalization setSerializer hasCacheableSupportsMethod	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	symfony_symfony_6337bfd0437d35dac854a5cef19c9ba77192253c_34_0	buggy: throw new InvalidArgumentException('Data expected to be an array, '.get_debug_type($data).' given.'); context: public function denormalize($data, string $type, string $format = null, array $context = []): array { if (null === $this->denormalizer) { throw new BadMethodCallException('Please set a denormalizer before calling denormalize()!'); } if (!\is_array($data)) { throw new InvalidArgumentException('Data expected to be an array, '.get_debug_type($data).' given.'); throw new InvalidArgumentException('Data expected to be an array, '.get_debug_type($data).' given.'); } if (!str_ends_with($type, '[]')) { throw new InvalidArgumentException('Unsupported class: '.$type); } $type = substr($type, 0, -2); $builtinType = isset($context['key_type']) ? $context['key_type']->getBuiltinType() : null; foreach ($data as $key => $value) { $subContext = $context;	type_info: format:unknown type:unknown builtinType:unknown key:unknown  global_variable:  function_name: denormalize supportsDenormalization setSerializer hasCacheableSupportsMethod	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	symfony_symfony_df539e2d45b9d88f6a7432df644a0547e7f662ae_35_0	buggy: $v['csrf_token_generator'] = 'security.csrf.token_generator'; context: ->scalarNode('context')->cannotBeEmpty()->end() ->arrayNode('logout') ->treatTrueLike([]) ->canBeUnset() ->beforeNormalization() ->ifTrue(fn ($v): bool => \is_array($v) && (isset($v['csrf_token_generator']) xor isset($v['enable_csrf']))) ->then(function (array $v): array { if (isset($v['csrf_token_generator'])) { $v['enable_csrf'] = true; } elseif ($v['enable_csrf']) { $v['csrf_token_generator'] = 'security.csrf.token_generator'; $v['csrf_token_generator'] = 'security.csrf.token_generator'; } return $v; }) ->end() ->children() ->booleanNode('enable_csrf')->defaultNull()->end() ->scalarNode('csrf_token_id')->defaultValue('logout')->end() ->scalarNode('csrf_parameter')->defaultValue('_csrf_token')->end()	type_info:  global_variable:  function_name: __construct getConfigTreeBuilder addRoleHierarchySection addAccessControlSection addFirewallsSection addProvidersSection addPasswordHashersSection getAccessDecisionStrategies	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	symfony_symfony_c1f53b59376419309e7ac0bac4998f1c430917a9_36_0	"buggy: 'new' => 'new', context: $regexp = ""/(\""(?:[^\""\\\\]*+(?:\\\\.)*+)*+\""|'(?:[^'\\\\]*+(?:\\\\.)*+)*+')/""; $parts = preg_split($regexp, $default, -1, \PREG_SPLIT_DELIM_CAPTURE | \PREG_SPLIT_NO_EMPTY); $regexp = '/([\[\( ]|^)([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*+(?:\\\\[a-zA-Z0-9_\x7f-\xff]++)*+)(?!: )/'; $callback = (false !== strpbrk($default, ""\\:('"") && $class = $param->getDeclaringClass()) ? fn ($m) => $m[1].match ($m[2]) { 'new' => 'new', 'new' => 'new', 'self' => '\\'.$class->name, 'namespace\\parent', 'parent' => ($parent = $class->getParentClass()) ? '\\'.$parent->name : 'parent', default => '\\'.$m[2], } : fn ($m) => $m[1].(\in_array($m[2], ['new', 'self', 'parent'], true) ? '' : '\\').$m[2];"	type_info: parent:string class:unknown default:unknown regexp:string parts:unknown callback:unknown  global_variable:  function_name: generateLazyGhost generateLazyProxy exportSignature exportType exportPropertyScopes exportDefault	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	symfony_symfony_c1f53b59376419309e7ac0bac4998f1c430917a9_36_0	"buggy: : fn ($m) => $m[1].(\in_array($m[2], ['new', 'self', 'parent'], true) ? '' : '\\').$m[2]; context: ? fn ($m) => $m[1].match ($m[2]) { 'new' => 'new', 'self' => '\\'.$class->name, 'namespace\\parent', 'parent' => ($parent = $class->getParentClass()) ? '\\'.$parent->name : 'parent', default => '\\'.$m[2], } : fn ($m) => $m[1].(\in_array($m[2], ['new', 'self', 'parent'], true) ? '' : '\\').$m[2]; : fn ($m) => $m[1].(\in_array($m[2], ['new', 'self', 'parent'], true) ? '' : '\\').$m[2]; return implode('', array_map(fn ($part) => match ($part[0]) { '""' => $part, ""'"" => false !== strpbrk($part, ""\\\0\r\n"") ? '""'.substr(str_replace(['$', ""\0"", ""\r"", ""\n""], ['\$', '\0', '\r', '\n'], $part), 1, -1).'""' : $part, default => preg_replace_callback($regexp, $callback, $part), }, $parts));"	type_info: parent:string class:unknown regexp:string parts:unknown callback:unknown  global_variable:  function_name: generateLazyGhost generateLazyProxy exportSignature exportType exportPropertyScopes exportDefault	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	symfony_symfony_f68805dbcfa2991253b1b3080601aeb93d352b89_37_0	"buggy:  context: if (404 === $response->getStatusCode()) { $this->logger->warning(sprintf('Locale ""%s"" for domain ""%s"" does not exist in Loco.', $locale, $domain)); continue; } if (304 === $response->getStatusCode()) { $this->logger->info(sprintf('No modifications found for locale ""%s"" and domain ""%s"" in Loco.', $locale, $domain)); $catalogue = new MessageCatalogue($locale); foreach ($previousCatalogue->all($domain) as $key => $message) { $catalogue->set($this->retrieveKeyFromId($key, $domain), $message, $domain); } foreach ($previousCatalogue->getCatalogueMetadata('', $domain) as $key => $value) { $catalogue->setCatalogueMetadata($key, $value, $domain); } $translatorBag->addCatalogue($catalogue);"	type_info: translatorBag:unknown catalogue:unknown domain:array locale:unknown key:unknown previousCatalogue:unknown response:unknown  global_variable:  function_name: __construct __toString write read delete getAssetsIds createAssets translateAssets tagsAssets createTag getTags createLocale getLocales retrieveKeyFromId	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	symfony_symfony_f68805dbcfa2991253b1b3080601aeb93d352b89_37_0	"buggy: foreach ($previousCatalogue->all($domain) as $key => $message) { context: if (404 === $response->getStatusCode()) { $this->logger->warning(sprintf('Locale ""%s"" for domain ""%s"" does not exist in Loco.', $locale, $domain)); continue; } if (304 === $response->getStatusCode()) { $this->logger->info(sprintf('No modifications found for locale ""%s"" and domain ""%s"" in Loco.', $locale, $domain)); $catalogue = new MessageCatalogue($locale); foreach ($previousCatalogue->all($domain) as $key => $message) { foreach ($previousCatalogue->all($domain) as $key => $message) { $catalogue->set($this->retrieveKeyFromId($key, $domain), $message, $domain); } foreach ($previousCatalogue->getCatalogueMetadata('', $domain) as $key => $value) { $catalogue->setCatalogueMetadata($key, $value, $domain); } $translatorBag->addCatalogue($catalogue);"	type_info: translatorBag:unknown catalogue:unknown domain:array locale:unknown key:unknown previousCatalogue:unknown response:unknown  global_variable:  function_name: __construct __toString write read delete getAssetsIds createAssets translateAssets tagsAssets createTag getTags createLocale getLocales retrieveKeyFromId	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	symfony_symfony_cc5ab1422bd8462b073283f11eb0e488c4fb792d_38_0	buggy: } catch (\Exception $e) { context: public static function castObject(object $obj, string $class, bool $hasDebugInfo = false, string $debugClass = null): array { if ($hasDebugInfo) { try { $debugInfo = $obj->__debugInfo(); } catch (\Exception $e) { } catch (\Exception $e) { $hasDebugInfo = false; } } $a = $obj instanceof \Closure ? [] : (array) $obj; if ($obj instanceof \__PHP_Incomplete_Class) { return $a; }	type_info: hasDebugInfo:boolean a:unknown debugClass:unknown  global_variable:  function_name: castObject filter castPhpIncompleteClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	symfony_symfony_e034be069ec19b273496f66797e9b592ab0f7401_39_0	"buggy:  context: public function registerClasses(Definition $prototype, string $namespace, string $resource, string|array $exclude = null ) { if (!str_ends_with($namespace, '\\')) { throw new InvalidArgumentException(sprintf('Namespace prefix must end with a ""\\"": ""%s"".', $namespace)); } if (!preg_match('/^(?:[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*+\\\\)++$/', $namespace)) { throw new InvalidArgumentException(sprintf('Namespace is not a valid PSR-4 prefix: ""%s"".', $namespace)); } $source = \func_num_args() > 4 ? func_get_arg(4) : null; $autoconfigureAttributes = new RegisterAutoconfigureAttributesPass(); $autoconfigureAttributes = $autoconfigureAttributes->accept($prototype) ? $autoconfigureAttributes : null; $classes = $this->findClasses($namespace, $resource, (array) $exclude, $autoconfigureAttributes, $source); $serializedPrototype = serialize($prototype); foreach ($classes as $class => $errorMessage) { if (null === $errorMessage && $autoconfigureAttributes && $this->env) { $r = $this->container->getReflectionClass($class);"	type_info: exclude:unknown source:unknown autoconfigureAttributes:unknown classes:array serializedPrototype:unknown class:unknown r:unknown  global_variable:  function_name: __construct import registerClasses registerAliasesForSinglyImplementedInterfaces setDefinition findClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	symfony_symfony_87f58ae800d1f8517349dd599ed2f5161a51f7c3_40_0	buggy: parent::prepare($request); context: public function prepare(Request $request) { parent::prepare($request); parent::prepare($request); if ($this->isInformational() || $this->isEmpty()) { $this->maxlen = 0; return $this; } if (!$this->headers->has('Content-Type')) { $this->headers->set('Content-Type', $this->file->getMimeType() ?: 'application/octet-stream'); }	type_info: file:unknown  global_variable: file: unknown function_name: __construct create setFile getFile setChunkSize setAutoLastModified setAutoEtag setContentDisposition prepare hasValidIfRangeHeader sendContent setContent getContent trustXSendfileTypeHeader deleteFileAfterSend	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	symfony_symfony_87f58ae800d1f8517349dd599ed2f5161a51f7c3_40_0	buggy:  context: if ($this->isInformational() || $this->isEmpty()) { $this->maxlen = 0; return $this; } if (!$this->headers->has('Content-Type')) { $this->headers->set('Content-Type', $this->file->getMimeType() ?: 'application/octet-stream'); } $this->offset = 0; $this->maxlen = -1; if (false === $fileSize = $this->file->getSize()) { return $this; } $this->headers->remove('Transfer-Encoding'); $this->headers->set('Content-Length', $fileSize); if (!$this->headers->has('Accept-Ranges')) {	type_info: file:unknown fileSize:unknown  global_variable: file: unknown function_name: __construct create setFile getFile setChunkSize setAutoLastModified setAutoEtag setContentDisposition prepare hasValidIfRangeHeader sendContent setContent getContent trustXSendfileTypeHeader deleteFileAfterSend	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	symfony_symfony_9e1349ca87d387252499a644baa26e7028af5035_41_0	"buggy:  context: public static function removeDecoration(OutputFormatterInterface $formatter, $string) { $isDecorated = $formatter->isDecorated(); $formatter->setDecorated(false); $string = $formatter->format($string); $string = preg_replace(""/\033\[[^m]*m/"", '', $string); $formatter->setDecorated($isDecorated); return $string; }"	type_info: string:unknown isDecorated:unknown  global_variable:  function_name: setHelperSet getHelperSet strlen substr formatTime formatMemory strlenWithoutDecoration removeDecoration	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	symfony_symfony_f4d4da37125480b133ee8229ccb1606879fbfa67_42_0	buggy:  context: namespace Symfony\Component\HttpClient\Response; use Symfony\Contracts\HttpClient\Exception\ExceptionInterface; use Symfony\Contracts\HttpClient\HttpClientInterface; use Symfony\Contracts\HttpClient\ResponseInterface; class StreamWrapper { public $context; private $client; private $response; private $content; private $handle;	type_info: client:unknown context:array  global_variable: client: unknown context: array function_name: createResource getResponse bindHandles stream_open stream_read stream_set_option stream_tell stream_eof stream_seek stream_cast stream_stat __construct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	symfony_symfony_f4d4da37125480b133ee8229ccb1606879fbfa67_42_0	buggy:  context: use Symfony\Contracts\HttpClient\ResponseInterface; class StreamWrapper { public $context; private $client; private $response; private $content; private $handle; private $blocking = true; private $timeout; private $eof = false; private $offset = 0; public static function createResource(ResponseInterface $response, HttpClientInterface $client = null)	type_info: blocking:boolean eof:boolean offset:integer client:unknown context:array  global_variable: client: unknown context: array function_name: createResource getResponse bindHandles stream_open stream_read stream_set_option stream_tell stream_eof stream_seek stream_cast stream_stat __construct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	symfony_symfony_f4d4da37125480b133ee8229ccb1606879fbfa67_42_0	buggy:  context: public function bindHandles(&$handle, &$content): void { $this->handle = &$handle; $this->content = &$content; }	type_info: client:unknown context:array  global_variable: client: unknown context: array function_name: createResource getResponse bindHandles stream_open stream_read stream_set_option stream_tell stream_eof stream_seek stream_cast stream_stat __construct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	symfony_symfony_f4d4da37125480b133ee8229ccb1606879fbfa67_42_0	buggy: if (0 !== fseek($this->content, $this->offset)) { context: if (!$chunk->isTimeout() && $chunk->isFirst()) { $this->response->getStatusCode(); } } catch (ExceptionInterface $e) { trigger_error($e->getMessage(), \E_USER_WARNING); return false; } } if (0 !== fseek($this->content, $this->offset)) { if (0 !== fseek($this->content, $this->offset)) { return false; } if ('' !== $data = fread($this->content, $count)) { fseek($this->content, 0, \SEEK_END); $this->offset += \strlen($data); return $data; }	type_info: client:unknown context:array data:unknown  global_variable: client: unknown context: array function_name: createResource getResponse bindHandles stream_open stream_read stream_set_option stream_tell stream_eof stream_seek stream_cast stream_stat __construct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	symfony_symfony_f4d4da37125480b133ee8229ccb1606879fbfa67_42_0	buggy:  context: } $this->offset += \strlen($data); return $data; } foreach ($this->client->stream([$this->response], $this->blocking ? $this->timeout : 0) as $chunk) { try { $this->eof = true; $this->eof = !$chunk->isTimeout(); $this->eof = $chunk->isLast(); if ($chunk->isFirst()) { $this->response->getStatusCode(); } if ('' !== $data = $chunk->getContent()) { if (\strlen($data) > $count) { if (null === $this->content) { $this->content = substr($data, $count);	type_info: client:unknown context:array data:unknown  global_variable: client: unknown context: array function_name: createResource getResponse bindHandles stream_open stream_read stream_set_option stream_tell stream_eof stream_seek stream_cast stream_stat __construct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	symfony_symfony_f4d4da37125480b133ee8229ccb1606879fbfa67_42_0	buggy: return $this->offset; context: public function stream_tell(): int { return $this->offset; return $this->offset; }	type_info: client:unknown context:array  global_variable: client: unknown context: array function_name: createResource getResponse bindHandles stream_open stream_read stream_set_option stream_tell stream_eof stream_seek stream_cast stream_stat __construct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	symfony_symfony_f4d4da37125480b133ee8229ccb1606879fbfa67_42_0	buggy:  context: public function stream_seek(int $offset, int $whence = \SEEK_SET): bool { if (!\is_resource($this->content) || 0 !== fseek($this->content, 0, \SEEK_END)) { return false; } $size = ftell($this->content); if (\SEEK_CUR === $whence) { $offset += $this->offset; }	type_info: offset:integer client:unknown context:array whence:unknown size:unknown  global_variable: client: unknown context: array function_name: createResource getResponse bindHandles stream_open stream_read stream_set_option stream_tell stream_eof stream_seek stream_cast stream_stat __construct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	symfony_symfony_f4d4da37125480b133ee8229ccb1606879fbfa67_42_0	buggy: $offset += $this->offset; context: public function stream_seek(int $offset, int $whence = \SEEK_SET): bool { if (!\is_resource($this->content) || 0 !== fseek($this->content, 0, \SEEK_END)) { return false; } $size = ftell($this->content); if (\SEEK_CUR === $whence) { $offset += $this->offset; $offset += $this->offset; } if (\SEEK_END === $whence || $size < $offset) { foreach ($this->client->stream([$this->response]) as $chunk) { try { if ($chunk->isFirst()) { $this->response->getStatusCode(); } $size += \strlen($chunk->getContent());	type_info: offset:integer client:unknown context:array whence:unknown size:unknown  global_variable: client: unknown context: array function_name: createResource getResponse bindHandles stream_open stream_read stream_set_option stream_tell stream_eof stream_seek stream_cast stream_stat __construct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	symfony_symfony_e8c8f4e896819b41ad1b3a16828dff613efa4e4e_43_0	buggy: if (preg_match('/^#\[.*'.$quotedMappingObjectName.'\b/m', $content)) { context: $type = 'attribute'; $glob = new GlobResource($directory, '*', true); $container->addResource($glob); $quotedMappingObjectName = preg_quote($this->getMappingObjectDefaultName(), '/'); foreach ($glob as $file) { $content = file_get_contents($file); if (preg_match('/^#\[.*'.$quotedMappingObjectName.'\b/m', $content)) { if (preg_match('/^#\[.*'.$quotedMappingObjectName.'\b/m', $content)) { break; } if (preg_match('/^ \* @.*'.$quotedMappingObjectName.'\b/m', $content)) { $type = 'annotation'; break; } } return $type;	type_info: type:string glob:unknown quotedMappingObjectName:unknown content:unknown  global_variable:  function_name: loadMappingInformation setMappingDriverAlias setMappingDriverConfig getMappingDriverBundleConfigDefaults registerMappingDrivers assertValidMappingConfiguration detectMetadataDriver detectMappingType loadObjectManagerCacheDriver loadCacheDriver fixManagersAutoMappings getObjectManagerElementName getMappingObjectDefaultName getMappingResourceConfigDirectory getMappingResourceExtension getMetadataDriverClass validateAutoMapping	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	symfony_symfony_e8c8f4e896819b41ad1b3a16828dff613efa4e4e_43_0	buggy: if (preg_match('/^ \* @.*'.$quotedMappingObjectName.'\b/m', $content)) { context: $container->addResource($glob); $quotedMappingObjectName = preg_quote($this->getMappingObjectDefaultName(), '/'); foreach ($glob as $file) { $content = file_get_contents($file); if (preg_match('/^#\[.*'.$quotedMappingObjectName.'\b/m', $content)) { break; } if (preg_match('/^ \* @.*'.$quotedMappingObjectName.'\b/m', $content)) { if (preg_match('/^ \* @.*'.$quotedMappingObjectName.'\b/m', $content)) { $type = 'annotation'; break; } } return $type; } protected function loadObjectManagerCacheDriver(array $objectManager, ContainerBuilder $container, string $cacheName)	type_info: type:string glob:unknown quotedMappingObjectName:unknown content:unknown  global_variable:  function_name: loadMappingInformation setMappingDriverAlias setMappingDriverConfig getMappingDriverBundleConfigDefaults registerMappingDrivers assertValidMappingConfiguration detectMetadataDriver detectMappingType loadObjectManagerCacheDriver loadCacheDriver fixManagersAutoMappings getObjectManagerElementName getMappingObjectDefaultName getMappingResourceConfigDirectory getMappingResourceExtension getMetadataDriverClass validateAutoMapping	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	symfony_symfony_11321713d932d0da1479796e1527152b825cf322_44_0	buggy: $getAccessor = preg_match('/^(get|)(.+)$/i', $method->name); if ($getAccessor && 0 !== $method->getNumberOfRequiredParameters()) { context: $loaded = true; } } } foreach ($reflectionClass->getMethods() as $method) { if ($method->getDeclaringClass()->name !== $className) { continue; } $getAccessor = preg_match('/^(get|)(.+)$/i', $method->name); if ($getAccessor && 0 !== $method->getNumberOfRequiredParameters()) { $getAccessor = preg_match('/^(get|)(.+)$/i', $method->name); if ($getAccessor && 0 !== $method->getNumberOfRequiredParameters()) { continue; } $accessorOrMutator = preg_match('/^(get|is|has|set)(.+)$/i', $method->name, $matches); if ($accessorOrMutator) { $attributeName = lcfirst($matches[2]); if (isset($attributesMetadata[$attributeName])) {	type_info: reader:unknown reflectionClass:unknown className:unknown loaded:boolean attributesMetadata:unknown getAccessor:unknown accessorOrMutator:unknown attributeName:unknown  global_variable: reader: unknown function_name: __construct loadClassMetadata loadAnnotations setAttributeContextsForGroups isKnownAttribute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	symfony_symfony_05e7de49a615b458546173b4a153435d6f1b1a67_45_0	buggy: return new \DateTimeImmutable('now', $this->timezone); context: public function now(): \DateTimeImmutable { return new \DateTimeImmutable('now', $this->timezone); return new \DateTimeImmutable('now', $this->timezone); }	type_info:  global_variable:  function_name: __construct now sleep withTimeZone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	symfony_symfony_c69057b7129f9a964f130c0e8e34e637dbb17b85_46_0	buggy: use Symfony\Component\HttpKernel\Event\ControllerEvent; context: <?php namespace Symfony\Component\HttpKernel\EventListener; use Symfony\Component\EventDispatcher\EventSubscriberInterface; use Symfony\Component\ExpressionLanguage\ExpressionLanguage; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpKernel\Attribute\Cache; use Symfony\Component\HttpKernel\Event\ControllerEvent; use Symfony\Component\HttpKernel\Event\ControllerEvent; use Symfony\Component\HttpKernel\Event\ResponseEvent; use Symfony\Component\HttpKernel\KernelEvents; class CacheAttributeListener implements EventSubscriberInterface { private \SplObjectStorage $lastModified; private \SplObjectStorage $etags;	type_info: lastModified:unknown  global_variable:  function_name: __construct onKernelController onKernelResponse getSubscribedEvents getExpressionLanguage toSeconds	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	symfony_symfony_c69057b7129f9a964f130c0e8e34e637dbb17b85_46_0	buggy: public function onKernelController(ControllerEvent $event) context: public function __construct( private ?ExpressionLanguage $expressionLanguage = null, ) { $this->lastModified = new \SplObjectStorage(); $this->etags = new \SplObjectStorage(); } public function onKernelController(ControllerEvent $event) public function onKernelController(ControllerEvent $event)	type_info: expressionLanguage:unknown  global_variable:  function_name: __construct onKernelController onKernelResponse getSubscribedEvents getExpressionLanguage toSeconds	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	symfony_symfony_c69057b7129f9a964f130c0e8e34e637dbb17b85_46_0	buggy: $lastModified = $this->getExpressionLanguage()->evaluate($cache->lastModified, $request->attributes->all()); context: return; } $request->attributes->set('_cache', $attributes); $response = null; $lastModified = null; $etag = null; foreach ($attributes as $cache) { if (null !== $cache->lastModified) { $lastModified = $this->getExpressionLanguage()->evaluate($cache->lastModified, $request->attributes->all()); $lastModified = $this->getExpressionLanguage()->evaluate($cache->lastModified, $request->attributes->all()); ($response ??= new Response())->setLastModified($lastModified); } if (null !== $cache->etag) { $etag = hash('sha256', $this->getExpressionLanguage()->evaluate($cache->etag, $request->attributes->all())); ($response ??= new Response())->setEtag($etag); } }	type_info: request:unknown attributes:unknown response:unknown lastModified:unknown etag:unknown  global_variable:  function_name: __construct onKernelController onKernelResponse getSubscribedEvents getExpressionLanguage toSeconds	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	symfony_symfony_c69057b7129f9a964f130c0e8e34e637dbb17b85_46_0	buggy: $etag = hash('sha256', $this->getExpressionLanguage()->evaluate($cache->etag, $request->attributes->all())); context: $lastModified = null; $etag = null; foreach ($attributes as $cache) { if (null !== $cache->lastModified) { $lastModified = $this->getExpressionLanguage()->evaluate($cache->lastModified, $request->attributes->all()); ($response ??= new Response())->setLastModified($lastModified); } if (null !== $cache->etag) { $etag = hash('sha256', $this->getExpressionLanguage()->evaluate($cache->etag, $request->attributes->all())); $etag = hash('sha256', $this->getExpressionLanguage()->evaluate($cache->etag, $request->attributes->all())); ($response ??= new Response())->setEtag($etag); } } if ($response?->isNotModified($request)) { $event->setController(static fn () => $response); $event->stopPropagation(); return;	type_info: request:unknown attributes:unknown response:unknown lastModified:unknown etag:unknown  global_variable:  function_name: __construct onKernelController onKernelResponse getSubscribedEvents getExpressionLanguage toSeconds	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	symfony_symfony_c69057b7129f9a964f130c0e8e34e637dbb17b85_46_0	buggy: KernelEvents::CONTROLLER => ['onKernelController', 10], context: public static function getSubscribedEvents(): array { return [ KernelEvents::CONTROLLER => ['onKernelController', 10], KernelEvents::CONTROLLER => ['onKernelController', 10], KernelEvents::RESPONSE => ['onKernelResponse', -10], ]; }	type_info:  global_variable:  function_name: __construct onKernelController onKernelResponse getSubscribedEvents getExpressionLanguage toSeconds	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	symfony_symfony_3a20334ca4a7225b86b45960eafbd9ef848b33af_47_0	buggy: $aliases = []; context: public function getGenerator() { if (null !== $this->generator) { return $this->generator; } if (null === $this->options['cache_dir']) { $routes = $this->getRouteCollection(); $aliases = []; $aliases = []; $compiled = is_a($this->options['generator_class'], CompiledUrlGenerator::class, true); if ($compiled) { $generatorDumper = new CompiledUrlGeneratorDumper($routes); $routes = $generatorDumper->getCompiledRoutes(); $aliases = $generatorDumper->getCompiledAliases(); } $this->generator = new $this->options['generator_class'](array_merge($routes, $aliases), $this->context, $this->logger, $this->defaultLocale); } else { $cache = $this->getConfigCacheFactory()->cache($this->options['cache_dir'].'/url_generating_routes.php', function (ConfigCacheInterface $cache) {	type_info: cache:array matcher:unknown routes:unknown compiled:unknown aliases:array generatorDumper:unknown  global_variable: matcher: unknown function_name: __construct setOptions setOption getOption getRouteCollection setContext getContext setConfigCacheFactory generate match matchRequest getMatcher getGenerator addExpressionLanguageProvider getGeneratorDumperInstance getMatcherDumperInstance getConfigCacheFactory getCompiledRoutes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	symfony_symfony_3a20334ca4a7225b86b45960eafbd9ef848b33af_47_0	buggy: $routes = $generatorDumper->getCompiledRoutes(); $aliases = $generatorDumper->getCompiledAliases(); context: if (null !== $this->generator) { return $this->generator; } if (null === $this->options['cache_dir']) { $routes = $this->getRouteCollection(); $aliases = []; $compiled = is_a($this->options['generator_class'], CompiledUrlGenerator::class, true); if ($compiled) { $generatorDumper = new CompiledUrlGeneratorDumper($routes); $routes = $generatorDumper->getCompiledRoutes(); $aliases = $generatorDumper->getCompiledAliases(); $routes = $generatorDumper->getCompiledRoutes(); $aliases = $generatorDumper->getCompiledAliases(); } $this->generator = new $this->options['generator_class'](array_merge($routes, $aliases), $this->context, $this->logger, $this->defaultLocale); } else { $cache = $this->getConfigCacheFactory()->cache($this->options['cache_dir'].'/url_generating_routes.php', function (ConfigCacheInterface $cache) { $dumper = $this->getGeneratorDumperInstance(); $cache->write($dumper->dump(), $this->getRouteCollection()->getResources());	type_info: cache:array matcher:unknown routes:unknown compiled:unknown aliases:array generatorDumper:unknown  global_variable: matcher: unknown function_name: __construct setOptions setOption getOption getRouteCollection setContext getContext setConfigCacheFactory generate match matchRequest getMatcher getGenerator addExpressionLanguageProvider getGeneratorDumperInstance getMatcherDumperInstance getConfigCacheFactory getCompiledRoutes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	symfony_symfony_3a20334ca4a7225b86b45960eafbd9ef848b33af_47_0	buggy: $this->generator = new $this->options['generator_class'](array_merge($routes, $aliases), $this->context, $this->logger, $this->defaultLocale); context: if (null === $this->options['cache_dir']) { $routes = $this->getRouteCollection(); $aliases = []; $compiled = is_a($this->options['generator_class'], CompiledUrlGenerator::class, true); if ($compiled) { $generatorDumper = new CompiledUrlGeneratorDumper($routes); $routes = $generatorDumper->getCompiledRoutes(); $aliases = $generatorDumper->getCompiledAliases(); } $this->generator = new $this->options['generator_class'](array_merge($routes, $aliases), $this->context, $this->logger, $this->defaultLocale); $this->generator = new $this->options['generator_class'](array_merge($routes, $aliases), $this->context, $this->logger, $this->defaultLocale); } else { $cache = $this->getConfigCacheFactory()->cache($this->options['cache_dir'].'/url_generating_routes.php', function (ConfigCacheInterface $cache) { $dumper = $this->getGeneratorDumperInstance(); $cache->write($dumper->dump(), $this->getRouteCollection()->getResources()); } );	type_info: cache:array matcher:unknown routes:unknown compiled:unknown aliases:array generatorDumper:unknown  global_variable: matcher: unknown function_name: __construct setOptions setOption getOption getRouteCollection setContext getContext setConfigCacheFactory generate match matchRequest getMatcher getGenerator addExpressionLanguageProvider getGeneratorDumperInstance getMatcherDumperInstance getConfigCacheFactory getCompiledRoutes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	symfony_symfony_75da8693e8c2c2eb289f1a6295674437ca44c2f4_48_0	"buggy: $placeholder = sprintf('%s_%s_%s', $this->getEnvPlaceholderUniquePrefix(), strtr($env, ':-.', '___'), $uniqueName); context: } } if (!preg_match('/^(?:[-.\w\\\\]*+:)*+\w++$/', $env)) { throw new InvalidArgumentException(sprintf('Invalid %s name: only ""word"" characters are allowed.', $name)); } if ($this->has($name) && null !== ($defaultValue = parent::get($name)) && !\is_string($defaultValue)) { throw new RuntimeException(sprintf('The default value of an env() parameter must be a string or null, but ""%s"" given to ""%s"".', get_debug_type($defaultValue), $name)); } $uniqueName = md5($name.'_'.self::$counter++); $placeholder = sprintf('%s_%s_%s', $this->getEnvPlaceholderUniquePrefix(), strtr($env, ':-.', '___'), $uniqueName); $placeholder = sprintf('%s_%s_%s', $this->getEnvPlaceholderUniquePrefix(), strtr($env, ':-.', '___'), $uniqueName); $this->envPlaceholders[$env][$placeholder] = $placeholder; return $placeholder; } return parent::get($name); } public function getEnvPlaceholderUniquePrefix(): string"	type_info: counter:integer env:unknown defaultValue:unknown uniqueName:unknown placeholder:unknown  global_variable:  function_name: get getEnvPlaceholderUniquePrefix getEnvPlaceholders getUnusedEnvPlaceholders clearUnusedEnvPlaceholders mergeEnvPlaceholders setProvidedTypes getProvidedTypes resolve	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	symfony_symfony_066ed61bceab414763f92598bcfb24920902b34f_49_0	buggy: $now = explode('.', $this->now->format('U.u')); if (0 < $s = (int) $seconds) { $now[0] += $s; } if (0 < ($us = $seconds - $s) && 1E6 <= $now[1] += $us * 1E6) { ++$now[0]; $now[1] -= 1E6; } $datetime = '@'.$now[0].'.'.str_pad($now[1], 6, '0', \STR_PAD_LEFT); context: public function sleep(float|int $seconds): void { $now = explode('.', $this->now->format('U.u')); if (0 < $s = (int) $seconds) { $now[0] += $s; } if (0 < ($us = $seconds - $s) && 1E6 <= $now[1] += $us * 1E6) { ++$now[0]; $now[1] -= 1E6; } $datetime = '@'.$now[0].'.'.str_pad($now[1], 6, '0', \STR_PAD_LEFT); $now = explode('.', $this->now->format('U.u')); if (0 < $s = (int) $seconds) { $now[0] += $s; } if (0 < ($us = $seconds - $s) && 1E6 <= $now[1] += $us * 1E6) { ++$now[0]; $now[1] -= 1E6; } $datetime = '@'.$now[0].'.'.str_pad($now[1], 6, '0', \STR_PAD_LEFT); $timezone = $this->now->getTimezone(); $this->now = (new \DateTimeImmutable($datetime, $timezone))->setTimezone($timezone); }	type_info: now:unknown s:unknown us:unknown datetime:unknown timezone:unknown  global_variable:  function_name: __construct now sleep withTimeZone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	symfony_symfony_066ed61bceab414763f92598bcfb24920902b34f_49_0	buggy: $this->now = (new \DateTimeImmutable($datetime, $timezone))->setTimezone($timezone); context: } if (0 < ($us = $seconds - $s) && 1E6 <= $now[1] += $us * 1E6) { ++$now[0]; $now[1] -= 1E6; } $datetime = '@'.$now[0].'.'.str_pad($now[1], 6, '0', \STR_PAD_LEFT); $timezone = $this->now->getTimezone(); $this->now = (new \DateTimeImmutable($datetime, $timezone))->setTimezone($timezone); $this->now = (new \DateTimeImmutable($datetime, $timezone))->setTimezone($timezone); } public function withTimeZone(\DateTimeZone|string $timezone): static { $clone = clone $this; $clone->now = $clone->now->setTimezone(\is_string($timezone) ? new \DateTimeZone($timezone) : $timezone); return $clone; }	type_info: now:unknown s:unknown us:unknown datetime:unknown timezone:unknown clone:unknown  global_variable:  function_name: __construct now sleep withTimeZone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	symfony_symfony_f454c02bcc7b119a6daa0e056c8cf62b6133a0c1_50_0	buggy: ksort($namespacedCommands); context: $namespacedCommands[$key][$name] = $command; } } if ($globalCommands) { ksort($globalCommands); $sortedCommands[self::GLOBAL_NAMESPACE] = $globalCommands; } if ($namespacedCommands) { ksort($namespacedCommands); ksort($namespacedCommands); foreach ($namespacedCommands as $key => $commandsSet) { ksort($commandsSet); $sortedCommands[$key] = $commandsSet; } } return $sortedCommands; } }	type_info: namespace:array name:unknown namespacedCommands:array globalCommands:array sortedCommands:array key:unknown  global_variable: namespace: array function_name: __construct getNamespaces getCommands getCommand inspectApplication sortCommands	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	symfony_symfony_4ed436787a3f12d88f30a3fbf438697c0d0c71ee_51_0	buggy: if (\is_array($options['body']) && !isset($options['normalized_headers']['content-type'])) { context: if (!isset($options['normalized_headers']['content-type'])) { $options['normalized_headers']['content-type'] = ['Content-Type: application/json']; } } if (!isset($options['normalized_headers']['accept'])) { $options['normalized_headers']['accept'] = ['Accept: */*']; } if (isset($options['body'])) { if (\is_array($options['body']) && !isset($options['normalized_headers']['content-type'])) { if (\is_array($options['body']) && !isset($options['normalized_headers']['content-type'])) { $options['normalized_headers']['content-type'] = ['Content-Type: application/x-www-form-urlencoded']; } $options['body'] = self::normalizeBody($options['body']); if (\is_string($options['body']) && (string) \strlen($options['body']) !== substr($h = $options['normalized_headers']['content-length'][0] ?? '', 16) && ('' !== $h || '' !== $options['body']) ) {	type_info: options:unknown h:unknown  global_variable:  function_name: withOptions prepareRequest mergeDefaultOptions normalizeHeaders normalizeBody dechunk normalizePeerFingerprint jsonEncode resolveUrl parseUrl removeDotSegments mergeQueryString getProxy shouldBuffer	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	symfony_symfony_69cf83ea1aed548176813b89cad5a73046c36895_52_0	"buggy: case -1: $minLevel = LogLevel::ERROR; break; case 1: $minLevel = LogLevel::NOTICE; break; case 2: $minLevel = LogLevel::INFO; break; case 3: $minLevel = LogLevel::DEBUG; break; context: public function __construct(string $minLevel = null, $output = null, callable $formatter = null) { if (null === $minLevel) { $minLevel = null === $output || 'php://stdout' === $output || 'php://stderr' === $output ? LogLevel::ERROR : LogLevel::WARNING; if (isset($_ENV['SHELL_VERBOSITY']) || isset($_SERVER['SHELL_VERBOSITY'])) { switch ((int) ($_ENV['SHELL_VERBOSITY'] ?? $_SERVER['SHELL_VERBOSITY'])) { case -1: $minLevel = LogLevel::ERROR; break; case 1: $minLevel = LogLevel::NOTICE; break; case 2: $minLevel = LogLevel::INFO; break; case 3: $minLevel = LogLevel::DEBUG; break; case -1: $minLevel = LogLevel::ERROR; break; case 1: $minLevel = LogLevel::NOTICE; break; case 2: $minLevel = LogLevel::INFO; break; case 3: $minLevel = LogLevel::DEBUG; break; } } } if (!isset(self::LEVELS[$minLevel])) { throw new InvalidArgumentException(sprintf('The log level ""%s"" does not exist.', $minLevel)); } $this->minLevelIndex = self::LEVELS[$minLevel]; $this->formatter = $formatter ?: [$this, 'format'];"	type_info: minLevel:unknown formatter:unknown  global_variable: formatter: unknown function_name: __construct log format	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	symfony_symfony_69cf83ea1aed548176813b89cad5a73046c36895_52_0	"buggy: @fwrite($this->handle, $formatter($level, $message, $context)); context: if (!isset(self::LEVELS[$level])) { throw new InvalidArgumentException(sprintf('The log level ""%s"" does not exist.', $level)); } if (self::LEVELS[$level] < $this->minLevelIndex) { return; } $formatter = $this->formatter; if ($this->handle) { @fwrite($this->handle, $formatter($level, $message, $context)); @fwrite($this->handle, $formatter($level, $message, $context)); } else { error_log($formatter($level, $message, $context, false)); } } private function format(string $level, string $message, array $context, bool $prefixDate = true): string { if (str_contains($message, '{')) { $replacements = [];"	type_info: context:unknown formatter:unknown prefixDate:array message:unknown  global_variable: formatter: unknown function_name: __construct log format	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	symfony_symfony_69cf83ea1aed548176813b89cad5a73046c36895_52_0	"buggy: if (null === $val || is_scalar($val) || (\is_object($val) && method_exists($val, '__toString'))) { context: private function format(string $level, string $message, array $context, bool $prefixDate = true): string { if (str_contains($message, '{')) { $replacements = []; foreach ($context as $key => $val) { if (null === $val || is_scalar($val) || (\is_object($val) && method_exists($val, '__toString'))) { if (null === $val || is_scalar($val) || (\is_object($val) && method_exists($val, '__toString'))) { $replacements[""{{$key}}""] = $val; } elseif ($val instanceof \DateTimeInterface) { $replacements[""{{$key}}""] = $val->format(\DateTime::RFC3339); } elseif (\is_object($val)) { $replacements[""{{$key}}""] = '[object '.\get_class($val).']'; } else { $replacements[""{{$key}}""] = '['.\gettype($val).']'; } }"	type_info: context:unknown formatter:unknown prefixDate:array key:unknown message:unknown  global_variable: formatter: unknown function_name: __construct log format	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	symfony_symfony_69cf83ea1aed548176813b89cad5a73046c36895_52_0	"buggy: $log = sprintf('[%s] %s', $level, $message).\PHP_EOL; context: } elseif (\is_object($val)) { $replacements[""{{$key}}""] = '[object '.\get_class($val).']'; } else { $replacements[""{{$key}}""] = '['.\gettype($val).']'; } } $message = strtr($message, $replacements); } $log = sprintf('[%s] %s', $level, $message).\PHP_EOL; $log = sprintf('[%s] %s', $level, $message).\PHP_EOL; if ($prefixDate) { $log = date(\DateTime::RFC3339).' '.$log; } return $log; } }"	type_info: formatter:unknown prefixDate:array key:unknown message:unknown log:unknown  global_variable: formatter: unknown function_name: __construct log format	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	symfony_symfony_e4d6e7b4ba0344b0ba5cdeaadc25bfef934f59c2_53_0	buggy: $response = $this->handleThrowable($exception, $request, self::MASTER_REQUEST); context: public function terminateWithException(\Throwable $exception, Request $request = null) { if (!$request = $request ?: $this->requestStack->getMasterRequest()) { throw $exception; } $response = $this->handleThrowable($exception, $request, self::MASTER_REQUEST); $response = $this->handleThrowable($exception, $request, self::MASTER_REQUEST); $response->sendHeaders(); $response->sendContent(); $this->terminate($request, $response); }	type_info: requestStack:unknown request:unknown response:unknown  global_variable: requestStack: unknown function_name: __construct handle terminate terminateWithException handleRaw filterResponse finishRequest handleThrowable varToString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	symfony_symfony_97fe54d64e5ad7836c69d5f8bcfad69922aaa92f_54_0	"buggy: if (!\array_key_exists($firewallName, $this->authenticators)) { context: private function getAuthenticator(?string $authenticatorName, string $firewallName): AuthenticatorInterface { if (!\array_key_exists($firewallName, $this->authenticators)) { if (!\array_key_exists($firewallName, $this->authenticators)) { throw new LogicException(sprintf('No authenticators found for firewall ""%s"".', $firewallName)); } $firewallAuthenticatorLocator = $this->authenticators[$firewallName]; if (!$authenticatorName) { $authenticatorIds = array_keys($firewallAuthenticatorLocator->getProvidedServices()); if (!$authenticatorIds) { throw new LogicException(sprintf('No authenticator was found for the firewall ""%s"".', $firewallName));"	type_info: authenticatorName:unknown firewallAuthenticatorLocator:unknown authenticatorIds:unknown  global_variable:  function_name: __construct getFirewallConfig login logout getAuthenticator	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	symfony_symfony_fa4c2861c1c546a7f93764914a5d4b3f90c01547_55_0	buggy: if (\is_object($objectOrArray) && false === strpbrk((string) $propertyPath, '.[')) { context: public function getValue(object|array $objectOrArray, string|PropertyPathInterface $propertyPath): mixed { $zval = [ self::VALUE => $objectOrArray, ]; if (\is_object($objectOrArray) && false === strpbrk((string) $propertyPath, '.[')) { if (\is_object($objectOrArray) && false === strpbrk((string) $propertyPath, '.[')) { return $this->readProperty($zval, $propertyPath, $this->ignoreInvalidProperty)[self::VALUE]; } $propertyPath = $this->getPropertyPath($propertyPath); $propertyValues = $this->readPropertiesUntil($zval, $propertyPath, $propertyPath->getLength(), $this->ignoreInvalidIndices); return $propertyValues[\count($propertyValues) - 1][self::VALUE]; }	type_info: zval:array propertyPath:unknown propertyValues:array ignoreInvalidIndices:unknown ignoreInvalidProperty:unknown  global_variable: ignoreInvalidIndices: unknown ignoreInvalidProperty: unknown function_name: __construct getValue setValue throwInvalidArgumentException isReadable isWritable readPropertiesUntil readIndex readProperty getReadInfo writeIndex writeProperty writeCollection getWriteInfo isPropertyWritable getPropertyPath createCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	symfony_symfony_db05d4cdba3ad961b1bd06b3c0a303c63626d9fe_56_0	"buggy:  context: { $options = $this->getOptions($argument); $name = $argument->getName(); $class = $options->class; $errorMessage = null; if (null !== $options->expr) { if (null === $object = $this->findViaExpression($class, $request, $options->expr, $options)) { $errorMessage = sprintf('The expression ""%s"" returned null', $options->expr); } } elseif (false === $object = $this->find($class, $request, $options, $name)) { if (false === $object = $this->findOneBy($class, $request, $options)) { if (!$argument->isNullable()) { throw new \LogicException(sprintf('Unable to guess how to get a Doctrine instance from the request information for parameter ""%s"".', $name)); } $object = null; } }"	type_info: options:unknown name:unknown class:unknown errorMessage:unknown object:unknown  global_variable:  function_name: __construct supports resolve getManager find getIdentifier findOneBy findViaExpression getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	symfony_symfony_db05d4cdba3ad961b1bd06b3c0a303c63626d9fe_56_0	buggy: return false; context: private function find(string $class, Request $request, MapEntity $options, string $name): false|object|null { if ($options->mapping || $options->exclude) { return false; } $id = $this->getIdentifier($request, $options, $name); if (false === $id || null === $id) { return false; return false; } $objectManager = $this->getManager($options->objectManager, $class); if ($options->evictCache && $objectManager instanceof EntityManagerInterface) { $cacheProvider = $objectManager->getCache(); if ($cacheProvider && $cacheProvider->containsEntity($class, $id)) { $cacheProvider->evictEntity($class, $id); } }	type_info: options:unknown objectManager:unknown name:unknown class:unknown id:array cacheProvider:unknown  global_variable:  function_name: __construct supports resolve getManager find getIdentifier findOneBy findViaExpression getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	symfony_symfony_b714b04ec3bedbe239db93fd4a314c7c09943c22_57_0	buggy: $time = gettimeofday(); $this->sOffset = $time['sec'] - $offset[0]; $this->usOffset = $time['usec'] - (int) ($offset[1] / 1000); context: public function __construct(\DateTimeZone|string $timezone = null) { if (false === $offset = hrtime()) { throw new \RuntimeException('hrtime() returned false: the runtime environment does not provide access to a monotonic timer.'); } $time = gettimeofday(); $this->sOffset = $time['sec'] - $offset[0]; $this->usOffset = $time['usec'] - (int) ($offset[1] / 1000); $time = gettimeofday(); $this->sOffset = $time['sec'] - $offset[0]; $this->usOffset = $time['usec'] - (int) ($offset[1] / 1000); if (\is_string($timezone ??= date_default_timezone_get())) { $this->timezone = new \DateTimeZone($timezone); } else { $this->timezone = $timezone; } } public function now(): \DateTimeImmutable {	type_info: timezone:unknown time:unknown  global_variable:  function_name: __construct now sleep withTimeZone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	symfony_symfony_e18c36ade33c5662040f881996e0c74cfdd4abf7_58_0	buggy: 'true' => 'bool', context: use ProxyManager\Proxy\ProxyInterface; use Symfony\Component\ErrorHandler\Internal\TentativeTypes; class DebugClassLoader { private const SPECIAL_RETURN_TYPES = [ 'void' => 'void', 'null' => 'null', 'resource' => 'resource', 'boolean' => 'bool', 'true' => 'bool', 'true' => 'bool', 'false' => 'false', 'integer' => 'int', 'array' => 'array', 'bool' => 'bool', 'callable' => 'callable', 'float' => 'float', 'int' => 'int', 'iterable' => 'iterable', 'object' => 'object',	type_info: caseCheck:integer  global_variable: caseCheck: integer function_name: __construct getClassLoader enable disable checkClasses findFile loadClass checkClass checkAnnotations checkCase darwinRealpath getOwnInterfaces setReturnType normalizeType patchReturnTypeWillChange patchMethod getUseStatements fixReturnStatements parsePhpDoc	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	symfony_symfony_e18c36ade33c5662040f881996e0c74cfdd4abf7_58_0	buggy:  context: 'iterable' => 'iterable', 'object' => 'object', 'string' => 'string', 'self' => 'self', 'parent' => 'parent', 'mixed' => 'mixed', 'static' => 'static', '$this' => 'static', 'list' => 'array', 'class-string' => 'string', ]; private const BUILTIN_RETURN_TYPES = [ 'void' => true, 'array' => true, 'false' => true, 'bool' => true, 'callable' => true, 'float' => true, 'int' => true,	type_info: caseCheck:integer  global_variable: caseCheck: integer function_name: __construct getClassLoader enable disable checkClasses findFile loadClass checkClass checkAnnotations checkCase darwinRealpath getOwnInterfaces setReturnType normalizeType patchReturnTypeWillChange patchMethod getUseStatements fixReturnStatements parsePhpDoc	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	symfony_symfony_e18c36ade33c5662040f881996e0c74cfdd4abf7_58_0	buggy:  context: 'callable' => true, 'float' => true, 'int' => true, 'iterable' => true, 'object' => true, 'string' => true, 'self' => true, 'parent' => true, 'mixed' => true, 'static' => true, ]; private const MAGIC_METHODS = [ '__isset' => 'bool', '__sleep' => 'array', '__toString' => 'string', '__debugInfo' => 'array', '__serialize' => 'array', ];	type_info: caseCheck:integer  global_variable: caseCheck: integer function_name: __construct getClassLoader enable disable checkClasses findFile loadClass checkClass checkAnnotations checkCase darwinRealpath getOwnInterfaces setReturnType normalizeType patchReturnTypeWillChange patchMethod getUseStatements fixReturnStatements parsePhpDoc	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	symfony_symfony_e18c36ade33c5662040f881996e0c74cfdd4abf7_58_0	buggy:  context: private function setReturnType(string $types, string $class, string $method, string $filename, ?string $parent, \ReflectionType $returnType = null): void { if ('__construct' === $method) { return; } if ($nullable = 0 === strpos($types, 'null|')) { $types = substr($types, 5); } elseif ($nullable = '|null' === substr($types, -5)) { $types = substr($types, 0, -5); } $arrayType = ['array' => 'array']; $typesMap = []; $glue = false !== strpos($types, '&') ? '&' : '|'; foreach (explode($glue, $types) as $t) { $t = self::SPECIAL_RETURN_TYPES[strtolower($t)] ?? $t;	type_info: method:array caseCheck:integer class:unknown parent:unknown returnType:string nullable:boolean arrayType:array typesMap:array glue:string t:unknown  global_variable: caseCheck: integer function_name: __construct getClassLoader enable disable checkClasses findFile loadClass checkClass checkAnnotations checkCase darwinRealpath getOwnInterfaces setReturnType normalizeType patchReturnTypeWillChange patchMethod getUseStatements fixReturnStatements parsePhpDoc	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	symfony_symfony_42ae9078bcf9106c9ada19d043467a37935a4f69_59_0	buggy: \RecursiveIteratorIterator::LEAVES_ONLY context: function (\SplFileInfo $current) { return !str_starts_with($current->getBasename(), '.'); } ), \RecursiveIteratorIterator::LEAVES_ONLY \RecursiveIteratorIterator::LEAVES_ONLY	type_info:  global_variable:  function_name: __construct load supports forDirectory loadFromDirectory	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	symfony_symfony_e35d6bab3e1a634ce0bd73a2c678d5510a8a76cd_60_0	buggy:  context: public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true) { $request->headers->set('X-Php-Ob-Level', (string) ob_get_level()); try { return $this->handleRaw($request, $type); } catch (\Exception $e) { if ($e instanceof RequestExceptionInterface) { $e = new BadRequestHttpException($e->getMessage(), $e); } if (false === $catch) { $this->finishRequest($request, $type); throw $e;	type_info: requestStack:unknown type:unknown e:unknown request:unknown  global_variable: requestStack: unknown function_name: __construct handle terminate terminateWithException handleRaw filterResponse finishRequest handleThrowable varToString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	symfony_symfony_e35d6bab3e1a634ce0bd73a2c678d5510a8a76cd_60_0	buggy:  context: if ($e instanceof RequestExceptionInterface) { $e = new BadRequestHttpException($e->getMessage(), $e); } if (false === $catch) { $this->finishRequest($request, $type); throw $e; } return $this->handleThrowable($e, $request, $type); } } public function terminate(Request $request, Response $response) { $this->dispatcher->dispatch(new TerminateEvent($this, $request, $response), KernelEvents::TERMINATE); } public function terminateWithException(\Throwable $exception, Request $request = null) {	type_info: requestStack:unknown type:unknown e:unknown request:unknown response:unknown  global_variable: requestStack: unknown function_name: __construct handle terminate terminateWithException handleRaw filterResponse finishRequest handleThrowable varToString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	symfony_symfony_e35d6bab3e1a634ce0bd73a2c678d5510a8a76cd_60_0	"buggy: $this->requestStack->push($request); context: private function handleRaw(Request $request, int $type = self::MASTER_REQUEST): Response { $this->requestStack->push($request); $this->requestStack->push($request); $event = new RequestEvent($this, $request, $type); $this->dispatcher->dispatch($event, KernelEvents::REQUEST); if ($event->hasResponse()) { return $this->filterResponse($event->getResponse(), $request, $type); } if (false === $controller = $this->resolver->getController($request)) { throw new NotFoundHttpException(sprintf('Unable to find the controller for path ""%s"". The route is wrongly configured.', $request->getPathInfo())); }"	type_info: requestStack:unknown type:unknown request:unknown event:unknown controller:unknown  global_variable: requestStack: unknown function_name: __construct handle terminate terminateWithException handleRaw filterResponse finishRequest handleThrowable varToString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	symfony_symfony_e35d6bab3e1a634ce0bd73a2c678d5510a8a76cd_60_0	buggy: $this->requestStack->pop(); context: private function finishRequest(Request $request, int $type) { $this->dispatcher->dispatch(new FinishRequestEvent($this, $request, $type), KernelEvents::FINISH_REQUEST); $this->requestStack->pop(); $this->requestStack->pop(); }	type_info: requestStack:unknown type:unknown request:unknown  global_variable: requestStack: unknown function_name: __construct handle terminate terminateWithException handleRaw filterResponse finishRequest handleThrowable varToString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	symfony_symfony_8cb094c8c20e4fbd614158ff179202ddff098f03_61_0	buggy:  context: public function bodyToIterable(): iterable { return $this->message->toIterable(); } }	type_info:  global_variable:  function_name: __construct getMediaType getMediaSubtype getBody bodyToString bodyToIterable	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	symfony_symfony_81a4e9d60d51fec444129444f2407ad2edc5ce1f_62_0	"buggy: if (null === $context || !str_contains($message, '{')) { context: public function dumpLog(Environment $env, string $message, Data $context = null) { $message = twig_escape_filter($env, $message); $message = preg_replace('/&quot;(.*?)&quot;/', '&quot;<b>$1</b>&quot;', $message); if (null === $context || !str_contains($message, '{')) { if (null === $context || !str_contains($message, '{')) { return '<span class=""dump-inline"">'.$message.'</span>'; } $replacements = []; foreach ($context as $k => $v) { $k = '{'.twig_escape_filter($env, $k).'}'; $replacements['&quot;<b>'.$k.'</b>&quot;'] = $replacements['&quot;'.$k.'&quot;'] = $replacements[$k] = $this->dumpData($env, $v); } return '<span class=""dump-inline"">'.strtr($message, $replacements).'</span>';"	type_info: dumper:unknown context:unknown message:unknown replacements:array k:unknown  global_variable: dumper: unknown function_name: __construct enter leave getFunctions dumpData dumpLog getName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	symfony_symfony_81a4e9d60d51fec444129444f2407ad2edc5ce1f_62_0	"buggy: $replacements = []; foreach ($context as $k => $v) { $k = '{'.twig_escape_filter($env, $k).'}'; context: public function dumpLog(Environment $env, string $message, Data $context = null) { $message = twig_escape_filter($env, $message); $message = preg_replace('/&quot;(.*?)&quot;/', '&quot;<b>$1</b>&quot;', $message); if (null === $context || !str_contains($message, '{')) { return '<span class=""dump-inline"">'.$message.'</span>'; } $replacements = []; foreach ($context as $k => $v) { $k = '{'.twig_escape_filter($env, $k).'}'; $replacements = []; foreach ($context as $k => $v) { $k = '{'.twig_escape_filter($env, $k).'}'; $replacements['&quot;<b>'.$k.'</b>&quot;'] = $replacements['&quot;'.$k.'&quot;'] = $replacements[$k] = $this->dumpData($env, $v); } return '<span class=""dump-inline"">'.strtr($message, $replacements).'</span>'; }"	type_info: dumper:unknown context:unknown message:unknown replacements:array k:unknown  global_variable: dumper: unknown function_name: __construct enter leave getFunctions dumpData dumpLog getName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	symfony_symfony_b9337f17687e17eb34d6d000881c05bfa7f1a895_63_0	"buggy: if ('' === $tagName = $tag->hasChildNodes() || '' === $tag->nodeValue ? $tag->getAttribute('name') : $tag->nodeValue) { context: foreach ($this->getChildren($service, 'call') as $call) { $definition->addMethodCall($call->getAttribute('method'), $this->getArgumentsAsPhp($call, 'argument', $file), XmlUtils::phpize($call->getAttribute('returns-clone'))); } $tags = $this->getChildren($service, 'tag'); foreach ($tags as $tag) { if ('' === $tagName = $tag->hasChildNodes() || '' === $tag->nodeValue ? $tag->getAttribute('name') : $tag->nodeValue) { if ('' === $tagName = $tag->hasChildNodes() || '' === $tag->nodeValue ? $tag->getAttribute('name') : $tag->nodeValue) { throw new InvalidArgumentException(sprintf('The tag name for service ""%s"" in ""%s"" must be a non-empty string.', (string) $service->getAttribute('id'), $file)); } $parameters = $this->getTagAttributes($tag, sprintf('The attribute name of tag ""%s"" for service ""%s"" in %s must be a non-empty string.', $tagName, (string) $service->getAttribute('id'), $file)); foreach ($tag->attributes as $name => $node) { if ('name' === $name) {"	type_info: definition:unknown tags:unknown tagName:unknown parameters:array name:unknown  global_variable:  function_name: load loadXml supports parseParameters parseImports parseDefinitions getServiceDefaults parseDefinition parseFileToDOM processAnonymousServices getArgumentsAsPhp getChildren getTagAttributes validateSchema shouldEnableEntityLoader validateAlias validateExtensions loadFromExtensions convertDomElementToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	symfony_symfony_3cf4401aa68195ba91956cf014b4b00fe56c68db_64_0	"buggy: $cookies[] = $k.'='.$v; context: public function __toString() { $content = $this->getContent(); $cookieHeader = ''; $cookies = []; foreach ($this->cookies as $k => $v) { $cookies[] = $k.'='.$v; $cookies[] = $k.'='.$v; } if (!empty($cookies)) { $cookieHeader = 'Cookie: '.implode('; ', $cookies).""\r\n""; } return sprintf('%s %s %s', $this->getMethod(), $this->getRequestUri(), $this->server->get('SERVER_PROTOCOL')).""\r\n"". $this->headers. $cookieHeader.""\r\n""."	type_info: query:array request:array method:unknown requestFactory:unknown content:unknown cookieHeader:string cookies:array k:unknown session:unknown format:unknown languages:unknown requestUri:string baseUrl:string basePath:unknown pathInfo:unknown formats:array v:unknown  global_variable: query: array request: array method: unknown requestFactory: unknown content: unknown cookies: array session: unknown format: unknown languages: unknown requestUri: string baseUrl: string basePath: unknown pathInfo: unknown formats: array function_name: __construct initialize createFromGlobals create setFactory duplicate __clone __toString overrideGlobals setTrustedProxies getTrustedProxies getTrustedHeaderSet setTrustedHosts getTrustedHosts normalizeQueryString enableHttpMethodParameterOverride getHttpMethodParameterOverride get getSession hasPreviousSession hasSession setSession setSessionFactory getClientIps getClientIp getScriptName getPathInfo getBasePath getBaseUrl getBaseUrlReal getScheme getPort getUser getPassword getUserInfo getHttpHost getRequestUri getSchemeAndHttpHost getUri getUriForPath getRelativeUriForPath getQueryString isSecure getHost setMethod getMethod getRealMethod getMimeType getMimeTypes getFormat setFormat getRequestFormat setRequestFormat getContentType setDefaultLocale getDefaultLocale setLocale getLocale isMethod isMethodSafe isMethodIdempotent isMethodCacheable getProtocolVersion getContent toArray getETags isNoCache getPreferredFormat getPreferredLanguage getLanguages getCharsets getEncodings getAcceptableContentTypes isXmlHttpRequest preferSafeContent prepareRequestUri prepareBaseUrl prepareBasePath preparePathInfo initializeFormats setPhpDefaultLocale getUrlencodedPrefix createRequestFromFactory isFromTrustedProxy getTrustedValues normalizeAndFilterClientIps	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	symfony_symfony_3cf4401aa68195ba91956cf014b4b00fe56c68db_64_0	"buggy: if (!empty($cookies)) { context: { $content = $this->getContent(); $cookieHeader = ''; $cookies = []; foreach ($this->cookies as $k => $v) { $cookies[] = $k.'='.$v; } if (!empty($cookies)) { if (!empty($cookies)) { $cookieHeader = 'Cookie: '.implode('; ', $cookies).""\r\n""; } return sprintf('%s %s %s', $this->getMethod(), $this->getRequestUri(), $this->server->get('SERVER_PROTOCOL')).""\r\n"". $this->headers. $cookieHeader.""\r\n"". $content; }"	type_info: query:array request:array method:unknown requestFactory:unknown content:unknown cookieHeader:string cookies:array k:unknown session:unknown format:unknown languages:unknown requestUri:string baseUrl:string basePath:unknown pathInfo:unknown formats:array v:unknown  global_variable: query: array request: array method: unknown requestFactory: unknown content: unknown cookies: array session: unknown format: unknown languages: unknown requestUri: string baseUrl: string basePath: unknown pathInfo: unknown formats: array function_name: __construct initialize createFromGlobals create setFactory duplicate __clone __toString overrideGlobals setTrustedProxies getTrustedProxies getTrustedHeaderSet setTrustedHosts getTrustedHosts normalizeQueryString enableHttpMethodParameterOverride getHttpMethodParameterOverride get getSession hasPreviousSession hasSession setSession setSessionFactory getClientIps getClientIp getScriptName getPathInfo getBasePath getBaseUrl getBaseUrlReal getScheme getPort getUser getPassword getUserInfo getHttpHost getRequestUri getSchemeAndHttpHost getUri getUriForPath getRelativeUriForPath getQueryString isSecure getHost setMethod getMethod getRealMethod getMimeType getMimeTypes getFormat setFormat getRequestFormat setRequestFormat getContentType setDefaultLocale getDefaultLocale setLocale getLocale isMethod isMethodSafe isMethodIdempotent isMethodCacheable getProtocolVersion getContent toArray getETags isNoCache getPreferredFormat getPreferredLanguage getLanguages getCharsets getEncodings getAcceptableContentTypes isXmlHttpRequest preferSafeContent prepareRequestUri prepareBaseUrl prepareBasePath preparePathInfo initializeFormats setPhpDefaultLocale getUrlencodedPrefix createRequestFromFactory isFromTrustedProxy getTrustedValues normalizeAndFilterClientIps	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	symfony_symfony_2876cf9cc6af8667611980d2796e5f0705bba3b9_65_0	buggy: $parsedEnv['path'] = '/' === $parsedEnv['path'] ? null : substr($parsedEnv['path'], 1); context: } $parsedEnv += [ 'port' => null, 'user' => null, 'pass' => null, 'path' => null, 'query' => null, 'fragment' => null, ]; $parsedEnv['path'] = '/' === $parsedEnv['path'] ? null : substr($parsedEnv['path'], 1); $parsedEnv['path'] = '/' === $parsedEnv['path'] ? null : substr($parsedEnv['path'], 1); return $parsedEnv; } if ('query_string' === $prefix) { $queryString = parse_url($env, \PHP_URL_QUERY) ?: $env; parse_str($queryString, $result); return $result;	type_info: loaders:unknown env:unknown parsedEnv:unknown queryString:unknown  global_variable: loaders: unknown function_name: __construct getProvidedTypes getEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	symfony_symfony_b2d7454042c5fbd66d2f2a88193ca7a4fe901219_66_0	buggy: return \in_array($name, self::UNIQUE_HEADERS, true); context: public static function isUniqueHeader(string $name): bool { return \in_array($name, self::UNIQUE_HEADERS, true); return \in_array($name, self::UNIQUE_HEADERS, true); }	type_info: name:unknown  global_variable:  function_name: __construct __clone setMaxLineLength getMaxLineLength addMailboxListHeader addMailboxHeader addIdHeader addPathHeader addDateHeader addTextHeader addParameterizedHeader has add get all getNames remove isUniqueHeader toString toArray getHeaderBody setHeaderBody getHeaderParameter setHeaderParameter	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	symfony_symfony_f2516840c8a16cb3ddd6527615acf588ac250847_67_0	"buggy: $builder->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) use (&$unknownValues) { context: if (\count($unknownValues) > 0 && !$options['multiple']) { throw new TransformationFailedException(sprintf('The choices ""%s"" do not exist in the choice list.', implode('"", ""', array_keys($unknownValues)))); } $event->setData($knownValues); }); } if ($options['multiple']) { $builder->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) use (&$unknownValues) { $builder->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) use (&$unknownValues) { if (\count($unknownValues) > 0) { $form = $event->getForm(); $clientDataAsString = is_scalar($form->getViewData()) ? (string) $form->getViewData() : \gettype($form->getViewData()); $messageTemplate = 'The value {{ value }} is not valid.'; if (null !== $this->translator) { $message = $this->translator->trans($messageTemplate, ['{{ value }}' => $clientDataAsString], 'validators'); } else {"	type_info: choiceListFactory:unknown unknownValues:array form:unknown knownValues:array clientDataAsString:unknown messageTemplate:string message:unknown  global_variable: choiceListFactory: unknown function_name: __construct buildForm buildView finishView configureOptions getBlockPrefix addSubForms addSubForm createChoiceList createChoiceListView	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	symfony_symfony_f2516840c8a16cb3ddd6527615acf588ac250847_67_0	"buggy: $clientDataAsString = is_scalar($form->getViewData()) ? (string) $form->getViewData() : \gettype($form->getViewData()); $messageTemplate = 'The value {{ value }} is not valid.'; context: $builder->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) use (&$unknownValues) { if (\count($unknownValues) > 0) { $form = $event->getForm(); $clientDataAsString = is_scalar($form->getViewData()) ? (string) $form->getViewData() : \gettype($form->getViewData()); $messageTemplate = 'The value {{ value }} is not valid.'; $clientDataAsString = is_scalar($form->getViewData()) ? (string) $form->getViewData() : \gettype($form->getViewData()); $messageTemplate = 'The value {{ value }} is not valid.'; if (null !== $this->translator) { $message = $this->translator->trans($messageTemplate, ['{{ value }}' => $clientDataAsString], 'validators'); } else { $message = strtr($messageTemplate, ['{{ value }}' => $clientDataAsString]); } $form->addError(new FormError($message, $messageTemplate, ['{{ value }}' => $clientDataAsString], null, new TransformationFailedException(sprintf('The choices ""%s"" do not exist in the choice list.', implode('"", ""', array_keys($unknownValues)))))); } });"	type_info: choiceListFactory:unknown unknownValues:array form:unknown clientDataAsString:unknown messageTemplate:string message:unknown  global_variable: choiceListFactory: unknown function_name: __construct buildForm buildView finishView configureOptions getBlockPrefix addSubForms addSubForm createChoiceList createChoiceListView	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	symfony_symfony_f2516840c8a16cb3ddd6527615acf588ac250847_67_0	"buggy: $form->addError(new FormError($message, $messageTemplate, ['{{ value }}' => $clientDataAsString], null, new TransformationFailedException(sprintf('The choices ""%s"" do not exist in the choice list.', implode('"", ""', array_keys($unknownValues)))))); context: if (null !== $this->translator) { $message = $this->translator->trans($messageTemplate, ['{{ value }}' => $clientDataAsString], 'validators'); } else { $message = strtr($messageTemplate, ['{{ value }}' => $clientDataAsString]); } $form->addError(new FormError($message, $messageTemplate, ['{{ value }}' => $clientDataAsString], null, new TransformationFailedException(sprintf('The choices ""%s"" do not exist in the choice list.', implode('"", ""', array_keys($unknownValues)))))); $form->addError(new FormError($message, $messageTemplate, ['{{ value }}' => $clientDataAsString], null, new TransformationFailedException(sprintf('The choices ""%s"" do not exist in the choice list.', implode('"", ""', array_keys($unknownValues)))))); } }); $builder->addViewTransformer(new ChoicesToValuesTransformer($choiceList)); } else { $builder->addViewTransformer(new ChoiceToValueTransformer($choiceList));"	type_info: choiceListFactory:unknown unknownValues:array choiceList:unknown form:unknown clientDataAsString:unknown messageTemplate:string message:unknown  global_variable: choiceListFactory: unknown function_name: __construct buildForm buildView finishView configureOptions getBlockPrefix addSubForms addSubForm createChoiceList createChoiceListView	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	symfony_symfony_31b0472331c4e87fff70628fbcef96f2d99a4c3f_68_0	buggy: if (!isset($values['value']) || '' == trim($values['value'], ' ') || 0 === strpos(ltrim($values['value'], ' '), '#')) { context: $values['value'] = $matches['value']; } if (isset($values['value'][1]) && '?' === $values['value'][0] && ' ' === $values['value'][1]) { throw new ParseException('Complex mappings are not supported.', $this->getRealCurrentLineNb() + 1, $this->currentLine); } if (!isset($values['value']) || '' == trim($values['value'], ' ') || 0 === strpos(ltrim($values['value'], ' '), '#')) { if (!isset($values['value']) || '' == trim($values['value'], ' ') || 0 === strpos(ltrim($values['value'], ' '), '#')) { $data[] = $this->parseBlock($this->getRealCurrentLineNb() + 1, $this->getNextEmbedBlock(null, true) ?? '', $flags); } elseif (null !== $subTag = $this->getLineTag(ltrim($values['value'], ' '), $flags)) { $data[] = new TaggedValue( $subTag, $this->parseBlock($this->getRealCurrentLineNb() + 1, $this->getNextEmbedBlock(null, true), $flags) );	type_info: flags:unknown data:array subTag:unknown matches:unknown  global_variable:  function_name: parseFile parse doParse parseBlock getRealCurrentLineNb getCurrentLineIndentation getNextEmbedBlock hasMoreLines moveToNextLine moveToPreviousLine parseValue parseBlockScalar isNextLineIndented isCurrentLineEmpty isCurrentLineBlank isCurrentLineComment isCurrentLineLastLineInDocument cleanup isNextLineUnIndentedCollection isStringUnIndentedCollectionItem preg_match trimTag getLineTag lexInlineQuotedString lexUnquotedString lexInlineMapping lexInlineSequence lexInlineStructure consumeWhitespaces	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	symfony_symfony_31b0472331c4e87fff70628fbcef96f2d99a4c3f_68_0	buggy:  context: $unindentedEmbedBlock = $this->isStringUnIndentedCollectionItem(); if (!$this->isCurrentLineEmpty() && 0 === $newIndent && !$unindentedEmbedBlock) { throw new ParseException('Indentation problem.', $this->getRealCurrentLineNb() + 1, $this->currentLine, $this->filename); } } else { $newIndent = $indentation; } $data = []; if ($this->getCurrentLineIndentation() >= $newIndent) { $data[] = substr($this->currentLine, $newIndent); } elseif ($this->isCurrentLineEmpty() || $this->isCurrentLineComment()) { $data[] = $this->currentLine; } else { $this->moveToPreviousLine(); return ''; }	type_info: data:array indentation:unknown newIndent:unknown unindentedEmbedBlock:unknown  global_variable:  function_name: parseFile parse doParse parseBlock getRealCurrentLineNb getCurrentLineIndentation getNextEmbedBlock hasMoreLines moveToNextLine moveToPreviousLine parseValue parseBlockScalar isNextLineIndented isCurrentLineEmpty isCurrentLineBlank isCurrentLineComment isCurrentLineLastLineInDocument cleanup isNextLineUnIndentedCollection isStringUnIndentedCollectionItem preg_match trimTag getLineTag lexInlineQuotedString lexUnquotedString lexInlineMapping lexInlineSequence lexInlineStructure consumeWhitespaces	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	symfony_symfony_ac94746dc7fa3a3781d355fb116cfb57fadcb157_69_0	"buggy: if (false !== strpos($message, ""@anonymous\0"")) { $logMessage = $this->parseAnonymousClass($message); } else { $logMessage = $this->levels[$type].': '.$message; } context: $type &= $level | $this->screamedErrors; if (\E_WARNING === $type && 'a' === $message[0] && 0 === strncmp($message, 'assert(): ', 10)) { $throw = 0; } if (!$type || (!$log && !$throw)) { return false; } if (false !== strpos($message, ""@anonymous\0"")) { $logMessage = $this->parseAnonymousClass($message); } else { $logMessage = $this->levels[$type].': '.$message; } if (false !== strpos($message, ""@anonymous\0"")) { $logMessage = $this->parseAnonymousClass($message); } else { $logMessage = $this->levels[$type].': '.$message; } if (null !== self::$toStringException) { $errorAsException = self::$toStringException; self::$toStringException = null; } elseif (!$throw && !($type & $level)) {"	type_info: bootstrappingLogger:unknown type:unknown log:array level:unknown throw:integer logMessage:unknown errorAsException:unknown toStringException:unknown message:unknown exceptionHandler:unknown  global_variable: bootstrappingLogger: unknown toStringException: unknown exceptionHandler: unknown function_name: register call __construct setDefaultLogger setLoggers setExceptionHandler throwAt scopeAt traceAt screamAt reRegister handleError handleException handleFatalError renderException getErrorEnhancers cleanTrace parseAnonymousClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	symfony_symfony_ac94746dc7fa3a3781d355fb116cfb57fadcb157_69_0	buggy:  context: self::$silencedErrorCache = $lightTrace = []; self::$silencedErrorCount = 1; } if ($errorAsException) { self::$silencedErrorCache[$id][$message] = $errorAsException; } if (null === $lightTrace) { return true; } } else { $errorAsException = new \ErrorException($logMessage, 0, $type, $file, $line); if ($throw || $this->tracedErrors & $type) { $backtrace = $errorAsException->getTrace(); $lightTrace = $this->cleanTrace($backtrace, $type, $file, $line, $throw); $this->traceReflector->setValue($errorAsException, $lightTrace); } else { $this->traceReflector->setValue($errorAsException, []); $backtrace = []; }	type_info: silencedErrorCache:array silencedErrorCount:integer file:unknown line:unknown bootstrappingLogger:unknown type:unknown throw:integer logMessage:unknown errorAsException:unknown toStringException:unknown id:array lightTrace:array backtrace:array message:unknown exceptionHandler:unknown  global_variable: bootstrappingLogger: unknown toStringException: unknown exceptionHandler: unknown function_name: register call __construct setDefaultLogger setLoggers setExceptionHandler throwAt scopeAt traceAt screamAt reRegister handleError handleException handleFatalError renderException getErrorEnhancers cleanTrace parseAnonymousClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	symfony_symfony_216abd0307e8c04fc2a1d4e1ab68afca0376bace_70_0	buggy: $delay = $this->getDelayFromHeader($context->getHeaders()) ?? $this->strategy->getDelay($context, $chunk->isLast() ? $content : null, $exception); context: yield $firstChunk; yield $context->createChunk($content); $content = ''; return; } } $context->getResponse()->cancel(); $delay = $this->getDelayFromHeader($context->getHeaders()) ?? $this->strategy->getDelay($context, $chunk->isLast() ? $content : null, $exception); $delay = $this->getDelayFromHeader($context->getHeaders()) ?? $this->strategy->getDelay($context, $chunk->isLast() ? $content : null, $exception); ++$retryCount; $this->logger->info('Try #{count} after {delay}ms'.($exception ? ': '.$exception->getMessage() : ', status code: '.$context->getStatusCode()), [ 'count' => $retryCount, 'delay' => $delay, ]); $context->setInfo('retry_count', $retryCount); $context->replaceRequest($method, $url, $options);	type_info: strategy:unknown options:unknown retryCount:integer content:string firstChunk:unknown exception:unknown delay:unknown  global_variable: strategy: unknown function_name: __construct request getDelayFromHeader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	symfony_symfony_7ad1c44cf4a55ee716f60ed6c291731d851b30bf_71_0	buggy: use Symfony\Component\Routing\RequestContext; context: <?php namespace Symfony\Component\Messenger\Middleware; use Symfony\Component\Messenger\Envelope; use Symfony\Component\Messenger\Stamp\ConsumedByWorkerStamp; use Symfony\Component\Messenger\Stamp\RouterContextStamp; use Symfony\Component\Routing\RequestContext; use Symfony\Component\Routing\RequestContext; use Symfony\Component\Routing\RequestContextAwareInterface; class RouterContextMiddleware implements MiddlewareInterface { private $router; public function __construct(RequestContextAwareInterface $router)	type_info:  global_variable:  function_name: __construct handle	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	symfony_symfony_7ad1c44cf4a55ee716f60ed6c291731d851b30bf_71_0	buggy: $currentContext = $this->router->getContext(); context: $context->getScheme(), $context->getHttpPort(), $context->getHttpsPort(), $context->getPathInfo(), $context->getQueryString() )); return $stack->next()->handle($envelope, $stack); } $currentContext = $this->router->getContext(); $currentContext = $this->router->getContext(); $this->router->setContext(new RequestContext( $contextStamp->getBaseUrl(), $contextStamp->getMethod(), $contextStamp->getHost(), $contextStamp->getScheme(), $contextStamp->getHttpPort(), $contextStamp->getHttpsPort(), $contextStamp->getPathInfo(),	type_info: contextStamp:unknown envelope:unknown currentContext:unknown  global_variable:  function_name: __construct handle	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	symfony_symfony_7ad1c44cf4a55ee716f60ed6c291731d851b30bf_71_0	buggy: $this->router->setContext(new RequestContext( $contextStamp->getBaseUrl(), $contextStamp->getMethod(), $contextStamp->getHost(), $contextStamp->getScheme(), $contextStamp->getHttpPort(), $contextStamp->getHttpsPort(), $contextStamp->getPathInfo(), $contextStamp->getQueryString() )); context: $context->getHttpsPort(), $context->getPathInfo(), $context->getQueryString() )); return $stack->next()->handle($envelope, $stack); } $currentContext = $this->router->getContext(); $this->router->setContext(new RequestContext( $contextStamp->getBaseUrl(), $contextStamp->getMethod(), $contextStamp->getHost(), $contextStamp->getScheme(), $contextStamp->getHttpPort(), $contextStamp->getHttpsPort(), $contextStamp->getPathInfo(), $contextStamp->getQueryString() )); $this->router->setContext(new RequestContext( $contextStamp->getBaseUrl(), $contextStamp->getMethod(), $contextStamp->getHost(), $contextStamp->getScheme(), $contextStamp->getHttpPort(), $contextStamp->getHttpsPort(), $contextStamp->getPathInfo(), $contextStamp->getQueryString() ));	type_info: contextStamp:unknown envelope:unknown currentContext:unknown  global_variable:  function_name: __construct handle	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	symfony_symfony_7ad1c44cf4a55ee716f60ed6c291731d851b30bf_71_0	buggy: $this->router->setContext($currentContext); context: $contextStamp->getScheme(), $contextStamp->getHttpPort(), $contextStamp->getHttpsPort(), $contextStamp->getPathInfo(), $contextStamp->getQueryString() )); try { return $stack->next()->handle($envelope, $stack); } finally { $this->router->setContext($currentContext); $this->router->setContext($currentContext); } } }	type_info: contextStamp:unknown envelope:unknown currentContext:unknown  global_variable:  function_name: __construct handle	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	symfony_symfony_6867475447b3959617c0f8a5bd9a9bd3801d445d_72_0	buggy: $resource = new ComposerResource(); $this->vendors = $resource->getVendors(); $this->addResource($resource); context: private function inVendors(string $path): bool { if (null === $this->vendors) { $resource = new ComposerResource(); $this->vendors = $resource->getVendors(); $this->addResource($resource); $resource = new ComposerResource(); $this->vendors = $resource->getVendors(); $this->addResource($resource); } $path = realpath($path) ?: $path; foreach ($this->vendors as $vendor) { if (0 === strpos($path, $vendor) && false !== strpbrk(substr($path, \strlen($vendor), 1), '/'.\DIRECTORY_SEPARATOR)) { return true; } } return false;	type_info: resource:unknown path:unknown  global_variable:  function_name: __construct setResourceTracking isTrackingResources setProxyInstantiator registerExtension getExtension getExtensions hasExtension getResources addResource setResources addObjectResource getReflectionClass fileExists loadFromExtension addCompilerPass getCompilerPassConfig getCompiler set removeDefinition has get doGet merge getExtensionConfig prependExtensionConfig compile getServiceIds getRemovedIds addAliases setAliases setAlias removeAlias hasAlias getAliases getAlias register autowire addDefinitions setDefinitions getDefinitions setDefinition hasDefinition getDefinition findDefinition createService resolveServices doResolveServices findTaggedServiceIds findTags findUnusedTags addExpressionLanguageProvider getExpressionLanguageProviders registerForAutoconfiguration registerAliasForArgument getAutoconfiguredInstanceof resolveEnvPlaceholders getEnvCounters log getRemovedBindingIds removeBindings getServiceConditionals getInitializedConditionals hash getEnv callMethod shareService getExpressionLanguage inVendors	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	symfony_symfony_6867475447b3959617c0f8a5bd9a9bd3801d445d_72_0	buggy:  context: { if (null === $this->vendors) { $resource = new ComposerResource(); $this->vendors = $resource->getVendors(); $this->addResource($resource); } $path = realpath($path) ?: $path; foreach ($this->vendors as $vendor) { if (0 === strpos($path, $vendor) && false !== strpbrk(substr($path, \strlen($vendor), 1), '/'.\DIRECTORY_SEPARATOR)) { return true; } } return false; } }	type_info: resource:unknown path:unknown  global_variable:  function_name: __construct setResourceTracking isTrackingResources setProxyInstantiator registerExtension getExtension getExtensions hasExtension getResources addResource setResources addObjectResource getReflectionClass fileExists loadFromExtension addCompilerPass getCompilerPassConfig getCompiler set removeDefinition has get doGet merge getExtensionConfig prependExtensionConfig compile getServiceIds getRemovedIds addAliases setAliases setAlias removeAlias hasAlias getAliases getAlias register autowire addDefinitions setDefinitions getDefinitions setDefinition hasDefinition getDefinition findDefinition createService resolveServices doResolveServices findTaggedServiceIds findTags findUnusedTags addExpressionLanguageProvider getExpressionLanguageProviders registerForAutoconfiguration registerAliasForArgument getAutoconfiguredInstanceof resolveEnvPlaceholders getEnvCounters log getRemovedBindingIds removeBindings getServiceConditionals getInitializedConditionals hash getEnv callMethod shareService getExpressionLanguage inVendors	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	symfony_symfony_af6db0cfafe133383fa360c47a58c2ed207fac43_73_0	"buggy: if (\is_bool($resolved)) { $resolved = (string) (int) $resolved; } if (\is_string($resolved) || is_numeric($resolved)) { context: if (!isset($match[1])) { return '%%'; } if (preg_match('/^env\((?:\w++:)*+\w++\)$/', $match[1])) { throw new RuntimeException(sprintf('Using ""%%%s%%"" is not allowed in routing configuration.', $match[1])); } $resolved = ($this->paramFetcher)($match[1]); if (\is_bool($resolved)) { $resolved = (string) (int) $resolved; } if (\is_string($resolved) || is_numeric($resolved)) { if (\is_bool($resolved)) { $resolved = (string) (int) $resolved; } if (\is_string($resolved) || is_numeric($resolved)) { $this->collectedParameters[$match[1]] = $resolved; return (string) $this->resolve($resolved); }"	type_info: resolved:unknown  global_variable:  function_name: __construct getRouteCollection warmUp resolveParameters resolve getSubscribedServices	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	symfony_symfony_af6db0cfafe133383fa360c47a58c2ed207fac43_73_0	"buggy: return (string) $this->resolve($resolved); context: $resolved = ($this->paramFetcher)($match[1]); if (\is_bool($resolved)) { $resolved = (string) (int) $resolved; } if (\is_string($resolved) || is_numeric($resolved)) { $this->collectedParameters[$match[1]] = $resolved; return (string) $this->resolve($resolved); return (string) $this->resolve($resolved); } throw new RuntimeException(sprintf('The container parameter ""%s"", used in the route configuration value ""%s"", must be a string or numeric, but it is of type ""%s"".', $match[1], $value, \gettype($resolved))); }, $value); return str_replace('%%', '%', $escapedValue); } public static function getSubscribedServices()"	type_info: escapedValue:unknown resolved:unknown  global_variable:  function_name: __construct getRouteCollection warmUp resolveParameters resolve getSubscribedServices	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	symfony_symfony_f3b11e70c0b0c3217bb91d3fa9b417256783ca4c_74_0	buggy: $this->createCookie($rememberMeDetails->withValue($tokenValue)); context: if ($persistentToken->getLastUsed()->getTimestamp() + 60 < time()) { $tokenValue = base64_encode(random_bytes(64)); $tokenValueHash = $this->generateHash($tokenValue); $tokenLastUsed = new \DateTime(); if ($this->tokenVerifier) { $this->tokenVerifier->updateExistingToken($persistentToken, $tokenValueHash, $tokenLastUsed); } $this->tokenProvider->updateToken($series, $tokenValueHash, $tokenLastUsed); } $this->createCookie($rememberMeDetails->withValue($tokenValue)); $this->createCookie($rememberMeDetails->withValue($tokenValue)); } public function clearRememberMeCookie(): void { parent::clearRememberMeCookie(); $cookie = $this->requestStack->getMainRequest()->cookies->get($this->options['name']); if (null === $cookie) { return;	type_info: tokenVerifier:unknown series:unknown tokenValue:unknown persistentToken:unknown tokenValueHash:unknown tokenLastUsed:unknown cookie:unknown rememberMeDetails:unknown  global_variable: tokenVerifier: unknown function_name: __construct createRememberMeCookie processRememberMe clearRememberMeCookie getTokenProvider generateHash	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	symfony_symfony_57033164c62646d0b47d0e246dd51c46897cb3a7_75_0	buggy: $new->hitCountForLastWindow = $window->hitCount; $new->windowEndAt = $window->windowEndAt + $intervalInSeconds; context: public static function createFromPreviousWindow(self $window, int $intervalInSeconds): self { $new = new self($window->id, $intervalInSeconds); $new->hitCountForLastWindow = $window->hitCount; $new->windowEndAt = $window->windowEndAt + $intervalInSeconds; $new->hitCountForLastWindow = $window->hitCount; $new->windowEndAt = $window->windowEndAt + $intervalInSeconds; return $new; }	type_info: new:unknown  global_variable:  function_name: __construct createFromPreviousWindow __sleep getId getExpirationTime isExpired add getHitCount getRetryAfter	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	symfony_symfony_57033164c62646d0b47d0e246dd51c46897cb3a7_75_0	buggy: $percentOfCurrentTimeFrame = (time() - $startOfWindow) / $this->intervalInSeconds; context: public function getHitCount(): int { $startOfWindow = $this->windowEndAt - $this->intervalInSeconds; $percentOfCurrentTimeFrame = (time() - $startOfWindow) / $this->intervalInSeconds; $percentOfCurrentTimeFrame = (time() - $startOfWindow) / $this->intervalInSeconds; return (int) floor($this->hitCountForLastWindow * (1 - $percentOfCurrentTimeFrame) + $this->hitCount); }	type_info: startOfWindow:unknown percentOfCurrentTimeFrame:unknown  global_variable:  function_name: __construct createFromPreviousWindow __sleep getId getExpirationTime isExpired add getHitCount getRetryAfter	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	symfony_symfony_be6432ee4c2a22ddbe2cfc884235caf09039278f_76_0	buggy: if (null !== $type) { return $this->extractFromReflectionType($type, $reflectionProperty->getDeclaringClass()); context: } if ($fromDefaultValue = $this->extractFromDefaultValue($class, $property)) { return $fromDefaultValue; } if (\PHP_VERSION_ID >= 70400) { try { $reflectionProperty = new \ReflectionProperty($class, $property); $type = $reflectionProperty->getType(); if (null !== $type) { return $this->extractFromReflectionType($type, $reflectionProperty->getDeclaringClass()); if (null !== $type) { return $this->extractFromReflectionType($type, $reflectionProperty->getDeclaringClass()); } } catch (\ReflectionException $e) { } } return null; }	type_info: mutatorPrefixes:unknown fromDefaultValue:unknown reflectionProperty:unknown type:array  global_variable: mutatorPrefixes: unknown function_name: __construct getProperties getTypes isReadable isWritable isInitializable extractFromMutator extractFromAccessor extractFromConstructor extractFromDefaultValue extractFromReflectionType resolveTypeName isAllowedProperty getAccessorMethod getMutatorMethod getPropertyName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	symfony_symfony_aa68e2cd314a0f69b462c9b0217c8b2ef6bcce0b_77_0	buggy:  context: public static function fromRawCookie(string $rawCookie): self { $cookieParts = explode(self::COOKIE_DELIMITER, base64_decode($rawCookie), 4); if (false === $cookieParts[1] = base64_decode($cookieParts[1], true)) { throw new AuthenticationException('The user identifier contains a character from outside the base64 alphabet.'); } return new static(...$cookieParts); }	type_info: cookieParts:unknown  global_variable:  function_name: __construct fromRawCookie fromPersistentToken withValue getUserFqcn getUserIdentifier getExpires getValue toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	symfony_symfony_2248af585737cc135af74309822e069fc76741de_78_0	buggy: throw new JsonException('Response body is empty.'); context: public function toArray() { if ('' === $content = $this->getContent()) { throw new JsonException('Response body is empty.'); throw new JsonException('Response body is empty.'); } try { $content = json_decode($content, true, 512, \JSON_BIGINT_AS_STRING | (\PHP_VERSION_ID >= 70300 ? \JSON_THROW_ON_ERROR : 0)); } catch (\JsonException $e) { throw new JsonException('Could not decode request body.', $e->getCode(), $e); } if (\PHP_VERSION_ID < 70300 && \JSON_ERROR_NONE !== json_last_error()) { throw new JsonException('Could not decode request body: '.json_last_error_msg(), json_last_error());	type_info: query:array request:array method:unknown requestFactory:unknown content:unknown cookies:array session:unknown format:unknown languages:unknown requestUri:string baseUrl:string basePath:unknown pathInfo:unknown formats:array  global_variable: query: array request: array method: unknown requestFactory: unknown content: unknown cookies: array session: unknown format: unknown languages: unknown requestUri: string baseUrl: string basePath: unknown pathInfo: unknown formats: array function_name: __construct initialize createFromGlobals create setFactory duplicate __clone __toString overrideGlobals setTrustedProxies getTrustedProxies getTrustedHeaderSet setTrustedHosts getTrustedHosts normalizeQueryString enableHttpMethodParameterOverride getHttpMethodParameterOverride get getSession hasPreviousSession hasSession setSession setSessionFactory getClientIps getClientIp getScriptName getPathInfo getBasePath getBaseUrl getBaseUrlReal getScheme getPort getUser getPassword getUserInfo getHttpHost getRequestUri getSchemeAndHttpHost getUri getUriForPath getRelativeUriForPath getQueryString isSecure getHost setMethod getMethod getRealMethod getMimeType getMimeTypes getFormat setFormat getRequestFormat setRequestFormat getContentType setDefaultLocale getDefaultLocale setLocale getLocale isMethod isMethodSafe isMethodIdempotent isMethodCacheable getProtocolVersion getContent toArray getETags isNoCache getPreferredFormat getPreferredLanguage getLanguages getCharsets getEncodings getAcceptableContentTypes isXmlHttpRequest preferSafeContent prepareRequestUri prepareBaseUrl prepareBasePath preparePathInfo initializeFormats setPhpDefaultLocale getUrlencodedPrefix createRequestFromFactory isFromTrustedProxy getTrustedValues normalizeAndFilterClientIps	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	symfony_symfony_978747e6eaf2510e50f02d20c1878b6f88014a9d_79_0	buggy:  context: yield $p->getDocComment(); yield $p->isDefault() ? '<default>' : ''; yield $p->isPublic() ? 'public' : 'protected'; yield $p->isStatic() ? 'static' : ''; yield '$'.$p->name; yield print_r(isset($defaults[$p->name]) && !\is_object($defaults[$p->name]) ? $defaults[$p->name] : null, true); } } foreach ($class->getMethods(\ReflectionMethod::IS_PUBLIC | \ReflectionMethod::IS_PROTECTED) as $m) { if (\PHP_VERSION_ID >= 80000) { foreach ($m->getAttributes() as $a) { $attributes[] = [$a->getName(), $a->getArguments()]; } yield print_r($attributes, true); $attributes = []; } $defaults = [];	type_info: class:unknown hash:unknown attributes:array defaults:array  global_variable: hash: unknown function_name: __construct isFresh __toString __sleep loadFiles computeHash generateSignature	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	symfony_symfony_978747e6eaf2510e50f02d20c1878b6f88014a9d_79_0	buggy: if (!$p->isDefaultValueConstant() || \defined($p->getDefaultValueConstantName())) { context: yield print_r($attributes, true); $attributes = []; } if (!$p->isDefaultValueAvailable()) { $defaults[$p->name] = null; continue; } if (!$p->isDefaultValueConstant() || \defined($p->getDefaultValueConstantName())) { if (!$p->isDefaultValueConstant() || \defined($p->getDefaultValueConstantName())) { $defaults[$p->name] = $p->getDefaultValue(); continue; } $defaults[$p->name] = $p->getDefaultValueConstantName(); $parametersWithUndefinedConstants[$p->name] = true; }	type_info: hash:unknown attributes:array defaults:array parametersWithUndefinedConstants:array  global_variable: hash: unknown function_name: __construct isFresh __toString __sleep loadFiles computeHash generateSignature	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	symfony_symfony_27bba684d88951f7475af027731b3701c1574197_80_0	"buggy: $nsTokens[T_NAME_QUALIFIED] = true; context: $class = false; $namespace = false; $tokens = token_get_all(file_get_contents($file)); if (1 === \count($tokens) && \T_INLINE_HTML === $tokens[0][0]) { throw new \InvalidArgumentException(sprintf('The file ""%s"" does not contain PHP code. Did you forgot to add the ""<?php"" start tag at the beginning of the file?', $file)); } $nsTokens = [\T_NS_SEPARATOR => true, \T_STRING => true]; if (\defined('T_NAME_QUALIFIED')) { $nsTokens[T_NAME_QUALIFIED] = true; $nsTokens[T_NAME_QUALIFIED] = true; } for ($i = 0; isset($tokens[$i]); ++$i) { $token = $tokens[$i]; if (!isset($token[1])) { continue; }"	type_info: class:boolean namespace:boolean tokens:unknown nsTokens:array i:integer token:unknown  global_variable:  function_name: __construct load supports findClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	symfony_symfony_27bba684d88951f7475af027731b3701c1574197_80_0	"buggy:  context: $tokens = token_get_all(file_get_contents($file)); if (1 === \count($tokens) && \T_INLINE_HTML === $tokens[0][0]) { throw new \InvalidArgumentException(sprintf('The file ""%s"" does not contain PHP code. Did you forgot to add the ""<?php"" start tag at the beginning of the file?', $file)); } $nsTokens = [\T_NS_SEPARATOR => true, \T_STRING => true]; if (\defined('T_NAME_QUALIFIED')) { $nsTokens[T_NAME_QUALIFIED] = true; } for ($i = 0; isset($tokens[$i]); ++$i) { $token = $tokens[$i]; if (!isset($token[1])) { continue; } if (true === $class && \T_STRING === $token[0]) { return $namespace.'\\'.$token[1];"	type_info: class:boolean namespace:boolean tokens:unknown nsTokens:array i:integer token:unknown  global_variable:  function_name: __construct load supports findClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	symfony_symfony_27bba684d88951f7475af027731b3701c1574197_80_0	"buggy:  context: throw new \InvalidArgumentException(sprintf('The file ""%s"" does not contain PHP code. Did you forgot to add the ""<?php"" start tag at the beginning of the file?', $file)); } $nsTokens = [\T_NS_SEPARATOR => true, \T_STRING => true]; if (\defined('T_NAME_QUALIFIED')) { $nsTokens[T_NAME_QUALIFIED] = true; } for ($i = 0; isset($tokens[$i]); ++$i) { $token = $tokens[$i]; if (!isset($token[1])) { continue; } if (true === $class && \T_STRING === $token[0]) { return $namespace.'\\'.$token[1]; } if (true === $namespace && isset($nsTokens[$token[0]])) {"	type_info: class:boolean namespace:boolean tokens:unknown nsTokens:array i:integer token:unknown  global_variable:  function_name: __construct load supports findClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	symfony_symfony_27bba684d88951f7475af027731b3701c1574197_80_0	buggy:  context: while (isset($tokens[++$i][1], $nsTokens[$tokens[$i][0]])) { $namespace .= $tokens[$i][1]; } $token = $tokens[$i]; } if (\T_CLASS === $token[0]) { $skipClassToken = false; for ($j = $i - 1; $j > 0; --$j) { if (!isset($tokens[$j][1])) { break; } if (\T_DOUBLE_COLON === $tokens[$j][0] || \T_NEW === $tokens[$j][0]) { $skipClassToken = true; break; } elseif (!\in_array($tokens[$j][0], [\T_WHITESPACE, \T_DOC_COMMENT, \T_COMMENT])) { break; } }	type_info: namespace:boolean tokens:unknown nsTokens:array i:integer token:unknown skipClassToken:boolean j:unknown  global_variable:  function_name: __construct load supports findClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	symfony_symfony_e29dcea3eaffcc5aa6c67d44f4cc7fbd46436fd3_81_0	"buggy: * Tp be remove in Symfony 6.0 context: use Symfony\Component\HttpFoundation\Session\SessionInterface; use Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage; use Symfony\Component\Security\Csrf\Exception\TokenNotFoundException; class SessionTokenStorage implements ClearableTokenStorageInterface { public const SESSION_NAMESPACE = '_csrf'; private $requestStack; private $namespace; * Tp be remove in Symfony 6.0 private $session; public function __construct( $requestStack, string $namespace = self::SESSION_NAMESPACE) { if ($requestStack instanceof SessionInterface) { trigger_deprecation('symfony/security-csrf', '5.3', 'Passing a ""%s"" to ""%s"" is deprecated, use a ""%s"" instead.', SessionInterface::class, __CLASS__, RequestStack::class); $request = new Request(); $request->setSession($requestStack); $requestStack = new RequestStack();"	type_info: namespace:unknown request:unknown requestStack:unknown session:unknown  global_variable: namespace: unknown requestStack: unknown session: unknown function_name: __construct getToken setToken hasToken removeToken clear getSession	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	symfony_symfony_e29dcea3eaffcc5aa6c67d44f4cc7fbd46436fd3_81_0	"buggy: return $this->requestStack->getSession(); context: private function getSession(): SessionInterface { try { return $this->requestStack->getSession(); return $this->requestStack->getSession(); } catch (SessionNotFoundException $e) { trigger_deprecation('symfony/security-csrf', '5.3', 'Using the ""%s"" without a session has no effect and is deprecated. It will throw a ""%s"" in Symfony 6.0', __CLASS__, SessionNotFoundException::class); return $this->session ?? $this->session = new Session(new MockArraySessionStorage()); } } }"	type_info: namespace:unknown requestStack:unknown session:unknown  global_variable: namespace: unknown requestStack: unknown session: unknown function_name: __construct getToken setToken hasToken removeToken clear getSession	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	symfony_symfony_8d3078dd351e8ea16222c72083db9ff28ab33e36_82_0	buggy: if ($argument->getAttribute() instanceof CurrentUser) { return true; } if (UserInterface::class !== $argument->getType()) { context: public function supports(Request $request, ArgumentMetadata $argument): bool { if ($argument->getAttribute() instanceof CurrentUser) { return true; } if (UserInterface::class !== $argument->getType()) { if ($argument->getAttribute() instanceof CurrentUser) { return true; } if (UserInterface::class !== $argument->getType()) { return false; } $token = $this->tokenStorage->getToken(); if (!$token instanceof TokenInterface) { return false; } $user = $token->getUser(); return $user instanceof UserInterface;	type_info: token:unknown user:unknown  global_variable:  function_name: __construct supports resolve	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	symfony_symfony_a9de390676996fbebdce6be1e9754b7f2d4e62ab_83_0	"buggy: if (isset($call['method'])) { context: foreach ($service['calls'] as $k => $call) { if (!\is_array($call) && (!\is_string($k) || !$call instanceof TaggedValue)) { throw new InvalidArgumentException(sprintf('Invalid method call for service ""%s"": expected map or array, ""%s"" given in ""%s"".', $id, $call instanceof TaggedValue ? '!'.$call->getTag() : \gettype($call), $file)); } if (\is_string($k)) { throw new InvalidArgumentException(sprintf('Invalid method call for service ""%s"", did you forgot a leading dash before ""%s: ..."" in ""%s""?', $id, $k, $file)); } if (isset($call['method'])) { if (isset($call['method'])) { $method = $call['method']; $args = $call['arguments'] ?? []; $returnsClone = $call['returns_clone'] ?? false; } else { if (1 === \count($call) && \is_string(key($call))) { $method = key($call); $args = $call[$method]; if ($args instanceof TaggedValue) {"	type_info: id:unknown service:array k:unknown method:unknown args:array returnsClone:boolean  global_variable:  function_name: load supports parseImports parseDefinitions parseDefaults isUsingShortSyntax parseDefinition parseCallable loadFile validate resolveServices loadFromExtensions checkDefinition	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	symfony_symfony_fad17a95eab25460d5aea81a3dded01ad980ae32_84_0	"buggy:  context: public function getArgument($name) { if (!$this->definition->hasArgument($name)) { throw new InvalidArgumentException(sprintf('The ""%s"" argument does not exist.', $name)); } return $this->arguments[$name] ?? $this->definition->getArgument($name)->getDefault(); }"	type_info: definition:unknown  global_variable: definition: unknown function_name: __construct bind parse validate isInteractive setInteractive getArguments getArgument setArgument hasArgument getOptions getOption setOption hasOption escapeToken setStream getStream	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	symfony_symfony_fad17a95eab25460d5aea81a3dded01ad980ae32_84_0	"buggy:  context: public function setArgument($name, $value) { if (!$this->definition->hasArgument($name)) { throw new InvalidArgumentException(sprintf('The ""%s"" argument does not exist.', $name)); } $this->arguments[$name] = $value; }"	type_info: definition:unknown  global_variable: definition: unknown function_name: __construct bind parse validate isInteractive setInteractive getArguments getArgument setArgument hasArgument getOptions getOption setOption hasOption escapeToken setStream getStream	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	symfony_symfony_760be8831001282833fd7e1254a09ed089472874_85_0	buggy: $lines = array_merge($lines, explode(\PHP_EOL, wordwrap($message, $this->lineLength - $prefixLength - $indentLength, \PHP_EOL, true))); context: $type = sprintf('[%s] ', $type); $indentLength = \strlen($type); $lineIndentation = str_repeat(' ', $indentLength); } foreach ($messages as $key => $message) { if ($escape) { $message = OutputFormatter::escape($message); } $lines = array_merge($lines, explode(\PHP_EOL, wordwrap($message, $this->lineLength - $prefixLength - $indentLength, \PHP_EOL, true))); $lines = array_merge($lines, explode(\PHP_EOL, wordwrap($message, $this->lineLength - $prefixLength - $indentLength, \PHP_EOL, true))); if (\count($messages) > 1 && $key < \count($messages) - 1) { $lines[] = ''; } } $firstLineIndex = 0; if ($padding && $this->isDecorated()) { $firstLineIndex = 1;	type_info: type:array messages:array prefixLength:unknown lines:array indentLength:unknown lineIndentation:unknown key:unknown firstLineIndex:integer  global_variable:  function_name: __construct block title section listing text comment success error warning note caution table horizontalTable definitionList ask askHidden confirm choice progressStart progressAdvance progressFinish createProgressBar askQuestion writeln write newLine getErrorStyle getProgressBar autoPrependBlock autoPrependText writeBuffer createBlock	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	symfony_symfony_760be8831001282833fd7e1254a09ed089472874_85_0	buggy: $line .= str_repeat(' ', $this->lineLength - Helper::strlenWithoutDecoration($this->getFormatter(), $line)); context: array_unshift($lines, ''); $lines[] = ''; } foreach ($lines as $i => &$line) { if (null !== $type) { $line = $firstLineIndex === $i ? $type.$line : $lineIndentation.$line; } $line = $prefix.$line; $line .= str_repeat(' ', $this->lineLength - Helper::strlenWithoutDecoration($this->getFormatter(), $line)); $line .= str_repeat(' ', $this->lineLength - Helper::strlenWithoutDecoration($this->getFormatter(), $line)); if ($style) { $line = sprintf('<%s>%s</>', $style, $line); } } return $lines; } }	type_info: type:array style:unknown lines:array lineIndentation:unknown firstLineIndex:integer i:unknown line:unknown  global_variable:  function_name: __construct block title section listing text comment success error warning note caution table horizontalTable definitionList ask askHidden confirm choice progressStart progressAdvance progressFinish createProgressBar askQuestion writeln write newLine getErrorStyle getProgressBar autoPrependBlock autoPrependText writeBuffer createBlock	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	symfony_symfony_d585b64953794a88ce7f4f9d36bbd4a0bd5386a7_86_0	"buggy: $alias->setDeprecated($deprecation['package'] ?? '', $deprecation['version'] ?? '', $deprecation['message']); context: $deprecation = \is_array($value) ? $value : ['message' => $value]; if (!isset($deprecation['package'])) { trigger_deprecation('symfony/dependency-injection', '5.1', 'Not setting the attribute ""package"" of the ""deprecated"" option in ""%s"" is deprecated.', $file); } if (!isset($deprecation['version'])) { trigger_deprecation('symfony/dependency-injection', '5.1', 'Not setting the attribute ""version"" of the ""deprecated"" option in ""%s"" is deprecated.', $file); } $alias->setDeprecated($deprecation['package'] ?? '', $deprecation['version'] ?? '', $deprecation['message']); $alias->setDeprecated($deprecation['package'] ?? '', $deprecation['version'] ?? '', $deprecation['message']); } } return $return ? $alias : $this->container->setAlias($id, $alias); } if ($this->isLoadingInstanceof) { $definition = new ChildDefinition(''); } elseif (isset($service['parent'])) {"	type_info: id:unknown return:unknown alias:unknown service:array definition:unknown deprecation:array value:unknown  global_variable:  function_name: load supports parseImports parseDefinitions parseDefaults isUsingShortSyntax parseDefinition parseCallable loadFile validate resolveServices loadFromExtensions checkDefinition	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	symfony_symfony_d585b64953794a88ce7f4f9d36bbd4a0bd5386a7_86_0	"buggy: $definition->setDeprecated($deprecation['package'] ?? '', $deprecation['version'] ?? '', $deprecation['message']); context: $deprecation = \is_array($service['deprecated']) ? $service['deprecated'] : ['message' => $service['deprecated']]; if (!isset($deprecation['package'])) { trigger_deprecation('symfony/dependency-injection', '5.1', 'Not setting the attribute ""package"" of the ""deprecated"" option in ""%s"" is deprecated.', $file); } if (!isset($deprecation['version'])) { trigger_deprecation('symfony/dependency-injection', '5.1', 'Not setting the attribute ""version"" of the ""deprecated"" option in ""%s"" is deprecated.', $file); } $definition->setDeprecated($deprecation['package'] ?? '', $deprecation['version'] ?? '', $deprecation['message']); $definition->setDeprecated($deprecation['package'] ?? '', $deprecation['version'] ?? '', $deprecation['message']); } if (isset($service['factory'])) { $definition->setFactory($this->parseCallable($service['factory'], 'factory', $id, $file)); } if (isset($service['file'])) { $definition->setFile($service['file']); }"	type_info: id:unknown service:array definition:unknown deprecation:array  global_variable:  function_name: load supports parseImports parseDefinitions parseDefaults isUsingShortSyntax parseDefinition parseCallable loadFile validate resolveServices loadFromExtensions checkDefinition	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	symfony_symfony_7f4a84f9849125c0c1fc1e2d540eff30f39bc7e3_87_0	buggy: return preg_replace([ '/(bundle|controller)_/', '/action(_\d+)?$/', '/__/', ], [ '_', '\\1', '_', ], parent::getDefaultRouteName($class, $method)); context: protected function getDefaultRouteName(\ReflectionClass $class, \ReflectionMethod $method) { return preg_replace([ '/(bundle|controller)_/', '/action(_\d+)?$/', '/__/', ], [ '_', '\\1', '_', ], parent::getDefaultRouteName($class, $method)); return preg_replace([ '/(bundle|controller)_/', '/action(_\d+)?$/', '/__/', ], [ '_', '\\1', '_', ], parent::getDefaultRouteName($class, $method)); }	type_info:  global_variable:  function_name: configureRoute getDefaultRouteName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	symfony_symfony_a557bdc0c93f2cacc0907e22c6ede4e0bb557ed6_88_0	buggy: $arrayValue = (array) $value; context: if (!\is_array($properties = $value->__serialize())) { throw new \TypeError($class.'::__serialize() must return an array'); } goto prepare_value; } $properties = []; $sleep = null; $arrayValue = (array) $value; $arrayValue = (array) $value; $proto = Registry::$prototypes[$class]; if (($value instanceof \ArrayIterator || $value instanceof \ArrayObject) && null !== $proto) { $properties = self::getArrayObjectProperties($value, $arrayValue, $proto); Registry::getClassReflector($class, Registry::$instantiableWithoutConstructor[$class], Registry::$cloneable[$class]); } elseif ($value instanceof \SplObjectStorage && Registry::$cloneable[$class] && null !== $proto) { foreach (clone $value as $v) { $properties[] = $v;	type_info: value:unknown class:unknown properties:array sleep:unknown arrayValue:unknown proto:unknown  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	symfony_symfony_a557bdc0c93f2cacc0907e22c6ede4e0bb557ed6_88_0	"buggy: $properties = self::getArrayObjectProperties($value, $arrayValue, $proto); context: goto prepare_value; } $properties = []; $sleep = null; $arrayValue = (array) $value; $proto = Registry::$prototypes[$class]; if (($value instanceof \ArrayIterator || $value instanceof \ArrayObject) && null !== $proto) { $properties = self::getArrayObjectProperties($value, $arrayValue, $proto); $properties = self::getArrayObjectProperties($value, $arrayValue, $proto); Registry::getClassReflector($class, Registry::$instantiableWithoutConstructor[$class], Registry::$cloneable[$class]); } elseif ($value instanceof \SplObjectStorage && Registry::$cloneable[$class] && null !== $proto) { foreach (clone $value as $v) { $properties[] = $v; $properties[] = $value[$v]; } $properties = ['SplObjectStorage' => [""\0"" => $properties]]; } elseif ($value instanceof \Serializable || $value instanceof \__PHP_Incomplete_Class) {"	type_info: value:unknown class:unknown properties:array sleep:unknown arrayValue:unknown proto:unknown  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	symfony_symfony_a557bdc0c93f2cacc0907e22c6ede4e0bb557ed6_88_0	"buggy:  context: if (($value instanceof \ArrayIterator || $value instanceof \ArrayObject) && null !== $proto) { $properties = self::getArrayObjectProperties($value, $arrayValue, $proto); Registry::getClassReflector($class, Registry::$instantiableWithoutConstructor[$class], Registry::$cloneable[$class]); } elseif ($value instanceof \SplObjectStorage && Registry::$cloneable[$class] && null !== $proto) { foreach (clone $value as $v) { $properties[] = $v; $properties[] = $value[$v]; } $properties = ['SplObjectStorage' => [""\0"" => $properties]]; } elseif ($value instanceof \Serializable || $value instanceof \__PHP_Incomplete_Class) { ++$objectsCount; $objectsPool[$value] = [$id = \count($objectsPool), serialize($value), [], 0]; $value = new Reference($id); goto handle_value; } if (method_exists($class, '__sleep')) { if (!\is_array($sleep = $value->__sleep())) { trigger_error('serialize(): __sleep should return an array only containing the names of instance-variables to serialize', \E_USER_NOTICE);"	type_info: value:unknown class:unknown properties:array sleep:unknown arrayValue:unknown proto:unknown id:unknown  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	symfony_symfony_a557bdc0c93f2cacc0907e22c6ede4e0bb557ed6_88_0	"buggy: } if (method_exists($class, '__sleep')) { if (!\is_array($sleep = $value->__sleep())) { trigger_error('serialize(): __sleep should return an array only containing the names of instance-variables to serialize', \E_USER_NOTICE); $value = null; goto handle_value; } foreach ($sleep as $name) { if (property_exists($value, $name) && !$reflector->hasProperty($name)) { $arrayValue[$name] = $value->$name; context: } $properties = ['SplObjectStorage' => [""\0"" => $properties]]; } elseif ($value instanceof \Serializable || $value instanceof \__PHP_Incomplete_Class) { ++$objectsCount; $objectsPool[$value] = [$id = \count($objectsPool), serialize($value), [], 0]; $value = new Reference($id); goto handle_value; } if (method_exists($class, '__sleep')) { if (!\is_array($sleep = $value->__sleep())) { trigger_error('serialize(): __sleep should return an array only containing the names of instance-variables to serialize', \E_USER_NOTICE); $value = null; goto handle_value; } foreach ($sleep as $name) { if (property_exists($value, $name) && !$reflector->hasProperty($name)) { $arrayValue[$name] = $value->$name; } if (method_exists($class, '__sleep')) { if (!\is_array($sleep = $value->__sleep())) { trigger_error('serialize(): __sleep should return an array only containing the names of instance-variables to serialize', \E_USER_NOTICE); $value = null; goto handle_value;"	type_info: value:unknown class:unknown reflector:string properties:array sleep:unknown arrayValue:unknown id:unknown name:unknown  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	symfony_symfony_a557bdc0c93f2cacc0907e22c6ede4e0bb557ed6_88_0	"buggy:  context: if (method_exists($class, '__sleep')) { if (!\is_array($sleep = $value->__sleep())) { trigger_error('serialize(): __sleep should return an array only containing the names of instance-variables to serialize', \E_USER_NOTICE); $value = null; goto handle_value; } foreach ($sleep as $name) { if (property_exists($value, $name) && !$reflector->hasProperty($name)) { $arrayValue[$name] = $value->$name; } } $sleep = array_flip($sleep); } $proto = (array) $proto; foreach ($arrayValue as $name => $v) { $i = 0; $n = (string) $name; if ('' === $n || ""\0"" !== $n[0]) {"	type_info: value:unknown class:unknown reflector:string sleep:unknown arrayValue:unknown proto:unknown name:unknown n:unknown i:unknown  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	symfony_symfony_a557bdc0c93f2cacc0907e22c6ede4e0bb557ed6_88_0	"buggy: $sleep = array_flip($sleep); context: if (!\is_array($sleep = $value->__sleep())) { trigger_error('serialize(): __sleep should return an array only containing the names of instance-variables to serialize', \E_USER_NOTICE); $value = null; goto handle_value; } foreach ($sleep as $name) { if (property_exists($value, $name) && !$reflector->hasProperty($name)) { $arrayValue[$name] = $value->$name; } } $sleep = array_flip($sleep); $sleep = array_flip($sleep); } $proto = (array) $proto; foreach ($arrayValue as $name => $v) { $i = 0; $n = (string) $name; if ('' === $n || ""\0"" !== $n[0]) { $c = 'stdClass';"	type_info: value:unknown reflector:string sleep:unknown arrayValue:unknown proto:unknown name:unknown n:unknown c:string i:unknown  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	symfony_symfony_a557bdc0c93f2cacc0907e22c6ede4e0bb557ed6_88_0	"buggy: private static function getArrayObjectProperties($value, array &$arrayValue, $proto): array context: self::export($value->registry, $subIndent), self::export($value->values, $subIndent), '' !== $code ? ""[\n"".$code.$subIndent.']' : '[]', self::export($value->value, $subIndent), self::export($value->wakeups, $subIndent), ]; return '\\'.\get_class($value).""::hydrate(\n"".$subIndent.implode("",\n"".$subIndent, $code).""\n"".$indent.')'; } private static function getArrayObjectProperties($value, array &$arrayValue, $proto): array private static function getArrayObjectProperties($value, array &$arrayValue, $proto): array { $reflector = $value instanceof \ArrayIterator ? 'ArrayIterator' : 'ArrayObject'; $reflector = Registry::$reflectors[$reflector] ?? Registry::getClassReflector($reflector); $properties = [ $arrayValue, $reflector->getMethod('getFlags')->invoke($value), $value instanceof \ArrayObject ? $reflector->getMethod('getIteratorClass')->invoke($value) : 'ArrayIterator', ];"	type_info: value:unknown reflector:string properties:array arrayValue:unknown proto:unknown indent:unknown subIndent:unknown code:string  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	symfony_symfony_a557bdc0c93f2cacc0907e22c6ede4e0bb557ed6_88_0	buggy: $arrayValue, context: private static function getArrayObjectProperties($value, array &$arrayValue, $proto): array { $reflector = $value instanceof \ArrayIterator ? 'ArrayIterator' : 'ArrayObject'; $reflector = Registry::$reflectors[$reflector] ?? Registry::getClassReflector($reflector); $properties = [ $arrayValue, $arrayValue, $reflector->getMethod('getFlags')->invoke($value), $value instanceof \ArrayObject ? $reflector->getMethod('getIteratorClass')->invoke($value) : 'ArrayIterator', ]; $reflector = $reflector->getMethod('setFlags'); $reflector->invoke($proto, \ArrayObject::STD_PROP_LIST); if ($properties[1] & \ArrayObject::STD_PROP_LIST) { $reflector->invoke($value, 0); $properties[0] = (array) $value;	type_info: value:unknown reflector:string properties:array arrayValue:unknown proto:unknown  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	symfony_symfony_a557bdc0c93f2cacc0907e22c6ede4e0bb557ed6_88_0	"buggy: return $properties; context: if ([[], 0, 'ArrayIterator'] === $properties) { $properties = []; } else { if ('ArrayIterator' === $properties[2]) { unset($properties[2]); } $properties = [$reflector->class => [""\0"" => $properties]]; } return $properties; return $properties; } }"	type_info: reflector:string properties:array  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	symfony_symfony_2a196ca0dc91de4497031cc93bfbaa59c7c7a4e1_89_0	buggy: if (\strlen($domain) > $suffixLength && false !== strpos($domain, self::INTL_DOMAIN_SUFFIX, -$suffixLength)) { context: public function add($messages, $domain = 'messages') { if (!isset($this->messages[$domain])) { $this->messages[$domain] = []; } $intlDomain = $domain; $suffixLength = \strlen(self::INTL_DOMAIN_SUFFIX); if (\strlen($domain) > $suffixLength && false !== strpos($domain, self::INTL_DOMAIN_SUFFIX, -$suffixLength)) { if (\strlen($domain) > $suffixLength && false !== strpos($domain, self::INTL_DOMAIN_SUFFIX, -$suffixLength)) { $intlDomain .= self::INTL_DOMAIN_SUFFIX; } foreach ($messages as $id => $message) { if (isset($this->messages[$intlDomain]) && \array_key_exists($id, $this->messages[$intlDomain])) { $this->messages[$intlDomain][$id] = $message; } else { $this->messages[$domain][$id] = $message; } } }	type_info: messages:array suffixLength:unknown domain:array intlDomain:unknown id:unknown  global_variable:  function_name: __construct getLocale getDomains all set has defines get replace add addCatalogue addFallbackCatalogue getFallbackCatalogue getResources addResource getMetadata setMetadata deleteMetadata addMetadata	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	symfony_symfony_0499fff5322ff1ceb69a4a812139ed8b73ddbcba_90_0	buggy: $arguments[$index] = new ServiceLocatorArgument(new TaggedIteratorArgument($attribute->tag, $attribute->indexAttribute)); context: if ($checkAttributes) { foreach ($parameter->getAttributes() as $attribute) { if (TaggedIterator::class === $attribute->getName()) { $attribute = $attribute->newInstance(); $arguments[$index] = new TaggedIteratorArgument($attribute->tag, $attribute->indexAttribute); break; } if (TaggedLocator::class === $attribute->getName()) { $attribute = $attribute->newInstance(); $arguments[$index] = new ServiceLocatorArgument(new TaggedIteratorArgument($attribute->tag, $attribute->indexAttribute)); $arguments[$index] = new ServiceLocatorArgument(new TaggedIteratorArgument($attribute->tag, $attribute->indexAttribute)); break; } } if ('' !== ($arguments[$index] ?? '')) { continue; } }	type_info: checkAttributes:unknown arguments:unknown index:unknown attribute:unknown parameter:unknown autowiringAliases:unknown  global_variable: autowiringAliases: unknown function_name: __construct process processValue doProcessValue autowireCalls autowireMethod getAutowiredReference populateAvailableTypes populateAvailableType set createTypeNotFoundMessageCallback createTypeNotFoundMessage createTypeAlternatives getAliasesSuggestionForType populateAutowiringAlias	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	symfony_symfony_ac3c4d742969da610dc39333766dcde5378a6638_91_0	"buggy: public function __construct(int $retryCount, string $exceptionMessage = null, FlattenException $flattenException = null, \DateTimeInterface $redeliveredAt = null) context: use Symfony\Component\ErrorHandler\Exception\FlattenException; use Symfony\Component\Messenger\Envelope; final class RedeliveryStamp implements StampInterface { private $retryCount; private $redeliveredAt; private $exceptionMessage; private $flattenException; public function __construct(int $retryCount, string $exceptionMessage = null, FlattenException $flattenException = null, \DateTimeInterface $redeliveredAt = null) public function __construct(int $retryCount, string $exceptionMessage = null, FlattenException $flattenException = null, \DateTimeInterface $redeliveredAt = null) { $this->retryCount = $retryCount; $this->redeliveredAt = $redeliveredAt ?? new \DateTimeImmutable(); if (null !== $exceptionMessage) { trigger_deprecation('symfony/messenger', '5.2', sprintf('Using the ""$exceptionMessage"" parameter in the ""%s"" class is deprecated, use the ""%s"" class instead.', self::class, ErrorDetailsStamp::class)); } $this->exceptionMessage = $exceptionMessage;"	type_info: exceptionMessage:unknown  global_variable: exceptionMessage: unknown function_name: __construct getRetryCountFromEnvelope getRetryCount getExceptionMessage getFlattenException getRedeliveredAt	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	symfony_symfony_ac3c4d742969da610dc39333766dcde5378a6638_91_0	"buggy:  context: public function __construct(int $retryCount, string $exceptionMessage = null, FlattenException $flattenException = null, \DateTimeInterface $redeliveredAt = null) { $this->retryCount = $retryCount; $this->redeliveredAt = $redeliveredAt ?? new \DateTimeImmutable(); if (null !== $exceptionMessage) { trigger_deprecation('symfony/messenger', '5.2', sprintf('Using the ""$exceptionMessage"" parameter in the ""%s"" class is deprecated, use the ""%s"" class instead.', self::class, ErrorDetailsStamp::class)); } $this->exceptionMessage = $exceptionMessage; if (null !== $flattenException) { trigger_deprecation('symfony/messenger', '5.2', sprintf('Using the ""$flattenException"" parameter in the ""%s"" class is deprecated, use the ""%s"" class instead.', self::class, ErrorDetailsStamp::class)); } $this->flattenException = $flattenException;"	type_info: exceptionMessage:unknown  global_variable: exceptionMessage: unknown function_name: __construct getRetryCountFromEnvelope getRetryCount getExceptionMessage getFlattenException getRedeliveredAt	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	symfony_symfony_ac3c4d742969da610dc39333766dcde5378a6638_91_0	"buggy: if (null !== $exceptionMessage) { context: public function __construct(int $retryCount, string $exceptionMessage = null, FlattenException $flattenException = null, \DateTimeInterface $redeliveredAt = null) { $this->retryCount = $retryCount; $this->redeliveredAt = $redeliveredAt ?? new \DateTimeImmutable(); if (null !== $exceptionMessage) { if (null !== $exceptionMessage) { trigger_deprecation('symfony/messenger', '5.2', sprintf('Using the ""$exceptionMessage"" parameter in the ""%s"" class is deprecated, use the ""%s"" class instead.', self::class, ErrorDetailsStamp::class)); } $this->exceptionMessage = $exceptionMessage; if (null !== $flattenException) { trigger_deprecation('symfony/messenger', '5.2', sprintf('Using the ""$flattenException"" parameter in the ""%s"" class is deprecated, use the ""%s"" class instead.', self::class, ErrorDetailsStamp::class)); } $this->flattenException = $flattenException; }"	type_info: exceptionMessage:unknown  global_variable: exceptionMessage: unknown function_name: __construct getRetryCountFromEnvelope getRetryCount getExceptionMessage getFlattenException getRedeliveredAt	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	symfony_symfony_ac3c4d742969da610dc39333766dcde5378a6638_91_0	"buggy: $this->exceptionMessage = $exceptionMessage; context: public function __construct(int $retryCount, string $exceptionMessage = null, FlattenException $flattenException = null, \DateTimeInterface $redeliveredAt = null) { $this->retryCount = $retryCount; $this->redeliveredAt = $redeliveredAt ?? new \DateTimeImmutable(); if (null !== $exceptionMessage) { trigger_deprecation('symfony/messenger', '5.2', sprintf('Using the ""$exceptionMessage"" parameter in the ""%s"" class is deprecated, use the ""%s"" class instead.', self::class, ErrorDetailsStamp::class)); } $this->exceptionMessage = $exceptionMessage; $this->exceptionMessage = $exceptionMessage; if (null !== $flattenException) { trigger_deprecation('symfony/messenger', '5.2', sprintf('Using the ""$flattenException"" parameter in the ""%s"" class is deprecated, use the ""%s"" class instead.', self::class, ErrorDetailsStamp::class)); } $this->flattenException = $flattenException; }"	type_info: exceptionMessage:unknown  global_variable: exceptionMessage: unknown function_name: __construct getRetryCountFromEnvelope getRetryCount getExceptionMessage getFlattenException getRedeliveredAt	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	symfony_symfony_d33973bbbe37188ed1a3b846c31c39e54dbdb00c_92_0	buggy: public function __construct(?bool $grouping = false, ?int $roundingMode = \NumberFormatter::ROUND_DOWN, ?string $locale) context: <?php namespace Symfony\Component\Form\Extension\Core\DataTransformer; use Symfony\Component\Form\Exception\TransformationFailedException; class IntegerToLocalizedStringTransformer extends NumberToLocalizedStringTransformer { public function __construct(?bool $grouping = false, ?int $roundingMode = \NumberFormatter::ROUND_DOWN, ?string $locale) public function __construct(?bool $grouping = false, ?int $roundingMode = \NumberFormatter::ROUND_DOWN, ?string $locale) { parent::__construct(0, $grouping, $roundingMode, $locale); } public function reverseTransform($value) { $decimalSeparator = $this->getNumberFormatter()->getSymbol(\NumberFormatter::DECIMAL_SEPARATOR_SYMBOL);	type_info: grouping:unknown decimalSeparator:unknown  global_variable:  function_name: __construct reverseTransform castParsedValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	symfony_symfony_369d9d7c8db282b39aab95c73ce44940602605ff_93_0	buggy:  context: $response->info['http_code'] = ($info['http_code'] ?? 0) ?: $mock->getStatusCode() ?: 200; $response->addResponseHeaders($info['response_headers'] ?? [], $response->info, $response->headers); $dlSize = isset($response->headers['content-encoding']) || 'HEAD' === $response->info['http_method'] || \in_array($response->info['http_code'], [204, 304], true) ? 0 : (int) ($response->headers['content-length'][0] ?? 0); $response->info = [ 'start_time' => $response->info['start_time'], 'user_data' => $response->info['user_data'], 'http_code' => $response->info['http_code'], ] + $info + $response->info; if (!isset($response->info['total_time'])) { $response->info['total_time'] = microtime(true) - $response->info['start_time']; } $onProgress(0, $dlSize, $response->info); $body = $mock instanceof self ? $mock->body : $mock->getContent(false); if (!\is_string($body)) { foreach ($body as $chunk) {	type_info: body:unknown response:unknown chunk:unknown onProgress:unknown info:array dlSize:unknown  global_variable: body: unknown function_name: __construct getRequestOptions getInfo cancel close fromRequest schedule perform select writeRequest readResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	symfony_symfony_05ee088911aad0a4f3307b28046190b962027bcd_94_0	buggy: private ?RequestStack $requestStack; private ?string $baseDir; context: 'sublime' => 'subl://open?url=file://%f&line=%l', 'phpstorm' => 'phpstorm://open?file=%f&line=%l', 'atom' => 'atom://core/open/file?filename=%f&line=%l', 'vscode' => 'vscode://file/%f:%l', ]; private array|false $fileLinkFormat; private ?RequestStack $requestStack; private ?string $baseDir; private ?RequestStack $requestStack; private ?string $baseDir; private \Closure|string|null $urlFormat; public function __construct(string $fileLinkFormat = null, RequestStack $requestStack = null, string $baseDir = null, string|\Closure $urlFormat = null) { $fileLinkFormat = (self::FORMATS[$fileLinkFormat] ?? $fileLinkFormat) ?: ini_get('xdebug.file_link_format') ?: get_cfg_var('xdebug.file_link_format');	type_info: fileLinkFormat:unknown  global_variable:  function_name: __construct format __sleep generateUrlFormat getFileLinkFormat	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	symfony_symfony_cb4706410cca141831998eda0a497a525a36ddfa_95_0	buggy: if (!$response->id) { context: protected static function schedule(self $response, array &$runningResponses): void { if (!$response->id) { if (!$response->id) { throw new InvalidArgumentException('MockResponse instances must be issued by MockHttpClient before processing.'); } $multi = self::$mainMulti ?? self::$mainMulti = new ClientState(); if (!isset($runningResponses[0])) { $runningResponses[0] = [$multi, []]; } $runningResponses[0][1][$response->id] = $response;	type_info: response:unknown multi:unknown  global_variable:  function_name: __construct getRequestOptions getRequestUrl getRequestMethod getInfo cancel close fromRequest schedule perform select writeRequest readResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	symfony_symfony_62581a9c9961119238c06ad3d4c286f6201bf11b_96_0	buggy: $catalogue = $this->filterCatalogue($catalogue, $domain); $bag->addCatalogue($catalogue); context: $bag = new TranslatorBag(); foreach ($locales as $locale) { $catalogue = new MessageCatalogue($locale); foreach ($transPaths as $path) { $this->reader->read($path, $catalogue); } if ($domains) { foreach ($domains as $domain) { $catalogue = $this->filterCatalogue($catalogue, $domain); $bag->addCatalogue($catalogue); $catalogue = $this->filterCatalogue($catalogue, $domain); $bag->addCatalogue($catalogue); } } else { $bag->addCatalogue($catalogue); } } return $bag; }	type_info: bag:unknown catalogue:unknown  global_variable:  function_name: readLocalTranslations filterCatalogue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	symfony_symfony_20120a3df493541100380b1c90e683033f9ee34d_97_0	"buggy:  context: { if (null === $domain) { $domain = 'messages'; } if (null === $locale) { @trigger_error(sprintf('Passing ""null"" to the third argument of the ""%s"" method has been deprecated since Symfony 4.4 and will throw an error in 5.0.', __METHOD__), \E_USER_DEPRECATED); } $this->assertValidLocale($locale); $this->resources[$locale][] = [$format, $resource, $domain]; if (\in_array($locale, $this->fallbackLocales)) { $this->catalogues = []; } else { unset($this->catalogues[$locale]); } }"	type_info: formatter:unknown domain:string locale:unknown  global_variable: formatter: unknown locale: unknown function_name: __construct setConfigCacheFactory addLoader addResource setLocale getLocale setFallbackLocales getFallbackLocales trans transChoice getCatalogue getLoaders loadCatalogue initializeCatalogue initializeCacheCatalogue dumpCatalogue getFallbackContent getCatalogueCachePath doLoadCatalogue loadFallbackCatalogues computeFallbackLocales assertValidLocale getConfigCacheFactory getAllMessages	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	symfony_symfony_20120a3df493541100380b1c90e683033f9ee34d_97_0	"buggy: $this->locale = $locale ?? (class_exists(\Locale::class) ? \Locale::getDefault() : 'en'); context: public function setLocale($locale) { if (null === $locale && (2 > \func_num_args() || func_get_arg(1))) { @trigger_error(sprintf('Passing ""null"" as the $locale argument to %s() is deprecated since Symfony 4.4.', __METHOD__), \E_USER_DEPRECATED); } $this->assertValidLocale($locale); $this->locale = $locale ?? (class_exists(\Locale::class) ? \Locale::getDefault() : 'en'); $this->locale = $locale ?? (class_exists(\Locale::class) ? \Locale::getDefault() : 'en'); }"	type_info: formatter:unknown locale:unknown  global_variable: formatter: unknown locale: unknown function_name: __construct setConfigCacheFactory addLoader addResource setLocale getLocale setFallbackLocales getFallbackLocales trans transChoice getCatalogue getLoaders loadCatalogue initializeCatalogue initializeCacheCatalogue dumpCatalogue getFallbackContent getCatalogueCachePath doLoadCatalogue loadFallbackCatalogues computeFallbackLocales assertValidLocale getConfigCacheFactory getAllMessages	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	symfony_symfony_20120a3df493541100380b1c90e683033f9ee34d_97_0	buggy: return $this->locale; context: public function getLocale() { return $this->locale; return $this->locale; }	type_info: formatter:unknown locale:unknown  global_variable: formatter: unknown locale: unknown function_name: __construct setConfigCacheFactory addLoader addResource setLocale getLocale setFallbackLocales getFallbackLocales trans transChoice getCatalogue getLoaders loadCatalogue initializeCatalogue initializeCacheCatalogue dumpCatalogue getFallbackContent getCatalogueCachePath doLoadCatalogue loadFallbackCatalogues computeFallbackLocales assertValidLocale getConfigCacheFactory getAllMessages	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	symfony_symfony_20120a3df493541100380b1c90e683033f9ee34d_97_0	buggy: if (null === $locale) { context: public function getCatalogue($locale = null) { if (null === $locale) { if (null === $locale) { $locale = $this->getLocale(); } else { $this->assertValidLocale($locale); } if (!isset($this->catalogues[$locale])) { $this->loadCatalogue($locale); } return $this->catalogues[$locale];	type_info: formatter:unknown locale:unknown  global_variable: formatter: unknown locale: unknown function_name: __construct setConfigCacheFactory addLoader addResource setLocale getLocale setFallbackLocales getFallbackLocales trans transChoice getCatalogue getLoaders loadCatalogue initializeCatalogue initializeCacheCatalogue dumpCatalogue getFallbackContent getCatalogueCachePath doLoadCatalogue loadFallbackCatalogues computeFallbackLocales assertValidLocale getConfigCacheFactory getAllMessages	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	symfony_symfony_20120a3df493541100380b1c90e683033f9ee34d_97_0	"buggy: if (null !== $locale && 1 !== preg_match('/^[a-z0-9@_\\.\\-]*$/i', $locale)) { context: protected function assertValidLocale($locale) { if (null !== $locale && 1 !== preg_match('/^[a-z0-9@_\\.\\-]*$/i', $locale)) { if (null !== $locale && 1 !== preg_match('/^[a-z0-9@_\\.\\-]*$/i', $locale)) { throw new InvalidArgumentException(sprintf('Invalid ""%s"" locale.', $locale)); } }"	type_info: formatter:unknown locale:unknown  global_variable: formatter: unknown locale: unknown function_name: __construct setConfigCacheFactory addLoader addResource setLocale getLocale setFallbackLocales getFallbackLocales trans transChoice getCatalogue getLoaders loadCatalogue initializeCatalogue initializeCacheCatalogue dumpCatalogue getFallbackContent getCatalogueCachePath doLoadCatalogue loadFallbackCatalogues computeFallbackLocales assertValidLocale getConfigCacheFactory getAllMessages	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	symfony_symfony_c71265b19a0445d5024048a9b8e7b3993ae6304d_98_0	buggy: * exceptions are turned to TransportException context: use ResponseTrait { doDestruct as public __destruct; } private $body; private $requestOptions = []; private static $mainMulti; private static $idSequence = 0; * exceptions are turned to TransportException public function __construct($body = '', array $info = []) { $this->body = is_iterable($body) ? $body : (string) $body; $this->info = $info + ['http_code' => 200] + $this->info; if (!isset($info['response_headers'])) { return; } $responseHeaders = [];	type_info: requestOptions:array idSequence:integer body:unknown responseHeaders:array info:array  global_variable: body: unknown function_name: __construct getRequestOptions getInfo cancel close fromRequest schedule perform select writeRequest readResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	symfony_symfony_c71265b19a0445d5024048a9b8e7b3993ae6304d_98_0	buggy:  context: $multi->handlesActivity[$id][] = new FirstChunk(); $buffer = $response->requestOptions['buffer'] ?? null; if ($buffer instanceof \Closure && $response->content = $buffer($response->headers) ?: null) { $response->content = \is_resource($response->content) ? $response->content : fopen('php://temp', 'w+'); } } catch (\Throwable $e) { $multi->handlesActivity[$id][] = null; $multi->handlesActivity[$id][] = $e; } } else { $multi->handlesActivity[$id][] = $chunk; } } } protected static function select(ClientState $multi, float $timeout): int { return 42; }	type_info: body:unknown response:unknown multi:unknown id:unknown chunk:unknown buffer:unknown  global_variable: body: unknown function_name: __construct getRequestOptions getInfo cancel close fromRequest schedule perform select writeRequest readResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	symfony_symfony_c71265b19a0445d5024048a9b8e7b3993ae6304d_98_0	"buggy: foreach ($body as $chunk) { if ('' === $chunk = (string) $chunk) { $response->body[] = new ErrorChunk($offset, sprintf('Idle timeout reached for ""%s"".', $response->info['url'])); } else { $response->body[] = $chunk; $offset += \strlen($chunk); $onProgress($offset, $dlSize, $response->info); context: } $onProgress(0, $dlSize, $response->info); $body = $mock instanceof self ? $mock->body : $mock->getContent(false); if (!\is_string($body)) { foreach ($body as $chunk) { if ('' === $chunk = (string) $chunk) { $response->body[] = new ErrorChunk($offset, sprintf('Idle timeout reached for ""%s"".', $response->info['url'])); } else { $response->body[] = $chunk; $offset += \strlen($chunk); $onProgress($offset, $dlSize, $response->info); foreach ($body as $chunk) { if ('' === $chunk = (string) $chunk) { $response->body[] = new ErrorChunk($offset, sprintf('Idle timeout reached for ""%s"".', $response->info['url'])); } else { $response->body[] = $chunk; $offset += \strlen($chunk); $onProgress($offset, $dlSize, $response->info);"	type_info: body:unknown response:unknown chunk:unknown offset:integer onProgress:unknown dlSize:unknown  global_variable: body: unknown function_name: __construct getRequestOptions getInfo cancel close fromRequest schedule perform select writeRequest readResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	symfony_symfony_c71265b19a0445d5024048a9b8e7b3993ae6304d_98_0	"buggy:  context: if (!\is_string($body)) { foreach ($body as $chunk) { if ('' === $chunk = (string) $chunk) { $response->body[] = new ErrorChunk($offset, sprintf('Idle timeout reached for ""%s"".', $response->info['url'])); } else { $response->body[] = $chunk; $offset += \strlen($chunk); $onProgress($offset, $dlSize, $response->info); } } } elseif ('' !== $body) { $response->body[] = $body; $offset = \strlen($body); } if (!isset($response->info['total_time'])) { $response->info['total_time'] = microtime(true) - $response->info['start_time']; }"	type_info: body:unknown response:unknown chunk:unknown offset:integer onProgress:unknown dlSize:unknown  global_variable: body: unknown function_name: __construct getRequestOptions getInfo cancel close fromRequest schedule perform select writeRequest readResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	symfony_symfony_dc3504989b340108ff69542b18aae1be6fff1297_99_0	buggy:  context: protected function fixPhpFilesArray($data) { $keys = array_keys($data); sort($keys); if (self::FILE_KEYS != $keys || !isset($data['name']) || !\is_array($data['name'])) { return $data; } $files = $data; foreach (self::FILE_KEYS as $k) { unset($files[$k]);	type_info: files:array keys:unknown  global_variable:  function_name: __construct replace set add convertFileInformation fixPhpFilesArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	symfony_symfony_e03f7e55e3b30dcca1532e1eeb6096a60bfa61d2_100_0	"buggy: if ($access[self::ACCESS_REF] && !isset($object->$name) && !\array_key_exists($name, (array) $object) && (\PHP_VERSION_ID < 70400 || !(new \ReflectionProperty($class, $name))->hasType())) { context: ) { throw new UninitializedPropertyException(sprintf('The method ""%s::%s()"" returned ""null"", but expected type ""%3$s"". Did you forget to initialize a property or to make the return type nullable using ""?%3$s""?', !str_contains(\get_class($object), ""@anonymous\0"") ? \get_class($object) : (get_parent_class($object) ?: key(class_implements($object)) ?: 'class').'@anonymous', $name, $matches[1]), 0, $e); } throw $e; } } elseif (PropertyReadInfo::TYPE_PROPERTY === $type) { if ($access[self::ACCESS_REF] && !isset($object->$name) && !\array_key_exists($name, (array) $object) && (\PHP_VERSION_ID < 70400 || !(new \ReflectionProperty($class, $name))->hasType())) { if ($access[self::ACCESS_REF] && !isset($object->$name) && !\array_key_exists($name, (array) $object) && (\PHP_VERSION_ID < 70400 || !(new \ReflectionProperty($class, $name))->hasType())) { throw new UninitializedPropertyException(sprintf('The property ""%s::$%s"" is not initialized.', $class, $name)); } $result[self::VALUE] = $object->$name; if (isset($zval[self::REF]) && $access->canBeReference()) {"	type_info: readInfoExtractor:unknown writeInfoExtractor:unknown zval:array type:unknown ignoreInvalidIndices:unknown result:unknown ignoreInvalidProperty:unknown object:unknown class:unknown access:unknown name:unknown  global_variable: readInfoExtractor: unknown writeInfoExtractor: unknown ignoreInvalidIndices: unknown ignoreInvalidProperty: unknown function_name: __construct getValue setValue throwInvalidArgumentException isReadable isWritable readPropertiesUntil readIndex readProperty getReadInfo writeIndex writeProperty writeCollection getWriteInfo isPropertyWritable getPropertyPath createCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	symfony_symfony_e03f7e55e3b30dcca1532e1eeb6096a60bfa61d2_100_0	"buggy: } elseif ($object instanceof \stdClass && property_exists($object, $property)) { context: $type = ($type = $r->getType()) instanceof \ReflectionNamedType ? $type->getName() : (string) $type; throw new UninitializedPropertyException(sprintf('The property ""%s::$%s"" is not readable because it is typed ""%s"". You should initialize it or declare a default value instead.', $r->getDeclaringClass()->getName(), $r->getName(), $type), 0, $e); } throw $e; } } elseif ($object instanceof \stdClass && property_exists($object, $property)) { } elseif ($object instanceof \stdClass && property_exists($object, $property)) { $result[self::VALUE] = $object->$property; if (isset($zval[self::REF])) { $result[self::REF] = &$object->$property; } } elseif (!$ignoreInvalidProperty) { throw new NoSuchPropertyException(sprintf('Can\'t get a way to read the property ""%s"" in class ""%s"".', $property, $class));"	type_info: readInfoExtractor:unknown writeInfoExtractor:unknown zval:array property:unknown type:unknown ignoreInvalidIndices:unknown result:unknown ignoreInvalidProperty:unknown object:unknown class:unknown r:unknown  global_variable: readInfoExtractor: unknown writeInfoExtractor: unknown ignoreInvalidIndices: unknown ignoreInvalidProperty: unknown function_name: __construct getValue setValue throwInvalidArgumentException isReadable isWritable readPropertiesUntil readIndex readProperty getReadInfo writeIndex writeProperty writeCollection getWriteInfo isPropertyWritable getPropertyPath createCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	symfony_symfony_acbee81fcb345848d6eb64b8b81bc6b89c7151b7_101_0	buggy:  context: <?php namespace Symfony\Component\DependencyInjection\Compiler; use Symfony\Component\DependencyInjection\Argument\ArgumentInterface; use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Definition; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ExpressionLanguage; use Symfony\Component\DependencyInjection\Reference;	type_info:  global_variable:  function_name: process enableExpressionProcessing inExpression processValue getConstructor getReflectionMethod getExpressionLanguage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	symfony_symfony_acbee81fcb345848d6eb64b8b81bc6b89c7151b7_101_0	"buggy:  context: $r = new \ReflectionFunction($factory); if (false !== $r->getFileName() && file_exists($r->getFileName())) { $this->container->fileExists($r->getFileName()); } return $r; } if ($factory) { [$class, $method] = $factory; if ($class instanceof Reference) { $class = $this->container->findDefinition((string) $class)->getClass(); } elseif ($class instanceof Definition) { $class = $class->getClass(); } elseif (null === $class) { $class = $definition->getClass(); } if ('__construct' === $method) { throw new RuntimeException(sprintf('Invalid service ""%s"": ""__construct()"" cannot be used as a factory method.', $this->currentId));"	type_info: factory:unknown r:unknown class:unknown  global_variable:  function_name: process enableExpressionProcessing inExpression processValue getConstructor getReflectionMethod getExpressionLanguage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	symfony_symfony_acbee81fcb345848d6eb64b8b81bc6b89c7151b7_101_0	"buggy: $class = $this->container->findDefinition((string) $class)->getClass(); context: if (false !== $r->getFileName() && file_exists($r->getFileName())) { $this->container->fileExists($r->getFileName()); } return $r; } if ($factory) { [$class, $method] = $factory; if ($class instanceof Reference) { $class = $this->container->findDefinition((string) $class)->getClass(); $class = $this->container->findDefinition((string) $class)->getClass(); } elseif ($class instanceof Definition) { $class = $class->getClass(); } elseif (null === $class) { $class = $definition->getClass(); } if ('__construct' === $method) { throw new RuntimeException(sprintf('Invalid service ""%s"": ""__construct()"" cannot be used as a factory method.', $this->currentId)); }"	type_info: factory:unknown r:unknown class:unknown  global_variable:  function_name: process enableExpressionProcessing inExpression processValue getConstructor getReflectionMethod getExpressionLanguage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	symfony_symfony_acbee81fcb345848d6eb64b8b81bc6b89c7151b7_101_0	"buggy: if ('__construct' === $method) { throw new RuntimeException(sprintf('Invalid service ""%s"": ""__construct()"" cannot be used as a factory method.', $this->currentId)); } context: if ($factory) { [$class, $method] = $factory; if ($class instanceof Reference) { $class = $this->container->findDefinition((string) $class)->getClass(); } elseif ($class instanceof Definition) { $class = $class->getClass(); } elseif (null === $class) { $class = $definition->getClass(); } if ('__construct' === $method) { throw new RuntimeException(sprintf('Invalid service ""%s"": ""__construct()"" cannot be used as a factory method.', $this->currentId)); } if ('__construct' === $method) { throw new RuntimeException(sprintf('Invalid service ""%s"": ""__construct()"" cannot be used as a factory method.', $this->currentId)); } return $this->getReflectionMethod(new Definition($class), $method); } $class = $definition->getClass(); try {"	type_info: factory:unknown class:unknown  global_variable:  function_name: process enableExpressionProcessing inExpression processValue getConstructor getReflectionMethod getExpressionLanguage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	symfony_symfony_acbee81fcb345848d6eb64b8b81bc6b89c7151b7_101_0	"buggy: $class = $definition->getClass(); context: $class = $definition->getClass(); } if ('__construct' === $method) { throw new RuntimeException(sprintf('Invalid service ""%s"": ""__construct()"" cannot be used as a factory method.', $this->currentId)); } return $this->getReflectionMethod(new Definition($class), $method); } $class = $definition->getClass(); $class = $definition->getClass(); try { if (!$r = $this->container->getReflectionClass($class)) { throw new RuntimeException(sprintf('Invalid service ""%s"": class ""%s"" does not exist.', $this->currentId, $class)); } } catch (\ReflectionException $e) { throw new RuntimeException(sprintf('Invalid service ""%s"": ', $this->currentId).lcfirst($e->getMessage())); } if (!$r = $r->getConstructor()) {"	type_info: r:unknown class:unknown  global_variable:  function_name: process enableExpressionProcessing inExpression processValue getConstructor getReflectionMethod getExpressionLanguage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	symfony_symfony_acbee81fcb345848d6eb64b8b81bc6b89c7151b7_101_0	"buggy:  context: throw new RuntimeException(sprintf('Invalid service ""%s"": ""__construct()"" cannot be used as a factory method.', $this->currentId)); } return $this->getReflectionMethod(new Definition($class), $method); } $class = $definition->getClass(); try { if (!$r = $this->container->getReflectionClass($class)) { throw new RuntimeException(sprintf('Invalid service ""%s"": class ""%s"" does not exist.', $this->currentId, $class)); } } catch (\ReflectionException $e) { throw new RuntimeException(sprintf('Invalid service ""%s"": ', $this->currentId).lcfirst($e->getMessage())); } if (!$r = $r->getConstructor()) { if ($required) { throw new RuntimeException(sprintf('Invalid service ""%s"": class%s has no constructor.', $this->currentId, sprintf($class !== $this->currentId ? ' ""%s""' : '', $class))); } } elseif (!$r->isPublic()) {"	type_info: r:unknown class:unknown  global_variable:  function_name: process enableExpressionProcessing inExpression processValue getConstructor getReflectionMethod getExpressionLanguage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	symfony_symfony_acbee81fcb345848d6eb64b8b81bc6b89c7151b7_101_0	"buggy: if (!$class = $definition->getClass()) { context: protected function getReflectionMethod(Definition $definition, $method) { if ('__construct' === $method) { return $this->getConstructor($definition, true); } if (!$class = $definition->getClass()) { if (!$class = $definition->getClass()) { throw new RuntimeException(sprintf('Invalid service ""%s"": the class is not set.', $this->currentId)); } if (!$r = $this->container->getReflectionClass($class)) { throw new RuntimeException(sprintf('Invalid service ""%s"": class ""%s"" does not exist.', $this->currentId, $class)); } if (!$r->hasMethod($method)) { throw new RuntimeException(sprintf('Invalid service ""%s"": method ""%s()"" does not exist.', $this->currentId, $class !== $this->currentId ? $class.'::'.$method : $method)); }"	type_info: r:unknown class:unknown  global_variable:  function_name: process enableExpressionProcessing inExpression processValue getConstructor getReflectionMethod getExpressionLanguage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	symfony_symfony_4f2b492166d7cc9a522e540b064c748b5bece6a9_102_0	"buggy: $builder->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) use (&$unknownValues) { context: if (\count($unknownValues) > 0 && !$options['multiple']) { throw new TransformationFailedException(sprintf('The choices ""%s"" do not exist in the choice list.', implode('"", ""', array_keys($unknownValues)))); } $event->setData($knownValues); }); } if ($options['multiple']) { $builder->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) use (&$unknownValues) { $builder->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) use (&$unknownValues) { if (\count($unknownValues) > 0) { $form = $event->getForm(); $clientDataAsString = is_scalar($form->getViewData()) ? (string) $form->getViewData() : \gettype($form->getViewData()); $messageTemplate = 'The value {{ value }} is not valid.'; if (null !== $this->translator) { $message = $this->translator->trans($messageTemplate, ['{{ value }}' => $clientDataAsString], 'validators'); } else {"	type_info: choiceListFactory:unknown unknownValues:array form:unknown knownValues:array clientDataAsString:unknown messageTemplate:string message:unknown  global_variable: choiceListFactory: unknown function_name: __construct buildForm buildView finishView configureOptions getBlockPrefix addSubForms addSubForm createChoiceList createChoiceListView	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	symfony_symfony_4f2b492166d7cc9a522e540b064c748b5bece6a9_102_0	"buggy: $clientDataAsString = is_scalar($form->getViewData()) ? (string) $form->getViewData() : \gettype($form->getViewData()); $messageTemplate = 'The value {{ value }} is not valid.'; context: $builder->addEventListener(FormEvents::POST_SUBMIT, function (FormEvent $event) use (&$unknownValues) { if (\count($unknownValues) > 0) { $form = $event->getForm(); $clientDataAsString = is_scalar($form->getViewData()) ? (string) $form->getViewData() : \gettype($form->getViewData()); $messageTemplate = 'The value {{ value }} is not valid.'; $clientDataAsString = is_scalar($form->getViewData()) ? (string) $form->getViewData() : \gettype($form->getViewData()); $messageTemplate = 'The value {{ value }} is not valid.'; if (null !== $this->translator) { $message = $this->translator->trans($messageTemplate, ['{{ value }}' => $clientDataAsString], 'validators'); } else { $message = strtr($messageTemplate, ['{{ value }}' => $clientDataAsString]); } $form->addError(new FormError($message, $messageTemplate, ['{{ value }}' => $clientDataAsString], null, new TransformationFailedException(sprintf('The choices ""%s"" do not exist in the choice list.', implode('"", ""', array_keys($unknownValues)))))); } });"	type_info: choiceListFactory:unknown unknownValues:array form:unknown clientDataAsString:unknown messageTemplate:string message:unknown  global_variable: choiceListFactory: unknown function_name: __construct buildForm buildView finishView configureOptions getBlockPrefix addSubForms addSubForm createChoiceList createChoiceListView	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	symfony_symfony_4f2b492166d7cc9a522e540b064c748b5bece6a9_102_0	"buggy: $form->addError(new FormError($message, $messageTemplate, ['{{ value }}' => $clientDataAsString], null, new TransformationFailedException(sprintf('The choices ""%s"" do not exist in the choice list.', implode('"", ""', array_keys($unknownValues)))))); context: if (null !== $this->translator) { $message = $this->translator->trans($messageTemplate, ['{{ value }}' => $clientDataAsString], 'validators'); } else { $message = strtr($messageTemplate, ['{{ value }}' => $clientDataAsString]); } $form->addError(new FormError($message, $messageTemplate, ['{{ value }}' => $clientDataAsString], null, new TransformationFailedException(sprintf('The choices ""%s"" do not exist in the choice list.', implode('"", ""', array_keys($unknownValues)))))); $form->addError(new FormError($message, $messageTemplate, ['{{ value }}' => $clientDataAsString], null, new TransformationFailedException(sprintf('The choices ""%s"" do not exist in the choice list.', implode('"", ""', array_keys($unknownValues)))))); } }); $builder->addViewTransformer(new ChoicesToValuesTransformer($choiceList)); } else { $builder->addViewTransformer(new ChoiceToValueTransformer($choiceList));"	type_info: choiceListFactory:unknown unknownValues:array choiceList:unknown form:unknown clientDataAsString:unknown messageTemplate:string message:unknown  global_variable: choiceListFactory: unknown function_name: __construct buildForm buildView finishView configureOptions getBlockPrefix addSubForms addSubForm createChoiceList createChoiceListView	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	symfony_symfony_e4a0c5d556ee8acd3abdbf7a8476e132e7ee6413_103_0	buggy:  context: $rows = array_merge($this->headers, [$divider], $this->rows); } $this->calculateNumberOfColumns($rows); $rows = $this->buildTableRows($rows); $this->calculateColumnsWidth($rows); $isHeader = !$this->horizontal; $isFirstRow = $this->horizontal; foreach ($rows as $row) { if ($divider === $row) { $isHeader = false; $isFirstRow = true; continue; } if ($row instanceof TableSeparator) { $this->renderRowSeparator();	type_info: rows:array styles:unknown divider:unknown isHeader:unknown isFirstRow:boolean style:unknown row:unknown  global_variable: styles: unknown style: unknown function_name: __construct setStyleDefinition getStyleDefinition setStyle getStyle setColumnStyle getColumnStyle setColumnWidth setColumnWidths setColumnMaxWidth setHeaders setRows addRows addRow appendRow setRow setHeaderTitle setFooterTitle setHorizontal render renderRowSeparator renderColumnSeparator renderRow renderCell calculateNumberOfColumns buildTableRows calculateRowCount fillNextRows fillCells copyRow getNumberOfColumns getRowColumns calculateColumnsWidth getColumnSeparatorWidth getCellWidth cleanup initStyles resolveStyle	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	symfony_symfony_e4a0c5d556ee8acd3abdbf7a8476e132e7ee6413_103_0	buggy: if ($isFirstRow) { $this->renderRowSeparator(self::SEPARATOR_TOP_BOTTOM); $isFirstRow = false; } else { $this->renderRowSeparator(self::SEPARATOR_TOP, $this->headerTitle, $this->style->getHeaderTitleFormat()); } context: if ($row instanceof TableSeparator) { $this->renderRowSeparator(); continue; } if (!$row) { continue; } if ($isHeader || $isFirstRow) { if ($isFirstRow) { $this->renderRowSeparator(self::SEPARATOR_TOP_BOTTOM); $isFirstRow = false; } else { $this->renderRowSeparator(self::SEPARATOR_TOP, $this->headerTitle, $this->style->getHeaderTitleFormat()); } if ($isFirstRow) { $this->renderRowSeparator(self::SEPARATOR_TOP_BOTTOM); $isFirstRow = false; } else { $this->renderRowSeparator(self::SEPARATOR_TOP, $this->headerTitle, $this->style->getHeaderTitleFormat()); } } if ($this->horizontal) { $this->renderRow($row, $this->style->getCellRowFormat(), $this->style->getCellHeaderFormat()); } else {	type_info: styles:unknown isHeader:unknown isFirstRow:boolean style:unknown row:unknown  global_variable: styles: unknown style: unknown function_name: __construct setStyleDefinition getStyleDefinition setStyle getStyle setColumnStyle getColumnStyle setColumnWidth setColumnWidths setColumnMaxWidth setHeaders setRows addRows addRow appendRow setRow setHeaderTitle setFooterTitle setHorizontal render renderRowSeparator renderColumnSeparator renderRow renderCell calculateNumberOfColumns buildTableRows calculateRowCount fillNextRows fillCells copyRow getNumberOfColumns getRowColumns calculateColumnsWidth getColumnSeparatorWidth getCellWidth cleanup initStyles resolveStyle	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	symfony_symfony_06b25c713b6e76360b51f95b04e4a531fcb158c0_104_0	buggy: private $tracedRequests = []; context: use Symfony\Component\HttpClient\Response\TraceableResponse; use Symfony\Component\Stopwatch\Stopwatch; use Symfony\Contracts\HttpClient\HttpClientInterface; use Symfony\Contracts\HttpClient\ResponseInterface; use Symfony\Contracts\HttpClient\ResponseStreamInterface; use Symfony\Contracts\Service\ResetInterface; final class TraceableHttpClient implements HttpClientInterface, ResetInterface, LoggerAwareInterface { private $client; private $tracedRequests = []; private $tracedRequests = []; private $stopwatch; public function __construct(HttpClientInterface $client, Stopwatch $stopwatch = null) { $this->client = $client; $this->stopwatch = $stopwatch; } public function request(string $method, string $url, array $options = []): ResponseInterface	type_info: tracedRequests:array stopwatch:unknown options:unknown  global_variable: stopwatch: unknown function_name: __construct request stream getTracedRequests reset setLogger withOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	symfony_symfony_06b25c713b6e76360b51f95b04e4a531fcb158c0_104_0	buggy:  context: use Symfony\Contracts\HttpClient\HttpClientInterface; use Symfony\Contracts\HttpClient\ResponseInterface; use Symfony\Contracts\HttpClient\ResponseStreamInterface; use Symfony\Contracts\Service\ResetInterface; final class TraceableHttpClient implements HttpClientInterface, ResetInterface, LoggerAwareInterface { private $client; private $tracedRequests = []; private $stopwatch; public function __construct(HttpClientInterface $client, Stopwatch $stopwatch = null) { $this->client = $client; $this->stopwatch = $stopwatch; } public function request(string $method, string $url, array $options = []): ResponseInterface { $content = null;	type_info: tracedRequests:array stopwatch:unknown options:unknown content:boolean  global_variable: stopwatch: unknown function_name: __construct request stream getTracedRequests reset setLogger withOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	symfony_symfony_06b25c713b6e76360b51f95b04e4a531fcb158c0_104_0	buggy:  context: public function __construct(HttpClientInterface $client, Stopwatch $stopwatch = null) { $this->client = $client; $this->stopwatch = $stopwatch; }	type_info: stopwatch:unknown  global_variable: stopwatch: unknown function_name: __construct request stream getTracedRequests reset setLogger withOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	symfony_symfony_06b25c713b6e76360b51f95b04e4a531fcb158c0_104_0	buggy: return $this->tracedRequests; context: public function getTracedRequests(): array { return $this->tracedRequests; return $this->tracedRequests; }	type_info: stopwatch:unknown  global_variable: stopwatch: unknown function_name: __construct request stream getTracedRequests reset setLogger withOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	symfony_symfony_06b25c713b6e76360b51f95b04e4a531fcb158c0_104_0	buggy:  context: public function getTracedRequests(): array { return $this->tracedRequests; }	type_info: stopwatch:unknown  global_variable: stopwatch: unknown function_name: __construct request stream getTracedRequests reset setLogger withOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	symfony_symfony_06b25c713b6e76360b51f95b04e4a531fcb158c0_104_0	buggy: $this->tracedRequests = []; context: public function reset() { if ($this->client instanceof ResetInterface) { $this->client->reset(); } $this->tracedRequests = []; $this->tracedRequests = []; }	type_info: stopwatch:unknown  global_variable: stopwatch: unknown function_name: __construct request stream getTracedRequests reset setLogger withOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	symfony_symfony_06b25c713b6e76360b51f95b04e4a531fcb158c0_104_0	buggy:  context: public function reset() { if ($this->client instanceof ResetInterface) { $this->client->reset(); } $this->tracedRequests = []; }	type_info: stopwatch:unknown  global_variable: stopwatch: unknown function_name: __construct request stream getTracedRequests reset setLogger withOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	symfony_symfony_17d54fd6cf70d44354c88516be579c4cf4baa43e_105_0	buggy: $event->getRequest()->getSession()->invalidate(); context: public function onLogout(LogoutEvent $event): void { $event->getRequest()->getSession()->invalidate(); $event->getRequest()->getSession()->invalidate(); }	type_info:  global_variable:  function_name: onLogout getSubscribedEvents	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	symfony_symfony_6faae75102751b9550ed767b7afe5a544e35d5ee_106_0	buggy: case Types::JSON_ARRAY: context: return [new Type(Type::BUILTIN_TYPE_OBJECT, $nullable, 'DateTimeImmutable')]; case Types::DATEINTERVAL: return [new Type(Type::BUILTIN_TYPE_OBJECT, $nullable, 'DateInterval')]; } break; case Type::BUILTIN_TYPE_ARRAY: switch ($typeOfField) { case Types::ARRAY: case Types::JSON_ARRAY: case Types::JSON_ARRAY: return [new Type(Type::BUILTIN_TYPE_ARRAY, $nullable, null, true)]; case Types::SIMPLE_ARRAY: return [new Type(Type::BUILTIN_TYPE_ARRAY, $nullable, null, true, new Type(Type::BUILTIN_TYPE_INT), new Type(Type::BUILTIN_TYPE_STRING))]; } } return [new Type($builtinType, $nullable)]; }	type_info: nullable:boolean typeOfField:unknown builtinType:unknown  global_variable:  function_name: __construct getProperties getTypes isReadable isWritable getMetadata isAssociationNullable getPhpType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	symfony_symfony_6faae75102751b9550ed767b7afe5a544e35d5ee_106_0	buggy: case Types::JSON_ARRAY: context: case Types::TIME_MUTABLE: case Types::DATE_IMMUTABLE: case Types::DATETIME_IMMUTABLE: case Types::DATETIMETZ_IMMUTABLE: case Types::TIME_IMMUTABLE: case Types::DATEINTERVAL: return Type::BUILTIN_TYPE_OBJECT; case Types::ARRAY: case Types::SIMPLE_ARRAY: case Types::JSON_ARRAY: case Types::JSON_ARRAY: return Type::BUILTIN_TYPE_ARRAY; } return null; } }	type_info:  global_variable:  function_name: __construct getProperties getTypes isReadable isWritable getMetadata isAssociationNullable getPhpType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	symfony_symfony_c7442cb8102ae302b52e489069131a45304939fa_107_0	"buggy: if (!$this->passwordHashers[$hasherKey] instanceof PasswordHasherInterface) { $this->passwordHashers[$hasherKey] = $this->passwordHashers[$hasherKey] instanceof PasswordEncoderInterface ? new PasswordHasherAdapter($this->passwordHashers[$hasherKey]) : $this->createHasher($this->passwordHashers[$hasherKey]) ; } return $this->passwordHashers[$hasherKey]; context: $hasherKey = $class; break; } } } if (null === $hasherKey) { throw new \RuntimeException(sprintf('No password hasher has been configured for account ""%s"".', \is_object($user) ? get_debug_type($user) : $user)); } if (!$this->passwordHashers[$hasherKey] instanceof PasswordHasherInterface) { $this->passwordHashers[$hasherKey] = $this->passwordHashers[$hasherKey] instanceof PasswordEncoderInterface ? new PasswordHasherAdapter($this->passwordHashers[$hasherKey]) : $this->createHasher($this->passwordHashers[$hasherKey]) ; } return $this->passwordHashers[$hasherKey]; if (!$this->passwordHashers[$hasherKey] instanceof PasswordHasherInterface) { $this->passwordHashers[$hasherKey] = $this->passwordHashers[$hasherKey] instanceof PasswordEncoderInterface ? new PasswordHasherAdapter($this->passwordHashers[$hasherKey]) : $this->createHasher($this->passwordHashers[$hasherKey]) ; } return $this->passwordHashers[$hasherKey]; }"	type_info: hasherKey:unknown class:unknown  global_variable:  function_name: __construct getPasswordHasher createHasher getHasherConfigFromAlgorithm	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	symfony_symfony_c7442cb8102ae302b52e489069131a45304939fa_107_0	buggy:  context: return $this->createHasher($rawConfig); }, ['pbkdf2', $rawConfig['hash_algorithm'] ?? 'sha512']); } else { $extrapasswordHashers = [new Pbkdf2PasswordHasher(), new MessageDigestPasswordHasher()]; } return new MigratingPasswordHasher($hasher, ...$extrapasswordHashers); } private function getHasherConfigFromAlgorithm(array $config): array { if ('auto' === $config['algorithm']) { if (SodiumPasswordHasher::isSupported()) { $algorithms = ['native', 'sodium', 'pbkdf2']; } else { $algorithms = ['native', 'pbkdf2']; } if ($config['hash_algorithm'] ?? '') {	type_info: config:unknown hasher:unknown extrapasswordHashers:array algorithms:array  global_variable:  function_name: __construct getPasswordHasher createHasher getHasherConfigFromAlgorithm	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	symfony_symfony_c7442cb8102ae302b52e489069131a45304939fa_107_0	buggy: if ($hasher = $this->passwordHashers[$name] ?? false) { $hasher = $hasher instanceof PasswordHasherInterface ? $hasher : $this->createHasher($hasher, true); context: 'class' => MigratingPasswordHasher::class, 'arguments' => $hasherChain, ]; } if ($frompasswordHashers = ($config['migrate_from'] ?? false)) { unset($config['migrate_from']); $hasherChain = [$this->createHasher($config, true)]; foreach ($frompasswordHashers as $name) { if ($hasher = $this->passwordHashers[$name] ?? false) { $hasher = $hasher instanceof PasswordHasherInterface ? $hasher : $this->createHasher($hasher, true); if ($hasher = $this->passwordHashers[$name] ?? false) { $hasher = $hasher instanceof PasswordHasherInterface ? $hasher : $this->createHasher($hasher, true); } else { $hasher = $this->createHasher(['algorithm' => $name], true); } $hasherChain[] = $hasher; } return [	type_info: config:unknown hasher:unknown hasherChain:array frompasswordHashers:unknown  global_variable:  function_name: __construct getPasswordHasher createHasher getHasherConfigFromAlgorithm	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	symfony_symfony_499df3d805f315b5beff767a7a60b2235f8743cf_108_0	buggy: new DecoratorServicePass(), context: new ValidateEnvPlaceholdersPass(), new ResolveDecoratorStackPass(), new ResolveChildDefinitionsPass(), new RegisterServiceSubscribersPass(), new ResolveParameterPlaceHoldersPass(false, false), new ResolveFactoryClassPass(), new ResolveNamedArgumentsPass(), new AutowireRequiredMethodsPass(), new AutowireRequiredPropertiesPass(), new ResolveBindingsPass(), new DecoratorServicePass(), new DecoratorServicePass(), new CheckDefinitionValidityPass(), new AutowirePass(false), new ServiceLocatorTagPass(), new ResolveTaggedIteratorArgumentPass(), new ResolveServiceSubscribersPass(), new ResolveReferencesToAliasesPass(), new ResolveInvalidReferencesPass(), new AnalyzeServiceReferencesPass(true), new CheckCircularReferencesPass(),	type_info:  global_variable:  function_name: __construct getPasses addPass getAfterRemovingPasses getBeforeOptimizationPasses getBeforeRemovingPasses getOptimizationPasses getRemovingPasses getMergePass setMergePass setAfterRemovingPasses setBeforeOptimizationPasses setBeforeRemovingPasses setOptimizationPasses setRemovingPasses sortPasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	symfony_symfony_499df3d805f315b5beff767a7a60b2235f8743cf_108_0	buggy:  context: new ResolveParameterPlaceHoldersPass(false, false), new ResolveFactoryClassPass(), new ResolveNamedArgumentsPass(), new AutowireRequiredMethodsPass(), new AutowireRequiredPropertiesPass(), new ResolveBindingsPass(), new DecoratorServicePass(), new CheckDefinitionValidityPass(), new AutowirePass(false), new ServiceLocatorTagPass(), new ResolveTaggedIteratorArgumentPass(), new ResolveServiceSubscribersPass(), new ResolveReferencesToAliasesPass(), new ResolveInvalidReferencesPass(), new AnalyzeServiceReferencesPass(true), new CheckCircularReferencesPass(), new CheckReferenceValidityPass(), new CheckArgumentsValidityPass(false), ]];	type_info:  global_variable:  function_name: __construct getPasses addPass getAfterRemovingPasses getBeforeOptimizationPasses getBeforeRemovingPasses getOptimizationPasses getRemovingPasses getMergePass setMergePass setAfterRemovingPasses setBeforeOptimizationPasses setBeforeRemovingPasses setOptimizationPasses setRemovingPasses sortPasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	symfony_symfony_fe83e0e45718c5f5918785ffee7abbe14377022a_109_0	buggy: $zvalIsRef = null !== \ReflectionReference::fromArrayElement($vals, $k); context: if ($gk !== $k) { $fromObjCast = true; $refs = $vals = array_values($queue[$i]); break; } } } foreach ($vals as $k => $v) { if (\PHP_VERSION_ID >= 70400) { $zvalIsRef = null !== \ReflectionReference::fromArrayElement($vals, $k); $zvalIsRef = null !== \ReflectionReference::fromArrayElement($vals, $k); } else { $refs[$k] = $cookie; $zvalIsRef = $vals[$k] === $cookie; } if ($zvalIsRef) { $vals[$k] = &$stub; unset($stub); if ($v instanceof Stub && isset($hardRefs[spl_object_id($v)])) {	type_info: queue:array hardRefs:array cookie:array stub:array gid:unknown fromObjCast:boolean i:integer refs:unknown k:unknown zvalIsRef:unknown gk:unknown v:unknown vals:array  global_variable: gid: unknown function_name: doClone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	symfony_symfony_fe83e0e45718c5f5918785ffee7abbe14377022a_109_0	buggy: $zvalIsRef = $vals[$k] === $cookie; context: break; } } } foreach ($vals as $k => $v) { if (\PHP_VERSION_ID >= 70400) { $zvalIsRef = null !== \ReflectionReference::fromArrayElement($vals, $k); } else { $refs[$k] = $cookie; $zvalIsRef = $vals[$k] === $cookie; $zvalIsRef = $vals[$k] === $cookie; } if ($zvalIsRef) { $vals[$k] = &$stub; unset($stub); if ($v instanceof Stub && isset($hardRefs[spl_object_id($v)])) { $vals[$k] = $refs[$k] = $v; if ($v->value instanceof Stub && (Stub::TYPE_OBJECT === $v->value->type || Stub::TYPE_RESOURCE === $v->value->type)) { ++$v->value->refCount;	type_info: queue:array hardRefs:array cookie:array stub:array gid:unknown refs:unknown k:unknown zvalIsRef:unknown v:unknown vals:array  global_variable: gid: unknown function_name: doClone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	symfony_symfony_fe83e0e45718c5f5918785ffee7abbe14377022a_109_0	buggy: if ($zvalIsRef) { context: } foreach ($vals as $k => $v) { if (\PHP_VERSION_ID >= 70400) { $zvalIsRef = null !== \ReflectionReference::fromArrayElement($vals, $k); } else { $refs[$k] = $cookie; $zvalIsRef = $vals[$k] === $cookie; } if ($zvalIsRef) { if ($zvalIsRef) { $vals[$k] = &$stub; unset($stub); if ($v instanceof Stub && isset($hardRefs[spl_object_id($v)])) { $vals[$k] = $refs[$k] = $v; if ($v->value instanceof Stub && (Stub::TYPE_OBJECT === $v->value->type || Stub::TYPE_RESOURCE === $v->value->type)) { ++$v->value->refCount; } ++$v->refCount; continue;	type_info: queue:array hardRefs:array cookie:array stub:array gid:unknown refs:unknown k:unknown zvalIsRef:unknown v:unknown vals:array  global_variable: gid: unknown function_name: doClone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	symfony_symfony_fe83e0e45718c5f5918785ffee7abbe14377022a_109_0	buggy: if ($v instanceof Stub && isset($hardRefs[spl_object_id($v)])) { $vals[$k] = $refs[$k] = $v; context: if (\PHP_VERSION_ID >= 70400) { $zvalIsRef = null !== \ReflectionReference::fromArrayElement($vals, $k); } else { $refs[$k] = $cookie; $zvalIsRef = $vals[$k] === $cookie; } if ($zvalIsRef) { $vals[$k] = &$stub; unset($stub); if ($v instanceof Stub && isset($hardRefs[spl_object_id($v)])) { $vals[$k] = $refs[$k] = $v; if ($v instanceof Stub && isset($hardRefs[spl_object_id($v)])) { $vals[$k] = $refs[$k] = $v; if ($v->value instanceof Stub && (Stub::TYPE_OBJECT === $v->value->type || Stub::TYPE_RESOURCE === $v->value->type)) { ++$v->value->refCount; } ++$v->refCount; continue; } $refs[$k] = $vals[$k] = new Stub(); $refs[$k]->value = $v;	type_info: queue:array hardRefs:array cookie:array stub:array gid:unknown refs:unknown k:unknown zvalIsRef:unknown v:unknown vals:array  global_variable: gid: unknown function_name: doClone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	symfony_symfony_fe83e0e45718c5f5918785ffee7abbe14377022a_109_0	buggy: $refs[$k] = $vals[$k] = new Stub(); $refs[$k]->value = $v; $h = spl_object_id($refs[$k]); $hardRefs[$h] = &$refs[$k]; $values[$h] = $v; context: $vals[$k] = &$stub; unset($stub); if ($v instanceof Stub && isset($hardRefs[spl_object_id($v)])) { $vals[$k] = $refs[$k] = $v; if ($v->value instanceof Stub && (Stub::TYPE_OBJECT === $v->value->type || Stub::TYPE_RESOURCE === $v->value->type)) { ++$v->value->refCount; } ++$v->refCount; continue; } $refs[$k] = $vals[$k] = new Stub(); $refs[$k]->value = $v; $h = spl_object_id($refs[$k]); $hardRefs[$h] = &$refs[$k]; $values[$h] = $v; $refs[$k] = $vals[$k] = new Stub(); $refs[$k]->value = $v; $h = spl_object_id($refs[$k]); $hardRefs[$h] = &$refs[$k]; $values[$h] = $v; $vals[$k]->handle = ++$refsCounter; } switch (true) { case null === $v: case \is_bool($v):	type_info: refsCounter:integer queue:array hardRefs:array values:array stub:array gid:unknown refs:unknown k:unknown h:unknown v:unknown vals:array  global_variable: gid: unknown function_name: doClone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	symfony_symfony_fe83e0e45718c5f5918785ffee7abbe14377022a_109_0	buggy:  context: } ++$v->refCount; continue; } $refs[$k] = $vals[$k] = new Stub(); $refs[$k]->value = $v; $h = spl_object_id($refs[$k]); $hardRefs[$h] = &$refs[$k]; $values[$h] = $v; $vals[$k]->handle = ++$refsCounter; } switch (true) { case null === $v: case \is_bool($v): case \is_int($v): case \is_float($v): continue 2; case \is_string($v): if ('' === $v) { continue 2;	type_info: refsCounter:integer hardRefs:array values:array gid:unknown refs:unknown k:unknown h:unknown v:unknown vals:array  global_variable: gid: unknown function_name: doClone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	symfony_symfony_fe83e0e45718c5f5918785ffee7abbe14377022a_109_0	buggy: if ($v === $gv) { context: break; } } $a = $v; if (Stub::ARRAY_ASSOC === $stub->class) { if (\PHP_VERSION_ID < 80100 && ($a[$gid] = true) && isset($v[$gid])) { unset($v[$gid]); $a = []; foreach ($v as $gk => &$gv) { if ($v === $gv) { if ($v === $gv) { unset($v); $v = new Stub(); $v->value = [$v->cut = \count($gv), Stub::TYPE_ARRAY => 0]; $v->handle = -1; $gv = &$hardRefs[spl_object_id($v)]; $gv = $v; } $a[$gk] = &$gv;	type_info: hardRefs:array a:array stub:array gid:unknown gk:unknown v:unknown gv:unknown  global_variable: gid: unknown function_name: doClone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	symfony_symfony_fe83e0e45718c5f5918785ffee7abbe14377022a_109_0	buggy: $gv = &$hardRefs[spl_object_id($v)]; context: if (Stub::ARRAY_ASSOC === $stub->class) { if (\PHP_VERSION_ID < 80100 && ($a[$gid] = true) && isset($v[$gid])) { unset($v[$gid]); $a = []; foreach ($v as $gk => &$gv) { if ($v === $gv) { unset($v); $v = new Stub(); $v->value = [$v->cut = \count($gv), Stub::TYPE_ARRAY => 0]; $v->handle = -1; $gv = &$hardRefs[spl_object_id($v)]; $gv = &$hardRefs[spl_object_id($v)]; $gv = $v; } $a[$gk] = &$gv; } unset($gv); } else { $a = $v; }	type_info: hardRefs:array a:array stub:array gid:unknown gk:unknown v:unknown gv:unknown  global_variable: gid: unknown function_name: doClone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	symfony_symfony_fe83e0e45718c5f5918785ffee7abbe14377022a_109_0	buggy: if ($zvalIsRef) { $refs[$k]->value = $stub; } else { context: if ($arrayStub->cut) { $stub = [$arrayStub->cut, $arrayStub->class => $arrayStub->position]; $arrayStub->cut = 0; } elseif (isset(self::$arrayCache[$arrayStub->class][$arrayStub->position])) { $stub = self::$arrayCache[$arrayStub->class][$arrayStub->position]; } else { self::$arrayCache[$arrayStub->class][$arrayStub->position] = $stub = [$arrayStub->class => $arrayStub->position]; } } if ($zvalIsRef) { $refs[$k]->value = $stub; } else { if ($zvalIsRef) { $refs[$k]->value = $stub; } else { $vals[$k] = $stub; } } if ($fromObjCast) { $fromObjCast = false; $refs = $vals;	type_info: arrayCache:array stub:array gid:unknown arrayStub:unknown fromObjCast:boolean refs:unknown k:unknown zvalIsRef:unknown vals:array  global_variable: gid: unknown function_name: doClone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	symfony_symfony_fe83e0e45718c5f5918785ffee7abbe14377022a_109_0	buggy:  context: $stub = self::$arrayCache[$arrayStub->class][$arrayStub->position]; } else { self::$arrayCache[$arrayStub->class][$arrayStub->position] = $stub = [$arrayStub->class => $arrayStub->position]; } } if ($zvalIsRef) { $refs[$k]->value = $stub; } else { $vals[$k] = $stub; } } if ($fromObjCast) { $fromObjCast = false; $refs = $vals; $vals = []; $j = -1; foreach ($queue[$i] as $k => $v) { foreach ([$k => true] as $gk => $gv) {	type_info: arrayCache:array queue:array stub:array gid:unknown arrayStub:unknown fromObjCast:boolean i:integer refs:unknown k:unknown zvalIsRef:unknown j:unknown gk:unknown v:unknown gv:unknown vals:array  global_variable: gid: unknown function_name: doClone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	symfony_symfony_db60d1fd87131f860672f8d11fd605bcb658652a_110_0	buggy:  context: } $collectorDefinition = $container->getDefinition($this->dataCollectorCacheId); $recorder = new Definition(is_subclass_of($definition->getClass(), TagAwareAdapterInterface::class) ? TraceableTagAwareAdapter::class : TraceableAdapter::class); $recorder->setTags($definition->getTags()); if (!$definition->isPublic() || !$definition->isPrivate()) { $recorder->setPublic($definition->isPublic()); } $recorder->setArguments([new Reference($innerId = $id.$this->cachePoolRecorderInnerSuffix)]); $definition->setTags([]); $definition->setPublic(false); $container->setDefinition($innerId, $definition); $container->setDefinition($id, $recorder); $collectorDefinition->addMethodCall('addInstance', [$name, new Reference($id)]); $collectorDefinition->setPublic(false); } }	type_info: dataCollectorCacheId:unknown id:unknown definition:unknown collectorDefinition:unknown recorder:unknown innerId:unknown  global_variable: dataCollectorCacheId: unknown function_name: __construct process addToCollector	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	symfony_symfony_d93da591e57b944352d517c9b9b3d4a507799c05_111_0	buggy: throw new \LogicException('Cannot determine the correct '.$serviceIdentifier.' to use: there is no active Request and so, the firewall cannot be determined. Try using a specific '.$serviceIdentifier().' service.'); context: private function getForFirewall(): object { $serviceIdentifier = str_replace('FirewallAware', '', static::class); if (null === $request = $this->requestStack->getCurrentRequest()) { throw new \LogicException('Cannot determine the correct '.$serviceIdentifier.' to use: there is no active Request and so, the firewall cannot be determined. Try using a specific '.$serviceIdentifier().' service.'); throw new \LogicException('Cannot determine the correct '.$serviceIdentifier.' to use: there is no active Request and so, the firewall cannot be determined. Try using a specific '.$serviceIdentifier().' service.'); } $firewall = $this->firewallMap->getFirewallConfig($request); if (!$firewall) { throw new \LogicException('No '.$serviceIdentifier.' found as the current route is not covered by a firewall.'); } $firewallName = $firewall->getName(); if (!$this->locator->has($firewallName)) { $message = 'No '.$serviceIdentifier.' found for this firewall.';	type_info: serviceIdentifier:unknown request:unknown firewall:unknown firewallName:unknown message:string  global_variable:  function_name: getForFirewall	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	symfony_symfony_d6b7e2d61e6d02bf07be0b21bc5c0412640074a5_112_0	buggy:  context: <?php namespace Symfony\Component\Serializer\Normalizer; use Symfony\Component\PropertyAccess\Exception\InvalidArgumentException; use Symfony\Component\PropertyAccess\Exception\NoSuchPropertyException; use Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface; use Symfony\Component\PropertyInfo\Type; use Symfony\Component\Serializer\Encoder\JsonEncoder; use Symfony\Component\Serializer\Exception\ExtraAttributesException; use Symfony\Component\Serializer\Exception\LogicException; use Symfony\Component\Serializer\Exception\NotNormalizableValueException; use Symfony\Component\Serializer\Exception\RuntimeException; use Symfony\Component\Serializer\Mapping\AttributeMetadataInterface; use Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata; use Symfony\Component\Serializer\Mapping\ClassDiscriminatorResolverInterface; use Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactoryInterface; use Symfony\Component\Serializer\NameConverter\NameConverterInterface;	type_info: classDiscriminatorResolver:unknown maxDepthHandler:unknown  global_variable: classDiscriminatorResolver: unknown maxDepthHandler: unknown function_name: __construct supportsNormalization normalize instantiateObject getAttributes extractAttributes getAttributeValue setMaxDepthHandler supportsDenormalization denormalize setAttributeValue validateAndDenormalize denormalizeParameter getTypes updateData isMaxDepthReached createChildContext getCacheKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	symfony_symfony_d6b7e2d61e6d02bf07be0b21bc5c0412640074a5_112_0	buggy:  context: if (null === $data && $type->isNullable()) { return null; } $collectionValueType = $type->isCollection() ? $type->getCollectionValueType() : null; if ('xml' === $format && null !== $collectionValueType && (!\is_array($data) || !\is_int(key($data)))) { $data = [$data]; } if (null !== $collectionValueType && Type::BUILTIN_TYPE_OBJECT === $collectionValueType->getBuiltinType()) { $builtinType = Type::BUILTIN_TYPE_OBJECT; $class = $collectionValueType->getClassName().'[]'; if (null !== $collectionKeyType = $type->getCollectionKeyType()) { $context['key_type'] = $collectionKeyType; } } elseif ($type->isCollection() && null !== ($collectionValueType = $type->getCollectionValueType()) && Type::BUILTIN_TYPE_ARRAY === $collectionValueType->getBuiltinType()) { $innerType = $collectionValueType;	type_info: classDiscriminatorResolver:unknown format:unknown data:array class:unknown maxDepthHandler:unknown type:unknown collectionValueType:unknown builtinType:unknown collectionKeyType:unknown innerType:unknown context:unknown  global_variable: classDiscriminatorResolver: unknown maxDepthHandler: unknown function_name: __construct supportsNormalization normalize instantiateObject getAttributes extractAttributes getAttributeValue setMaxDepthHandler supportsDenormalization denormalize setAttributeValue validateAndDenormalize denormalizeParameter getTypes updateData isMaxDepthReached createChildContext getCacheKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	symfony_symfony_87097b8b1c2bfcb0200fd5b428dc07cfe09119fb_113_0	"buggy:  context: if (null === $class) { throw new RuntimeException(sprintf('Invalid service ""%s"": the class is not set.', $this->currentId)); } if (!$r = $this->container->getReflectionClass($class)) { throw new RuntimeException(sprintf('Invalid service ""%s"": class ""%s"" does not exist.', $this->currentId, $class)); } if (!$r->hasMethod($method)) { throw new RuntimeException(sprintf('Invalid service ""%s"": method ""%s()"" does not exist.', $this->currentId, $class !== $this->currentId ? $class.'::'.$method : $method)); } $r = $r->getMethod($method); if (!$r->isPublic()) { throw new RuntimeException(sprintf('Invalid service ""%s"": method ""%s()"" must be public.', $this->currentId, $class !== $this->currentId ? $class.'::'.$method : $method)); } return $r; }"	type_info: r:unknown class:unknown  global_variable:  function_name: process enableExpressionProcessing inExpression processValue getConstructor getReflectionMethod getExpressionLanguage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	symfony_symfony_f617c0b2ce75111cf90578c5b89a4e44a61a5bad_114_0	"buggy:  context: if ($param->isDefaultValueConstant()) { $signature .= substr(strrchr('\\'.$param->getDefaultValueConstantName(), '\\'), 1); } elseif (null === $v) { $signature .= 'null'; } elseif (\is_array($v)) { $signature .= $v ? '[…'.\count($v).']' : '[]'; } elseif (\is_string($v)) { $signature .= 10 > \strlen($v) && !str_contains($v, '\\') ? ""'{$v}'"" : ""'…"".\strlen($v).""'""; } elseif (\is_bool($v)) { $signature .= $v ? 'true' : 'false'; } else { $signature .= $v; } } } $signature = (empty($a[$prefix.'returnsReference']) ? '' : '&').'('.substr($signature, 2).')'; if (isset($a[$prefix.'returnType'])) { $signature .= ': '.substr(strrchr('\\'.$a[$prefix.'returnType'], '\\'), 1); }"	type_info: a:unknown prefix:unknown v:unknown signature:string  global_variable:  function_name: castClosure unsetClosureFileInfo castGenerator castType castReflectionGenerator castClass castFunctionAbstract castMethod castParameter castProperty castReference castExtension castZendExtension getSignature addExtra addMap	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	symfony_symfony_a58c342fffb642f174fd419ef75ea084710cec14_115_0	"buggy:  context: $encoded = false; $maxValueLength = $this->getMaxLineLength() - \strlen($name.'=*N"""";') - 1; $firstLineOffset = 0; if (!preg_match('/^'.self::TOKEN_REGEX.'$/D', $value)) { if (!preg_match('/^[\x00-\x08\x0B\x0C\x0E-\x7F]*$/D', $value)) { $encoded = true; $maxValueLength = $this->getMaxLineLength() - \strlen($name.'*N*="""";') - 1; $firstLineOffset = \strlen($this->getCharset().""'"".$this->getLanguage().""'""); } } if ($encoded || \strlen($value) > $maxValueLength) { if (null !== $this->encoder) { $value = $this->encoder->encodeString($origValue, $this->getCharset(), $firstLineOffset, $maxValueLength); } else { $value = $this->getTokenAsEncodedWord($origValue); $encoded = false; } }"	type_info: name:unknown origValue:unknown encoded:boolean maxValueLength:unknown firstLineOffset:integer value:string  global_variable:  function_name: __construct setParameter getParameter setParameters getParameters getBodyAsString toTokens createParameter getEndOfParameterValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	symfony_symfony_a58c342fffb642f174fd419ef75ea084710cec14_115_0	"buggy: $forceHttpQuoting = 'content-disposition' === strtolower($this->getName()) && 'form-data' === $this->getValue(); context: private function getEndOfParameterValue(string $value, bool $encoded = false, bool $firstLine = false): string { $forceHttpQuoting = 'content-disposition' === strtolower($this->getName()) && 'form-data' === $this->getValue(); $forceHttpQuoting = 'content-disposition' === strtolower($this->getName()) && 'form-data' === $this->getValue(); if ($forceHttpQuoting || !preg_match('/^'.self::TOKEN_REGEX.'$/D', $value)) { $value = '""'.$value.'""'; } $prepend = '='; if ($encoded) { $prepend = '*='; if ($firstLine) { $prepend = '*='.$this->getCharset().""'"".$this->getLanguage().""'""; } }"	type_info: encoded:boolean value:string prepend:string  global_variable:  function_name: __construct setParameter getParameter setParameters getParameters getBodyAsString toTokens createParameter getEndOfParameterValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	symfony_symfony_a1596b521a4adb3f282187e95837b1c766015f7c_116_0	"buggy: private int $windowEndAt; context: use Symfony\Component\RateLimiter\Exception\InvalidIntervalException; use Symfony\Component\RateLimiter\LimiterStateInterface; final class SlidingWindow implements LimiterStateInterface { private string $id; private int $hitCount = 0; private int $hitCountForLastWindow = 0; private int $intervalInSeconds; private int $windowEndAt; private int $windowEndAt; private bool $cached = true; public function __construct(string $id, int $intervalInSeconds) { if ($intervalInSeconds < 1) { throw new InvalidIntervalException(sprintf('The interval must be positive integer, ""%d"" given.', $intervalInSeconds)); } $this->id = $id; $this->intervalInSeconds = $intervalInSeconds;"	type_info: hitCount:integer hitCountForLastWindow:integer cached:boolean windowEndAt:unknown  global_variable:  function_name: __construct createFromPreviousWindow __sleep getId getExpirationTime isExpired add getHitCount getRetryAfter	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	symfony_symfony_5cd10b0fa2042e8b68dcfffa1be9193461a8f20a_117_0	"buggy: throw new AccessException(sprintf('The method ""%s::%s()"" returned ""null"", but expected type ""%3$s"". Did you forget to initialize a property or to make the return type nullable using ""?%3$s""?', !str_contains(\get_class($object), ""@anonymous\0"") ? \get_class($object) : (get_parent_class($object) ?: 'class').'@anonymous', $access[self::ACCESS_NAME], $matches[1]), 0, $e); context: [$trace] = $e->getTrace(); if (__FILE__ === $trace['file'] && $access[self::ACCESS_NAME] === $trace['function'] && $object instanceof $trace['class'] && preg_match('/Return value (?:of .*::\w+\(\) )?must be of (?:the )?type (\w+), null returned$/', $e->getMessage(), $matches) ) { throw new AccessException(sprintf('The method ""%s::%s()"" returned ""null"", but expected type ""%3$s"". Did you forget to initialize a property or to make the return type nullable using ""?%3$s""?', !str_contains(\get_class($object), ""@anonymous\0"") ? \get_class($object) : (get_parent_class($object) ?: 'class').'@anonymous', $access[self::ACCESS_NAME], $matches[1]), 0, $e); throw new AccessException(sprintf('The method ""%s::%s()"" returned ""null"", but expected type ""%3$s"". Did you forget to initialize a property or to make the return type nullable using ""?%3$s""?', !str_contains(\get_class($object), ""@anonymous\0"") ? \get_class($object) : (get_parent_class($object) ?: 'class').'@anonymous', $access[self::ACCESS_NAME], $matches[1]), 0, $e); } throw $e; } } elseif (self::ACCESS_TYPE_PROPERTY === $access[self::ACCESS_TYPE]) { $name = $access[self::ACCESS_NAME];"	type_info: magicCall:unknown ignoreInvalidIndices:unknown ignoreInvalidProperty:unknown object:unknown access:array name:unknown  global_variable: magicCall: unknown ignoreInvalidIndices: unknown ignoreInvalidProperty: unknown function_name: __construct getValue setValue throwInvalidArgumentException isReadable isWritable readPropertiesUntil readIndex readProperty getReadAccessInfo writeIndex writeProperty writeCollection getWriteAccessInfo isPropertyWritable camelize findAdderAndRemover isMethodAccessible getPropertyPath createCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	symfony_symfony_5cd10b0fa2042e8b68dcfffa1be9193461a8f20a_117_0	"buggy: if (\PHP_VERSION_ID >= 70400 && preg_match('/^Typed property ('.preg_quote(get_debug_type($object), '/').')::\$(\w+) must not be accessed before initialization$/', $e->getMessage(), $matches)) { $r = new \ReflectionProperty($class, $matches[2]); context: } } elseif (self::ACCESS_TYPE_MAGIC === $access[self::ACCESS_TYPE]) { $result[self::VALUE] = $object->{$access[self::ACCESS_NAME]}(); } elseif (!$ignoreInvalidProperty) { throw new NoSuchPropertyException($access[self::ACCESS_NAME]); } } catch (\Error $e) { if (\PHP_VERSION_ID >= 70400 && preg_match('/^Typed property ('.preg_quote(get_debug_type($object), '/').')::\$(\w+) must not be accessed before initialization$/', $e->getMessage(), $matches)) { $r = new \ReflectionProperty($class, $matches[2]); if (\PHP_VERSION_ID >= 70400 && preg_match('/^Typed property ('.preg_quote(get_debug_type($object), '/').')::\$(\w+) must not be accessed before initialization$/', $e->getMessage(), $matches)) { $r = new \ReflectionProperty($class, $matches[2]); $type = ($type = $r->getType()) instanceof \ReflectionNamedType ? $type->getName() : (string) $type; throw new AccessException(sprintf('The property ""%s::$%s"" is not readable because it is typed ""%s"". You should initialize it or declare a default value instead.', $matches[1], $r->getName(), $type), 0, $e); }"	type_info: magicCall:unknown type:unknown ignoreInvalidIndices:unknown result:array ignoreInvalidProperty:unknown object:unknown class:unknown access:array r:unknown  global_variable: magicCall: unknown ignoreInvalidIndices: unknown ignoreInvalidProperty: unknown function_name: __construct getValue setValue throwInvalidArgumentException isReadable isWritable readPropertiesUntil readIndex readProperty getReadAccessInfo writeIndex writeProperty writeCollection getWriteAccessInfo isPropertyWritable camelize findAdderAndRemover isMethodAccessible getPropertyPath createCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	symfony_symfony_f5c2e6ef35a39a2300877a3c56c1ca8c14ad87d0_118_0	"buggy:  context: $options['normalized_headers']['content-type'] = [$options['headers'][] = 'Content-Type: application/json']; } } if (!isset($options['normalized_headers']['accept'])) { $options['normalized_headers']['accept'] = [$options['headers'][] = 'Accept: */*']; } if (isset($options['body'])) { $options['body'] = self::normalizeBody($options['body']); } if (isset($options['peer_fingerprint'])) { $options['peer_fingerprint'] = self::normalizePeerFingerprint($options['peer_fingerprint']); } if (!\is_callable($onProgress = $options['on_progress'] ?? 'var_dump')) { throw new InvalidArgumentException(sprintf('Option ""on_progress"" must be callable, ""%s"" given.', \is_object($onProgress) ? \get_class($onProgress) : \gettype($onProgress))); }"	type_info: options:unknown onProgress:unknown  global_variable:  function_name: prepareRequest mergeDefaultOptions normalizeHeaders normalizeBody normalizePeerFingerprint jsonEncode resolveUrl parseUrl removeDotSegments mergeQueryString shouldBuffer	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	symfony_symfony_14232290ee7950c3c9b3697e109fc3e73012a189_119_0	buggy: $file = $trace[1]['file']; $line = $trace[1]['line']; context: private function getCaller(): array { $trace = debug_backtrace(\DEBUG_BACKTRACE_IGNORE_ARGS, 8); $file = $trace[1]['file']; $line = $trace[1]['line']; $file = $trace[1]['file']; $line = $trace[1]['line']; $handleTraitFile = (new \ReflectionClass(HandleTrait::class))->getFileName(); $found = false; for ($i = 1; $i < 8; ++$i) { if (isset($trace[$i]['file'], $trace[$i + 1]['file'], $trace[$i + 1]['line']) && $trace[$i]['file'] === $handleTraitFile) { $file = $trace[$i + 1]['file']; $line = $trace[$i + 1]['line']; $found = true; break;	type_info: trace:unknown file:unknown line:unknown handleTraitFile:unknown found:boolean i:integer  global_variable:  function_name: __construct dispatch getDispatchedMessages reset getCaller	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	symfony_symfony_14232290ee7950c3c9b3697e109fc3e73012a189_119_0	buggy: $name = str_replace('\\', '/', $file); $name = substr($name, strrpos($name, '/') + 1); context: $file = $trace[$i]['file']; $line = $trace[$i]['line']; break; } } break; } } $name = str_replace('\\', '/', $file); $name = substr($name, strrpos($name, '/') + 1); $name = str_replace('\\', '/', $file); $name = substr($name, strrpos($name, '/') + 1); return compact('name', 'file', 'line'); } }	type_info: trace:unknown file:unknown line:unknown i:integer name:unknown  global_variable:  function_name: __construct dispatch getDispatchedMessages reset getCaller	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	symfony_symfony_14232290ee7950c3c9b3697e109fc3e73012a189_119_0	buggy: return compact('name', 'file', 'line'); context: break; } } break; } } $name = str_replace('\\', '/', $file); $name = substr($name, strrpos($name, '/') + 1); return compact('name', 'file', 'line'); return compact('name', 'file', 'line'); } }	type_info: file:unknown name:unknown  global_variable:  function_name: __construct dispatch getDispatchedMessages reset getCaller	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	symfony_symfony_d1aa32a2a1f61125a404bb259b87ed882bdb03a5_120_0	buggy: $response->headers->clearCookie($cookieName, $cookieData['path'], $cookieData['domain']); context: public function onLogout(LogoutEvent $event): void { if (!$response = $event->getResponse()) { return; } foreach ($this->cookies as $cookieName => $cookieData) { $response->headers->clearCookie($cookieName, $cookieData['path'], $cookieData['domain']); $response->headers->clearCookie($cookieName, $cookieData['path'], $cookieData['domain']); } }	type_info: response:unknown cookieName:unknown  global_variable:  function_name: __construct onLogout getSubscribedEvents	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	symfony_symfony_494ceaf6cc02ca7b55e12381d1869c5c589bd4aa_121_0	buggy: ->addMethodCall('setLogger', [new Reference('logger', ContainerInterface::IGNORE_ON_INVALID_REFERENCE)]); context: } $container->register($name, TagAwareAdapter::class) ->addArgument(new Reference('.'.$name.'.inner')) ->addArgument(true !== $pool['tags'] ? new Reference($pool['tags']) : null) ->setPublic($pool['public']) ; if (method_exists(TagAwareAdapter::class, 'setLogger')) { $container ->getDefinition($name) ->addMethodCall('setLogger', [new Reference('logger', ContainerInterface::IGNORE_ON_INVALID_REFERENCE)]); ->addMethodCall('setLogger', [new Reference('logger', ContainerInterface::IGNORE_ON_INVALID_REFERENCE)]); } $pool['name'] = $name; $pool['public'] = false; $name = '.'.$name.'.inner'; if (!\in_array($pool['name'], ['cache.app', 'cache.system'], true)) { $container->registerAliasForArgument($pool['name'], TagAwareCacheInterface::class); $container->registerAliasForArgument($name, CacheInterface::class, $pool['name']);	type_info: name:array  global_variable:  function_name: load getConfiguration registerFormConfiguration registerEsiConfiguration registerSsiConfiguration registerFragmentsConfiguration registerProfilerConfiguration registerWorkflowConfiguration registerDebugConfiguration registerRouterConfiguration registerSessionConfiguration registerRequestConfiguration registerTemplatingConfiguration registerAssetsConfiguration createPackageDefinition createVersion registerTranslatorConfiguration registerValidationConfiguration registerValidatorMapping registerMappingFilesFromDir registerMappingFilesFromConfig registerAnnotationsConfiguration registerPropertyAccessConfiguration registerSecretsConfiguration registerSecurityCsrfConfiguration registerSerializerConfiguration registerPropertyInfoConfiguration registerLockConfiguration registerMessengerConfiguration registerCacheConfiguration registerHttpClientConfiguration registerMailerConfiguration getXsdValidationBasePath getNamespace	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
67	symfony_symfony_180248807e17afdddfbaac42537c78443406aac1_122_0	buggy: $this->domains = array_values(array_unique(array_merge($this->source->getDomains(), $this->target->getDomains()))); context: public function getDomains() { if (null === $this->domains) { $this->domains = array_values(array_unique(array_merge($this->source->getDomains(), $this->target->getDomains()))); $this->domains = array_values(array_unique(array_merge($this->source->getDomains(), $this->target->getDomains()))); } return $this->domains; }	type_info: messages:unknown result:unknown  global_variable: messages: unknown result: unknown function_name: __construct getDomains getMessages getNewMessages getObsoleteMessages getResult moveMessagesToIntlDomainsIfPossible processDomain	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	symfony_symfony_5e1a2cb0691012c5afd05b002a84d12cf6ef7318_123_0	buggy: 'errorCounter' => isset($rawLogData['errorCounter']) ? $rawLogData['errorCounter']->getValue() : 1, context: } elseif (isset($rawLogData['scream']) && false === $rawLogData['scream']->getValue()) { $logType = 'deprecation'; } elseif (isset($rawLogData['scream']) && true === $rawLogData['scream']->getValue()) { $logType = 'silenced'; } else { $logType = 'regular'; } $logs[] = [ 'type' => $logType, 'errorCounter' => isset($rawLogData['errorCounter']) ? $rawLogData['errorCounter']->getValue() : 1, 'errorCounter' => isset($rawLogData['errorCounter']) ? $rawLogData['errorCounter']->getValue() : 1, 'timestamp' => $rawLogData['timestamp_rfc3339']->getValue(), 'priority' => $rawLogData['priority']->getValue(), 'priorityName' => $rawLogData['priorityName']->getValue(), 'channel' => $rawLogData['channel']->getValue(), 'message' => $rawLogData['message'], 'context' => $rawLogData['context'], ]; }	type_info: logger:unknown logs:array rawLogData:unknown logType:string  global_variable: logger: unknown function_name: __construct collect reset lateCollect getLogs getProcessedLogs getFilters getPriorities countErrors countDeprecations countWarnings countScreams getCompilerLogs getName getContainerDeprecationLogs getContainerCompilerLogs sanitizeLogs isSilencedOrDeprecationErrorLog computeErrorsCount	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	symfony_symfony_6300a17be2c6c452bbad77abf892d847d937269c_124_0	buggy: $attributes[] = [$a->getName(), $a->getArguments()]; context: private function generateSignature(\ReflectionClass $class): iterable { if (\PHP_VERSION_ID >= 80000) { $attributes = []; foreach ($class->getAttributes() as $a) { $attributes[] = [$a->getName(), $a->getArguments()]; $attributes[] = [$a->getName(), $a->getArguments()]; } yield print_r($attributes, true); $attributes = []; } yield $class->getDocComment(); yield (int) $class->isFinal(); yield (int) $class->isAbstract(); if ($class->isTrait()) {	type_info: class:unknown hash:unknown attributes:array  global_variable: hash: unknown function_name: __construct isFresh __toString __sleep loadFiles computeHash generateSignature	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	symfony_symfony_6300a17be2c6c452bbad77abf892d847d937269c_124_0	buggy: $attributes[] = [$a->getName(), $a->getArguments()]; context: yield print_r(class_implements($class->name), true); yield print_r($class->getConstants(), true); } if (!$class->isInterface()) { $defaults = $class->getDefaultProperties(); foreach ($class->getProperties(\ReflectionProperty::IS_PUBLIC | \ReflectionProperty::IS_PROTECTED) as $p) { if (\PHP_VERSION_ID >= 80000) { foreach ($p->getAttributes() as $a) { $attributes[] = [$a->getName(), $a->getArguments()]; $attributes[] = [$a->getName(), $a->getArguments()]; } yield print_r($attributes, true); $attributes = []; } yield $p->getDocComment(); yield $p->isDefault() ? '<default>' : ''; yield $p->isPublic() ? 'public' : 'protected'; yield $p->isStatic() ? 'static' : '';	type_info: class:unknown hash:unknown attributes:array defaults:array  global_variable: hash: unknown function_name: __construct isFresh __toString __sleep loadFiles computeHash generateSignature	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	symfony_symfony_6300a17be2c6c452bbad77abf892d847d937269c_124_0	buggy: $attributes[] = [$a->getName(), $a->getArguments()]; context: $defined = \Closure::bind(static function ($c) { return \defined($c); }, null, $class->name); foreach ($class->getMethods(\ReflectionMethod::IS_PUBLIC | \ReflectionMethod::IS_PROTECTED) as $m) { if (\PHP_VERSION_ID >= 80000) { foreach ($m->getAttributes() as $a) { $attributes[] = [$a->getName(), $a->getArguments()]; $attributes[] = [$a->getName(), $a->getArguments()]; } yield print_r($attributes, true); $attributes = []; } $defaults = []; $parametersWithUndefinedConstants = []; foreach ($m->getParameters() as $p) { if (\PHP_VERSION_ID >= 80000) { foreach ($p->getAttributes() as $a) {	type_info: class:unknown hash:unknown attributes:array defaults:array defined:unknown parametersWithUndefinedConstants:array  global_variable: hash: unknown function_name: __construct isFresh __toString __sleep loadFiles computeHash generateSignature	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	symfony_symfony_6300a17be2c6c452bbad77abf892d847d937269c_124_0	buggy: $attributes[] = [$a->getName(), $a->getArguments()]; context: } yield print_r($attributes, true); $attributes = []; } $defaults = []; $parametersWithUndefinedConstants = []; foreach ($m->getParameters() as $p) { if (\PHP_VERSION_ID >= 80000) { foreach ($p->getAttributes() as $a) { $attributes[] = [$a->getName(), $a->getArguments()]; $attributes[] = [$a->getName(), $a->getArguments()]; } yield print_r($attributes, true); $attributes = []; } if (!$p->isDefaultValueAvailable()) { $defaults[$p->name] = null; continue;	type_info: hash:unknown attributes:array defaults:array parametersWithUndefinedConstants:array  global_variable: hash: unknown function_name: __construct isFresh __toString __sleep loadFiles computeHash generateSignature	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	symfony_symfony_6300a17be2c6c452bbad77abf892d847d937269c_124_0	buggy:  context: yield print_r($attributes, true); $attributes = []; } if (!$p->isDefaultValueAvailable()) { $defaults[$p->name] = null; continue; } if (!$p->isDefaultValueConstant() || $defined($p->getDefaultValueConstantName())) { $defaults[$p->name] = $p->getDefaultValue(); continue; } $defaults[$p->name] = $p->getDefaultValueConstantName(); $parametersWithUndefinedConstants[$p->name] = true; }	type_info: hash:unknown attributes:array defaults:array defined:unknown parametersWithUndefinedConstants:array  global_variable: hash: unknown function_name: __construct isFresh __toString __sleep loadFiles computeHash generateSignature	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	symfony_symfony_a9c9912e9de22d325eb13e1d2262802df7b66ea4_125_0	buggy: $headers['AUTHORIZATION'] = 'Basic '.base64_encode($headers['PHP_AUTH_USER'].':'.$headers['PHP_AUTH_PW']); context: $headers['AUTHORIZATION'] = $authorizationHeader; } } } if (isset($headers['AUTHORIZATION'])) { return $headers; } if (isset($headers['PHP_AUTH_USER'])) { $headers['AUTHORIZATION'] = 'Basic '.base64_encode($headers['PHP_AUTH_USER'].':'.$headers['PHP_AUTH_PW']); $headers['AUTHORIZATION'] = 'Basic '.base64_encode($headers['PHP_AUTH_USER'].':'.$headers['PHP_AUTH_PW']); } elseif (isset($headers['PHP_AUTH_DIGEST'])) { $headers['AUTHORIZATION'] = $headers['PHP_AUTH_DIGEST']; } return $headers; } }	type_info: headers:array authorizationHeader:unknown  global_variable:  function_name: getHeaders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	symfony_symfony_db257f3500317a740cb93d6cf507b2a9dee9a8ae_126_0	buggy:  context: private static function throwInvalidArgumentException(string $message, array $trace, int $i, string $propertyPath, \Throwable $previous = null): void { if (!isset($trace[$i]['file']) || __FILE__ !== $trace[$i]['file']) { return; } if (\PHP_VERSION_ID < 80000) { if (!str_starts_with($message, 'Argument ')) { return; } $pos = strpos($message, $delim = 'must be of the type ') ?: (strpos($message, $delim = 'must be an instance of ') ?: strpos($message, $delim = 'must implement interface ')); $pos += \strlen($delim); $j = strpos($message, ',', $pos); $type = substr($message, 2 + $j, strpos($message, ' given', $j) - $j - 2); $message = substr($message, $pos, $j - $pos);	type_info: magicCall:unknown propertyPath:unknown i:integer previous:unknown pos:unknown j:unknown type:unknown message:unknown ignoreInvalidIndices:unknown ignoreInvalidProperty:unknown  global_variable: magicCall: unknown ignoreInvalidIndices: unknown ignoreInvalidProperty: unknown function_name: __construct getValue setValue throwInvalidArgumentException isReadable isWritable readPropertiesUntil readIndex readProperty getReadAccessInfo writeIndex writeProperty writeCollection getWriteAccessInfo isPropertyWritable camelize findAdderAndRemover isMethodAccessible getPropertyPath createCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	symfony_symfony_db257f3500317a740cb93d6cf507b2a9dee9a8ae_126_0	"buggy:  context: $j = strpos($message, ',', $pos); $type = substr($message, 2 + $j, strpos($message, ' given', $j) - $j - 2); $message = substr($message, $pos, $j - $pos); throw new InvalidArgumentException(sprintf('Expected argument of type ""%s"", ""%s"" given at property path ""%s"".', $message, 'NULL' === $type ? 'null' : $type, $propertyPath), 0, $previous); } if (preg_match('/^\S+::\S+\(\): Argument #\d+ \(\$\S+\) must be of type (\S+), (\S+) given/', $message, $matches)) { [, $expectedType, $actualType] = $matches; throw new InvalidArgumentException(sprintf('Expected argument of type ""%s"", ""%s"" given at property path ""%s"".', $expectedType, 'NULL' === $actualType ? 'null' : $actualType, $propertyPath), 0, $previous); } } public function isReadable($objectOrArray, $propertyPath) { if (!$propertyPath instanceof PropertyPathInterface) { $propertyPath = new PropertyPath($propertyPath); }"	type_info: magicCall:unknown propertyPath:unknown previous:unknown pos:unknown j:unknown type:unknown message:unknown ignoreInvalidIndices:unknown ignoreInvalidProperty:unknown  global_variable: magicCall: unknown ignoreInvalidIndices: unknown ignoreInvalidProperty: unknown function_name: __construct getValue setValue throwInvalidArgumentException isReadable isWritable readPropertiesUntil readIndex readProperty getReadAccessInfo writeIndex writeProperty writeCollection getWriteAccessInfo isPropertyWritable camelize findAdderAndRemover isMethodAccessible getPropertyPath createCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	symfony_symfony_d4a87d26c7002e778fd5b4b55468ce246b12b7a0_127_0	"buggy: preg_match_all('(<img\s+[^>]*src\s*=\s*(?:([\'""])cid:([^""]+)\\1|cid:([^>\s]+)))i', $html, $names); $names = array_filter(array_unique(array_merge($names[2], $names[3]))); context: private function prepareParts(): ?array { $names = []; $htmlPart = null; $html = $this->html; if (null !== $this->html) { $htmlPart = new TextPart($html, $this->htmlCharset, 'html'); $html = $htmlPart->getBody(); preg_match_all('(<img\s+[^>]*src\s*=\s*(?:([\'""])cid:([^""]+)\\1|cid:([^>\s]+)))i', $html, $names); $names = array_filter(array_unique(array_merge($names[2], $names[3]))); preg_match_all('(<img\s+[^>]*src\s*=\s*(?:([\'""])cid:([^""]+)\\1|cid:([^>\s]+)))i', $html, $names); $names = array_filter(array_unique(array_merge($names[2], $names[3]))); } $attachmentParts = $inlineParts = []; foreach ($this->attachments as $attachment) { foreach ($names as $name) { if (isset($attachment['part'])) { continue; } if ($name !== $attachment['name']) { continue;"	type_info: name:unknown names:array htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity ensureBodyValid generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	symfony_symfony_b2a61eec71f15882c4300ba87a7612be366b31f9_128_0	"buggy: return preg_replace_callback('/%%|%([^%\s]+)%/', function ($match) use ($name) { context: } if ('query_string' === $prefix) { $queryString = parse_url($env, \PHP_URL_QUERY) ?: $env; parse_str($queryString, $result); return $result; } if ('resolve' === $prefix) { return preg_replace_callback('/%%|%([^%\s]+)%/', function ($match) use ($name) { return preg_replace_callback('/%%|%([^%\s]+)%/', function ($match) use ($name) { if (!isset($match[1])) { return '%'; } $value = $this->container->getParameter($match[1]); if (!is_scalar($value)) { throw new RuntimeException(sprintf('Parameter ""%s"" found when resolving env var ""%s"" must be scalar, ""%s"" given.', $match[1], $name, \gettype($value))); } return $value;"	type_info: loaders:unknown env:unknown queryString:unknown value:unknown  global_variable: loaders: unknown function_name: __construct getProvidedTypes getEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	symfony_symfony_b2a61eec71f15882c4300ba87a7612be366b31f9_128_0	"buggy: $value = $this->container->getParameter($match[1]); context: return preg_replace_callback('/%%|%([^%\s]+)%/', function ($match) use ($name) { if (!isset($match[1])) { return '%'; } $value = $this->container->getParameter($match[1]); $value = $this->container->getParameter($match[1]); if (!is_scalar($value)) { throw new RuntimeException(sprintf('Parameter ""%s"" found when resolving env var ""%s"" must be scalar, ""%s"" given.', $match[1], $name, \gettype($value))); } return $value; }, $env); }"	type_info: loaders:unknown env:unknown value:unknown  global_variable: loaders: unknown function_name: __construct getProvidedTypes getEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	symfony_symfony_9b5c564a8e808ddd1ff13585490bc982cdd5a020_129_0	buggy: $maxPriority[$service] = 0; context: protected function sortTaggedServicesByPriority(array $services): array { $maxPriority = []; foreach ($services as $service => $tags) { $maxPriority[$service] = 0; $maxPriority[$service] = 0; foreach ($tags as $tag) { $currentPriority = $tag['priority'] ?? 0; if ($maxPriority[$service] < $currentPriority) { $maxPriority[$service] = $currentPriority; } } } uasort($maxPriority, function ($a, $b) { return $b <=> $a; });	type_info: tags:unknown maxPriority:array service:unknown currentPriority:unknown  global_variable:  function_name: describe getOutput write describeRouteCollection describeRoute describeContainerParameters describeContainerTags describeContainerService describeContainerServices describeContainerDefinition describeContainerAlias describeContainerParameter describeContainerEnvVars describeEventDispatcherListeners describeCallable formatValue formatParameter resolveServiceDefinition findDefinitionsByTag sortParameters sortServiceIds sortTaggedServicesByPriority sortTagsByPriority sortByPriority getClassDescription getContainerEnvVars	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	symfony_symfony_0aaa2fdca75a3acada73788eef7fb716b6531ce0_130_0	"buggy: $bundleDir ?? $bundleDir = \dirname($bundle->getFileName()); context: if (\func_num_args() < 4 && __CLASS__ !== static::class && __CLASS__ !== (new \ReflectionMethod($this, __FUNCTION__))->getDeclaringClass()->getName() && !$this instanceof \PHPUnit\Framework\MockObject\MockObject && !$this instanceof \Prophecy\Prophecy\ProphecySubjectInterface && !$this instanceof \Mockery\MockInterface) { trigger_deprecation('symfony/doctrine-bridge', '5.4', 'The ""%s()"" method will have a new ""string $bundleDir = null"" argument in version 6.0, not defining it is deprecated.', __METHOD__); $bundleDir = null; } else { $bundleDir = func_get_arg(3); } $bundleDir ?? $bundleDir = \dirname($bundle->getFileName()); $bundleDir ?? $bundleDir = \dirname($bundle->getFileName()); if (!$bundleConfig['type']) { $bundleConfig['type'] = $this->detectMetadataDriver($bundleDir, $container); } if (!$bundleConfig['type']) {"	type_info: bundle:unknown bundleDir:unknown  global_variable:  function_name: loadMappingInformation setMappingDriverAlias setMappingDriverConfig getMappingDriverBundleConfigDefaults registerMappingDrivers assertValidMappingConfiguration detectMetadataDriver detectMappingType loadObjectManagerCacheDriver loadCacheDriver fixManagersAutoMappings getObjectManagerElementName getMappingObjectDefaultName getMappingResourceConfigDirectory getMappingResourceExtension getMetadataDriverClass validateAutoMapping	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	symfony_symfony_0aaa2fdca75a3acada73788eef7fb716b6531ce0_130_0	"buggy:  context: trigger_deprecation('symfony/doctrine-bridge', '5.4', 'The ""%s()"" method will have a new ""string $bundleDir = null"" argument in version 6.0, not defining it is deprecated.', __METHOD__); $bundleDir = null; } else { $bundleDir = func_get_arg(3); } $bundleDir ?? $bundleDir = \dirname($bundle->getFileName()); if (!$bundleConfig['type']) { $bundleConfig['type'] = $this->detectMetadataDriver($bundleDir, $container); } if (!$bundleConfig['type']) { return false; } if (!$bundleConfig['dir']) { if (\in_array($bundleConfig['type'], ['annotation', 'staticphp', 'attribute'])) { $bundleConfig['dir'] = $bundleDir.'/'.$this->getMappingObjectDefaultName(); } else {"	type_info: bundle:unknown bundleDir:unknown  global_variable:  function_name: loadMappingInformation setMappingDriverAlias setMappingDriverConfig getMappingDriverBundleConfigDefaults registerMappingDrivers assertValidMappingConfiguration detectMetadataDriver detectMappingType loadObjectManagerCacheDriver loadCacheDriver fixManagersAutoMappings getObjectManagerElementName getMappingObjectDefaultName getMappingResourceConfigDirectory getMappingResourceExtension getMetadataDriverClass validateAutoMapping	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	symfony_symfony_0aaa2fdca75a3acada73788eef7fb716b6531ce0_130_0	buggy: $bundleConfig['dir'] = $bundleDir.'/'.$this->getMappingObjectDefaultName(); context: if (!$bundleConfig['type']) { $bundleConfig['type'] = $this->detectMetadataDriver($bundleDir, $container); } if (!$bundleConfig['type']) { return false; } if (!$bundleConfig['dir']) { if (\in_array($bundleConfig['type'], ['annotation', 'staticphp', 'attribute'])) { $bundleConfig['dir'] = $bundleDir.'/'.$this->getMappingObjectDefaultName(); $bundleConfig['dir'] = $bundleDir.'/'.$this->getMappingObjectDefaultName(); } else { $bundleConfig['dir'] = $bundleDir.'/'.$this->getMappingResourceConfigDirectory($bundleDir); } } else { $bundleConfig['dir'] = $bundleDir.'/'.$bundleConfig['dir']; } if (!$bundleConfig['prefix']) { $bundleConfig['prefix'] = $bundle->getNamespaceName().'\\'.$this->getMappingObjectDefaultName();	type_info: bundle:unknown bundleDir:unknown  global_variable:  function_name: loadMappingInformation setMappingDriverAlias setMappingDriverConfig getMappingDriverBundleConfigDefaults registerMappingDrivers assertValidMappingConfiguration detectMetadataDriver detectMappingType loadObjectManagerCacheDriver loadCacheDriver fixManagersAutoMappings getObjectManagerElementName getMappingObjectDefaultName getMappingResourceConfigDirectory getMappingResourceExtension getMetadataDriverClass validateAutoMapping	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy: #[Autoconfigure(bind: ['$dotenvPath' => '%kernel.project_dir%/.env', '$defaultEnv' => '%kernel.environment%'])] context: namespace Symfony\Component\Dotenv\Command; use Symfony\Component\Console\Command\Command; use Symfony\Component\Console\Input\InputArgument; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\DependencyInjection\Attribute\Autoconfigure; use Symfony\Component\Dotenv\Dotenv; #[Autoconfigure(bind: ['$dotenvPath' => '%kernel.project_dir%/.env', '$defaultEnv' => '%kernel.environment%'])] #[Autoconfigure(bind: ['$dotenvPath' => '%kernel.project_dir%/.env', '$defaultEnv' => '%kernel.environment%'])] final class DotenvDumpCommand extends Command { protected static $defaultName = 'dotenv:dump'; protected static $defaultDescription = 'Compiles .env files to .env.local.php'; private $dotenvPath; private $defaultEnv; public function __construct(string $dotenvPath, string $defaultEnv = null)	type_info: defaultName:string defaultDescription:string defaultEnv:unknown  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy: private $dotenvPath; context: use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\DependencyInjection\Attribute\Autoconfigure; use Symfony\Component\Dotenv\Dotenv; #[Autoconfigure(bind: ['$dotenvPath' => '%kernel.project_dir%/.env', '$defaultEnv' => '%kernel.environment%'])] final class DotenvDumpCommand extends Command { protected static $defaultName = 'dotenv:dump'; protected static $defaultDescription = 'Compiles .env files to .env.local.php'; private $dotenvPath; private $dotenvPath; private $defaultEnv; public function __construct(string $dotenvPath, string $defaultEnv = null) { $this->dotenvPath = $dotenvPath; $this->defaultEnv = $defaultEnv; parent::__construct(); }	type_info: defaultName:string defaultDescription:string defaultEnv:unknown  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy: public function __construct(string $dotenvPath, string $defaultEnv = null) context: #[Autoconfigure(bind: ['$dotenvPath' => '%kernel.project_dir%/.env', '$defaultEnv' => '%kernel.environment%'])] final class DotenvDumpCommand extends Command { protected static $defaultName = 'dotenv:dump'; protected static $defaultDescription = 'Compiles .env files to .env.local.php'; private $dotenvPath; private $defaultEnv; public function __construct(string $dotenvPath, string $defaultEnv = null) public function __construct(string $dotenvPath, string $defaultEnv = null) { $this->dotenvPath = $dotenvPath; $this->defaultEnv = $defaultEnv; parent::__construct(); } protected function configure() {	type_info: defaultName:string defaultDescription:string defaultEnv:unknown  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy: $this->dotenvPath = $dotenvPath; context: public function __construct(string $dotenvPath, string $defaultEnv = null) { $this->dotenvPath = $dotenvPath; $this->dotenvPath = $dotenvPath; $this->defaultEnv = $defaultEnv; parent::__construct(); }	type_info: defaultEnv:unknown  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy:  context: protected function execute(InputInterface $input, OutputInterface $output): int { $env = $input->getArgument('env') ?? $this->defaultEnv; if ($input->getOption('empty')) { $vars = ['APP_ENV' => $env]; } else { $vars = $this->loadEnv($env); $env = $vars['APP_ENV']; } $vars = var_export($vars, true);	type_info: defaultEnv:unknown env:unknown vars:array  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy: $vars = ['APP_ENV' => $env]; context: protected function execute(InputInterface $input, OutputInterface $output): int { $env = $input->getArgument('env') ?? $this->defaultEnv; if ($input->getOption('empty')) { $vars = ['APP_ENV' => $env]; $vars = ['APP_ENV' => $env]; } else { $vars = $this->loadEnv($env); $env = $vars['APP_ENV']; } $vars = var_export($vars, true); $vars = <<<EOF <?php	type_info: defaultEnv:unknown env:unknown vars:array  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy: $vars = $this->loadEnv($env); $env = $vars['APP_ENV']; context: protected function execute(InputInterface $input, OutputInterface $output): int { $env = $input->getArgument('env') ?? $this->defaultEnv; if ($input->getOption('empty')) { $vars = ['APP_ENV' => $env]; } else { $vars = $this->loadEnv($env); $env = $vars['APP_ENV']; $vars = $this->loadEnv($env); $env = $vars['APP_ENV']; } $vars = var_export($vars, true); $vars = <<<EOF <?php return $vars; EOF;	type_info: defaultEnv:unknown env:unknown vars:array  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy: file_put_contents($this->dotenvPath.'.local.php', $vars, \LOCK_EX); context: } $vars = var_export($vars, true); $vars = <<<EOF <?php return $vars; EOF; file_put_contents($this->dotenvPath.'.local.php', $vars, \LOCK_EX); file_put_contents($this->dotenvPath.'.local.php', $vars, \LOCK_EX); $output->writeln(sprintf('Successfully dumped .env files in <info>.env.local.php</> for the <info>%s</> environment.', $env)); return 0; } private function loadEnv(string $env): array { $dotenv = new Dotenv();	type_info: defaultEnv:unknown env:unknown vars:array dotenv:unknown  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy: private function loadEnv(string $env): array context: return $vars; EOF; file_put_contents($this->dotenvPath.'.local.php', $vars, \LOCK_EX); $output->writeln(sprintf('Successfully dumped .env files in <info>.env.local.php</> for the <info>%s</> environment.', $env)); return 0; } private function loadEnv(string $env): array private function loadEnv(string $env): array { $dotenv = new Dotenv(); $composerFile = \dirname($this->dotenvPath).'/composer.json'; $testEnvs = (is_file($composerFile) ? json_decode(file_get_contents($composerFile), true) : [])['extra']['runtime']['test_envs'] ?? ['test']; $globalsBackup = [$_SERVER, $_ENV]; unset($_SERVER['APP_ENV']); $_ENV = ['APP_ENV' => $env]; $_SERVER['SYMFONY_DOTENV_VARS'] = implode(',', array_keys($_SERVER));	type_info: defaultEnv:unknown env:unknown vars:array dotenv:unknown composerFile:unknown testEnvs:array globalsBackup:array _ENV:array  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy: $composerFile = \dirname($this->dotenvPath).'/composer.json'; $testEnvs = (is_file($composerFile) ? json_decode(file_get_contents($composerFile), true) : [])['extra']['runtime']['test_envs'] ?? ['test']; context: private function loadEnv(string $env): array { $dotenv = new Dotenv(); $composerFile = \dirname($this->dotenvPath).'/composer.json'; $testEnvs = (is_file($composerFile) ? json_decode(file_get_contents($composerFile), true) : [])['extra']['runtime']['test_envs'] ?? ['test']; $composerFile = \dirname($this->dotenvPath).'/composer.json'; $testEnvs = (is_file($composerFile) ? json_decode(file_get_contents($composerFile), true) : [])['extra']['runtime']['test_envs'] ?? ['test']; $globalsBackup = [$_SERVER, $_ENV]; unset($_SERVER['APP_ENV']); $_ENV = ['APP_ENV' => $env]; $_SERVER['SYMFONY_DOTENV_VARS'] = implode(',', array_keys($_SERVER)); try { $dotenv->loadEnv($this->dotenvPath, null, 'dev', $testEnvs); unset($_ENV['SYMFONY_DOTENV_VARS']);	type_info: defaultEnv:unknown env:unknown dotenv:unknown composerFile:unknown testEnvs:array globalsBackup:array _ENV:array  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy: unset($_SERVER['APP_ENV']); $_ENV = ['APP_ENV' => $env]; context: private function loadEnv(string $env): array { $dotenv = new Dotenv(); $composerFile = \dirname($this->dotenvPath).'/composer.json'; $testEnvs = (is_file($composerFile) ? json_decode(file_get_contents($composerFile), true) : [])['extra']['runtime']['test_envs'] ?? ['test']; $globalsBackup = [$_SERVER, $_ENV]; unset($_SERVER['APP_ENV']); $_ENV = ['APP_ENV' => $env]; unset($_SERVER['APP_ENV']); $_ENV = ['APP_ENV' => $env]; $_SERVER['SYMFONY_DOTENV_VARS'] = implode(',', array_keys($_SERVER)); try { $dotenv->loadEnv($this->dotenvPath, null, 'dev', $testEnvs); unset($_ENV['SYMFONY_DOTENV_VARS']); return $_ENV; } finally { [$_SERVER, $_ENV] = $globalsBackup; }	type_info: defaultEnv:unknown env:unknown dotenv:unknown composerFile:unknown testEnvs:array globalsBackup:array _ENV:array  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	symfony_symfony_376abbe73c0fa595a978a5ca50878e18121ae4d2_131_0	buggy: $dotenv->loadEnv($this->dotenvPath, null, 'dev', $testEnvs); context: $dotenv = new Dotenv(); $composerFile = \dirname($this->dotenvPath).'/composer.json'; $testEnvs = (is_file($composerFile) ? json_decode(file_get_contents($composerFile), true) : [])['extra']['runtime']['test_envs'] ?? ['test']; $globalsBackup = [$_SERVER, $_ENV]; unset($_SERVER['APP_ENV']); $_ENV = ['APP_ENV' => $env]; $_SERVER['SYMFONY_DOTENV_VARS'] = implode(',', array_keys($_SERVER)); try { $dotenv->loadEnv($this->dotenvPath, null, 'dev', $testEnvs); $dotenv->loadEnv($this->dotenvPath, null, 'dev', $testEnvs); unset($_ENV['SYMFONY_DOTENV_VARS']); return $_ENV; } finally { [$_SERVER, $_ENV] = $globalsBackup; } } }	type_info: defaultEnv:unknown env:unknown dotenv:unknown composerFile:unknown testEnvs:array globalsBackup:array _ENV:array  global_variable: defaultEnv: unknown function_name: __construct configure execute loadEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	symfony_symfony_89092ea27919cf2f74554e2bd19a12cb8bf37e79_132_0	buggy: protected function prepareForDenormalization(object|array|null $data): array context: return true; } if (\is_array($attributes)) { return \in_array($attribute, $attributes, true); } return true; } protected function prepareForDenormalization(object|array|null $data): array protected function prepareForDenormalization(object|array|null $data): array { return (array) $data; } protected function getConstructor(array &$data, string $class, array &$context, \ReflectionClass $reflectionClass, array|bool $allowedAttributes): ?\ReflectionMethod { return $reflectionClass->getConstructor(); }	type_info: classMetadataFactory:unknown attribute:unknown allowedAttributes:array attributes:unknown  global_variable: classMetadataFactory: unknown function_name: __construct hasCacheableSupportsMethod isCircularReference handleCircularReference getAllowedAttributes getGroups isAllowedAttribute prepareForDenormalization getConstructor instantiateObject denormalizeParameter createChildContext	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	symfony_symfony_c97e10c85bd486692739ea308c3fbc930c333648_133_0	buggy: $props => [ 'LOADDTD' => $reader->getParserProperty(\XMLReader::LOADDTD), 'DEFAULTATTRS' => $reader->getParserProperty(\XMLReader::DEFAULTATTRS), 'VALIDATE' => $reader->getParserProperty(\XMLReader::VALIDATE), 'SUBST_ENTITIES' => $reader->getParserProperty(\XMLReader::SUBST_ENTITIES), ], context: 'isDefault' => $reader->isDefault, 'isEmptyElement' => \XMLReader::NONE === $reader->nodeType ? null : $reader->isEmptyElement, 'xmlLang' => $reader->xmlLang, 'attributeCount' => $reader->attributeCount, 'value' => $reader->value, 'namespaceURI' => $reader->namespaceURI, 'baseURI' => $reader->baseURI ? new LinkStub($reader->baseURI) : $reader->baseURI, $props => [ 'LOADDTD' => $reader->getParserProperty(\XMLReader::LOADDTD), 'DEFAULTATTRS' => $reader->getParserProperty(\XMLReader::DEFAULTATTRS), 'VALIDATE' => $reader->getParserProperty(\XMLReader::VALIDATE), 'SUBST_ENTITIES' => $reader->getParserProperty(\XMLReader::SUBST_ENTITIES), ], $props => [ 'LOADDTD' => $reader->getParserProperty(\XMLReader::LOADDTD), 'DEFAULTATTRS' => $reader->getParserProperty(\XMLReader::DEFAULTATTRS), 'VALIDATE' => $reader->getParserProperty(\XMLReader::VALIDATE), 'SUBST_ENTITIES' => $reader->getParserProperty(\XMLReader::SUBST_ENTITIES), ], ];	type_info: props:unknown  global_variable:  function_name: castXmlReader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	symfony_symfony_c97e10c85bd486692739ea308c3fbc930c333648_133_0	buggy:  context: 'attributeCount' => $reader->attributeCount, 'value' => $reader->value, 'namespaceURI' => $reader->namespaceURI, 'baseURI' => $reader->baseURI ? new LinkStub($reader->baseURI) : $reader->baseURI, $props => [ 'LOADDTD' => $reader->getParserProperty(\XMLReader::LOADDTD), 'DEFAULTATTRS' => $reader->getParserProperty(\XMLReader::DEFAULTATTRS), 'VALIDATE' => $reader->getParserProperty(\XMLReader::VALIDATE), 'SUBST_ENTITIES' => $reader->getParserProperty(\XMLReader::SUBST_ENTITIES), ], ]; if ($info[$props] = Caster::filter($info[$props], Caster::EXCLUDE_EMPTY, [], $count)) { $info[$props] = new EnumStub($info[$props]); $info[$props]->cut = $count; } $info = Caster::filter($info, Caster::EXCLUDE_EMPTY, [], $count); $stub->cut += $count + 2;	type_info: props:unknown info:array  global_variable:  function_name: castXmlReader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	symfony_symfony_7b1ada07cd933d2455ef449ade3687a1d28d8114_134_0	buggy:  context: public function createArgumentMetadata($controller): array { $arguments = []; if (\is_array($controller)) { $reflection = new \ReflectionMethod($controller[0], $controller[1]); } elseif (\is_object($controller) && !$controller instanceof \Closure) { $reflection = (new \ReflectionObject($controller))->getMethod('__invoke'); } else { $reflection = new \ReflectionFunction($controller); } foreach ($reflection->getParameters() as $param) { $arguments[] = new ArgumentMetadata($param->getName(), $this->getType($param, $reflection), $param->isVariadic(), $param->isDefaultValueAvailable(), $param->isDefaultValueAvailable() ? $param->getDefaultValue() : null, $param->allowsNull()); }	type_info: arguments:array reflection:unknown  global_variable:  function_name: createArgumentMetadata getType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	symfony_symfony_7b1ada07cd933d2455ef449ade3687a1d28d8114_134_0	buggy: $reflection = (new \ReflectionObject($controller))->getMethod('__invoke'); context: public function createArgumentMetadata($controller): array { $arguments = []; if (\is_array($controller)) { $reflection = new \ReflectionMethod($controller[0], $controller[1]); } elseif (\is_object($controller) && !$controller instanceof \Closure) { $reflection = (new \ReflectionObject($controller))->getMethod('__invoke'); $reflection = (new \ReflectionObject($controller))->getMethod('__invoke'); } else { $reflection = new \ReflectionFunction($controller); } foreach ($reflection->getParameters() as $param) { $arguments[] = new ArgumentMetadata($param->getName(), $this->getType($param, $reflection), $param->isVariadic(), $param->isDefaultValueAvailable(), $param->isDefaultValueAvailable() ? $param->getDefaultValue() : null, $param->allowsNull()); } return $arguments; }	type_info: arguments:array reflection:unknown  global_variable:  function_name: createArgumentMetadata getType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	symfony_symfony_7b1ada07cd933d2455ef449ade3687a1d28d8114_134_0	buggy:  context: public function createArgumentMetadata($controller): array { $arguments = []; if (\is_array($controller)) { $reflection = new \ReflectionMethod($controller[0], $controller[1]); } elseif (\is_object($controller) && !$controller instanceof \Closure) { $reflection = (new \ReflectionObject($controller))->getMethod('__invoke'); } else { $reflection = new \ReflectionFunction($controller); } foreach ($reflection->getParameters() as $param) { $arguments[] = new ArgumentMetadata($param->getName(), $this->getType($param, $reflection), $param->isVariadic(), $param->isDefaultValueAvailable(), $param->isDefaultValueAvailable() ? $param->getDefaultValue() : null, $param->allowsNull()); } return $arguments; } private function getType(\ReflectionParameter $parameter, \ReflectionFunctionAbstract $function): ?string	type_info: arguments:array reflection:unknown  global_variable:  function_name: createArgumentMetadata getType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	symfony_symfony_7b1ada07cd933d2455ef449ade3687a1d28d8114_134_0	buggy: $arguments[] = new ArgumentMetadata($param->getName(), $this->getType($param, $reflection), $param->isVariadic(), $param->isDefaultValueAvailable(), $param->isDefaultValueAvailable() ? $param->getDefaultValue() : null, $param->allowsNull()); context: } elseif (\is_object($controller) && !$controller instanceof \Closure) { $reflection = (new \ReflectionObject($controller))->getMethod('__invoke'); } else { $reflection = new \ReflectionFunction($controller); } foreach ($reflection->getParameters() as $param) { $arguments[] = new ArgumentMetadata($param->getName(), $this->getType($param, $reflection), $param->isVariadic(), $param->isDefaultValueAvailable(), $param->isDefaultValueAvailable() ? $param->getDefaultValue() : null, $param->allowsNull()); $arguments[] = new ArgumentMetadata($param->getName(), $this->getType($param, $reflection), $param->isVariadic(), $param->isDefaultValueAvailable(), $param->isDefaultValueAvailable() ? $param->getDefaultValue() : null, $param->allowsNull()); } return $arguments; } private function getType(\ReflectionParameter $parameter, \ReflectionFunctionAbstract $function): ?string	type_info: arguments:array reflection:unknown  global_variable:  function_name: createArgumentMetadata getType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	symfony_symfony_7b1ada07cd933d2455ef449ade3687a1d28d8114_134_0	buggy: private function getType(\ReflectionParameter $parameter, \ReflectionFunctionAbstract $function): ?string context: $reflection = new \ReflectionFunction($controller); } foreach ($reflection->getParameters() as $param) { $arguments[] = new ArgumentMetadata($param->getName(), $this->getType($param, $reflection), $param->isVariadic(), $param->isDefaultValueAvailable(), $param->isDefaultValueAvailable() ? $param->getDefaultValue() : null, $param->allowsNull()); } return $arguments; } private function getType(\ReflectionParameter $parameter, \ReflectionFunctionAbstract $function): ?string private function getType(\ReflectionParameter $parameter, \ReflectionFunctionAbstract $function): ?string { if (!$type = $parameter->getType()) { return null; } $name = $type instanceof \ReflectionNamedType ? $type->getName() : (string) $type; if ($function instanceof \ReflectionMethod) { $lcName = strtolower($name); switch ($lcName) {	type_info: arguments:array reflection:unknown type:unknown name:unknown lcName:unknown  global_variable:  function_name: createArgumentMetadata getType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	symfony_symfony_7b1ada07cd933d2455ef449ade3687a1d28d8114_134_0	buggy: if ($function instanceof \ReflectionMethod) { $lcName = strtolower($name); switch ($lcName) { context: private function getType(\ReflectionParameter $parameter, \ReflectionFunctionAbstract $function): ?string { if (!$type = $parameter->getType()) { return null; } $name = $type instanceof \ReflectionNamedType ? $type->getName() : (string) $type; if ($function instanceof \ReflectionMethod) { $lcName = strtolower($name); switch ($lcName) { if ($function instanceof \ReflectionMethod) { $lcName = strtolower($name); switch ($lcName) { case 'self': return $function->getDeclaringClass()->name; case 'parent': return ($parent = $function->getDeclaringClass()->getParentClass()) ? $parent->name : null; } } return $name; }	type_info: type:unknown name:unknown lcName:unknown parent:unknown  global_variable:  function_name: createArgumentMetadata getType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	symfony_symfony_7b1ada07cd933d2455ef449ade3687a1d28d8114_134_0	buggy: return $function->getDeclaringClass()->name; context: { if (!$type = $parameter->getType()) { return null; } $name = $type instanceof \ReflectionNamedType ? $type->getName() : (string) $type; if ($function instanceof \ReflectionMethod) { $lcName = strtolower($name); switch ($lcName) { case 'self': return $function->getDeclaringClass()->name; return $function->getDeclaringClass()->name; case 'parent': return ($parent = $function->getDeclaringClass()->getParentClass()) ? $parent->name : null; } } return $name; } }	type_info: type:unknown name:unknown lcName:unknown parent:unknown  global_variable:  function_name: createArgumentMetadata getType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	symfony_symfony_7b1ada07cd933d2455ef449ade3687a1d28d8114_134_0	buggy: return ($parent = $function->getDeclaringClass()->getParentClass()) ? $parent->name : null; context: return null; } $name = $type instanceof \ReflectionNamedType ? $type->getName() : (string) $type; if ($function instanceof \ReflectionMethod) { $lcName = strtolower($name); switch ($lcName) { case 'self': return $function->getDeclaringClass()->name; case 'parent': return ($parent = $function->getDeclaringClass()->getParentClass()) ? $parent->name : null; return ($parent = $function->getDeclaringClass()->getParentClass()) ? $parent->name : null; } } return $name; } }	type_info: type:unknown name:unknown lcName:unknown parent:unknown  global_variable:  function_name: createArgumentMetadata getType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	symfony_symfony_27d5edf3d239274fac5b5b1300fa464020f6b190_135_0	"buggy: if (\PHP_VERSION_ID >= 70400 && preg_match('/^Typed property ([\w\\\]+)::\$(\w+) must not be accessed before initialization$/', $e->getMessage(), $matches)) { $r = new \ReflectionProperty($matches[1], $matches[2]); context: } } elseif (self::ACCESS_TYPE_MAGIC === $access[self::ACCESS_TYPE]) { $result[self::VALUE] = $object->{$access[self::ACCESS_NAME]}(); } elseif (!$ignoreInvalidProperty) { throw new NoSuchPropertyException($access[self::ACCESS_NAME]); } } catch (\Error $e) { if (\PHP_VERSION_ID >= 70400 && preg_match('/^Typed property ([\w\\\]+)::\$(\w+) must not be accessed before initialization$/', $e->getMessage(), $matches)) { $r = new \ReflectionProperty($matches[1], $matches[2]); if (\PHP_VERSION_ID >= 70400 && preg_match('/^Typed property ([\w\\\]+)::\$(\w+) must not be accessed before initialization$/', $e->getMessage(), $matches)) { $r = new \ReflectionProperty($matches[1], $matches[2]); $type = ($type = $r->getType()) instanceof \ReflectionNamedType ? $type->getName() : (string) $type; throw new AccessException(sprintf('The property ""%s::$%s"" is not readable because it is typed ""%s"". You should initialize it or declare a default value instead.', $r->getDeclaringClass()->getName(), $r->getName(), $type), 0, $e); }"	type_info: magicCall:unknown type:unknown ignoreInvalidIndices:unknown result:array ignoreInvalidProperty:unknown object:unknown access:array r:unknown  global_variable: magicCall: unknown ignoreInvalidIndices: unknown ignoreInvalidProperty: unknown function_name: __construct getValue setValue throwInvalidArgumentException isReadable isWritable readPropertiesUntil readIndex readProperty getReadAccessInfo writeIndex writeProperty writeCollection getWriteAccessInfo isPropertyWritable camelize findAdderAndRemover isMethodAccessible getPropertyPath createCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	symfony_symfony_27d5edf3d239274fac5b5b1300fa464020f6b190_135_0	"buggy: throw new AccessException(sprintf('The property ""%s::$%s"" is not readable because it is typed ""%s"". You should initialize it or declare a default value instead.', $r->getDeclaringClass()->getName(), $r->getName(), $type), 0, $e); context: throw new NoSuchPropertyException($access[self::ACCESS_NAME]); } } catch (\Error $e) { if (\PHP_VERSION_ID >= 70400 && preg_match('/^Typed property ([\w\\\]+)::\$(\w+) must not be accessed before initialization$/', $e->getMessage(), $matches)) { $r = new \ReflectionProperty($matches[1], $matches[2]); $type = ($type = $r->getType()) instanceof \ReflectionNamedType ? $type->getName() : (string) $type; throw new AccessException(sprintf('The property ""%s::$%s"" is not readable because it is typed ""%s"". You should initialize it or declare a default value instead.', $r->getDeclaringClass()->getName(), $r->getName(), $type), 0, $e); throw new AccessException(sprintf('The property ""%s::$%s"" is not readable because it is typed ""%s"". You should initialize it or declare a default value instead.', $r->getDeclaringClass()->getName(), $r->getName(), $type), 0, $e); } throw $e; } if (isset($zval[self::REF]) && \is_object($result[self::VALUE])) {"	type_info: magicCall:unknown zval:array type:unknown ignoreInvalidIndices:unknown result:array ignoreInvalidProperty:unknown access:array r:unknown  global_variable: magicCall: unknown ignoreInvalidIndices: unknown ignoreInvalidProperty: unknown function_name: __construct getValue setValue throwInvalidArgumentException isReadable isWritable readPropertiesUntil readIndex readProperty getReadAccessInfo writeIndex writeProperty writeCollection getWriteAccessInfo isPropertyWritable camelize findAdderAndRemover isMethodAccessible getPropertyPath createCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	symfony_symfony_5a75f4821077ae4fc1e6d7bc27b8736353919922_136_0	buggy: if (null !== $parsedEnv['path']) { $parsedEnv['path'] = '/' === $parsedEnv['path'] ? null : substr($parsedEnv['path'], 1); } context: } $parsedEnv += [ 'port' => null, 'user' => null, 'pass' => null, 'path' => null, 'query' => null, 'fragment' => null, ]; if (null !== $parsedEnv['path']) { $parsedEnv['path'] = '/' === $parsedEnv['path'] ? null : substr($parsedEnv['path'], 1); } if (null !== $parsedEnv['path']) { $parsedEnv['path'] = '/' === $parsedEnv['path'] ? null : substr($parsedEnv['path'], 1); } return $parsedEnv; } if ('query_string' === $prefix) { $queryString = parse_url($env, \PHP_URL_QUERY) ?: $env; parse_str($queryString, $result);	type_info: loaders:unknown env:unknown parsedEnv:unknown queryString:unknown  global_variable: loaders: unknown function_name: __construct getProvidedTypes getEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	symfony_symfony_50dd188d089cbb8d9b4457d47d2840685814d5a7_137_0	buggy: private AccessDecisionStrategyInterface $strategy; context: namespace Symfony\Component\Security\Core\Authorization; use Symfony\Component\Security\Core\Authentication\Token\TokenInterface; use Symfony\Component\Security\Core\Authorization\Strategy\AccessDecisionStrategyInterface; use Symfony\Component\Security\Core\Authorization\Voter\VoterInterface; class TraceableAccessDecisionManager implements AccessDecisionManagerInterface { private AccessDecisionManagerInterface $manager; private AccessDecisionStrategyInterface $strategy; private AccessDecisionStrategyInterface $strategy; private iterable $voters = []; private array $decisionLog = []; private array $currentLog = []; public function __construct(AccessDecisionManagerInterface $manager) { $this->manager = $manager; if ($this->manager instanceof AccessDecisionManager) {	type_info: voters:array decisionLog:array currentLog:array  global_variable:  function_name: __construct decide addVoterVote getStrategy getVoters getDecisionLog	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	symfony_symfony_f0b52c828936543fc4c3ed13cdfba8e2dd2f6e2d_138_0	buggy: curl_setopt($this->handle, \CURLOPT_VERBOSE, false); context: public function __destruct() { curl_setopt($this->handle, \CURLOPT_VERBOSE, false); curl_setopt($this->handle, \CURLOPT_VERBOSE, false); if (null === $this->timeout) { return; } $this->doDestruct(); }	type_info: debugBuffer:unknown  global_variable: debugBuffer: unknown function_name: __construct getInfo getContent __destruct schedule perform select parseHeaderLine	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	symfony_symfony_f0b52c828936543fc4c3ed13cdfba8e2dd2f6e2d_138_0	buggy: if (null === $this->timeout) { return; context: public function __destruct() { curl_setopt($this->handle, \CURLOPT_VERBOSE, false); if (null === $this->timeout) { return; if (null === $this->timeout) { return; } $this->doDestruct(); }	type_info: debugBuffer:unknown  global_variable: debugBuffer: unknown function_name: __construct getInfo getContent __destruct schedule perform select parseHeaderLine	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	symfony_symfony_f0b52c828936543fc4c3ed13cdfba8e2dd2f6e2d_138_0	buggy: $this->doDestruct(); context: public function __destruct() { curl_setopt($this->handle, \CURLOPT_VERBOSE, false); if (null === $this->timeout) { return; } $this->doDestruct(); $this->doDestruct(); }	type_info: debugBuffer:unknown  global_variable: debugBuffer: unknown function_name: __construct getInfo getContent __destruct schedule perform select parseHeaderLine	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	symfony_symfony_37ac416621a85db3ef7b1ff8bd43f8ac54e080b7_139_0	buggy: foreach ($defaultOptions as $k => $v) { if ('normalized_headers' !== $k && !isset($options[$k])) { $options[$k] = $v; } } context: if ($resolve = $options['resolve'] ?? false) { $options['resolve'] = []; foreach ($resolve as $k => $v) { $options['resolve'][substr(self::parseUrl('http://'.$k)['authority'], 2)] = (string) $v; } } $options['query'] = $options['query'] ?? []; foreach ($defaultOptions as $k => $v) { if ('normalized_headers' !== $k && !isset($options[$k])) { $options[$k] = $v; } } foreach ($defaultOptions as $k => $v) { if ('normalized_headers' !== $k && !isset($options[$k])) { $options[$k] = $v; } } if (isset($defaultOptions['extra'])) { $options['extra'] += $defaultOptions['extra']; }	type_info: defaultOptions:unknown options:unknown resolve:array k:unknown  global_variable:  function_name: prepareRequest mergeDefaultOptions normalizeHeaders normalizeBody normalizePeerFingerprint jsonEncode resolveUrl parseUrl removeDotSegments mergeQueryString shouldBuffer	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	symfony_symfony_f0a89ecddad625e6499f5de69b328b6105b4ab47_140_0	"buggy: public const REGEX_STRING = '([^\s]+?)(?:\s|(?<!\\\\)""|(?<!\\\\)\'|$)'; context: <?php namespace Symfony\Component\Console\Input; use Symfony\Component\Console\Exception\InvalidArgumentException; class StringInput extends ArgvInput { public const REGEX_STRING = '([^\s]+?)(?:\s|(?<!\\\\)""|(?<!\\\\)\'|$)'; public const REGEX_STRING = '([^\s]+?)(?:\s|(?<!\\\\)""|(?<!\\\\)\'|$)'; public const REGEX_QUOTED_STRING = '(?:""([^""\\\\]*(?:\\\\.[^""\\\\]*)*)""|\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\')'; public function __construct(string $input) { parent::__construct([]); $this->setTokens($this->tokenize($input)); }"	type_info: input:unknown  global_variable:  function_name: __construct tokenize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	symfony_symfony_f0a89ecddad625e6499f5de69b328b6105b4ab47_140_0	"buggy:  context: private function tokenize(string $input): array { $tokens = []; $length = \strlen($input); $cursor = 0; while ($cursor < $length) { if (preg_match('/\s+/A', $input, $match, 0, $cursor)) { } elseif (preg_match('/([^=""\'\s]+?)(=?)('.self::REGEX_QUOTED_STRING.'+)/A', $input, $match, 0, $cursor)) { $tokens[] = $match[1].$match[2].stripcslashes(str_replace(['""\'', '\'""', '\'\'', '""""'], '', substr($match[3], 1, -1))); } elseif (preg_match('/'.self::REGEX_QUOTED_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes(substr($match[0], 1, -1)); } elseif (preg_match('/'.self::REGEX_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes($match[1]); } else { throw new InvalidArgumentException(sprintf('Unable to parse input near ""... %s ..."".', substr($input, $cursor, 10)));"	type_info: input:unknown tokens:array length:unknown cursor:integer  global_variable:  function_name: __construct tokenize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	symfony_symfony_f0a89ecddad625e6499f5de69b328b6105b4ab47_140_0	"buggy:  context: private function tokenize(string $input): array { $tokens = []; $length = \strlen($input); $cursor = 0; while ($cursor < $length) { if (preg_match('/\s+/A', $input, $match, 0, $cursor)) { } elseif (preg_match('/([^=""\'\s]+?)(=?)('.self::REGEX_QUOTED_STRING.'+)/A', $input, $match, 0, $cursor)) { $tokens[] = $match[1].$match[2].stripcslashes(str_replace(['""\'', '\'""', '\'\'', '""""'], '', substr($match[3], 1, -1))); } elseif (preg_match('/'.self::REGEX_QUOTED_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes(substr($match[0], 1, -1)); } elseif (preg_match('/'.self::REGEX_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes($match[1]); } else { throw new InvalidArgumentException(sprintf('Unable to parse input near ""... %s ..."".', substr($input, $cursor, 10))); }"	type_info: input:unknown tokens:array length:unknown cursor:integer  global_variable:  function_name: __construct tokenize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	symfony_symfony_f0a89ecddad625e6499f5de69b328b6105b4ab47_140_0	"buggy: $tokens[] = $match[1].$match[2].stripcslashes(str_replace(['""\'', '\'""', '\'\'', '""""'], '', substr($match[3], 1, -1))); context: { $tokens = []; $length = \strlen($input); $cursor = 0; while ($cursor < $length) { if (preg_match('/\s+/A', $input, $match, 0, $cursor)) { } elseif (preg_match('/([^=""\'\s]+?)(=?)('.self::REGEX_QUOTED_STRING.'+)/A', $input, $match, 0, $cursor)) { $tokens[] = $match[1].$match[2].stripcslashes(str_replace(['""\'', '\'""', '\'\'', '""""'], '', substr($match[3], 1, -1))); $tokens[] = $match[1].$match[2].stripcslashes(str_replace(['""\'', '\'""', '\'\'', '""""'], '', substr($match[3], 1, -1))); } elseif (preg_match('/'.self::REGEX_QUOTED_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes(substr($match[0], 1, -1)); } elseif (preg_match('/'.self::REGEX_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes($match[1]); } else { throw new InvalidArgumentException(sprintf('Unable to parse input near ""... %s ..."".', substr($input, $cursor, 10)));"	type_info: input:unknown tokens:array length:unknown cursor:integer  global_variable:  function_name: __construct tokenize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	symfony_symfony_f0a89ecddad625e6499f5de69b328b6105b4ab47_140_0	"buggy: $tokens[] = stripcslashes(substr($match[0], 1, -1)); context: private function tokenize(string $input): array { $tokens = []; $length = \strlen($input); $cursor = 0; while ($cursor < $length) { if (preg_match('/\s+/A', $input, $match, 0, $cursor)) { } elseif (preg_match('/([^=""\'\s]+?)(=?)('.self::REGEX_QUOTED_STRING.'+)/A', $input, $match, 0, $cursor)) { $tokens[] = $match[1].$match[2].stripcslashes(str_replace(['""\'', '\'""', '\'\'', '""""'], '', substr($match[3], 1, -1))); } elseif (preg_match('/'.self::REGEX_QUOTED_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes(substr($match[0], 1, -1)); $tokens[] = stripcslashes(substr($match[0], 1, -1)); } elseif (preg_match('/'.self::REGEX_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes($match[1]); } else { throw new InvalidArgumentException(sprintf('Unable to parse input near ""... %s ..."".', substr($input, $cursor, 10))); } $cursor += \strlen($match[0]); } return $tokens;"	type_info: input:unknown tokens:array length:unknown cursor:integer  global_variable:  function_name: __construct tokenize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	symfony_symfony_f0a89ecddad625e6499f5de69b328b6105b4ab47_140_0	"buggy: $tokens[] = stripcslashes(substr($match[0], 1, -1)); context: private function tokenize(string $input): array { $tokens = []; $length = \strlen($input); $cursor = 0; while ($cursor < $length) { if (preg_match('/\s+/A', $input, $match, 0, $cursor)) { } elseif (preg_match('/([^=""\'\s]+?)(=?)('.self::REGEX_QUOTED_STRING.'+)/A', $input, $match, 0, $cursor)) { $tokens[] = $match[1].$match[2].stripcslashes(str_replace(['""\'', '\'""', '\'\'', '""""'], '', substr($match[3], 1, -1))); } elseif (preg_match('/'.self::REGEX_QUOTED_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes(substr($match[0], 1, -1)); $tokens[] = stripcslashes(substr($match[0], 1, -1)); } elseif (preg_match('/'.self::REGEX_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes($match[1]); } else { throw new InvalidArgumentException(sprintf('Unable to parse input near ""... %s ..."".', substr($input, $cursor, 10))); } $cursor += \strlen($match[0]); } return $tokens;"	type_info: input:unknown tokens:array length:unknown cursor:integer  global_variable:  function_name: __construct tokenize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	symfony_symfony_f0a89ecddad625e6499f5de69b328b6105b4ab47_140_0	"buggy:  context: private function tokenize(string $input): array { $tokens = []; $length = \strlen($input); $cursor = 0; while ($cursor < $length) { if (preg_match('/\s+/A', $input, $match, 0, $cursor)) { } elseif (preg_match('/([^=""\'\s]+?)(=?)('.self::REGEX_QUOTED_STRING.'+)/A', $input, $match, 0, $cursor)) { $tokens[] = $match[1].$match[2].stripcslashes(str_replace(['""\'', '\'""', '\'\'', '""""'], '', substr($match[3], 1, -1))); } elseif (preg_match('/'.self::REGEX_QUOTED_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes(substr($match[0], 1, -1)); } elseif (preg_match('/'.self::REGEX_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes($match[1]); } else { throw new InvalidArgumentException(sprintf('Unable to parse input near ""... %s ..."".', substr($input, $cursor, 10))); }"	type_info: input:unknown tokens:array length:unknown cursor:integer  global_variable:  function_name: __construct tokenize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	symfony_symfony_f0a89ecddad625e6499f5de69b328b6105b4ab47_140_0	"buggy: $tokens[] = stripcslashes($match[1]); context: $tokens = []; $length = \strlen($input); $cursor = 0; while ($cursor < $length) { if (preg_match('/\s+/A', $input, $match, 0, $cursor)) { } elseif (preg_match('/([^=""\'\s]+?)(=?)('.self::REGEX_QUOTED_STRING.'+)/A', $input, $match, 0, $cursor)) { $tokens[] = $match[1].$match[2].stripcslashes(str_replace(['""\'', '\'""', '\'\'', '""""'], '', substr($match[3], 1, -1))); } elseif (preg_match('/'.self::REGEX_QUOTED_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes(substr($match[0], 1, -1)); } elseif (preg_match('/'.self::REGEX_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes($match[1]); $tokens[] = stripcslashes($match[1]); } else { throw new InvalidArgumentException(sprintf('Unable to parse input near ""... %s ..."".', substr($input, $cursor, 10))); } $cursor += \strlen($match[0]); } return $tokens; }"	type_info: input:unknown tokens:array length:unknown cursor:integer  global_variable:  function_name: __construct tokenize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	symfony_symfony_f0a89ecddad625e6499f5de69b328b6105b4ab47_140_0	"buggy:  context: $tokens[] = stripcslashes(substr($match[0], 1, -1)); } elseif (preg_match('/'.self::REGEX_STRING.'/A', $input, $match, 0, $cursor)) { $tokens[] = stripcslashes($match[1]); } else { throw new InvalidArgumentException(sprintf('Unable to parse input near ""... %s ..."".', substr($input, $cursor, 10))); } $cursor += \strlen($match[0]); } return $tokens; } }"	type_info: input:unknown tokens:array cursor:integer  global_variable:  function_name: __construct tokenize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	buggy: $this->startClass($options['class'], $baseClass). context: } } $proxyClasses = $this->inlineFactories ? $this->generateProxyClasses() : null; if ($options['preload_classes']) { $this->preload = array_combine($options['preload_classes'], $options['preload_classes']); } $code = $this->startClass($options['class'], $baseClass). $this->startClass($options['class'], $baseClass). $this->addServices($services). $this->addDeprecatedAliases(). $this->addDefaultParametersMethod() ; $proxyClasses = $proxyClasses ?? $this->generateProxyClasses(); if ($this->addGetService) { $code = preg_replace(	type_info: options:array baseClass:unknown proxyClasses:array code:array proxyDumper:unknown services:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	"buggy: if ($this->inlineFactories) { context: } } foreach ($proxyClasses as $file => $c) { $files[$file] = ""<?php\n"".$c; $preloadedFiles[$file] = $file; } } $code .= $this->endClass(); if ($this->inlineFactories) { if ($this->inlineFactories) { foreach ($proxyClasses as $c) { $code .= $c; } } $files[$options['class'].'.php'] = $code; $preloadedFiles[$options['class'].'.php'] = $options['class'].'.php'; $hash = ucfirst(strtr(ContainerBuilder::hash($files), '._', 'xx')); $code = [];"	type_info: options:array baseClass:unknown proxyClasses:array code:array files:array preloadedFiles:array c:string file:unknown hash:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	"buggy: $code .= $c; context: foreach ($proxyClasses as $file => $c) { $files[$file] = ""<?php\n"".$c; $preloadedFiles[$file] = $file; } } $code .= $this->endClass(); if ($this->inlineFactories) { foreach ($proxyClasses as $c) { $code .= $c; $code .= $c; } } $files[$options['class'].'.php'] = $code; $preloadedFiles[$options['class'].'.php'] = $options['class'].'.php'; $hash = ucfirst(strtr(ContainerBuilder::hash($files), '._', 'xx')); $code = []; foreach ($files as $file => $c) {"	type_info: options:array baseClass:unknown proxyClasses:array code:array files:array preloadedFiles:array c:string file:unknown hash:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	"buggy: $preloadedFiles[$options['class'].'.php'] = $options['class'].'.php'; context: $code .= $this->endClass(); if ($this->inlineFactories) { foreach ($proxyClasses as $c) { $code .= $c; } } $files[$options['class'].'.php'] = $code; $preloadedFiles[$options['class'].'.php'] = $options['class'].'.php'; $preloadedFiles[$options['class'].'.php'] = $options['class'].'.php'; $hash = ucfirst(strtr(ContainerBuilder::hash($files), '._', 'xx')); $code = []; foreach ($files as $file => $c) { $code[""Container{$hash}/{$file}""] = substr_replace($c, ""<?php\n\nnamespace Container{$hash};\n"", 0, 6); if (isset($preloadedFiles[$file])) { $preloadedFiles[$file] = ""Container{$hash}/{$file}""; }"	type_info: options:array baseClass:unknown proxyClasses:array code:array files:array preloadedFiles:array c:string file:unknown hash:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	"buggy: $preloadedFiles = implode(""';\nrequire __DIR__.'/"", $preloadedFiles); context: } $namespaceLine = $this->namespace ? ""\nnamespace {$this->namespace};\n"" : ''; $time = $options['build_time']; $id = hash('crc32', $hash.$time); $this->asFiles = false; if ($this->preload && null !== $autoloadFile = $this->getAutoloadFile()) { $autoloadFile = trim($this->export($autoloadFile), '()\\'); $preloadedFiles = array_reverse($preloadedFiles); $preloadedFiles = implode(""';\nrequire __DIR__.'/"", $preloadedFiles); $preloadedFiles = implode(""';\nrequire __DIR__.'/"", $preloadedFiles); $code[$options['class'].'.preload.php'] = <<<EOF <?php use Symfony\Component\DependencyInjection\Dumper\Preloader; if (in_array(PHP_SAPI, ['cli', 'phpdbg'], true)) { return;"	type_info: options:array baseClass:unknown code:array preloadedFiles:array id:unknown hash:unknown namespaceLine:unknown time:unknown autoloadFile:unknown proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	buggy: require __DIR__.'/$preloadedFiles'; context: <?php use Symfony\Component\DependencyInjection\Dumper\Preloader; if (in_array(PHP_SAPI, ['cli', 'phpdbg'], true)) { return; } require $autoloadFile; require __DIR__.'/$preloadedFiles'; require __DIR__.'/$preloadedFiles'; \$classes = []; EOF; foreach ($this->preload as $class) { if (!$class || str_contains($class, '$') || \in_array($class, ['int', 'float', 'string', 'bool', 'resource', 'object', 'array', 'null', 'callable', 'iterable', 'mixed', 'void'], true)) { continue; }	type_info: baseClass:unknown preloadedFiles:array autoloadFile:unknown classes:array proxyDumper:unknown class:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	"buggy: private function startClass(string $class, string $baseClass): string context: return $return.sprintf('%s(%s)', $this->dumpLiteralClass($this->dumpValue($callable)), $arguments ? implode(', ', $arguments) : '').$tail; } if (null === $class = $definition->getClass()) { throw new RuntimeException('Cannot dump definitions which have no class nor factory.'); } return $return.sprintf('new %s(%s)', $this->dumpLiteralClass($this->dumpValue($class)), implode(', ', $arguments)).$tail; } private function startClass(string $class, string $baseClass): string private function startClass(string $class, string $baseClass): string { $namespaceLine = !$this->asFiles && $this->namespace ? ""\nnamespace {$this->namespace};\n"" : ''; $code = <<<EOF <?php $namespaceLine use Symfony\Component\DependencyInjection\Argument\RewindableGenerator; use Symfony\Component\DependencyInjection\ContainerInterface; use Symfony\Component\DependencyInjection\Container;"	type_info: baseClass:unknown code:array namespaceLine:unknown proxyDumper:unknown class:unknown return:string arguments:array callable:unknown inlinedDefinitions:unknown definition:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	"buggy: $code .= $this->addInlineRequires(); context: if ($this->container->getParameterBag()->all()) { $code .= "" \$this->parameters = \$this->getDefaultParameters();\n\n""; } $code .= "" \$this->services = \$this->privates = [];\n""; $code .= $this->addSyntheticIds(); $code .= $this->addMethodMap(); $code .= $this->asFiles && !$this->inlineFactories ? $this->addFileMap() : ''; $code .= $this->addAliases(); $code .= $this->addInlineRequires(); $code .= $this->addInlineRequires(); $code .= <<<EOF } public function compile(): void { throw new LogicException('You cannot compile a dumped container that was already compiled.'); } public function isCompiled(): bool"	type_info: baseClass:unknown code:array proxyDumper:unknown inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	buggy: private function addInlineRequires(): string context: return \$this->get($idExported); } EOF; } return $code; } private function addInlineRequires(): string private function addInlineRequires(): string { if (!$this->hotPathTag || !$this->inlineRequires) { return ''; } $lineage = []; foreach ($this->container->findTaggedServiceIds($this->hotPathTag) as $id => $tags) { $definition = $this->container->getDefinition($id);	type_info: baseClass:unknown code:array id:unknown proxyDumper:unknown lineage:array idExported:unknown inlinedDefinitions:unknown definition:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	buggy: if (!$this->hotPathTag || !$this->inlineRequires) { return ''; } context: private function addInlineRequires(): string { if (!$this->hotPathTag || !$this->inlineRequires) { return ''; } if (!$this->hotPathTag || !$this->inlineRequires) { return ''; } $lineage = []; foreach ($this->container->findTaggedServiceIds($this->hotPathTag) as $id => $tags) { $definition = $this->container->getDefinition($id); if ($this->getProxyDumper()->isProxyCandidate($definition)) { continue; } $inlinedDefinitions = $this->getDefinitionsFromArguments([$definition]);	type_info: baseClass:unknown id:unknown proxyDumper:unknown lineage:array inlinedDefinitions:unknown definition:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	buggy:  context: private function addInlineRequires(): string { if (!$this->hotPathTag || !$this->inlineRequires) { return ''; } $lineage = []; foreach ($this->container->findTaggedServiceIds($this->hotPathTag) as $id => $tags) { $definition = $this->container->getDefinition($id); if ($this->getProxyDumper()->isProxyCandidate($definition)) { continue; } $inlinedDefinitions = $this->getDefinitionsFromArguments([$definition]);	type_info: baseClass:unknown id:unknown proxyDumper:unknown lineage:array inlinedDefinitions:unknown definition:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
67	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	buggy: foreach ($this->container->findTaggedServiceIds($this->hotPathTag) as $id => $tags) { context: private function addInlineRequires(): string { if (!$this->hotPathTag || !$this->inlineRequires) { return ''; } $lineage = []; foreach ($this->container->findTaggedServiceIds($this->hotPathTag) as $id => $tags) { foreach ($this->container->findTaggedServiceIds($this->hotPathTag) as $id => $tags) { $definition = $this->container->getDefinition($id); if ($this->getProxyDumper()->isProxyCandidate($definition)) { continue; } $inlinedDefinitions = $this->getDefinitionsFromArguments([$definition]); foreach ($inlinedDefinitions as $def) { foreach ($this->getClasses($def, $id) as $class) {	type_info: baseClass:unknown id:unknown proxyDumper:unknown class:unknown lineage:array def:unknown inlinedDefinitions:unknown definition:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
68	symfony_symfony_de495a562f0b407b84777333503652e436f0f94f_141_0	"buggy:  context: $code = ''; foreach ($lineage as $file) { if (!isset($this->inlinedRequires[$file])) { $this->inlinedRequires[$file] = true; $code .= sprintf(""\n include_once %s;"", $file); } } return $code ? sprintf(""\n \$this->privates['service_container'] = function () {%s\n };\n"", $code) : ''; } private function addDefaultParametersMethod(): string { if (!$this->container->getParameterBag()->all()) { return ''; } $php = [];"	type_info: baseClass:unknown code:array file:unknown proxyDumper:unknown lineage:array inlinedDefinitions:unknown php:array  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
69	symfony_symfony_66ca61112dfae3ca5b10bdcadd0ab6d934f06d74_142_0	buggy:  context: private function safelyUnserialize(string $contents) { $signalingException = new MessageDecodingFailedException(sprintf('Could not decode message using PHP serialization: %s.', $contents)); $prevUnserializeHandler = ini_set('unserialize_callback_func', self::class.'::handleUnserializeCallback'); $prevErrorHandler = set_error_handler(function ($type, $msg, $file, $line, $context = []) use (&$prevErrorHandler, $signalingException) { if (__FILE__ === $file) { throw $signalingException; } return $prevErrorHandler ? $prevErrorHandler($type, $msg, $file, $line, $context) : false; });	type_info: signalingException:unknown prevUnserializeHandler:unknown prevErrorHandler:unknown  global_variable:  function_name: decode encode safelyUnserialize handleUnserializeCallback	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
70	symfony_symfony_1f2908703a73da93563ecfecef3f9d4bd185b70c_143_0	buggy: if (\is_array($env) && (!isset($env[$k]) || ($_SERVER[$k] ?? $_ENV[$k] ?? $env[$k]) === $env[$k])) { context: public function bootEnv(string $path, string $defaultEnv = 'dev', array $testEnvs = ['test'], bool $overrideExistingVars = false): void { $p = $path.'.local.php'; $env = is_file($p) ? include $p : null; $k = $this->envKey; if (\is_array($env) && (!isset($env[$k]) || ($_SERVER[$k] ?? $_ENV[$k] ?? $env[$k]) === $env[$k])) { if (\is_array($env) && (!isset($env[$k]) || ($_SERVER[$k] ?? $_ENV[$k] ?? $env[$k]) === $env[$k])) { $this->populate($env, $overrideExistingVars); } else { $this->loadEnv($path, $k, $defaultEnv, $testEnvs, $overrideExistingVars); } $_SERVER += $_ENV;	type_info: envKey:string p:unknown env:array defaultEnv:string k:unknown overrideExistingVars:unknown path:unknown  global_variable: envKey: string path: unknown function_name: __construct setProdEnvs usePutenv load loadEnv bootEnv overload populate parse lexVarname lexValue lexNestedExpression skipEmptyLines resolveCommands resolveVariables moveCursor createFormatException doLoad	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
71	symfony_symfony_4453bdb74959821f2168ecaade0ff44bd54a7a56_144_0	buggy: use Symfony\Contracts\Service\ResetInterface; context: namespace Symfony\Bundle\FrameworkBundle; use Symfony\Component\BrowserKit\CookieJar; use Symfony\Component\BrowserKit\History; use Symfony\Component\DependencyInjection\ContainerInterface; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpKernel\HttpKernelBrowser; use Symfony\Component\HttpKernel\KernelInterface; use Symfony\Component\HttpKernel\Profiler\Profile as HttpProfile; use Symfony\Contracts\Service\ResetInterface; use Symfony\Contracts\Service\ResetInterface; class Client extends HttpKernelBrowser { private $hasPerformedRequest = false; private $profiler = false; private $reboot = true; public function __construct(KernelInterface $kernel, array $server = [], History $history = null, CookieJar $cookieJar = null) {	type_info: hasPerformedRequest:boolean profiler:boolean reboot:boolean server:unknown kernel:unknown  global_variable:  function_name: __construct getContainer getKernel getProfile enableProfiler disableReboot enableReboot doRequest doRequestInProcess getScript	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
72	symfony_symfony_4453bdb74959821f2168ecaade0ff44bd54a7a56_144_0	buggy: $container = $this->kernel->getContainer(); context: protected function doRequest($request) { if ($this->hasPerformedRequest && $this->reboot) { $container = $this->kernel->getContainer(); $container = $this->kernel->getContainer(); $this->kernel->shutdown(); if ($container instanceof ResetInterface) { $container->reset(); } } else { $this->hasPerformedRequest = true; } if ($this->profiler) {	type_info: container:unknown request:unknown  global_variable:  function_name: __construct getContainer getKernel getProfile enableProfiler disableReboot enableReboot doRequest doRequestInProcess getScript	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
73	symfony_symfony_4453bdb74959821f2168ecaade0ff44bd54a7a56_144_0	buggy: if ($container instanceof ResetInterface) { $container->reset(); } context: protected function doRequest($request) { if ($this->hasPerformedRequest && $this->reboot) { $container = $this->kernel->getContainer(); $this->kernel->shutdown(); if ($container instanceof ResetInterface) { $container->reset(); } if ($container instanceof ResetInterface) { $container->reset(); } } else { $this->hasPerformedRequest = true; } if ($this->profiler) { $this->profiler = false; $this->kernel->boot(); $this->kernel->getContainer()->get('profiler')->enable(); }	type_info: container:unknown request:unknown  global_variable:  function_name: __construct getContainer getKernel getProfile enableProfiler disableReboot enableReboot doRequest doRequestInProcess getScript	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
74	symfony_symfony_0229e5c216cd0b926b8a54dfebe23f885606fb63_145_0	"buggy: $template = $f['object'] ?? unserialize(sprintf('O:%d:""%s"":0:{}', \strlen($f['class']), $f['class'])); $ellipsis = 0; $templateSrc = method_exists($template, 'getSourceContext') ? $template->getSourceContext()->getCode() : (method_exists($template, 'getSource') ? $template->getSource() : ''); $templateInfo = $template->getDebugInfo(); if (isset($templateInfo[$f['line']])) { if (!method_exists($template, 'getSourceContext') || !file_exists($templatePath = $template->getSourceContext()->getPath())) { $templatePath = null; } if ($templateSrc) { $src = self::extractSource($templateSrc, $templateInfo[$f['line']], self::$srcContext, 'twig', $templatePath, $f); $srcKey = ($templatePath ?: $template->getTemplateName()).':'.$templateInfo[$f['line']]; context: $ellipsis = new LinkStub($srcKey, 0); $srcAttr = 'collapse='.(int) $ellipsis->inVendor; $ellipsisTail = $ellipsis->attr['ellipsis-tail'] ?? 0; $ellipsis = $ellipsis->attr['ellipsis'] ?? 0; if (file_exists($f['file']) && 0 <= self::$srcContext) { if (!empty($f['class']) && (is_subclass_of($f['class'], 'Twig\Template') || is_subclass_of($f['class'], 'Twig_Template')) && method_exists($f['class'], 'getDebugInfo')) { $template = $f['object'] ?? unserialize(sprintf('O:%d:""%s"":0:{}', \strlen($f['class']), $f['class'])); $ellipsis = 0; $templateSrc = method_exists($template, 'getSourceContext') ? $template->getSourceContext()->getCode() : (method_exists($template, 'getSource') ? $template->getSource() : ''); $templateInfo = $template->getDebugInfo(); if (isset($templateInfo[$f['line']])) { if (!method_exists($template, 'getSourceContext') || !file_exists($templatePath = $template->getSourceContext()->getPath())) { $templatePath = null; } if ($templateSrc) { $src = self::extractSource($templateSrc, $templateInfo[$f['line']], self::$srcContext, 'twig', $templatePath, $f); $srcKey = ($templatePath ?: $template->getTemplateName()).':'.$templateInfo[$f['line']]; $template = $f['object'] ?? unserialize(sprintf('O:%d:""%s"":0:{}', \strlen($f['class']), $f['class'])); $ellipsis = 0; $templateSrc = method_exists($template, 'getSourceContext') ? $template->getSourceContext()->getCode() : (method_exists($template, 'getSource') ? $template->getSource() : ''); $templateInfo = $template->getDebugInfo(); if (isset($templateInfo[$f['line']])) { if (!method_exists($template, 'getSourceContext') || !file_exists($templatePath = $template->getSourceContext()->getPath())) {"	type_info: srcContext:integer f:unknown src:array srcKey:unknown ellipsis:integer srcAttr:unknown ellipsisTail:unknown template:unknown templateSrc:unknown templateInfo:unknown templatePath:unknown  global_variable:  function_name: castError castException castErrorException castThrowingCasterException castSilencedErrorContext castTraceStub castFrameStub filterExceptionArray traceUnshift extractSource	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
75	symfony_symfony_b909acf2eecc36624cd1277c1aa863bf4cb01b52_146_0	buggy: if ($ifNoneMatchEtags = $request->getETags()) { $etag = $this->getEtag(); context: public function isNotModified(Request $request): bool { if (!$request->isMethodCacheable()) { return false; } $notModified = false; $lastModified = $this->headers->get('Last-Modified'); $modifiedSince = $request->headers->get('If-Modified-Since'); if ($ifNoneMatchEtags = $request->getETags()) { $etag = $this->getEtag(); if ($ifNoneMatchEtags = $request->getETags()) { $etag = $this->getEtag(); if (0 == strncmp($etag, 'W/', 2)) { $etag = substr($etag, 2); } foreach ($ifNoneMatchEtags as $ifNoneMatchEtag) { if (0 == strncmp($ifNoneMatchEtag, 'W/', 2)) { $ifNoneMatchEtag = substr($ifNoneMatchEtag, 2); } if ($ifNoneMatchEtag === $etag || '*' === $ifNoneMatchEtag) {	type_info: content:unknown headers:unknown charset:string etag:string notModified:boolean lastModified:unknown modifiedSince:unknown ifNoneMatchEtags:unknown ifNoneMatchEtag:unknown  global_variable: content: unknown headers: unknown charset: string function_name: __construct create __toString __clone prepare sendHeaders sendContent send setContent getContent setProtocolVersion getProtocolVersion setStatusCode getStatusCode setCharset getCharset isCacheable isFresh isValidateable setPrivate setPublic setImmutable isImmutable mustRevalidate getDate setDate getAge expire getExpires setExpires getMaxAge setMaxAge setSharedMaxAge getTtl setTtl setClientTtl getLastModified setLastModified getEtag setEtag setCache setNotModified hasVary getVary setVary isNotModified isInvalid isInformational isSuccessful isRedirection isClientError isServerError isOk isForbidden isNotFound isRedirect isEmpty closeOutputBuffers ensureIEOverSSLCompatibility	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
76	symfony_symfony_415dc197e4dfb579de72b8948ad1375fa4b24956_147_0	buggy: if ($this->defaultProtocol && $data && \is_string($data) && !preg_match('~^([\w+.-]+://|[^:/?@#]++@)~', $data)) { context: public function onSubmit(FormEvent $event) { $data = $event->getData(); if ($this->defaultProtocol && $data && \is_string($data) && !preg_match('~^([\w+.-]+://|[^:/?@#]++@)~', $data)) { if ($this->defaultProtocol && $data && \is_string($data) && !preg_match('~^([\w+.-]+://|[^:/?@#]++@)~', $data)) { $event->setData($this->defaultProtocol.'://'.$data); } }	type_info: defaultProtocol:unknown data:unknown  global_variable: defaultProtocol: unknown function_name: __construct onSubmit getSubscribedEvents	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
77	symfony_symfony_978d1a041a77f8593d410fda6f5f939dcf2afadf_148_0	buggy:  context: private function getAttributeDenormalizationContext(string $class, string $attribute, array $context): array { if (null === $metadata = $this->getAttributeMetadata($class, $attribute)) { return $context; } $context['deserialization_path'] = ($context['deserialization_path'] ?? false) ? $context['deserialization_path'].'.'.$attribute : $attribute; return array_merge($context, $metadata->getDenormalizationContextForGroups($this->getGroups($context))); }	type_info: classDiscriminatorResolver:unknown class:unknown attribute:unknown metadata:unknown context:unknown  global_variable: classDiscriminatorResolver: unknown function_name: __construct supportsNormalization normalize getAttributeNormalizationContext getAttributeDenormalizationContext getAttributeMetadata instantiateObject getAttributes extractAttributes getAttributeValue supportsDenormalization denormalize setAttributeValue validateAndDenormalize denormalizeParameter getTypes updateData isMaxDepthReached createChildContext getCacheKey isUninitializedValueError	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
78	symfony_symfony_978d1a041a77f8593d410fda6f5f939dcf2afadf_148_0	buggy: $context['deserialization_path'] = ($context['deserialization_path'] ?? false) ? $context['deserialization_path'].'.'.$attribute : $attribute; context: private function getAttributeDenormalizationContext(string $class, string $attribute, array $context): array { if (null === $metadata = $this->getAttributeMetadata($class, $attribute)) { return $context; } $context['deserialization_path'] = ($context['deserialization_path'] ?? false) ? $context['deserialization_path'].'.'.$attribute : $attribute; $context['deserialization_path'] = ($context['deserialization_path'] ?? false) ? $context['deserialization_path'].'.'.$attribute : $attribute; return array_merge($context, $metadata->getDenormalizationContextForGroups($this->getGroups($context))); }	type_info: classDiscriminatorResolver:unknown class:unknown attribute:unknown metadata:unknown context:unknown  global_variable: classDiscriminatorResolver: unknown function_name: __construct supportsNormalization normalize getAttributeNormalizationContext getAttributeDenormalizationContext getAttributeMetadata instantiateObject getAttributes extractAttributes getAttributeValue supportsDenormalization denormalize setAttributeValue validateAndDenormalize denormalizeParameter getTypes updateData isMaxDepthReached createChildContext getCacheKey isUninitializedValueError	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
79	symfony_symfony_542c2fbc2ee8857ea6c64e3db6de3540851006c1_149_0	buggy: if (\is_object($data)) { context: } } else { if ($validateDataGraph) { $validator->atPath('data')->validate($data, null, $groups); } $groupedConstraints = []; foreach ($constraints as $constraint) { if ($constraint instanceof Valid) { if (\is_object($data)) { if (\is_object($data)) { $validator->atPath('data')->validate($data, $constraint, $groups); } continue; } foreach ($groups as $group) { if (\in_array($group, $constraint->groups)) { $groupedConstraints[$group][] = $constraint;	type_info: validator:unknown groups:unknown data:unknown validateDataGraph:unknown constraints:unknown groupedConstraints:array group:unknown  global_variable:  function_name: validate getValidationGroups resolveValidationGroups getConstraintsInGroups	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	symfony_symfony_2658fed9cabfcfacf8e920a54e4e84bd4c5e1344_150_0	"buggy: $code .= ""\n include __DIR__.'/proxy-classes.php';""; context: $code = ''; foreach ($lineage as $file) { if (!isset($this->inlinedRequires[$file])) { $this->inlinedRequires[$file] = true; $code .= sprintf(""\n include_once %s;"", $file); } } if ($hasProxyClasses) { $code .= ""\n include __DIR__.'/proxy-classes.php';""; $code .= ""\n include __DIR__.'/proxy-classes.php';""; } return $code ? sprintf(""\n \$this->privates['service_container'] = function () {%s\n };\n"", $code) : ''; } private function addDefaultParametersMethod(): string { if (!$this->container->getParameterBag()->all()) { return '';"	type_info: baseClass:unknown code:array file:unknown proxyDumper:unknown lineage:array inlinedDefinitions:unknown  global_variable: baseClass: unknown proxyDumper: unknown inlinedDefinitions: unknown function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass throw wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	symfony_symfony_b9eace85897de4f18822fc785b5b1c211d33d1a0_151_0	"buggy: throw new AccessDeniedException(sprintf('The logged-in user is an instance of ""%s"" and an user of type ""%s"" is expected.', $user::class, $argument->getType())); context: $user = $this->tokenStorage->getToken()?->getUser(); if (null === $user) { if (!$argument->isNullable()) { throw new AccessDeniedException(sprintf('There is no logged-in user to pass to $%s, make the argument nullable if you want to allow anonymous access to the action.', $argument->getName())); } yield null; } elseif (null === $argument->getType() || $user instanceof ($argument->getType())) { yield $user; } else { throw new AccessDeniedException(sprintf('The logged-in user is an instance of ""%s"" and an user of type ""%s"" is expected.', $user::class, $argument->getType())); throw new AccessDeniedException(sprintf('The logged-in user is an instance of ""%s"" and an user of type ""%s"" is expected.', $user::class, $argument->getType())); } } }"	type_info: user:unknown  global_variable:  function_name: __construct supports resolve	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	symfony_symfony_5f2d584707808ebadcc56b0b32f116020f8e45f6_152_0	"buggy:  context: private function getCurlCommand(array $trace): ?string { $debug = explode(""\n"", $trace['info']['debug']); $url = $trace['url']; $command = ['curl', '--compressed']; $dataArg = []; if ($json = $trace['options']['json'] ?? null) { $dataArg[] = '--data '.escapeshellarg(json_encode($json, \JSON_PRETTY_PRINT)); } elseif ($body = $trace['options']['body'] ?? null) { if (\is_string($body)) { $dataArg[] = '--data '.escapeshellarg($body); } elseif (\is_array($body)) { foreach ($body as $key => $value) { $dataArg[] = '--data '.escapeshellarg(""$key=$value"");"	type_info: debug:unknown url:unknown command:array dataArg:array json:unknown body:unknown key:unknown  global_variable:  function_name: registerClient collect lateCollect getClients getRequestCount getErrorCount getName reset collectOnClient getCurlCommand	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	symfony_symfony_4810066c5cf158ee624de61dce81c4584b710d0a_153_0	buggy: return $this->refillTime->format('P%y%m%dDT%HH%iM%sS').'-'.$this->refillAmount; context: public function __toString(): string { return $this->refillTime->format('P%y%m%dDT%HH%iM%sS').'-'.$this->refillAmount; return $this->refillTime->format('P%y%m%dDT%HH%iM%sS').'-'.$this->refillAmount; }	type_info: refillAmount:unknown  global_variable: refillAmount: unknown function_name: __construct perSecond perMinute perHour perDay perMonth perYear fromString calculateTimeForTokens calculateNextTokenAvailability calculateNewTokensDuringInterval __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	symfony_symfony_f503e37d29e99de2f52203dff4cf4ea4ebb5201c_154_0	buggy:  context: break; } $parentClass = null; $types = []; foreach ($docNode->getTagsByName($tag) as $tagDocNode) { if ($tagDocNode->value instanceof InvalidTagValueNode) { continue; } foreach ($this->phpStanTypeHelper->getTypes($tagDocNode->value, $nameScope) as $type) { switch ($type->getClassName()) { case 'self': case 'static': $resolvedClass = $class; break; case 'parent': if (false !== $resolvedClass = $parentClass ??= get_parent_class($class)) { break;	type_info: mutatorPrefixes:unknown nameScope:unknown tag:string parentClass:unknown types:array resolvedClass:unknown tagDocNode:unknown  global_variable: mutatorPrefixes: unknown function_name: __construct getTypes getTypesFromConstructor getDocBlockFromConstructor filterDocBlockParams getDocBlock getDocBlockFromProperty getDocBlockFromMethod	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	symfony_symfony_f503e37d29e99de2f52203dff4cf4ea4ebb5201c_154_0	buggy: if (self::MUTATOR === $source && !$this->filterDocBlockParams($phpDocNode, $property)) { return null; } context: } if (!$rawDocNode) { return null; } $tokens = new TokenIterator($this->lexer->tokenize($rawDocNode)); $phpDocNode = $this->phpDocParser->parse($tokens); $tokens->consumeTokenType(Lexer::TOKEN_END); if (self::MUTATOR === $source && !$this->filterDocBlockParams($phpDocNode, $property)) { return null; } if (self::MUTATOR === $source && !$this->filterDocBlockParams($phpDocNode, $property)) { return null; } return [$phpDocNode, $source, $reflectionProperty->class]; } private function getDocBlockFromMethod(string $class, string $ucFirstProperty, int $type): ?array { $prefixes = self::ACCESSOR === $type ? $this->accessorPrefixes : $this->mutatorPrefixes;	type_info: mutatorPrefixes:unknown rawDocNode:unknown tokens:unknown phpDocNode:unknown ucFirstProperty:unknown reflectionProperty:unknown source:unknown prefixes:unknown  global_variable: mutatorPrefixes: unknown function_name: __construct getTypes getTypesFromConstructor getDocBlockFromConstructor filterDocBlockParams getDocBlock getDocBlockFromProperty getDocBlockFromMethod	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	symfony_symfony_8e1db2aa00a1cd0f18fe2e2e97d8ad1e7451aba1_155_0	"buggy: return sprintf('$this->%s[%s] ??= %s', $definition->isPublic() ? 'services' : 'privates', $this->doExport($id), $code); context: } } elseif ($this->isTrivialInstance($definition)) { if ($definition->hasErrors() && $e = $definition->getErrors()) { return sprintf('throw new RuntimeException(%s)', $this->export(reset($e))); } $code = $this->addNewInstance($definition, '', $id); if ($definition->isShared() && !isset($this->singleUsePrivateIds[$id])) { return sprintf('$this->%s[%s] ??= %s', $definition->isPublic() ? 'services' : 'privates', $this->doExport($id), $code); return sprintf('$this->%s[%s] ??= %s', $definition->isPublic() ? 'services' : 'privates', $this->doExport($id), $code); } $code = ""($code)""; } else { $code = $this->asFiles && !$this->inlineFactories && !$this->isHotPath($definition) ? ""\$this->load('%s')"" : '$this->%s()'; $code = sprintf($code, $this->generateMethodName($id));"	type_info: code:array id:unknown e:unknown definition:unknown  global_variable:  function_name: __construct setProxyDumper dump getProxyDumper analyzeReferences collectCircularReferences addCircularReferences collectLineage generateProxyClasses addServiceInclude addServiceInstance isTrivialInstance addServiceMethodCalls addServiceProperties addServiceConfigurator addService do addInlineVariables addInlineReference addInlineService addServices generateServiceFiles addNewInstance startClass __construct compile isCompiled load createProxy addSyntheticIds addRemovedIds getRemovedIds addMethodMap addFileMap addAliases addDeprecatedAliases addInlineRequires addDefaultParametersMethod getParameter hasParameter setParameter getParameterBag getDynamicParameter getDefaultParameters exportParameters endClass wrapServiceConditionals getServiceConditionals getDefinitionsFromArguments dumpValue dumpLiteralClass dumpParameter getServiceCall initializeMethodNamesMap generateMethodName getNextVariableName getExpressionLanguage isHotPath isSingleUsePrivateNode export doExport getAutoloadFile getClasses	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	symfony_symfony_bb0ddf1984cdde3e71f6a35e64e54c13a0fd1cbf_156_0	"buggy: $dataArg[] = '--data '.escapeshellarg(json_encode($json, \JSON_PRETTY_PRINT)); context: foreach ($trace['options']['resolve'] as $host => $ip) { if (null !== $ip) { $command[] = '--resolve '.escapeshellarg(""$host:$port:$ip""); } } } $dataArg = []; if ($json = $trace['options']['json'] ?? null) { $dataArg[] = '--data '.escapeshellarg(json_encode($json, \JSON_PRETTY_PRINT)); $dataArg[] = '--data '.escapeshellarg(json_encode($json, \JSON_PRETTY_PRINT)); } elseif ($body = $trace['options']['body'] ?? null) { if (\is_string($body)) { try { $dataArg[] = '--data '.escapeshellarg($body); } catch (\ValueError $e) { return null; } } elseif (\is_array($body)) { $body = explode('&', self::normalizeBody($body));"	type_info: command:array port:unknown host:unknown dataArg:array json:unknown body:unknown  global_variable:  function_name: registerClient collect lateCollect getClients getRequestCount getErrorCount getName reset collectOnClient getCurlCommand	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	symfony_symfony_5439bf299b1adeb22a37d98d5ef482d86904e6b4_157_0	buggy: $exitCode = 0; context: protected function execute(InputInterface $input, OutputInterface $output): int { $io = new SymfonyStyle($input, $output); $locale = $input->getArgument('locale'); $domain = $input->getOption('domain'); $exitCode = 0; $exitCode = 0; $kernel = $this->getApplication()->getKernel(); $transPaths = $this->getRootTransPaths(); $codePaths = $this->getRootCodePaths($kernel); if (null !== $input->getArgument('bundle')) { try { $bundle = $kernel->getBundle($input->getArgument('bundle')); $bundleDir = $bundle->getPath();	type_info: defaultTransPath:unknown io:unknown locale:unknown domain:unknown exitCode:integer kernel:unknown transPaths:array codePaths:array bundle:unknown bundleDir:unknown  global_variable: defaultTransPath: unknown transPaths: array codePaths: array function_name: __construct configure execute complete formatState formatStates formatId sanitizeString extractMessages loadCurrentMessages loadFallbackCatalogues getRootTransPaths getRootCodePaths	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	symfony_symfony_5439bf299b1adeb22a37d98d5ef482d86904e6b4_157_0	buggy: $exitCode = $exitCode | self::EXIT_CODE_MISSING; context: $rows = []; foreach ($allMessages as $domain => $messages) { foreach (array_keys($messages) as $messageId) { $value = $currentCatalogue->get($messageId, $domain); $states = []; if ($extractedCatalogue->defines($messageId, $domain)) { if (!$currentCatalogue->defines($messageId, $domain)) { $states[] = self::MESSAGE_MISSING; $exitCode = $exitCode | self::EXIT_CODE_MISSING; $exitCode = $exitCode | self::EXIT_CODE_MISSING; } } elseif ($currentCatalogue->defines($messageId, $domain)) { $states[] = self::MESSAGE_UNUSED; $exitCode = $exitCode | self::EXIT_CODE_UNUSED; } if (!\in_array(self::MESSAGE_UNUSED, $states) && true === $input->getOption('only-unused') || !\in_array(self::MESSAGE_MISSING, $states) && true === $input->getOption('only-missing')) {	type_info: defaultTransPath:unknown domain:unknown exitCode:integer transPaths:array codePaths:array extractedCatalogue:unknown currentCatalogue:unknown allMessages:array rows:array states:array value:unknown  global_variable: defaultTransPath: unknown transPaths: array codePaths: array function_name: __construct configure execute complete formatState formatStates formatId sanitizeString extractMessages loadCurrentMessages loadFallbackCatalogues getRootTransPaths getRootCodePaths	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	symfony_symfony_5439bf299b1adeb22a37d98d5ef482d86904e6b4_157_0	buggy: $exitCode = $exitCode | self::EXIT_CODE_UNUSED; context: if ($extractedCatalogue->defines($messageId, $domain)) { if (!$currentCatalogue->defines($messageId, $domain)) { $states[] = self::MESSAGE_MISSING; $exitCode = $exitCode | self::EXIT_CODE_MISSING; } } elseif ($currentCatalogue->defines($messageId, $domain)) { $states[] = self::MESSAGE_UNUSED; $exitCode = $exitCode | self::EXIT_CODE_UNUSED; $exitCode = $exitCode | self::EXIT_CODE_UNUSED; } if (!\in_array(self::MESSAGE_UNUSED, $states) && true === $input->getOption('only-unused') || !\in_array(self::MESSAGE_MISSING, $states) && true === $input->getOption('only-missing')) { continue; } foreach ($fallbackCatalogues as $fallbackCatalogue) { if ($fallbackCatalogue->defines($messageId, $domain) && $value === $fallbackCatalogue->get($messageId, $domain)) {	type_info: defaultTransPath:unknown domain:unknown exitCode:integer transPaths:array codePaths:array extractedCatalogue:unknown currentCatalogue:unknown fallbackCatalogues:array states:array value:unknown fallbackCatalogue:unknown  global_variable: defaultTransPath: unknown transPaths: array codePaths: array function_name: __construct configure execute complete formatState formatStates formatId sanitizeString extractMessages loadCurrentMessages loadFallbackCatalogues getRootTransPaths getRootCodePaths	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	symfony_symfony_5439bf299b1adeb22a37d98d5ef482d86904e6b4_157_0	buggy: if (!\in_array(self::MESSAGE_UNUSED, $states) && true === $input->getOption('only-unused') || !\in_array(self::MESSAGE_MISSING, $states) && true === $input->getOption('only-missing')) { context: } } elseif ($currentCatalogue->defines($messageId, $domain)) { $states[] = self::MESSAGE_UNUSED; $exitCode = $exitCode | self::EXIT_CODE_UNUSED; } if (!\in_array(self::MESSAGE_UNUSED, $states) && true === $input->getOption('only-unused') || !\in_array(self::MESSAGE_MISSING, $states) && true === $input->getOption('only-missing')) { if (!\in_array(self::MESSAGE_UNUSED, $states) && true === $input->getOption('only-unused') || !\in_array(self::MESSAGE_MISSING, $states) && true === $input->getOption('only-missing')) { continue; } foreach ($fallbackCatalogues as $fallbackCatalogue) { if ($fallbackCatalogue->defines($messageId, $domain) && $value === $fallbackCatalogue->get($messageId, $domain)) {	type_info: defaultTransPath:unknown domain:unknown exitCode:integer transPaths:array codePaths:array currentCatalogue:unknown fallbackCatalogues:array states:array value:unknown fallbackCatalogue:unknown  global_variable: defaultTransPath: unknown transPaths: array codePaths: array function_name: __construct configure execute complete formatState formatStates formatId sanitizeString extractMessages loadCurrentMessages loadFallbackCatalogues getRootTransPaths getRootCodePaths	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	symfony_symfony_e14cea92be7544f9fe429b0350052b6644782618_158_0	"buggy:  context: class ElasticsearchLogstashHandler extends AbstractHandler { use FormattableHandlerTrait; use ProcessableHandlerTrait; private $endpoint; private $index; private $client; private $responses; public function __construct(string $endpoint = 'http://127.0.0.1:9200', string $index = 'monolog', HttpClientInterface $client = null, $level = Logger::DEBUG, bool $bubble = true) { if (!interface_exists(HttpClientInterface::class)) { throw new \LogicException(sprintf('The ""%s"" handler needs an HTTP client. Try running ""composer require symfony/http-client"".', __CLASS__)); } parent::__construct($level, $bubble); $this->endpoint = $endpoint; $this->index = $index;"	type_info: endpoint:unknown  global_variable: endpoint: unknown function_name: __construct handle handleBatch getDefaultFormatter sendToElasticsearch __sleep __wakeup __destruct wait	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	symfony_symfony_e14cea92be7544f9fe429b0350052b6644782618_158_0	"buggy: public function __construct(string $endpoint = 'http://127.0.0.1:9200', string $index = 'monolog', HttpClientInterface $client = null, $level = Logger::DEBUG, bool $bubble = true) context: class ElasticsearchLogstashHandler extends AbstractHandler { use FormattableHandlerTrait; use ProcessableHandlerTrait; private $endpoint; private $index; private $client; private $responses; public function __construct(string $endpoint = 'http://127.0.0.1:9200', string $index = 'monolog', HttpClientInterface $client = null, $level = Logger::DEBUG, bool $bubble = true) public function __construct(string $endpoint = 'http://127.0.0.1:9200', string $index = 'monolog', HttpClientInterface $client = null, $level = Logger::DEBUG, bool $bubble = true) { if (!interface_exists(HttpClientInterface::class)) { throw new \LogicException(sprintf('The ""%s"" handler needs an HTTP client. Try running ""composer require symfony/http-client"".', __CLASS__)); } parent::__construct($level, $bubble); $this->endpoint = $endpoint; $this->index = $index; $this->client = $client ?: HttpClient::create(['timeout' => 1]);"	type_info: endpoint:unknown  global_variable: endpoint: unknown function_name: __construct handle handleBatch getDefaultFormatter sendToElasticsearch __sleep __wakeup __destruct wait	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	symfony_symfony_e14cea92be7544f9fe429b0350052b6644782618_158_0	"buggy:  context: { if (!interface_exists(HttpClientInterface::class)) { throw new \LogicException(sprintf('The ""%s"" handler needs an HTTP client. Try running ""composer require symfony/http-client"".', __CLASS__)); } parent::__construct($level, $bubble); $this->endpoint = $endpoint; $this->index = $index; $this->client = $client ?: HttpClient::create(['timeout' => 1]); $this->responses = new \SplObjectStorage(); } public function handle(array $record): bool { if (!$this->isHandling($record)) { return false; } $this->sendToElasticsearch([$record]);"	type_info: endpoint:unknown record:unknown  global_variable: endpoint: unknown function_name: __construct handle handleBatch getDefaultFormatter sendToElasticsearch __sleep __wakeup __destruct wait	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	symfony_symfony_e14cea92be7544f9fe429b0350052b6644782618_158_0	buggy:  context: private function sendToElasticsearch(array $records) { $formatter = $this->getFormatter(); $body = ''; foreach ($records as $record) { foreach ($this->processors as $processor) { $record = $processor($record); } $body .= json_encode([ 'index' => [ '_index' => $this->index, '_type' => '_doc',	type_info: endpoint:unknown records:unknown formatter:unknown body:string record:unknown  global_variable: endpoint: unknown function_name: __construct handle handleBatch getDefaultFormatter sendToElasticsearch __sleep __wakeup __destruct wait	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	symfony_symfony_e14cea92be7544f9fe429b0350052b6644782618_158_0	"buggy: $body .= json_encode([ 'index' => [ '_index' => $this->index, '_type' => '_doc', ], ]); context: private function sendToElasticsearch(array $records) { $formatter = $this->getFormatter(); $body = ''; foreach ($records as $record) { foreach ($this->processors as $processor) { $record = $processor($record); } $body .= json_encode([ 'index' => [ '_index' => $this->index, '_type' => '_doc', ], ]); $body .= json_encode([ 'index' => [ '_index' => $this->index, '_type' => '_doc', ], ]); $body .= ""\n""; $body .= $formatter->format($record); $body .= ""\n""; } $response = $this->client->request('POST', $this->endpoint.'/_bulk', [ 'body' => $body, 'headers' => [ 'Content-Type' => 'application/json', ],"	type_info: endpoint:unknown records:unknown formatter:unknown body:string record:unknown response:unknown  global_variable: endpoint: unknown function_name: __construct handle handleBatch getDefaultFormatter sendToElasticsearch __sleep __wakeup __destruct wait	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	symfony_symfony_e14cea92be7544f9fe429b0350052b6644782618_158_0	"buggy:  context: foreach ($this->processors as $processor) { $record = $processor($record); } $body .= json_encode([ 'index' => [ '_index' => $this->index, '_type' => '_doc', ], ]); $body .= ""\n""; $body .= $formatter->format($record); $body .= ""\n""; } $response = $this->client->request('POST', $this->endpoint.'/_bulk', [ 'body' => $body, 'headers' => [ 'Content-Type' => 'application/json', ],"	type_info: endpoint:unknown formatter:unknown body:string record:unknown response:unknown  global_variable: endpoint: unknown function_name: __construct handle handleBatch getDefaultFormatter sendToElasticsearch __sleep __wakeup __destruct wait	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	symfony_symfony_67dd69b29da8b2b01620d083efa8b689279713cf_159_0	buggy: if (isset($options['normalized_headers']['content-length']) && $contentType = $options['normalized_headers']['content-type'] ?? null) { unset($options['normalized_headers']['content-type']); $options['normalized_headers']['content-type'] = $contentType; } context: $options['http_version'] = (string) ($options['http_version'] ?? '') ?: null; if (0 > $options['timeout'] = (float) ($options['timeout'] ?? ini_get('default_socket_timeout'))) { $options['timeout'] = 172800.0; } $options['max_duration'] = isset($options['max_duration']) ? (float) $options['max_duration'] : 0; if (isset($options['normalized_headers']['content-length']) && $contentType = $options['normalized_headers']['content-type'] ?? null) { unset($options['normalized_headers']['content-type']); $options['normalized_headers']['content-type'] = $contentType; } if (isset($options['normalized_headers']['content-length']) && $contentType = $options['normalized_headers']['content-type'] ?? null) { unset($options['normalized_headers']['content-type']); $options['normalized_headers']['content-type'] = $contentType; } $options['headers'] = array_merge(...array_values($options['normalized_headers']));	type_info: options:unknown contentType:unknown  global_variable:  function_name: prepareRequest mergeDefaultOptions normalizeHeaders normalizeBody normalizePeerFingerprint jsonEncode resolveUrl parseUrl removeDotSegments mergeQueryString shouldBuffer	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	symfony_symfony_e7072aa5cc5be00fcbdcbfce524b4da3e9beaa50_160_0	buggy: if (0 === $exitCode) { context: } catch (\Exception $e) { if (!$this->catchExceptions) { throw $e; } $renderException($e); $exitCode = $e->getCode(); if (is_numeric($exitCode)) { $exitCode = (int) $exitCode; if (0 === $exitCode) { if (0 === $exitCode) { $exitCode = 1; } } else { $exitCode = 1; } } finally { if (!$phpHandler) { if (set_exception_handler($renderException) === $renderException) { restore_exception_handler();	type_info: name:string renderException:unknown phpHandler:unknown exitCode:integer definition:unknown e:unknown  global_variable: name: string definition: unknown function_name: __construct setDispatcher setCommandLoader run doRun reset setHelperSet getHelperSet setDefinition getDefinition getHelp areExceptionsCaught setCatchExceptions isAutoExitEnabled setAutoExit getName setName getVersion setVersion getLongVersion register addCommands add get has getNamespaces findNamespace find all getAbbreviations renderException renderThrowable finishRenderThrowableOrException doRenderException doRenderThrowable doActuallyRenderThrowable configureIO doRunCommand getCommandName getDefaultInputDefinition getDefaultCommands getDefaultHelperSet getAbbreviationSuggestions extractNamespace findAlternatives setDefaultCommand isSingleCommand splitStringByWidth extractAllNamespaces init	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	symfony_symfony_33fb1533c191739511f630418a787ea0ab95d414_161_0	buggy:  context: use Symfony\Component\PropertyAccess\Exception\AccessException; use Symfony\Component\PropertyAccess\Exception\InvalidArgumentException; use Symfony\Component\PropertyAccess\Exception\NoSuchPropertyException; use Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface; use Symfony\Component\PropertyInfo\Type; use Symfony\Component\Serializer\Encoder\JsonEncoder; use Symfony\Component\Serializer\Encoder\XmlEncoder; use Symfony\Component\Serializer\Exception\ExtraAttributesException; use Symfony\Component\Serializer\Exception\LogicException; use Symfony\Component\Serializer\Exception\NotNormalizableValueException; use Symfony\Component\Serializer\Exception\RuntimeException; use Symfony\Component\Serializer\Mapping\AttributeMetadataInterface; use Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata; use Symfony\Component\Serializer\Mapping\ClassDiscriminatorResolverInterface; use Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactoryInterface; use Symfony\Component\Serializer\NameConverter\NameConverterInterface; abstract class AbstractObjectNormalizer extends AbstractNormalizer {	type_info: classDiscriminatorResolver:unknown maxDepthHandler:unknown  global_variable: classDiscriminatorResolver: unknown maxDepthHandler: unknown function_name: __construct supportsNormalization normalize instantiateObject getAttributes extractAttributes getAttributeValue setMaxDepthHandler supportsDenormalization denormalize setAttributeValue validateAndDenormalize denormalizeParameter getTypes updateData isMaxDepthReached createChildContext getCacheKey isUninitializedValueError	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	symfony_symfony_33fb1533c191739511f630418a787ea0ab95d414_161_0	buggy:  context: abstract protected function setAttributeValue($object, $attribute, $value, $format = null, array $context = []); private function validateAndDenormalize(string $currentClass, string $attribute, $data, ?string $format, array $context)	type_info: classDiscriminatorResolver:unknown format:unknown data:array maxDepthHandler:unknown attribute:unknown object:unknown value:unknown context:unknown  global_variable: classDiscriminatorResolver: unknown maxDepthHandler: unknown function_name: __construct supportsNormalization normalize instantiateObject getAttributes extractAttributes getAttributeValue setMaxDepthHandler supportsDenormalization denormalize setAttributeValue validateAndDenormalize denormalizeParameter getTypes updateData isMaxDepthReached createChildContext getCacheKey isUninitializedValueError	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	symfony_symfony_33fb1533c191739511f630418a787ea0ab95d414_161_0	buggy:  context: private function validateAndDenormalize(string $currentClass, string $attribute, $data, ?string $format, array $context) { if (null === $types = $this->getTypes($currentClass, $attribute)) { return $data; } $expectedTypes = []; $isUnionType = \count($types) > 1; $extraAttributesException = null; foreach ($types as $type) { if (null === $data && $type->isNullable()) { return null; } $collectionValueType = $type->isCollection() ? $type->getCollectionValueType() : null; if ('xml' === $format && null !== $collectionValueType && (!\is_array($data) || !\is_int(key($data)))) { $data = [$data]; }	type_info: classDiscriminatorResolver:unknown format:unknown data:array maxDepthHandler:unknown attribute:unknown type:unknown types:unknown expectedTypes:array isUnionType:unknown extraAttributesException:unknown collectionValueType:unknown context:unknown  global_variable: classDiscriminatorResolver: unknown maxDepthHandler: unknown function_name: __construct supportsNormalization normalize instantiateObject getAttributes extractAttributes getAttributeValue setMaxDepthHandler supportsDenormalization denormalize setAttributeValue validateAndDenormalize denormalizeParameter getTypes updateData isMaxDepthReached createChildContext getCacheKey isUninitializedValueError	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	symfony_symfony_33fb1533c191739511f630418a787ea0ab95d414_161_0	buggy:  context: throw $e; } } catch (ExtraAttributesException $e) { if (!$isUnionType) { throw $e; } if (!$extraAttributesException) { $extraAttributesException = $e; } } } if ($extraAttributesException) { throw $extraAttributesException; } if ($context[self::DISABLE_TYPE_ENFORCEMENT] ?? $this->defaultContext[self::DISABLE_TYPE_ENFORCEMENT] ?? false) { return $data; }	type_info: classDiscriminatorResolver:unknown data:array maxDepthHandler:unknown isUnionType:unknown extraAttributesException:unknown context:unknown  global_variable: classDiscriminatorResolver: unknown maxDepthHandler: unknown function_name: __construct supportsNormalization normalize instantiateObject getAttributes extractAttributes getAttributeValue setMaxDepthHandler supportsDenormalization denormalize setAttributeValue validateAndDenormalize denormalizeParameter getTypes updateData isMaxDepthReached createChildContext getCacheKey isUninitializedValueError	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	symfony_symfony_33fb1533c191739511f630418a787ea0ab95d414_161_0	"buggy:  context: if (!$extraAttributesException) { $extraAttributesException = $e; } } } if ($extraAttributesException) { throw $extraAttributesException; } if ($context[self::DISABLE_TYPE_ENFORCEMENT] ?? $this->defaultContext[self::DISABLE_TYPE_ENFORCEMENT] ?? false) { return $data; } throw new NotNormalizableValueException(sprintf('The type of the ""%s"" attribute for class ""%s"" must be one of ""%s"" (""%s"" given).', $attribute, $currentClass, implode('"", ""', array_keys($expectedTypes)), \gettype($data))); } protected function denormalizeParameter(\ReflectionClass $class, \ReflectionParameter $parameter, $parameterName, $parameterData, array $context, $format = null) { if ($parameter->isVariadic() || null === $this->propertyTypeExtractor || null === $this->propertyTypeExtractor->getTypes($class->getName(), $parameterName)) {"	type_info: classDiscriminatorResolver:unknown format:unknown data:array class:unknown maxDepthHandler:unknown attribute:unknown expectedTypes:array extraAttributesException:unknown parameterData:unknown context:unknown  global_variable: classDiscriminatorResolver: unknown maxDepthHandler: unknown function_name: __construct supportsNormalization normalize instantiateObject getAttributes extractAttributes getAttributeValue setMaxDepthHandler supportsDenormalization denormalize setAttributeValue validateAndDenormalize denormalizeParameter getTypes updateData isMaxDepthReached createChildContext getCacheKey isUninitializedValueError	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	symfony_symfony_793a2641bb27121ba129eb089226e866e2b4cfbd_162_0	"buggy: return $this->handleCircularReference($object); context: public function normalize($object, $format = null, array $context = []) { if ($this->isCircularReference($object, $context)) { return $this->handleCircularReference($object); return $this->handleCircularReference($object); } if (!$object instanceof \JsonSerializable) { throw new InvalidArgumentException(sprintf('The object must implement ""%s"".', \JsonSerializable::class)); } if (!$this->serializer instanceof NormalizerInterface) { throw new LogicException('Cannot normalize object because injected serializer is not a normalizer.'); }"	type_info: format:unknown  global_variable:  function_name: normalize supportsNormalization supportsDenormalization denormalize hasCacheableSupportsMethod	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	symfony_symfony_d4ea07272644d89a04149a10d0b93d73aefcfd0d_163_0	buggy: if (!str_starts_with($this->prefix, 'phar://') && !str_contains($this->pattern, '/**/')) { context: public function getIterator() { if (!file_exists($this->prefix) || (!$this->recursive && '' === $this->pattern)) { return; } $prefix = str_replace('\\', '/', $this->prefix); $paths = null; if (!str_starts_with($this->prefix, 'phar://') && !str_contains($this->pattern, '/**/')) { if (!str_starts_with($this->prefix, 'phar://') && !str_contains($this->pattern, '/**/')) { if ($this->globBrace || !str_contains($this->pattern, '{')) { $paths = glob($this->prefix.$this->pattern, \GLOB_NOSORT | $this->globBrace); } elseif (!str_contains($this->pattern, '\\') || !preg_match('/\\\\[,{}]/', $this->pattern)) { foreach ($this->expandGlob($this->pattern) as $p) { $paths[] = glob($this->prefix.$p, \GLOB_NOSORT); } $paths = array_merge(...$paths); } }	type_info: forExclusion:unknown hash:unknown prefix:unknown paths:array  global_variable: forExclusion: unknown hash: unknown prefix: unknown function_name: __construct getPrefix __toString isFresh __sleep __wakeup getIterator computeHash expandGlob	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	symfony_symfony_d4ea07272644d89a04149a10d0b93d73aefcfd0d_163_0	"buggy: $regex = Glob::toRegex($this->pattern); context: } return; } if (!class_exists(Finder::class)) { throw new \LogicException(sprintf('Extended glob pattern ""%s"" cannot be used as the Finder component is not installed.', $this->pattern)); } $finder = new Finder(); $regex = Glob::toRegex($this->pattern); $regex = Glob::toRegex($this->pattern); if ($this->recursive) { $regex = substr_replace($regex, '(/|$)', -2, 1); } $prefixLen = \strlen($this->prefix); foreach ($finder->followLinks()->sortByName()->in($this->prefix) as $path => $info) { $normalizedPath = str_replace('\\', '/', $path); if (!preg_match($regex, substr($normalizedPath, $prefixLen)) || !$info->isFile()) { continue;"	type_info: forExclusion:unknown hash:unknown prefix:unknown normalizedPath:unknown path:unknown finder:unknown regex:unknown prefixLen:unknown  global_variable: forExclusion: unknown hash: unknown prefix: unknown function_name: __construct getPrefix __toString isFresh __sleep __wakeup getIterator computeHash expandGlob	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	symfony_symfony_d4ea07272644d89a04149a10d0b93d73aefcfd0d_163_0	"buggy:  context: } } return; } if (!class_exists(Finder::class)) { throw new \LogicException(sprintf('Extended glob pattern ""%s"" cannot be used as the Finder component is not installed.', $this->pattern)); } $finder = new Finder(); $regex = Glob::toRegex($this->pattern); if ($this->recursive) { $regex = substr_replace($regex, '(/|$)', -2, 1); } $prefixLen = \strlen($this->prefix); foreach ($finder->followLinks()->sortByName()->in($this->prefix) as $path => $info) { $normalizedPath = str_replace('\\', '/', $path); if (!preg_match($regex, substr($normalizedPath, $prefixLen)) || !$info->isFile()) {"	type_info: forExclusion:unknown hash:unknown prefix:unknown normalizedPath:unknown path:unknown finder:unknown regex:unknown prefixLen:unknown  global_variable: forExclusion: unknown hash: unknown prefix: unknown function_name: __construct getPrefix __toString isFresh __sleep __wakeup getIterator computeHash expandGlob	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	symfony_symfony_d4ea07272644d89a04149a10d0b93d73aefcfd0d_163_0	"buggy: $prefixLen = \strlen($this->prefix); foreach ($finder->followLinks()->sortByName()->in($this->prefix) as $path => $info) { context: if (!class_exists(Finder::class)) { throw new \LogicException(sprintf('Extended glob pattern ""%s"" cannot be used as the Finder component is not installed.', $this->pattern)); } $finder = new Finder(); $regex = Glob::toRegex($this->pattern); if ($this->recursive) { $regex = substr_replace($regex, '(/|$)', -2, 1); } $prefixLen = \strlen($this->prefix); foreach ($finder->followLinks()->sortByName()->in($this->prefix) as $path => $info) { $prefixLen = \strlen($this->prefix); foreach ($finder->followLinks()->sortByName()->in($this->prefix) as $path => $info) { $normalizedPath = str_replace('\\', '/', $path); if (!preg_match($regex, substr($normalizedPath, $prefixLen)) || !$info->isFile()) { continue; } if ($this->excludedPrefixes) { do { if (isset($this->excludedPrefixes[$dirPath = $normalizedPath])) { continue 2;"	type_info: forExclusion:unknown hash:unknown prefix:unknown normalizedPath:unknown dirPath:unknown path:unknown finder:unknown regex:unknown prefixLen:unknown  global_variable: forExclusion: unknown hash: unknown prefix: unknown function_name: __construct getPrefix __toString isFresh __sleep __wakeup getIterator computeHash expandGlob	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	symfony_symfony_777c3c25b21b6a5c4ba0dd0c5ddf5b0b87b730be_164_0	"buggy: if ($submitted && 200 === $response->getStatusCode()) { context: $form->handleRequest($request); $submitted = $form->isSubmitted(); $data = $form->getData(); if ($isValid = $submitted && $form->isValid()) { $response = $onSuccess($form, $data, $request); } else { $response = $render($form, $data, $request); if ($submitted && 200 === $response->getStatusCode()) { if ($submitted && 200 === $response->getStatusCode()) { $response->setStatusCode(Response::HTTP_UNPROCESSABLE_ENTITY); } } if (!$response instanceof Response) { throw new \TypeError(sprintf('The ""%s"" callable passed to ""%s::handleForm()"" must return a Response, ""%s"" returned.', $isValid ? '$onSuccess' : '$render', get_debug_type($this), get_debug_type($response))); } return $response;"	type_info: response:unknown submitted:unknown data:unknown isValid:unknown  global_variable:  function_name: setContainer getParameter getSubscribedServices has get generateUrl forward redirect redirectToRoute json file addFlash isGranted denyAccessUnlessGranted renderView render stream handleForm createNotFoundException createAccessDeniedException createForm createFormBuilder getDoctrine getUser isCsrfTokenValid dispatchMessage addLink	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	symfony_symfony_9bf4a24a6e3321c067c7412348b4bc62fbfc235f_165_0	"buggy: trigger_deprecation('symfony/routing', '5.3', 'Passing an array as first argument to ""%s"" is deprecated. Use named arguments instead.', __METHOD__); context: string $env = null ) { if (\is_string($data)) { $data = ['path' => $data]; } elseif (!\is_array($data)) { throw new \TypeError(sprintf('""%s"": Argument $data is expected to be a string or array, got ""%s"".', __METHOD__, get_debug_type($data))); } elseif ([] !== $data) { trigger_deprecation('symfony/routing', '5.3', 'Passing an array as first argument to ""%s"" is deprecated. Use named arguments instead.', __METHOD__); trigger_deprecation('symfony/routing', '5.3', 'Passing an array as first argument to ""%s"" is deprecated. Use named arguments instead.', __METHOD__); } if (null !== $path && !\is_string($path) && !\is_array($path)) { throw new \TypeError(sprintf('""%s"": Argument $path is expected to be a string, array or null, got ""%s"".', __METHOD__, get_debug_type($path))); } $data['path'] = $data['path'] ?? $path;"	type_info: data:array  global_variable:  function_name: __construct setPath getPath setLocalizedPaths getLocalizedPaths setHost getHost setName getName setRequirements getRequirements setOptions getOptions setDefaults getDefaults setSchemes getSchemes setMethods getMethods setCondition getCondition setPriority getPriority setEnv getEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	symfony_symfony_f09da16f31f8bc75b80e04c6dae8e695c8e1e3c8_166_0	buggy:  context: <?php namespace Symfony\Component\ExpressionLanguage\Node; use Symfony\Component\ExpressionLanguage\Compiler; class BinaryNode extends Node { private const OPERATORS = [ '~' => '.', 'and' => '&&',	type_info:  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	symfony_symfony_f09da16f31f8bc75b80e04c6dae8e695c8e1e3c8_166_0	buggy:  context: public function compile(Compiler $compiler) { $operator = $this->attributes['operator']; if ('matches' == $operator) { $compiler ->raw('preg_match(') ->compile($this->nodes['right']) ->raw(', ') ->compile($this->nodes['left']) ->raw(')') ; return; }	type_info: operator:unknown  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	symfony_symfony_f09da16f31f8bc75b80e04c6dae8e695c8e1e3c8_166_0	buggy: ->raw('preg_match(') context: public function compile(Compiler $compiler) { $operator = $this->attributes['operator']; if ('matches' == $operator) { $compiler ->raw('preg_match(') ->raw('preg_match(') ->compile($this->nodes['right']) ->raw(', ') ->compile($this->nodes['left']) ->raw(')') ; return; } if (isset(self::FUNCTIONS[$operator])) {	type_info: operator:unknown  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	symfony_symfony_f09da16f31f8bc75b80e04c6dae8e695c8e1e3c8_166_0	buggy: return preg_match($right, $left); context: } return $left / $right; case '%': if (0 == $right) { throw new \DivisionByZeroError('Modulo by zero.'); } return $left % $right; case 'matches': return preg_match($right, $left); return preg_match($right, $left); } } public function toArray() { return ['(', $this->nodes['left'], ' '.$this->attributes['operator'].' ', $this->nodes['right'], ')']; } }	type_info: left:unknown right:unknown  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	symfony_symfony_f09da16f31f8bc75b80e04c6dae8e695c8e1e3c8_166_0	buggy:  context: public function toArray() { return ['(', $this->nodes['left'], ' '.$this->attributes['operator'].' ', $this->nodes['right'], ')']; } }	type_info:  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	symfony_symfony_b5f61c31e5e4802cafdd41b5d4702a7e782d46ab_167_0	buggy: * @param string[] $methods * @param string[] $schemes context: private $requirements = []; private $options = []; private $defaults = []; private $host; private $methods = []; private $schemes = []; private $condition; private $priority; private $env; * @param string[] $methods * @param string[] $schemes public function __construct( $data = [], $path = null, string $name = null, array $requirements = [], array $options = [], array $defaults = [], string $host = null, array $methods = [], array $schemes = [],	type_info: requirements:array options:array defaults:array methods:array schemes:array data:array  global_variable:  function_name: __construct setPath getPath setLocalizedPaths getLocalizedPaths setHost getHost setName getName setRequirements getRequirements setOptions getOptions setDefaults getDefaults setSchemes getSchemes setMethods getMethods setCondition getCondition setPriority getPriority setEnv getEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	symfony_symfony_b5f61c31e5e4802cafdd41b5d4702a7e782d46ab_167_0	buggy: array $methods = [], array $schemes = [], context: public function __construct( $data = [], $path = null, string $name = null, array $requirements = [], array $options = [], array $defaults = [], string $host = null, array $methods = [], array $schemes = [], array $methods = [],	type_info: requirements:array options:array defaults:array methods:array schemes:array data:array  global_variable:  function_name: __construct setPath getPath setLocalizedPaths getLocalizedPaths setHost getHost setName getName setRequirements getRequirements setOptions getOptions setDefaults getDefaults setSchemes getSchemes setMethods getMethods setCondition getCondition setPriority getPriority setEnv getEnv	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	symfony_symfony_8a9b841985e2535b842b8f23a666b855f1de6da2_168_0	"buggy: $c = 'stdClass'; context: $arrayValue = (array) $value; } $proto = (array) $proto; foreach ($arrayValue as $name => $v) { $i = 0; $n = (string) $name; if ('' === $n || ""\0"" !== $n[0]) { $c = 'stdClass'; $c = 'stdClass'; } elseif ('*' === $n[1]) { $n = substr($n, 3); $c = $reflector->getProperty($n)->class; if ('Error' === $c) { $c = 'TypeError'; } elseif ('Exception' === $c) { $c = 'ErrorException'; } } else {"	type_info: value:unknown reflector:string proto:unknown arrayValue:unknown name:unknown n:unknown c:string i:unknown  global_variable:  function_name: prepare export exportRegistry exportHydrator getArrayObjectProperties	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	symfony_symfony_f09f96082ea72155bc97f876141d67f12b1600a7_169_0	buggy:  context: self::PRIORITY_NORMAL => 'Normal', self::PRIORITY_LOW => 'Low', self::PRIORITY_LOWEST => 'Lowest', ]; private $text; private $textCharset; private $html; private $htmlCharset; private $attachments = []; public function subject(string $subject) { return $this->setHeaderBody('Text', 'Subject', $subject); } public function getSubject(): ?string { return $this->getHeaders()->getHeaderBody('Subject'); }	type_info: attachments:array html:unknown  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	symfony_symfony_f09f96082ea72155bc97f876141d67f12b1600a7_169_0	"buggy:  context: public function text($body, string $charset = 'utf-8') { if (null !== $body && !\is_string($body) && !\is_resource($body)) { throw new \TypeError(sprintf('The body must be a string, a resource or null (got ""%s"").', get_debug_type($body))); } $this->text = $body; $this->textCharset = $charset; return $this; }"	type_info: charset:unknown body:unknown html:unknown  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	symfony_symfony_f09f96082ea72155bc97f876141d67f12b1600a7_169_0	"buggy:  context: public function html($body, string $charset = 'utf-8') { if (null !== $body && !\is_string($body) && !\is_resource($body)) { throw new \TypeError(sprintf('The body must be a string, a resource or null (got ""%s"").', get_debug_type($body))); } $this->html = $body; $this->htmlCharset = $charset; return $this; }"	type_info: charset:unknown body:unknown html:unknown  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	symfony_symfony_f09f96082ea72155bc97f876141d67f12b1600a7_169_0	"buggy:  context: public function attach($body, string $name = null, string $contentType = null) { if (!\is_string($body) && !\is_resource($body)) { throw new \TypeError(sprintf('The body must be a string or a resource (got ""%s"").', get_debug_type($body))); } $this->attachments[] = ['body' => $body, 'name' => $name, 'content-type' => $contentType, 'inline' => false]; return $this; }"	type_info: name:unknown body:unknown html:unknown  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	symfony_symfony_f09f96082ea72155bc97f876141d67f12b1600a7_169_0	buggy:  context: public function attachFromPath(string $path, string $name = null, string $contentType = null) { $this->attachments[] = ['path' => $path, 'name' => $name, 'content-type' => $contentType, 'inline' => false]; return $this; }	type_info: name:unknown html:unknown  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	symfony_symfony_f09f96082ea72155bc97f876141d67f12b1600a7_169_0	"buggy:  context: public function embed($body, string $name = null, string $contentType = null) { if (!\is_string($body) && !\is_resource($body)) { throw new \TypeError(sprintf('The body must be a string or a resource (got ""%s"").', get_debug_type($body))); } $this->attachments[] = ['body' => $body, 'name' => $name, 'content-type' => $contentType, 'inline' => true]; return $this; }"	type_info: name:unknown body:unknown html:unknown  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	symfony_symfony_f09f96082ea72155bc97f876141d67f12b1600a7_169_0	buggy:  context: public function embedFromPath(string $path, string $name = null, string $contentType = null) { $this->attachments[] = ['path' => $path, 'name' => $name, 'content-type' => $contentType, 'inline' => true]; return $this; }	type_info: name:unknown html:unknown  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	symfony_symfony_f09f96082ea72155bc97f876141d67f12b1600a7_169_0	buggy:  context: public function attachPart(DataPart $part) { $this->attachments[] = ['part' => $part]; return $this; }	type_info: part:unknown html:unknown  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	symfony_symfony_f09f96082ea72155bc97f876141d67f12b1600a7_169_0	buggy:  context: private function generateBody(): AbstractPart { $this->ensureValidity(); [$htmlPart, $attachmentParts, $inlineParts] = $this->prepareParts(); $part = null === $this->text ? null : new TextPart($this->text, $this->textCharset); if (null !== $htmlPart) { if (null !== $part) { $part = new AlternativePart($part, $htmlPart); } else { $part = $htmlPart;	type_info: part:unknown htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	symfony_symfony_f09f96082ea72155bc97f876141d67f12b1600a7_169_0	buggy:  context: } if ($attachmentParts) { if ($part) { $part = new MixedPart($part, ...$attachmentParts); } else { $part = new MixedPart(...$attachmentParts); } } return $part; } private function prepareParts(): ?array { $names = []; $htmlPart = null; $html = $this->html; if (null !== $html) { if (\is_resource($html)) {	type_info: part:unknown names:array htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	symfony_symfony_66491238e3a143f00291927dd64d03a5331ef30c_170_0	buggy: if (!preg_match('{'.$pattern.'}', $request->attributes->get($key))) { context: { if ($this->schemes && !\in_array($request->getScheme(), $this->schemes, true)) { return false; } if ($this->methods && !\in_array($request->getMethod(), $this->methods, true)) { return false; } foreach ($this->attributes as $key => $pattern) { if (!preg_match('{'.$pattern.'}', $request->attributes->get($key))) { if (!preg_match('{'.$pattern.'}', $request->attributes->get($key))) { return false; } } if (null !== $this->path && !preg_match('{'.$this->path.'}', rawurldecode($request->getPathInfo()))) { return false; } if (null !== $this->host && !preg_match('{'.$this->host.'}i', $request->getHost())) {	type_info: path:unknown key:unknown  global_variable: path: unknown function_name: __construct matchScheme matchHost matchPort matchPath matchIp matchIps matchMethod matchAttribute matches	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	symfony_symfony_ea215e1f6d85d5a276c84c72a6dc3ead41c0793c_171_0	buggy: if (str_starts_with($uri, '//')) { context: if (!$this->history->isEmpty()) { $currentUri = $this->history->current()->getUri(); } else { $currentUri = sprintf('http%s://%s/', isset($this->server['HTTPS']) ? 's' : '', $this->server['HTTP_HOST'] ?? 'localhost' ); } if (str_starts_with($uri, '//')) { if (str_starts_with($uri, '//')) { return parse_url($currentUri, \PHP_URL_SCHEME).':'.$uri; } if (!$uri || '#' == $uri[0] || '?' == $uri[0]) { return preg_replace('/[#?].*?$/', '', $currentUri).$uri; } if ('/' !== $uri[0]) { $path = parse_url($currentUri, \PHP_URL_PATH);	type_info: uri:unknown redirect:unknown crawler:unknown request:unknown response:unknown currentUri:unknown path:unknown  global_variable: redirect: unknown crawler: unknown request: unknown response: unknown function_name: __construct followRedirects followMetaRefresh isFollowingRedirects setMaxRedirects getMaxRedirects insulate setServerParameters setServerParameter getServerParameter xmlHttpRequest getHistory getCookieJar getCrawler getInternalResponse getResponse getInternalRequest getRequest click clickLink submit submitForm request doRequestInProcess doRequest getScript filterRequest filterResponse createCrawlerFromContent back forward reload followRedirect getMetaRefreshUrl restart getAbsoluteUri requestFromRequest updateServerFromUri extractHost	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	symfony_symfony_b0840e9d332532656963ba57df4767dff228e688_172_0	"buggy: $configuration = $extension->getConfiguration([], $this->getContainerBuilder()); context: ]); return 0; } $extension = $this->findExtension($name); if ($extension instanceof ConfigurationInterface) { $configuration = $extension; } else { $configuration = $extension->getConfiguration([], $this->getContainerBuilder()); $configuration = $extension->getConfiguration([], $this->getContainerBuilder()); } $this->validateConfiguration($extension, $configuration); $format = $input->getOption('format'); if ('yaml' === $format && !class_exists(Yaml::class)) { $errorIo->error('Setting the ""format"" option to ""yaml"" requires the Symfony Yaml component. Try running ""composer install symfony/yaml"" or use ""--format=xml"" instead.');"	type_info: errorIo:unknown name:unknown extension:unknown configuration:unknown format:unknown  global_variable:  function_name: configure execute complete getAvailableBundles getAvailableFormatOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	symfony_symfony_9a130ae93e5b984276796f68d61e40738eed9aca_173_0	"buggy: self::preg_match('#^(?P<key>(?:![^\s]++\s++)?(?:'.Inline::REGEX_QUOTED_STRING.'|(?:!?!php/const:)?[^ \'""\[\{!].*?)) *\:( ++(?P<value>.+))?$#u', rtrim($this->currentLine), $values) context: } } if ($isRef) { $this->refs[$isRef] = end($data); array_pop($this->refsBeingParsed); } } elseif ( self::preg_match('#^(?P<key>(?:![^\s]++\s++)?(?:'.Inline::REGEX_QUOTED_STRING.'|(?:!?!php/const:)?[^ \'""\[\{!].*?)) *\:( ++(?P<value>.+))?$#u', rtrim($this->currentLine), $values) self::preg_match('#^(?P<key>(?:![^\s]++\s++)?(?:'.Inline::REGEX_QUOTED_STRING.'|(?:!?!php/const:)?[^ \'""\[\{!].*?)) *\:( ++(?P<value>.+))?$#u', rtrim($this->currentLine), $values) && (false === strpos($values['key'], ' #') || \in_array($values['key'][0], ['""', ""'""])) ) { if ($context && 'sequence' == $context) { throw new ParseException('You cannot define a mapping item when in a sequence.', $this->currentLineNb + 1, $this->currentLine, $this->filename); } $context = 'mapping';"	type_info: data:array context:string isRef:unknown  global_variable:  function_name: parseFile parse doParse parseBlock getRealCurrentLineNb getCurrentLineIndentation getNextEmbedBlock hasMoreLines moveToNextLine moveToPreviousLine parseValue parseBlockScalar isNextLineIndented isCurrentLineEmpty isCurrentLineBlank isCurrentLineComment isCurrentLineLastLineInDocument cleanup isNextLineUnIndentedCollection isStringUnIndentedCollectionItem preg_match trimTag getLineTag lexInlineQuotedString lexUnquotedString lexInlineMapping lexInlineSequence lexInlineStructure consumeWhitespaces	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	symfony_symfony_3326da0e6fdb30bc18fe13cfb95fda4e239d7250_174_0	"buggy: ->raw('(static function ($regexp, $str) { set_error_handler(function ($t, $m) use ($regexp, $str) { throw new \Symfony\Component\ExpressionLanguage\SyntaxError(sprintf(\'Regexp ""%s"" passed to ""matches"" is not valid\', $regexp).substr($m, 12)); }); try { return preg_match($regexp, $str); } finally { restore_error_handler(); } })(') context: if ('matches' == $operator) { if ($this->nodes['right'] instanceof ConstantNode) { $this->evaluateMatches($this->nodes['right']->evaluate([], []), ''); } $compiler ->raw('(static function ($regexp, $str) { set_error_handler(function ($t, $m) use ($regexp, $str) { throw new \Symfony\Component\ExpressionLanguage\SyntaxError(sprintf(\'Regexp ""%s"" passed to ""matches"" is not valid\', $regexp).substr($m, 12)); }); try { return preg_match($regexp, $str); } finally { restore_error_handler(); } })(') ->raw('(static function ($regexp, $str) { set_error_handler(function ($t, $m) use ($regexp, $str) { throw new \Symfony\Component\ExpressionLanguage\SyntaxError(sprintf(\'Regexp ""%s"" passed to ""matches"" is not valid\', $regexp).substr($m, 12)); }); try { return preg_match($regexp, $str); } finally { restore_error_handler(); } })(') ->compile($this->nodes['right']) ->raw(', ') ->compile($this->nodes['left']) ->raw(')') ;"	type_info: operator:unknown  global_variable:  function_name: __construct compile evaluate toArray evaluateMatches	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	symfony_symfony_3326da0e6fdb30bc18fe13cfb95fda4e239d7250_174_0	buggy: private function evaluateMatches(string $regexp, string $str): int context: public function toArray() { return ['(', $this->nodes['left'], ' '.$this->attributes['operator'].' ', $this->nodes['right'], ')']; } private function evaluateMatches(string $regexp, string $str): int private function evaluateMatches(string $regexp, string $str): int	type_info:  global_variable:  function_name: __construct compile evaluate toArray evaluateMatches	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	symfony_symfony_3326da0e6fdb30bc18fe13cfb95fda4e239d7250_174_0	"buggy: return preg_match($regexp, $str); context: private function evaluateMatches(string $regexp, string $str): int { set_error_handler(function ($t, $m) use ($regexp) { throw new SyntaxError(sprintf('Regexp ""%s"" passed to ""matches"" is not valid', $regexp).substr($m, 12)); }); try { return preg_match($regexp, $str); return preg_match($regexp, $str); } finally { restore_error_handler(); } } }"	type_info:  global_variable:  function_name: __construct compile evaluate toArray evaluateMatches	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	symfony_symfony_a39c25cfbf98adcb4e7677f1c7be24bad231e307_175_0	buggy:  context: namespace Symfony\Component\ExpressionLanguage\Node; use Symfony\Component\ExpressionLanguage\Compiler; class GetAttrNode extends Node { public const PROPERTY_CALL = 1; public const METHOD_CALL = 2; public const ARRAY_CALL = 3; public function __construct(Node $node, Node $attribute, ArrayNode $arguments, int $type) { parent::__construct( ['node' => $node, 'attribute' => $attribute, 'arguments' => $arguments], ['type' => $type] ); } public function compile(Compiler $compiler) {	type_info:  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	symfony_symfony_a39c25cfbf98adcb4e7677f1c7be24bad231e307_175_0	"buggy:  context: public function evaluate(array $functions, array $values) { switch ($this->attributes['type']) { case self::PROPERTY_CALL: $obj = $this->nodes['node']->evaluate($functions, $values); if (null === $obj && $this->nodes['attribute']->isNullSafe) { return null; } if (!\is_object($obj)) { throw new \RuntimeException(sprintf('Unable to get property ""%s"" of non-object ""%s"".', $this->nodes['attribute']->dump(), $this->nodes['node']->dump())); } $property = $this->nodes['attribute']->attributes['value']; return $obj->$property;"	type_info: obj:unknown property:unknown  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	symfony_symfony_a39c25cfbf98adcb4e7677f1c7be24bad231e307_175_0	"buggy:  context: public function evaluate(array $functions, array $values) { switch ($this->attributes['type']) { case self::PROPERTY_CALL: $obj = $this->nodes['node']->evaluate($functions, $values); if (null === $obj && $this->nodes['attribute']->isNullSafe) { return null; } if (!\is_object($obj)) { throw new \RuntimeException(sprintf('Unable to get property ""%s"" of non-object ""%s"".', $this->nodes['attribute']->dump(), $this->nodes['node']->dump())); } $property = $this->nodes['attribute']->attributes['value']; return $obj->$property;"	type_info: obj:unknown property:unknown  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	symfony_symfony_a39c25cfbf98adcb4e7677f1c7be24bad231e307_175_0	"buggy:  context: public function evaluate(array $functions, array $values) { switch ($this->attributes['type']) { case self::PROPERTY_CALL: $obj = $this->nodes['node']->evaluate($functions, $values); if (null === $obj && $this->nodes['attribute']->isNullSafe) { return null; } if (!\is_object($obj)) { throw new \RuntimeException(sprintf('Unable to get property ""%s"" of non-object ""%s"".', $this->nodes['attribute']->dump(), $this->nodes['node']->dump())); } $property = $this->nodes['attribute']->attributes['value']; return $obj->$property; case self::METHOD_CALL: $obj = $this->nodes['node']->evaluate($functions, $values);"	type_info: obj:unknown property:unknown  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	symfony_symfony_a39c25cfbf98adcb4e7677f1c7be24bad231e307_175_0	"buggy:  context: if (!\is_object($obj)) { throw new \RuntimeException(sprintf('Unable to get property ""%s"" of non-object ""%s"".', $this->nodes['attribute']->dump(), $this->nodes['node']->dump())); } $property = $this->nodes['attribute']->attributes['value']; return $obj->$property; case self::METHOD_CALL: $obj = $this->nodes['node']->evaluate($functions, $values); if (null === $obj && $this->nodes['attribute']->isNullSafe) { return null; } if (!\is_object($obj)) { throw new \RuntimeException(sprintf('Unable to call method ""%s"" of non-object ""%s"".', $this->nodes['attribute']->dump(), $this->nodes['node']->dump())); } if (!\is_callable($toCall = [$obj, $this->nodes['attribute']->attributes['value']])) { throw new \RuntimeException(sprintf('Unable to call method ""%s"" of object ""%s"".', $this->nodes['attribute']->attributes['value'], get_debug_type($obj))); }"	type_info: obj:unknown property:unknown toCall:unknown  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	symfony_symfony_a39c25cfbf98adcb4e7677f1c7be24bad231e307_175_0	"buggy:  context: throw new \RuntimeException(sprintf('Unable to get property ""%s"" of non-object ""%s"".', $this->nodes['attribute']->dump(), $this->nodes['node']->dump())); } $property = $this->nodes['attribute']->attributes['value']; return $obj->$property; case self::METHOD_CALL: $obj = $this->nodes['node']->evaluate($functions, $values); if (null === $obj && $this->nodes['attribute']->isNullSafe) { return null; } if (!\is_object($obj)) { throw new \RuntimeException(sprintf('Unable to call method ""%s"" of non-object ""%s"".', $this->nodes['attribute']->dump(), $this->nodes['node']->dump())); } if (!\is_callable($toCall = [$obj, $this->nodes['attribute']->attributes['value']])) { throw new \RuntimeException(sprintf('Unable to call method ""%s"" of object ""%s"".', $this->nodes['attribute']->attributes['value'], get_debug_type($obj))); } return $toCall(...array_values($this->nodes['arguments']->evaluate($functions, $values)));"	type_info: obj:unknown property:unknown toCall:unknown  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	symfony_symfony_a39c25cfbf98adcb4e7677f1c7be24bad231e307_175_0	"buggy:  context: $property = $this->nodes['attribute']->attributes['value']; return $obj->$property; case self::METHOD_CALL: $obj = $this->nodes['node']->evaluate($functions, $values); if (null === $obj && $this->nodes['attribute']->isNullSafe) { return null; } if (!\is_object($obj)) { throw new \RuntimeException(sprintf('Unable to call method ""%s"" of non-object ""%s"".', $this->nodes['attribute']->dump(), $this->nodes['node']->dump())); } if (!\is_callable($toCall = [$obj, $this->nodes['attribute']->attributes['value']])) { throw new \RuntimeException(sprintf('Unable to call method ""%s"" of object ""%s"".', $this->nodes['attribute']->attributes['value'], get_debug_type($obj))); } return $toCall(...array_values($this->nodes['arguments']->evaluate($functions, $values))); case self::ARRAY_CALL:"	type_info: obj:unknown property:unknown toCall:unknown  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	symfony_symfony_a39c25cfbf98adcb4e7677f1c7be24bad231e307_175_0	"buggy:  context: throw new \RuntimeException(sprintf('Unable to call method ""%s"" of non-object ""%s"".', $this->nodes['attribute']->dump(), $this->nodes['node']->dump())); } if (!\is_callable($toCall = [$obj, $this->nodes['attribute']->attributes['value']])) { throw new \RuntimeException(sprintf('Unable to call method ""%s"" of object ""%s"".', $this->nodes['attribute']->attributes['value'], get_debug_type($obj))); } return $toCall(...array_values($this->nodes['arguments']->evaluate($functions, $values))); case self::ARRAY_CALL: $array = $this->nodes['node']->evaluate($functions, $values); if (!\is_array($array) && !$array instanceof \ArrayAccess) { throw new \RuntimeException(sprintf('Unable to get an item of non-array ""%s"".', $this->nodes['node']->dump())); } return $array[$this->nodes['attribute']->evaluate($functions, $values)]; } } public function toArray() {"	type_info: obj:unknown toCall:unknown array:unknown  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	symfony_symfony_a39c25cfbf98adcb4e7677f1c7be24bad231e307_175_0	"buggy:  context: case self::ARRAY_CALL: $array = $this->nodes['node']->evaluate($functions, $values); if (!\is_array($array) && !$array instanceof \ArrayAccess) { throw new \RuntimeException(sprintf('Unable to get an item of non-array ""%s"".', $this->nodes['node']->dump())); } return $array[$this->nodes['attribute']->evaluate($functions, $values)]; } } public function toArray() { switch ($this->attributes['type']) { case self::PROPERTY_CALL: return [$this->nodes['node'], '.', $this->nodes['attribute']]; case self::METHOD_CALL: return [$this->nodes['node'], '.', $this->nodes['attribute'], '(', $this->nodes['arguments'], ')']; case self::ARRAY_CALL:"	type_info: array:unknown  global_variable:  function_name: __construct compile evaluate toArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	symfony_symfony_6dfe92e0918d6e9ce4a05276493ba783d815f616_176_0	"buggy: if (null !== $value && $this !== $value && !\is_scalar($value)) { context: public function get(string $key, mixed $default = null): string|int|float|bool|null { if (null !== $default && !\is_scalar($default) && !$default instanceof \Stringable) { throw new \InvalidArgumentException(sprintf('Expected a scalar value as a 2nd argument to ""%s()"", ""%s"" given.', __METHOD__, get_debug_type($default))); } $value = parent::get($key, $this); if (null !== $value && $this !== $value && !\is_scalar($value)) { if (null !== $value && $this !== $value && !\is_scalar($value)) { throw new BadRequestException(sprintf('Input value ""%s"" contains a non-scalar value.', $key)); } return $this === $value ? $default : $value; }"	type_info: default:unknown value:unknown this:unknown  global_variable:  function_name: get replace add set filter	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	symfony_symfony_d0284f9cc634020bfb90be7bcf13d95af3921f30_177_0	buggy:  context: public function denormalize($data, string $type, string $format = null, array $context = []) { if (!isset($context['cache_key'])) { $context['cache_key'] = $this->getCacheKey($format, $context); } $this->validateCallbackContext($context); $allowedAttributes = $this->getAllowedAttributes($type, $context, true); $normalizedData = $this->prepareForDenormalization($data); $extraAttributes = []; $reflectionClass = new \ReflectionClass($type); $object = $this->instantiateObject($normalizedData, $type, $context, $reflectionClass, $allowedAttributes, $format); $resolvedClass = $this->objectClassResolver ? ($this->objectClassResolver)($object) : \get_class($object); foreach ($normalizedData as $attribute => $value) { $attributeContext = $this->getAttributeDenormalizationContext($resolvedClass, $attribute, $context);	type_info: classDiscriminatorResolver:unknown format:unknown data:array attributeContext:unknown attribute:unknown type:unknown allowedAttributes:unknown normalizedData:unknown extraAttributes:array reflectionClass:unknown object:unknown resolvedClass:unknown value:unknown context:unknown  global_variable: classDiscriminatorResolver: unknown function_name: __construct supportsNormalization normalize getAttributeNormalizationContext getAttributeDenormalizationContext getAttributeMetadata instantiateObject getAttributes extractAttributes getAttributeValue supportsDenormalization denormalize setAttributeValue validateAndDenormalize denormalizeParameter getTypes updateData isMaxDepthReached createChildContext getCacheKey isUninitializedValueError	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	symfony_symfony_d0284f9cc634020bfb90be7bcf13d95af3921f30_177_0	buggy:  context: } } if (null !== $collectionValueType && Type::BUILTIN_TYPE_OBJECT === $collectionValueType->getBuiltinType()) { $builtinType = Type::BUILTIN_TYPE_OBJECT; $class = $collectionValueType->getClassName().'[]'; if (\count($collectionKeyType = $type->getCollectionKeyTypes()) > 0) { [$context['key_type']] = $collectionKeyType; } } elseif ($type->isCollection() && \count($collectionValueType = $type->getCollectionValueTypes()) > 0 && Type::BUILTIN_TYPE_ARRAY === $collectionValueType[0]->getBuiltinType()) { [$innerType] = $collectionValueType; $dimensions = '[]'; while (\count($innerType->getCollectionValueTypes()) > 0 && Type::BUILTIN_TYPE_ARRAY === $innerType->getBuiltinType()) { $dimensions .= '[]'; [$innerType] = $innerType->getCollectionValueTypes(); } if (null !== $innerType->getClassName()) {	type_info: classDiscriminatorResolver:unknown class:unknown type:unknown collectionValueType:unknown builtinType:array collectionKeyType:unknown dimensions:string context:unknown  global_variable: classDiscriminatorResolver: unknown function_name: __construct supportsNormalization normalize getAttributeNormalizationContext getAttributeDenormalizationContext getAttributeMetadata instantiateObject getAttributes extractAttributes getAttributeValue supportsDenormalization denormalize setAttributeValue validateAndDenormalize denormalizeParameter getTypes updateData isMaxDepthReached createChildContext getCacheKey isUninitializedValueError	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	symfony_symfony_fda9281bd6864e1ce1468233aa8338ba321cba6a_178_0	buggy:  context: $loaded = true; } } } foreach ($reflectionClass->getMethods() as $method) { if ($method->getDeclaringClass()->name !== $className) { continue; } $accessorOrMutator = preg_match('/^(get|is|has|set)(.+)$/i', $method->name, $matches); if ($accessorOrMutator) { $attributeName = lcfirst($matches[2]); if (isset($attributesMetadata[$attributeName])) { $attributeMetadata = $attributesMetadata[$attributeName]; } else { $attributesMetadata[$attributeName] = $attributeMetadata = new AttributeMetadata($attributeName); $classMetadata->addAttributeMetadata($attributeMetadata); }	type_info: reader:unknown reflectionClass:unknown className:unknown loaded:boolean attributesMetadata:unknown accessorOrMutator:unknown attributeName:unknown attributeMetadata:unknown  global_variable: reader: unknown function_name: __construct loadClassMetadata loadAnnotations setAttributeContextsForGroups isKnownAttribute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	symfony_symfony_e92e26183d9de797b76fab95be2b7639d2e90201_179_0	"buggy: if (!($route = $routes->get($name)) && $matchingRoutes = $this->findRouteNameContaining($name, $routes)) { context: protected function execute(InputInterface $input, OutputInterface $output): int { $io = new SymfonyStyle($input, $output); $name = $input->getArgument('name'); $helper = new DescriptorHelper($this->fileLinkFormatter); $routes = $this->router->getRouteCollection(); if ($name) { if (!($route = $routes->get($name)) && $matchingRoutes = $this->findRouteNameContaining($name, $routes)) { if (!($route = $routes->get($name)) && $matchingRoutes = $this->findRouteNameContaining($name, $routes)) { $default = 1 === \count($matchingRoutes) ? $matchingRoutes[0] : null; $name = $io->choice('Select one of the matching routes', $matchingRoutes, $default); $route = $routes->get($name); } if (!$route) { throw new InvalidArgumentException(sprintf('The route ""%s"" does not exist.', $name)); } $helper->describe($io, $route, ["	type_info: fileLinkFormatter:unknown io:unknown name:unknown helper:unknown routes:unknown route:unknown  global_variable: fileLinkFormatter: unknown function_name: __construct configure execute findRouteNameContaining	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	symfony_symfony_e92e26183d9de797b76fab95be2b7639d2e90201_179_0	buggy:  context: { $foundRoutesNames = []; foreach ($routes as $routeName => $route) { if (false !== stripos($routeName, $name)) { $foundRoutesNames[] = $routeName; } } return $foundRoutesNames; } }	type_info: fileLinkFormatter:unknown name:unknown routes:unknown route:unknown foundRoutesNames:array routeName:unknown  global_variable: fileLinkFormatter: unknown function_name: __construct configure execute findRouteNameContaining	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	symfony_symfony_aeab24a463bb611cf645e06547cb0de9221f25bf_180_0	"buggy: if (isset($attachment['part'])) { continue; } context: $html = stream_get_contents($html); } $htmlPart = new TextPart($html, $this->htmlCharset, 'html'); preg_match_all('(<img\s+[^>]*src\s*=\s*(?:([\'""])cid:([^""]+)\\1|cid:([^>\s]+)))i', $html, $names); $names = array_filter(array_unique(array_merge($names[2], $names[3]))); } $attachmentParts = $inlineParts = []; foreach ($this->attachments as $attachment) { foreach ($names as $name) { if (isset($attachment['part'])) { continue; } if (isset($attachment['part'])) { continue; } if ($name !== $attachment['name']) { continue; } if (isset($inlineParts[$name])) { continue 2; } $attachment['inline'] = true;"	type_info: name:unknown names:array htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	symfony_symfony_aeab24a463bb611cf645e06547cb0de9221f25bf_180_0	"buggy:  context: $html = stream_get_contents($html); } $htmlPart = new TextPart($html, $this->htmlCharset, 'html'); preg_match_all('(<img\s+[^>]*src\s*=\s*(?:([\'""])cid:([^""]+)\\1|cid:([^>\s]+)))i', $html, $names); $names = array_filter(array_unique(array_merge($names[2], $names[3]))); } $attachmentParts = $inlineParts = []; foreach ($this->attachments as $attachment) { foreach ($names as $name) { if (isset($attachment['part'])) { continue; } if ($name !== $attachment['name']) { continue; } if (isset($inlineParts[$name])) { continue 2; } $attachment['inline'] = true;"	type_info: name:unknown names:array htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	symfony_symfony_aeab24a463bb611cf645e06547cb0de9221f25bf_180_0	"buggy:  context: $htmlPart = new TextPart($html, $this->htmlCharset, 'html'); preg_match_all('(<img\s+[^>]*src\s*=\s*(?:([\'""])cid:([^""]+)\\1|cid:([^>\s]+)))i', $html, $names); $names = array_filter(array_unique(array_merge($names[2], $names[3]))); } $attachmentParts = $inlineParts = []; foreach ($this->attachments as $attachment) { foreach ($names as $name) { if (isset($attachment['part'])) { continue; } if ($name !== $attachment['name']) { continue; } if (isset($inlineParts[$name])) { continue 2; } $attachment['inline'] = true; $inlineParts[$name] = $part = $this->createDataPart($attachment); $html = str_replace('cid:'.$name, 'cid:'.$part->getContentId(), $html);"	type_info: name:unknown part:unknown names:array htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	symfony_symfony_aeab24a463bb611cf645e06547cb0de9221f25bf_180_0	buggy: $attachment['inline'] = true; $inlineParts[$name] = $part = $this->createDataPart($attachment); context: foreach ($names as $name) { if (isset($attachment['part'])) { continue; } if ($name !== $attachment['name']) { continue; } if (isset($inlineParts[$name])) { continue 2; } $attachment['inline'] = true; $inlineParts[$name] = $part = $this->createDataPart($attachment); $attachment['inline'] = true; $inlineParts[$name] = $part = $this->createDataPart($attachment); $html = str_replace('cid:'.$name, 'cid:'.$part->getContentId(), $html); $part->setName($part->getContentId()); continue 2; } $attachmentParts[] = $this->createDataPart($attachment); } if (null !== $htmlPart) { $htmlPart = new TextPart($html, $this->htmlCharset, 'html');	type_info: name:unknown part:unknown names:array htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	symfony_symfony_aeab24a463bb611cf645e06547cb0de9221f25bf_180_0	buggy: continue 2; context: if ($name !== $attachment['name']) { continue; } if (isset($inlineParts[$name])) { continue 2; } $attachment['inline'] = true; $inlineParts[$name] = $part = $this->createDataPart($attachment); $html = str_replace('cid:'.$name, 'cid:'.$part->getContentId(), $html); $part->setName($part->getContentId()); continue 2; continue 2; } $attachmentParts[] = $this->createDataPart($attachment); } if (null !== $htmlPart) { $htmlPart = new TextPart($html, $this->htmlCharset, 'html'); } return [$htmlPart, $attachmentParts, array_values($inlineParts)]; }	type_info: name:unknown part:unknown htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	symfony_symfony_aeab24a463bb611cf645e06547cb0de9221f25bf_180_0	buggy: $attachmentParts[] = $this->createDataPart($attachment); context: } if (isset($inlineParts[$name])) { continue 2; } $attachment['inline'] = true; $inlineParts[$name] = $part = $this->createDataPart($attachment); $html = str_replace('cid:'.$name, 'cid:'.$part->getContentId(), $html); $part->setName($part->getContentId()); continue 2; } $attachmentParts[] = $this->createDataPart($attachment); $attachmentParts[] = $this->createDataPart($attachment); } if (null !== $htmlPart) { $htmlPart = new TextPart($html, $this->htmlCharset, 'html'); } return [$htmlPart, $attachmentParts, array_values($inlineParts)]; } private function createDataPart(array $attachment): DataPart	type_info: name:unknown part:unknown htmlPart:unknown html:unknown attachmentParts:array  global_variable: html: unknown function_name: subject getSubject date getDate returnPath getReturnPath sender getSender addFrom from getFrom addReplyTo replyTo getReplyTo addTo to getTo addCc cc getCc addBcc bcc getBcc priority getPriority text getTextBody getTextCharset html getHtmlBody getHtmlCharset attach attachFromPath embed embedFromPath attachPart getAttachments getBody ensureValidity generateBody prepareParts createDataPart setHeaderBody addListAddressHeaderBody setListAddressHeaderBody __serialize __unserialize	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	symfony_symfony_3abebb16dee11aedfda81eac8069cb86782bda85_181_0	"buggy: $tableRows[] = array_merge([' ""'], $tagValues, ['']); context: if ($definition instanceof Definition) { if ($showTag) { foreach ($this->sortByPriority($definition->getTag($showTag)) as $key => $tag) { $tagValues = []; foreach ($tagsNames as $tagName) { $tagValues[] = $tag[$tagName] ?? ''; } if (0 === $key) { $tableRows[] = array_merge([$serviceId], $tagValues, [$definition->getClass()]); } else { $tableRows[] = array_merge([' ""'], $tagValues, ['']); $tableRows[] = array_merge([' ""'], $tagValues, ['']); } } } else { $tableRows[] = [$styledServiceId, $definition->getClass()]; } } elseif ($definition instanceof Alias) { $alias = $definition; $tableRows[] = array_merge([$styledServiceId, sprintf('alias for ""%s""', $alias)], $tagsCount ? array_fill(0, $tagsCount, '') : []); } else {"	type_info: fileLinkFormatter:unknown tableRows:array tag:unknown showTag:unknown key:array tagsCount:unknown tagsNames:unknown definition:unknown styledServiceId:unknown alias:unknown tagName:unknown  global_variable: fileLinkFormatter: unknown function_name: __construct describeRouteCollection describeRoute describeContainerParameters describeContainerTags describeContainerService describeContainerServices describeContainerDefinition describeContainerDeprecations describeContainerAlias describeContainerParameter describeContainerEnvVars describeEventDispatcherListeners describeCallable renderEventListenerTable formatRouterConfig formatControllerLink formatCallable writeText	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	symfony_symfony_141320de529ddf2dff761b0f36f3d7939713cac2_182_0	"buggy: $marking = $subject->{$method}(); context: public function getMarking($subject): Marking { $method = 'get'.ucfirst($this->property); if (!method_exists($subject, $method)) { throw new LogicException(sprintf('The method ""%s::%s()"" does not exist.', \get_class($subject), $method)); } $marking = $subject->{$method}(); $marking = $subject->{$method}(); if (null === $marking) { return new Marking(); } if ($this->singleState) { $marking = [(string) $marking => 1]; } return new Marking($marking);"	type_info: method:unknown marking:array  global_variable:  function_name: __construct getMarking setMarking	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	symfony_symfony_07136a98679a6d85c079e1747003bc7f6effb2de_183_0	buggy: $this->baseUrl = $baseUrl; context: public function setBaseUrl(string $baseUrl) { $this->baseUrl = $baseUrl; $this->baseUrl = $baseUrl; return $this; }	type_info: baseUrl:unknown host:unknown scheme:unknown httpPort:unknown httpsPort:unknown  global_variable: baseUrl: unknown host: unknown scheme: unknown httpPort: unknown httpsPort: unknown function_name: __construct fromUri fromRequest getBaseUrl setBaseUrl getPathInfo setPathInfo getMethod setMethod getHost setHost getScheme setScheme getHttpPort setHttpPort getHttpsPort setHttpsPort getQueryString setQueryString getParameters setParameters getParameter hasParameter setParameter isSecure	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	symfony_symfony_2bfe6f25a8ce5bc21a5d5c91f4d79dd0389838c3_184_0	"buggy: $session = $this->getContainer()->get('session'); context: if (!interface_exists(UserInterface::class)) { throw new \LogicException(sprintf('""%s"" requires symfony/security-core to be installed.', __METHOD__)); } if (!$user instanceof UserInterface) { throw new \LogicException(sprintf('The first argument of ""%s"" must be instance of ""%s"", ""%s"" provided.', __METHOD__, UserInterface::class, \is_object($user) ? \get_class($user) : \gettype($user))); } $token = new TestBrowserToken($user->getRoles(), $user, $firewallContext); $token->setAuthenticated(true); $session = $this->getContainer()->get('session'); $session = $this->getContainer()->get('session'); $session->set('_security_'.$firewallContext, serialize($token)); $session->save(); $cookie = new Cookie($session->getName(), $session->getId()); $this->getCookieJar()->set($cookie); return $this; }"	type_info: firewallContext:unknown token:unknown session:unknown cookie:unknown  global_variable:  function_name: __construct getContainer getKernel getProfile enableProfiler disableReboot enableReboot loginUser doRequest doRequestInProcess getScript	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	symfony_symfony_24c65bf8a84732c7a98a1df2e45a2044ef6fe26e_185_0	buggy: if ($values && $filtered = array_filter($list->getChoicesForValues($values), $this->filter)) { $choices[$group] = $filtered; context: protected function loadChoices(): iterable { $list = $this->decoratedLoader->loadChoiceList(); if (array_values($list->getValues()) === array_values($structuredValues = $list->getStructuredValues())) { return array_filter(array_combine($list->getOriginalKeys(), $list->getChoices()), $this->filter); } foreach ($structuredValues as $group => $values) { if ($values && $filtered = array_filter($list->getChoicesForValues($values), $this->filter)) { $choices[$group] = $filtered; if ($values && $filtered = array_filter($list->getChoicesForValues($values), $this->filter)) { $choices[$group] = $filtered; } } return $choices ?? []; }	type_info: list:unknown structuredValues:unknown group:unknown  global_variable:  function_name: __construct loadChoices loadChoicesForValues loadValuesForChoices	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	symfony_symfony_3ae3e5a0a2741011cbf566781a3a374f0cd466c4_186_0	buggy: ->select('w.*') context: sprintf('FROM %s WHERE', $fromClause), sprintf('FROM %s WHERE', $this->driverConnection->getDatabasePlatform()->appendLockHint($fromClause, LockMode::PESSIMISTIC_WRITE)), $sql ); } if ($this->driverConnection->getDatabasePlatform() instanceof OraclePlatform) { $sql = str_replace('SELECT a.* FROM', 'SELECT a.id FROM', $sql); $wrappedQuery = $this->driverConnection->createQueryBuilder() ->select('w.*') ->select('w.*') ->from($this->configuration['table_name'], 'w') ->where('w.id IN('.$sql.')'); $sql = $wrappedQuery->getSQL(); } $stmt = $this->executeQuery( $sql.' '.$this->driverConnection->getDatabasePlatform()->getWriteLockSQL(), $query->getParameters(),	type_info: schemaSynchronizer:unknown useDeprecatedConstants:unknown query:array sql:unknown wrappedQuery:unknown stmt:unknown  global_variable: schemaSynchronizer: unknown useDeprecatedConstants: unknown function_name: __construct getConfiguration buildConfiguration send get ack reject setup getMessageCount findAll find createAvailableMessagesQueryBuilder createQueryBuilder executeQuery executeStatement getSchema decodeEnvelopeHeaders updateSchema createSchemaManager	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	symfony_symfony_a05c42ee8ea038af83a4e295c859ba8a8c31144d_187_0	buggy:  context: $append = true; $removeEmptyTags = $context[self::REMOVE_EMPTY_TAGS] ?? $this->defaultContext[self::REMOVE_EMPTY_TAGS] ?? false; $encoderIgnoredNodeTypes = $context[self::ENCODER_IGNORED_NODE_TYPES] ?? $this->defaultContext[self::ENCODER_IGNORED_NODE_TYPES]; if (\is_array($data) || ($data instanceof \Traversable && (null === $this->serializer || !$this->serializer->supportsNormalization($data, $format)))) { foreach ($data as $key => $data) { if (str_starts_with($key, '@') && $this->isElementNameValid($attributeName = substr($key, 1))) { if (!\is_scalar($data)) { $data = $this->serializer->normalize($data, $format, $context); } $parentNode->setAttribute($attributeName, $data); } elseif ('#' === $key) { $append = $this->selectNodeType($parentNode, $data, $format, $context); } elseif ('#comment' === $key) { if (!\in_array(\XML_COMMENT_NODE, $encoderIgnoredNodeTypes, true)) { $append = $this->appendComment($parentNode, $data); } } elseif (\is_array($data) && false === is_numeric($key)) { if (ctype_digit(implode('', array_keys($data)))) { foreach ($data as $subData) {	type_info: context:array data:array key:unknown removeEmptyTags:unknown encoderIgnoredNodeTypes:unknown append:unknown  global_variable:  function_name: __construct encode decode supportsEncoding supportsDecoding setRootNodeName getRootNodeName appendXMLString appendText appendCData appendDocumentFragment appendComment isElementNameValid parseXml parseXmlAttributes parseXmlValue buildXml appendNode needsCdataWrapping selectNodeType createDomDocument	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	symfony_symfony_5e609da601422a422a1b736887b71606faee79ea_188_0	"buggy: $container = $this->getContainer(); context: throw new \LogicException(sprintf('""%s"" requires symfony/security-core to be installed.', __METHOD__)); } if (!$user instanceof UserInterface) { throw new \LogicException(sprintf('The first argument of ""%s"" must be instance of ""%s"", ""%s"" provided.', __METHOD__, UserInterface::class, \is_object($user) ? \get_class($user) : \gettype($user))); } $token = new TestBrowserToken($user->getRoles(), $user, $firewallContext); $token->setAuthenticated(true); $container = $this->getContainer(); $container = $this->getContainer(); $container->get('security.untracked_token_storage')->setToken($token); if (!$container->has('session')) { return $this; } $session = $container->get('session'); $session->set('_security_'.$firewallContext, serialize($token)); $session->save();"	type_info: firewallContext:unknown token:unknown container:unknown session:unknown  global_variable:  function_name: __construct getContainer getKernel getProfile enableProfiler disableReboot enableReboot loginUser doRequest doRequestInProcess getScript	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	nikic_PHP-Parser_54f19a0a66f3ddf68896e793d89326ce10c13d96_1_0	buggy:  context: <?php namespace PhpParser; use PhpParser\Node\Expr; use PhpParser\Node\Scalar; class ConstExprEvaluator	type_info: fallbackEvaluator:unknown  global_variable: fallbackEvaluator: unknown function_name: __construct evaluateSilently evaluateDirectly evaluate evaluateArray evaluateTernary evaluateBinaryOp evaluateConstFetch	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	nikic_PHP-Parser_54f19a0a66f3ddf68896e793d89326ce10c13d96_1_0	buggy:  context: private function evaluateArray(Expr\Array_ $expr) { $array = []; foreach ($expr->items as $item) { if (null !== $item->key) { $array[$this->evaluate($item->key)] = $this->evaluate($item->value); } else { $array[] = $this->evaluate($item->value); } } return $array; } private function evaluateTernary(Expr\Ternary $expr) { if (null === $expr->if) { return $this->evaluate($expr->cond) ?: $this->evaluate($expr->else);	type_info: fallbackEvaluator:unknown array:array  global_variable: fallbackEvaluator: unknown function_name: __construct evaluateSilently evaluateDirectly evaluate evaluateArray evaluateTernary evaluateBinaryOp evaluateConstFetch	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	nikic_PHP-Parser_ff24d1d61ad4634bf728c503f3838405b83e1433_2_0	buggy: if ($realLength < 0 || $realLength > $numParts) { context: $realOffset = $offset < 0 ? $offset + $numParts : $offset; if ($realOffset < 0 || $realOffset > $numParts) { throw new \OutOfBoundsException(sprintf('Offset %d is out of bounds', $offset)); } if (null === $length) { $realLength = $numParts - $realOffset; } else { $realLength = $length < 0 ? $length + $numParts - $realOffset : $length; if ($realLength < 0 || $realLength > $numParts) { if ($realLength < 0 || $realLength > $numParts) { throw new \OutOfBoundsException(sprintf('Length %d is out of bounds', $length)); } } if ($realLength === 0) { return null; } return new static(array_slice($this->parts, $realOffset, $realLength), $this->attributes);	type_info: length:unknown realOffset:unknown realLength:unknown  global_variable:  function_name: __construct getSubNodeNames getFirst getLast isUnqualified isQualified isFullyQualified isRelative toString toCodeString toLowerString isSpecialClassName __toString slice concat prepareName getType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	nikic_PHP-Parser_3182d12b55895a2e71ed6684f9bd5cd13527e94e_3_0	buggy: $this->attributes, $this->attributeGroups context: public function getNode(): PhpParser\Node { return new Stmt\EnumCase( $this->name, $this->value, $this->attributes, $this->attributeGroups $this->attributes, $this->attributeGroups ); }	type_info:  global_variable:  function_name: __construct setValue setDocComment addAttribute getNode	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	laravel_framework_ad2141fa6a872818461ba509e7b21316576a910e_1_0	buggy: protected $headers = Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_HOST | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO | Request::HEADER_X_FORWARDED_AWS_ELB; context: namespace Illuminate\Http\Middleware; use Closure; use Illuminate\Http\Request; class TrustProxies { protected $proxies; protected $headers = Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_HOST | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO | Request::HEADER_X_FORWARDED_AWS_ELB; protected $headers = Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_HOST | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO | Request::HEADER_X_FORWARDED_AWS_ELB; public function handle(Request $request, Closure $next) { $request::setTrustedProxies([], $this->getTrustedHeaderNames()); $this->setTrustedProxyIpAddresses($request); return $next($request); }	type_info: headers:unknown  global_variable:  function_name: handle setTrustedProxyIpAddresses setTrustedProxyIpAddressesToSpecificIps setTrustedProxyIpAddressesToTheCallingIp getTrustedHeaderNames proxies	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	laravel_framework_ad2141fa6a872818461ba509e7b21316576a910e_1_0	buggy:  context: return Request::HEADER_X_FORWARDED_HOST; case 'HEADER_X_FORWARDED_PORT': case Request::HEADER_X_FORWARDED_PORT: return Request::HEADER_X_FORWARDED_PORT; case 'HEADER_X_FORWARDED_PROTO': case Request::HEADER_X_FORWARDED_PROTO: return Request::HEADER_X_FORWARDED_PROTO; default: return Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_HOST | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO | Request::HEADER_X_FORWARDED_AWS_ELB; } return $this->headers; } protected function proxies() { return $this->proxies;	type_info:  global_variable:  function_name: handle setTrustedProxyIpAddresses setTrustedProxyIpAddressesToSpecificIps setTrustedProxyIpAddressesToTheCallingIp getTrustedHeaderNames proxies	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	laravel_framework_ad2141fa6a872818461ba509e7b21316576a910e_1_0	buggy: return Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_HOST | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO | Request::HEADER_X_FORWARDED_AWS_ELB; context: case 'HEADER_X_FORWARDED_PORT': case Request::HEADER_X_FORWARDED_PORT: return Request::HEADER_X_FORWARDED_PORT; case 'HEADER_X_FORWARDED_PROTO': case Request::HEADER_X_FORWARDED_PROTO: return Request::HEADER_X_FORWARDED_PROTO; default: return Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_HOST | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO | Request::HEADER_X_FORWARDED_AWS_ELB; return Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_HOST | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO | Request::HEADER_X_FORWARDED_AWS_ELB; } return $this->headers; } protected function proxies() { return $this->proxies; }	type_info:  global_variable:  function_name: handle setTrustedProxyIpAddresses setTrustedProxyIpAddressesToSpecificIps setTrustedProxyIpAddressesToTheCallingIp getTrustedHeaderNames proxies	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	laravel_framework_ee00c099af2a4bbf8cc5f9f0fc7f2ef714657322_2_0	buggy: $model = new static((array) $attributes); context: public function newInstance($attributes = [], $exists = false) { $model = new static((array) $attributes); $model = new static((array) $attributes); $model->exists = $exists; $model->setConnection( $this->getConnectionName() ); $model->setTable($this->getTable()); $model->mergeCasts($this->casts);	type_info: exists:boolean attributes:unknown lazyLoadingViolationCallback:unknown connection:unknown resolver:unknown  global_variable: lazyLoadingViolationCallback: unknown connection: unknown resolver: unknown function_name: __construct bootIfNotBooted booting boot bootTraits initializeTraits booted clearBootedModels withoutTouching withoutTouchingOn isIgnoringTouch preventLazyLoading handleLazyLoadingViolationUsing withoutBroadcasting fill forceFill qualifyColumn qualifyColumns newInstance newFromBuilder on onWriteConnection all with load loadMorph loadMissing loadAggregate loadCount loadMax loadMin loadSum loadAvg loadExists loadMorphAggregate loadMorphCount loadMorphMax loadMorphMin loadMorphSum loadMorphAvg increment decrement incrementOrDecrement update updateOrFail updateQuietly push saveQuietly save saveOrFail finishSave performUpdate setKeysForSelectQuery getKeyForSelectQuery setKeysForSaveQuery getKeyForSaveQuery performInsert insertAndSetId destroy delete deleteOrFail forceDelete performDeleteOnModel query newQuery newModelQuery newQueryWithoutRelationships registerGlobalScopes newQueryWithoutScopes newQueryWithoutScope newQueryForRestoration newEloquentBuilder newBaseQueryBuilder newCollection newPivot hasNamedScope callNamedScope toArray toJson jsonSerialize fresh refresh replicate is isNot getConnection getConnectionName setConnection resolveConnection getConnectionResolver setConnectionResolver unsetConnectionResolver getTable setTable getKeyName setKeyName getQualifiedKeyName getKeyType setKeyType getIncrementing setIncrementing getKey getQueueableId getQueueableRelations getQueueableConnection getRouteKey getRouteKeyName resolveRouteBinding resolveSoftDeletableRouteBinding resolveChildRouteBinding resolveSoftDeletableChildRouteBinding resolveChildRouteBindingQuery resolveRouteBindingQuery getForeignKey getPerPage setPerPage preventsLazyLoading broadcastChannelRoute broadcastChannel __get __set offsetExists offsetGet offsetSet offsetUnset __isset __unset __call __callStatic __toString escapeWhenCastingToString __sleep __wakeup	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	laravel_framework_ee00c099af2a4bbf8cc5f9f0fc7f2ef714657322_2_0	buggy:  context: $model->exists = $exists; $model->setConnection( $this->getConnectionName() ); $model->setTable($this->getTable()); $model->mergeCasts($this->casts); return $model; } public function newFromBuilder($attributes = [], $connection = null) { $model = $this->newInstance([], true); $model->setRawAttributes((array) $attributes, true); $model->setConnection($connection ?: $this->getConnectionName());	type_info: exists:boolean attributes:unknown lazyLoadingViolationCallback:unknown connection:unknown resolver:unknown  global_variable: lazyLoadingViolationCallback: unknown connection: unknown resolver: unknown function_name: __construct bootIfNotBooted booting boot bootTraits initializeTraits booted clearBootedModels withoutTouching withoutTouchingOn isIgnoringTouch preventLazyLoading handleLazyLoadingViolationUsing withoutBroadcasting fill forceFill qualifyColumn qualifyColumns newInstance newFromBuilder on onWriteConnection all with load loadMorph loadMissing loadAggregate loadCount loadMax loadMin loadSum loadAvg loadExists loadMorphAggregate loadMorphCount loadMorphMax loadMorphMin loadMorphSum loadMorphAvg increment decrement incrementOrDecrement update updateOrFail updateQuietly push saveQuietly save saveOrFail finishSave performUpdate setKeysForSelectQuery getKeyForSelectQuery setKeysForSaveQuery getKeyForSaveQuery performInsert insertAndSetId destroy delete deleteOrFail forceDelete performDeleteOnModel query newQuery newModelQuery newQueryWithoutRelationships registerGlobalScopes newQueryWithoutScopes newQueryWithoutScope newQueryForRestoration newEloquentBuilder newBaseQueryBuilder newCollection newPivot hasNamedScope callNamedScope toArray toJson jsonSerialize fresh refresh replicate is isNot getConnection getConnectionName setConnection resolveConnection getConnectionResolver setConnectionResolver unsetConnectionResolver getTable setTable getKeyName setKeyName getQualifiedKeyName getKeyType setKeyType getIncrementing setIncrementing getKey getQueueableId getQueueableRelations getQueueableConnection getRouteKey getRouteKeyName resolveRouteBinding resolveSoftDeletableRouteBinding resolveChildRouteBinding resolveSoftDeletableChildRouteBinding resolveChildRouteBindingQuery resolveRouteBindingQuery getForeignKey getPerPage setPerPage preventsLazyLoading broadcastChannelRoute broadcastChannel __get __set offsetExists offsetGet offsetSet offsetUnset __isset __unset __call __callStatic __toString escapeWhenCastingToString __sleep __wakeup	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	laravel_framework_6a7a5b4cc3be737441b5118ea64ea550a6bc9f4b_3_0	"buggy: $value .= $this->connection->getConfig()['unix_socket'] ?? false context: protected function connectionString() { $value = ' --user=""${:LARAVEL_LOAD_USER}"" --password=""${:LARAVEL_LOAD_PASSWORD}""'; $value .= $this->connection->getConfig()['unix_socket'] ?? false $value .= $this->connection->getConfig()['unix_socket'] ?? false ? ' --socket=""${:LARAVEL_LOAD_SOCKET}""' : ' --host=""${:LARAVEL_LOAD_HOST}"" --port=""${:LARAVEL_LOAD_PORT}"" --ssl-ca=""${:LARAVEL_LOAD_SSL_CA}""'; return $value; }"	type_info: value:string  global_variable:  function_name: dump removeAutoIncrementingState appendMigrationData load baseDumpCommand connectionString baseVariables executeDumpProcess	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	laravel_framework_6a7a5b4cc3be737441b5118ea64ea550a6bc9f4b_3_0	"buggy: : ' --host=""${:LARAVEL_LOAD_HOST}"" --port=""${:LARAVEL_LOAD_PORT}"" --ssl-ca=""${:LARAVEL_LOAD_SSL_CA}""'; context: protected function connectionString() { $value = ' --user=""${:LARAVEL_LOAD_USER}"" --password=""${:LARAVEL_LOAD_PASSWORD}""'; $value .= $this->connection->getConfig()['unix_socket'] ?? false ? ' --socket=""${:LARAVEL_LOAD_SOCKET}""' : ' --host=""${:LARAVEL_LOAD_HOST}"" --port=""${:LARAVEL_LOAD_PORT}"" --ssl-ca=""${:LARAVEL_LOAD_SSL_CA}""'; : ' --host=""${:LARAVEL_LOAD_HOST}"" --port=""${:LARAVEL_LOAD_PORT}"" --ssl-ca=""${:LARAVEL_LOAD_SSL_CA}""'; return $value; }"	type_info: value:string  global_variable:  function_name: dump removeAutoIncrementingState appendMigrationData load baseDumpCommand connectionString baseVariables executeDumpProcess	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	laravel_framework_aac0da02132d38cff8fe9ff6aee5f9b0ca689a18_4_0	buggy: $iterator = $this->getIterator(); if (! $iterator->valid() || $this->now() > $timeout) { context: public function takeUntilTimeout(DateTimeInterface $timeout) { $timeout = $timeout->getTimestamp(); return new static(function () use ($timeout) { $iterator = $this->getIterator(); if (! $iterator->valid() || $this->now() > $timeout) { $iterator = $this->getIterator(); if (! $iterator->valid() || $this->now() > $timeout) { return; } yield $iterator->key() => $iterator->current(); while ($iterator->valid() && $this->now() < $timeout) { $iterator->next(); yield $iterator->key() => $iterator->current(); }	type_info: source:unknown iterator:unknown timeout:unknown  global_variable: source: unknown function_name: __construct make range all eager remember avg median mode collapse contains doesntContain crossJoin countBy diff diffUsing diffAssoc diffAssocUsing diffKeys diffKeysUsing duplicates duplicatesStrict except filter first flatten flip get groupBy keyBy has hasAny implode intersect intersectByKeys isEmpty containsOneItem join keys last pluck map mapToDictionary mapWithKeys merge mergeRecursive combine union nth only concat random replace replaceRecursive reverse search shuffle sliding skip skipUntil skipWhile slice split sole firstOrFail chunk splitIn chunkWhile sort sortDesc sortBy sortByDesc sortKeys sortKeysDesc sortKeysUsing take takeUntil takeUntilTimeout takeWhile tapEach undot unique values zip pad getIterator count makeIterator explodePluckParameters passthru now	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	laravel_framework_aac0da02132d38cff8fe9ff6aee5f9b0ca689a18_4_0	buggy: yield $iterator->key() => $iterator->current(); while ($iterator->valid() && $this->now() < $timeout) { $iterator->next(); context: { $timeout = $timeout->getTimestamp(); return new static(function () use ($timeout) { $iterator = $this->getIterator(); if (! $iterator->valid() || $this->now() > $timeout) { return; } yield $iterator->key() => $iterator->current(); while ($iterator->valid() && $this->now() < $timeout) { $iterator->next(); yield $iterator->key() => $iterator->current(); while ($iterator->valid() && $this->now() < $timeout) { $iterator->next(); yield $iterator->key() => $iterator->current(); } }); }	type_info: source:unknown iterator:unknown timeout:unknown  global_variable: source: unknown function_name: __construct make range all eager remember avg median mode collapse contains doesntContain crossJoin countBy diff diffUsing diffAssoc diffAssocUsing diffKeys diffKeysUsing duplicates duplicatesStrict except filter first flatten flip get groupBy keyBy has hasAny implode intersect intersectByKeys isEmpty containsOneItem join keys last pluck map mapToDictionary mapWithKeys merge mergeRecursive combine union nth only concat random replace replaceRecursive reverse search shuffle sliding skip skipUntil skipWhile slice split sole firstOrFail chunk splitIn chunkWhile sort sortDesc sortBy sortByDesc sortKeys sortKeysDesc sortKeysUsing take takeUntil takeUntilTimeout takeWhile tapEach undot unique values zip pad getIterator count makeIterator explodePluckParameters passthru now	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	laravel_framework_aac0da02132d38cff8fe9ff6aee5f9b0ca689a18_4_0	buggy: yield $iterator->key() => $iterator->current(); context: if (! $iterator->valid() || $this->now() > $timeout) { return; } yield $iterator->key() => $iterator->current(); while ($iterator->valid() && $this->now() < $timeout) { $iterator->next(); yield $iterator->key() => $iterator->current(); yield $iterator->key() => $iterator->current(); } }); } public function takeWhile($value) { $callback = $this->useAsCallable($value) ? $value : $this->equality($value); return $this->takeUntil(function ($item, $key) use ($callback) {	type_info: source:unknown iterator:unknown callback:unknown key:unknown value:unknown timeout:unknown  global_variable: source: unknown function_name: __construct make range all eager remember avg median mode collapse contains doesntContain crossJoin countBy diff diffUsing diffAssoc diffAssocUsing diffKeys diffKeysUsing duplicates duplicatesStrict except filter first flatten flip get groupBy keyBy has hasAny implode intersect intersectByKeys isEmpty containsOneItem join keys last pluck map mapToDictionary mapWithKeys merge mergeRecursive combine union nth only concat random replace replaceRecursive reverse search shuffle sliding skip skipUntil skipWhile slice split sole firstOrFail chunk splitIn chunkWhile sort sortDesc sortBy sortByDesc sortKeys sortKeysDesc sortKeysUsing take takeUntil takeUntilTimeout takeWhile tapEach undot unique values zip pad getIterator count makeIterator explodePluckParameters passthru now	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	laravel_framework_9e7d31dcd4ba39376418d4cda425fb90809a7c2e_5_0	buggy: if (is_callable($value)) { context: public function implode($value, $glue = null) { if (is_callable($value)) { if (is_callable($value)) { return implode($glue ?? '', $this->map($value)->all()); } $first = $this->first(); if (is_array($first) || (is_object($first) && ! $first instanceof Stringable)) { return implode($glue ?? '', $this->pluck($value)->all()); } return implode($value ?? '', $this->items);	type_info: value:unknown glue:unknown first:unknown  global_variable:  function_name: __construct range all lazy avg median mode collapse contains doesntContain crossJoin diff diffUsing diffAssoc diffAssocUsing diffKeys diffKeysUsing duplicates duplicatesStrict duplicateComparator except filter first flatten flip forget get getOrPut groupBy keyBy has hasAny implode intersect intersectByKeys isEmpty containsOneItem join keys last pluck map mapToDictionary mapWithKeys merge mergeRecursive combine union nth only pop prepend push concat pull put random replace replaceRecursive reverse search shift shuffle sliding skip skipUntil skipWhile slice split splitIn sole firstOrFail chunk chunkWhile sort sortDesc sortBy sortByMany sortByDesc sortKeys sortKeysDesc sortKeysUsing splice take takeUntil takeWhile transform undot unique values zip pad getIterator count countBy add toBase offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	laravel_framework_d4da6620a24a5f941fc2df16f05955575bcdb781_6_0	buggy: return retry($this->tries ?? 1, function () use ($method, $url, $options) { context: } $options = $this->parseHttpOptions($options); [$this->pendingBody, $this->pendingFiles] = [null, []]; if ($this->async) { return $this->makePromise($method, $url, $options); } return retry($this->tries ?? 1, function () use ($method, $url, $options) { return retry($this->tries ?? 1, function () use ($method, $url, $options) { try { return tap(new Response($this->sendRequest($method, $url, $options)), function ($response) { $this->populateResponse($response); if ($this->tries > 1 && $this->retryThrow && ! $response->successful()) { $response->throw(); } $this->dispatchResponseReceivedEvent($response);	type_info: options:array factory:unknown method:unknown promise:unknown response:unknown  global_variable: factory: unknown promise: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies withoutRedirecting withoutVerifying sink timeout connectTimeout retry withOptions withMiddleware beforeSending dump dd get head post patch put delete pool send parseHttpOptions parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	laravel_framework_d4da6620a24a5f941fc2df16f05955575bcdb781_6_0	buggy: return tap(new Response($this->sendRequest($method, $url, $options)), function ($response) { context: return retry($this->tries ?? 1, function () use ($method, $url, $options) { try { return tap(new Response($this->sendRequest($method, $url, $options)), function ($response) { return tap(new Response($this->sendRequest($method, $url, $options)), function ($response) { $this->populateResponse($response); if ($this->tries > 1 && $this->retryThrow && ! $response->successful()) { $response->throw(); } $this->dispatchResponseReceivedEvent($response); }); } catch (ConnectException $e) { $this->dispatchConnectionFailedEvent();	type_info: options:array factory:unknown method:unknown promise:unknown response:unknown  global_variable: factory: unknown promise: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies withoutRedirecting withoutVerifying sink timeout connectTimeout retry withOptions withMiddleware beforeSending dump dd get head post patch put delete pool send parseHttpOptions parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	laravel_framework_d4da6620a24a5f941fc2df16f05955575bcdb781_6_0	buggy: if ($this->tries > 1 && $this->retryThrow && ! $response->successful()) { $response->throw(); context: return tap(new Response($this->sendRequest($method, $url, $options)), function ($response) { $this->populateResponse($response); if ($this->tries > 1 && $this->retryThrow && ! $response->successful()) { $response->throw(); if ($this->tries > 1 && $this->retryThrow && ! $response->successful()) { $response->throw(); } $this->dispatchResponseReceivedEvent($response); }); } catch (ConnectException $e) { $this->dispatchConnectionFailedEvent(); throw new ConnectionException($e->getMessage(), 0, $e); } }, $this->retryDelay ?? 100, $this->retryWhenCallback);	type_info: options:array factory:unknown method:unknown promise:unknown response:unknown  global_variable: factory: unknown promise: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies withoutRedirecting withoutVerifying sink timeout connectTimeout retry withOptions withMiddleware beforeSending dump dd get head post patch put delete pool send parseHttpOptions parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	laravel_framework_d4da6620a24a5f941fc2df16f05955575bcdb781_6_0	buggy: }, $this->retryDelay ?? 100, $this->retryWhenCallback); context: $response->throw(); } $this->dispatchResponseReceivedEvent($response); }); } catch (ConnectException $e) { $this->dispatchConnectionFailedEvent(); throw new ConnectionException($e->getMessage(), 0, $e); } }, $this->retryDelay ?? 100, $this->retryWhenCallback); }, $this->retryDelay ?? 100, $this->retryWhenCallback); } protected function parseHttpOptions(array $options) { if (isset($options[$this->bodyFormat])) { if ($this->bodyFormat === 'multipart') { $options[$this->bodyFormat] = $this->parseMultipartBodyFormat($options[$this->bodyFormat]); } elseif ($this->bodyFormat === 'body') { $options[$this->bodyFormat] = $this->pendingBody;	type_info: options:array factory:unknown promise:unknown response:unknown  global_variable: factory: unknown promise: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies withoutRedirecting withoutVerifying sink timeout connectTimeout retry withOptions withMiddleware beforeSending dump dd get head post patch put delete pool send parseHttpOptions parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	laravel_framework_88e361753fe777480dd025e582526149742fecf1_7_0	buggy: * @param \Illuminate\Support\Enumerable|object|array $jobs context: public function __construct(Container $container, Collection $jobs) { $this->container = $container; $this->jobs = $jobs; } * @param \Illuminate\Support\Enumerable|object|array $jobs public function add($jobs)	type_info:  global_variable:  function_name: __construct add then thenCallbacks catch catchCallbacks finally finallyCallbacks allowFailures allowsFailures name onConnection connection onQueue queue withOption dispatch	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	laravel_framework_88e361753fe777480dd025e582526149742fecf1_7_0	buggy: foreach (Arr::wrap($jobs) as $job) { context: public function add($jobs) { foreach (Arr::wrap($jobs) as $job) { foreach (Arr::wrap($jobs) as $job) { $this->jobs->push($job); } return $this; }	type_info:  global_variable:  function_name: __construct add then thenCallbacks catch catchCallbacks finally finallyCallbacks allowFailures allowsFailures name onConnection connection onQueue queue withOption dispatch	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	laravel_framework_77755e9f2fe3bde6e1185b2186b45920939e57e4_8_0	buggy: return $this->query->getQuery(); context: public function toBase() { return $this->query->getQuery(); return $this->query->getQuery(); }	type_info:  global_variable:  function_name: __construct noConstraints addConstraints addEagerConstraints initRelation match getResults getEager sole get touch rawUpdate getRelationExistenceCountQuery getRelationExistenceQuery getRelationCountHash getKeys getRelationQuery getQuery getBaseQuery toBase getParent getQualifiedParentKeyName getRelated createdAt updatedAt relatedUpdatedAt whereInMethod requireMorphMap requiresMorphMap enforceMorphMap morphMap buildMorphMapFromModels getMorphedModel __call __clone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	laravel_framework_0d49faf8273ffce80650ba046061aa0fc82d5733_9_0	buggy:  context: <?php namespace Illuminate\Validation\Rules; use InvalidArgumentException; class ExcludeIf { public $condition; public function __construct($condition) { if (! is_string($condition)) { $this->condition = $condition; } else { throw new InvalidArgumentException('The provided condition must be a callable or boolean.'); } } public function __toString()	type_info:  global_variable:  function_name: __construct __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	laravel_framework_0d49faf8273ffce80650ba046061aa0fc82d5733_9_0	buggy: if (! is_string($condition)) { context: public function __construct($condition) { if (! is_string($condition)) { if (! is_string($condition)) { $this->condition = $condition; } else { throw new InvalidArgumentException('The provided condition must be a callable or boolean.'); } } public function __toString() { if (is_callable($this->condition)) { return call_user_func($this->condition) ? 'exclude' : '';	type_info:  global_variable:  function_name: __construct __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	laravel_framework_e5775a72c968ea739dd484ba8d6ec767598f241c_10_0	buggy:  context: <?php namespace Illuminate\Validation\Rules; use InvalidArgumentException; class ExcludeIf {	type_info:  global_variable:  function_name: __construct __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	laravel_framework_e5775a72c968ea739dd484ba8d6ec767598f241c_10_0	buggy: * @param callable|bool $condition context: <?php namespace Illuminate\Validation\Rules; use InvalidArgumentException; class ExcludeIf { public $condition; * @param callable|bool $condition public function __construct($condition) { if (is_callable($condition) || is_bool($condition)) { $this->condition = $condition; } else { throw new InvalidArgumentException('The provided condition must be a callable or boolean.'); } } public function __toString()	type_info:  global_variable:  function_name: __construct __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	laravel_framework_e5775a72c968ea739dd484ba8d6ec767598f241c_10_0	buggy: if (is_callable($condition) || is_bool($condition)) { context: public function __construct($condition) { if (is_callable($condition) || is_bool($condition)) { if (is_callable($condition) || is_bool($condition)) { $this->condition = $condition; } else { throw new InvalidArgumentException('The provided condition must be a callable or boolean.'); } } public function __toString() { if (is_callable($this->condition)) { return call_user_func($this->condition) ? 'exclude' : '';	type_info:  global_variable:  function_name: __construct __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	laravel_framework_8a0757d11822531ebe453f988c806cc7c85eb20c_11_0	buggy:  context: public function files($directory = null, $recursive = false) { return $this->driver->listContents($directory ?? '', $recursive) ->filter(function (StorageAttributes $attributes) { return $attributes->isFile(); }) ->map(function (StorageAttributes $attributes) { return $attributes->path(); }) ->toArray(); } public function allFiles($directory = null) { return $this->files($directory, true); }	type_info: config:unknown adapter:unknown directory:unknown  global_variable: config: unknown adapter: unknown function_name: __construct assertExists assertMissing assertDirectoryEmpty exists missing fileExists fileMissing directoryExists directoryMissing path get response download fallbackName put putFile putFileAs getVisibility setVisibility prepend append delete copy move size mimeType lastModified readStream writeStream url getFtpUrl getLocalUrl temporaryUrl concatPathToUrl replaceBaseUrl files allFiles directories allDirectories makeDirectory deleteDirectory getDriver getAdapter getConfig parseVisibility buildTemporaryUrlsUsing throwsExceptions __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	laravel_framework_a91752882cbd1123d83847183441615f28928655_12_0	buggy: $start = mb_substr($string, 0, mb_strpos($string, $segment, 0, $encoding), $encoding); $end = mb_substr($string, mb_strpos($string, $segment, 0, $encoding) + mb_strlen($segment, $encoding)); context: if ($character === '') { return $string; } $segment = mb_substr($string, $index, $length, $encoding); if ($segment === '') { return $string; } $start = mb_substr($string, 0, mb_strpos($string, $segment, 0, $encoding), $encoding); $end = mb_substr($string, mb_strpos($string, $segment, 0, $encoding) + mb_strlen($segment, $encoding)); $start = mb_substr($string, 0, mb_strpos($string, $segment, 0, $encoding), $encoding); $end = mb_substr($string, mb_strpos($string, $segment, 0, $encoding) + mb_strlen($segment, $encoding)); return $start.str_repeat(mb_substr($character, 0, 1, $encoding), mb_strlen($segment, $encoding)).$end; } public static function match($pattern, $subject) { preg_match($pattern, $subject, $matches);	type_info: start:unknown end:unknown pattern:unknown encoding:unknown length:unknown segment:unknown uuidFactory:unknown  global_variable: uuidFactory: unknown function_name: of after afterLast ascii transliterate before beforeLast between betweenFirst camel contains containsAll endsWith excerpt finish is isAscii isUuid kebab length limit lower words markdown mask match matchAll padBoth padLeft padRight parseCallback plural pluralStudly random repeat replaceArray replace replaceFirst replaceLast remove reverse start upper title headline singular slug snake squish startsWith studly substr substrCount substrReplace swap lcfirst ucfirst ucsplit wordCount uuid orderedUuid createUuidsUsing createUuidsNormally flushCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	laravel_framework_a91752882cbd1123d83847183441615f28928655_12_0	buggy: return $start.str_repeat(mb_substr($character, 0, 1, $encoding), mb_strlen($segment, $encoding)).$end; context: $segment = mb_substr($string, $index, $length, $encoding); if ($segment === '') { return $string; } $start = mb_substr($string, 0, mb_strpos($string, $segment, 0, $encoding), $encoding); $end = mb_substr($string, mb_strpos($string, $segment, 0, $encoding) + mb_strlen($segment, $encoding)); return $start.str_repeat(mb_substr($character, 0, 1, $encoding), mb_strlen($segment, $encoding)).$end; return $start.str_repeat(mb_substr($character, 0, 1, $encoding), mb_strlen($segment, $encoding)).$end; } public static function match($pattern, $subject) { preg_match($pattern, $subject, $matches); if (! $matches) { return ''; }	type_info: start:unknown end:unknown pattern:unknown encoding:unknown length:unknown segment:unknown uuidFactory:unknown  global_variable: uuidFactory: unknown function_name: of after afterLast ascii transliterate before beforeLast between betweenFirst camel contains containsAll endsWith excerpt finish is isAscii isUuid kebab length limit lower words markdown mask match matchAll padBoth padLeft padRight parseCallback plural pluralStudly random repeat replaceArray replace replaceFirst replaceLast remove reverse start upper title headline singular slug snake squish startsWith studly substr substrCount substrReplace swap lcfirst ucfirst ucsplit wordCount uuid orderedUuid createUuidsUsing createUuidsNormally flushCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	laravel_framework_d6c08ba9a649cd10113e9342c9570645fa39203d_13_0	buggy: if ($parent instanceof UrlRoutable && ($route->enforcesScopedBindings() || array_key_exists($parameterName, $route->bindingFields()))) { context: } $instance = $container->make(Reflector::getParameterClassName($parameter)); $parent = $route->parentOfParameter($parameterName); $routeBindingMethod = $route->allowsTrashedBindings() && in_array(SoftDeletes::class, class_uses_recursive($instance)) ? 'resolveSoftDeletableRouteBinding' : 'resolveRouteBinding'; if ($parent instanceof UrlRoutable && ($route->enforcesScopedBindings() || array_key_exists($parameterName, $route->bindingFields()))) { if ($parent instanceof UrlRoutable && ($route->enforcesScopedBindings() || array_key_exists($parameterName, $route->bindingFields()))) { $childRouteBindingMethod = $route->allowsTrashedBindings() && in_array(SoftDeletes::class, class_uses_recursive($instance)) ? 'resolveSoftDeletableChildRouteBinding' : 'resolveChildRouteBinding'; if (! $model = $parent->{$childRouteBindingMethod}( $parameterName, $parameterValue, $route->bindingFieldFor($parameterName) )) { throw (new ModelNotFoundException)->setModel(get_class($instance), [$parameterValue]); }	type_info: route:unknown parameterName:unknown parameterValue:unknown instance:unknown parent:unknown routeBindingMethod:string childRouteBindingMethod:string model:unknown  global_variable:  function_name: resolveForRoute resolveBackedEnumsForRoute getParameterName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	laravel_framework_532ea74d055a4d6078ce6c242c714a474dc42b47_14_0	"buggy: return $request->route($model, null) ?: context: protected function getModel($request, $model) { if ($this->isClassName($model)) { return trim($model); } else { return $request->route($model, null) ?: return $request->route($model, null) ?: ((preg_match(""/^['\""](.*)['\""]$/"", trim($model), $matches)) ? $matches[1] : null); } } protected function isClassName($value) { return str_contains($value, '\\'); } }"	type_info:  global_variable:  function_name: __construct handle getGateArguments getModel isClassName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	laravel_framework_0485e3a8463511503acaf9cdbfa40f7f372a32b4_15_0	buggy: $parameter = $this->parameterNames()[$parameter]; context: public function bindingFieldFor($parameter) { if (is_int($parameter)) { $parameter = $this->parameterNames()[$parameter]; $parameter = $this->parameterNames()[$parameter]; } return $this->bindingFields[$parameter] ?? null; }	type_info: parameter:unknown uri:unknown action:unknown lockSeconds:unknown validators:array  global_variable: uri: unknown action: unknown lockSeconds: unknown validators: array function_name: __construct parseAction run isControllerAction runCallable isSerializedClosure runController getController getControllerClass getControllerMethod parseControllerCallback matches compileRoute bind hasParameters hasParameter parameter originalParameter setParameter forgetParameter parameters originalParameters parametersWithoutNulls parameterNames compileParameterNames signatureParameters bindingFieldFor bindingFields setBindingFields parentOfParameter withTrashed allowsTrashedBindings defaults setDefaults where parseWhere setWheres fallback setFallback methods httpOnly httpsOnly secure domain getDomain getPrefix prefix updatePrefixOnAction uri setUri parseUri getName name named uses addGroupNamespaceToStringUses getActionName getActionMethod getAction setAction getMissing missing gatherMiddleware middleware can controllerMiddleware withoutMiddleware excludedMiddleware scopeBindings enforcesScopedBindings block withoutBlocking locksFor waitsFor controllerDispatcher getValidators toSymfonyRoute getOptionalParameterNames getCompiled setRouter setContainer prepareForSerialization __get	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	laravel_framework_1a2e484dd92feab7ef9e82a5a20e2a9bc3e0e2f2_16_0	buggy: return app('session.store'); context: protected function session() { return app('session.store'); return app('session.store'); }	type_info:  global_variable:  function_name: __construct fromBaseResponse assertSuccessful assertOk assertCreated assertNoContent assertNotFound assertForbidden assertUnauthorized assertUnprocessable assertStatus statusMessageWithDetails statusMessageWithException statusMessageWithErrors assertRedirect assertRedirectContains assertRedirectToSignedRoute assertHeader assertHeaderMissing assertLocation assertDownload assertPlainCookie assertCookie assertCookieExpired assertCookieNotExpired assertCookieMissing getCookie assertSee assertSeeInOrder assertSeeText assertSeeTextInOrder assertDontSee assertDontSeeText assertJson assertJsonPath assertExactJson assertSimilarJson assertJsonFragment assertJsonMissing assertJsonMissingExact assertJsonMissingPath assertJsonStructure assertJsonCount assertJsonValidationErrors assertJsonValidationErrorFor assertJsonMissingValidationErrors decodeResponseJson json collect assertViewIs assertViewHas assertViewHasAll viewData assertViewMissing ensureResponseHasView responseHasView assertValid assertInvalid assertSessionHas assertSessionHasAll assertSessionHasInput assertSessionHasErrors assertSessionDoesntHaveErrors assertSessionHasNoErrors assertSessionHasErrorsIn assertSessionMissing session dd ddHeaders ddSession dump dumpHeaders dumpSession streamedContent withExceptions __get __isset offsetExists offsetGet offsetSet offsetUnset __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	laravel_framework_eaf08ad045298692768d005f36fd66eed09813d9_17_0	buggy: $filename = $name ?? basename($path); context: public function response($path, $name = null, array $headers = [], $disposition = 'inline') { $response = new StreamedResponse; $filename = $name ?? basename($path); $filename = $name ?? basename($path); $disposition = $response->headers->makeDisposition( $disposition, $filename, $this->fallbackName($filename) ); $response->headers->replace($headers + [ 'Content-Type' => $this->mimeType($path), 'Content-Length' => $this->size($path), 'Content-Disposition' => $disposition, ]);	type_info: config:unknown name:unknown filename:unknown disposition:unknown adapter:unknown path:unknown  global_variable: config: unknown adapter: unknown function_name: __construct assertExists assertMissing assertDirectoryEmpty exists missing fileExists fileMissing directoryExists directoryMissing path get response download fallbackName put putFile putFileAs getVisibility setVisibility prepend append delete copy move size mimeType lastModified readStream writeStream url getFtpUrl getLocalUrl temporaryUrl concatPathToUrl replaceBaseUrl files allFiles directories allDirectories makeDirectory deleteDirectory getDriver getAdapter getConfig parseVisibility buildTemporaryUrlsUsing throwsExceptions __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	laravel_framework_eaf08ad045298692768d005f36fd66eed09813d9_17_0	buggy: $disposition = $response->headers->makeDisposition( $disposition, $filename, $this->fallbackName($filename) ); context: public function response($path, $name = null, array $headers = [], $disposition = 'inline') { $response = new StreamedResponse; $filename = $name ?? basename($path); $disposition = $response->headers->makeDisposition( $disposition, $filename, $this->fallbackName($filename) ); $disposition = $response->headers->makeDisposition( $disposition, $filename, $this->fallbackName($filename) ); $response->headers->replace($headers + [ 'Content-Type' => $this->mimeType($path), 'Content-Length' => $this->size($path), 'Content-Disposition' => $disposition, ]); $response->setCallback(function () use ($path) { $stream = $this->readStream($path); fpassthru($stream);	type_info: config:unknown name:unknown filename:unknown disposition:unknown stream:unknown adapter:unknown path:unknown  global_variable: config: unknown adapter: unknown function_name: __construct assertExists assertMissing assertDirectoryEmpty exists missing fileExists fileMissing directoryExists directoryMissing path get response download fallbackName put putFile putFileAs getVisibility setVisibility prepend append delete copy move size mimeType lastModified readStream writeStream url getFtpUrl getLocalUrl temporaryUrl concatPathToUrl replaceBaseUrl files allFiles directories allDirectories makeDirectory deleteDirectory getDriver getAdapter getConfig parseVisibility buildTemporaryUrlsUsing throwsExceptions __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	laravel_framework_eaf08ad045298692768d005f36fd66eed09813d9_17_0	buggy: $response->headers->replace($headers + [ 'Content-Type' => $this->mimeType($path), 'Content-Length' => $this->size($path), 'Content-Disposition' => $disposition, ]); context: public function response($path, $name = null, array $headers = [], $disposition = 'inline') { $response = new StreamedResponse; $filename = $name ?? basename($path); $disposition = $response->headers->makeDisposition( $disposition, $filename, $this->fallbackName($filename) ); $response->headers->replace($headers + [ 'Content-Type' => $this->mimeType($path), 'Content-Length' => $this->size($path), 'Content-Disposition' => $disposition, ]); $response->headers->replace($headers + [ 'Content-Type' => $this->mimeType($path), 'Content-Length' => $this->size($path), 'Content-Disposition' => $disposition, ]); $response->setCallback(function () use ($path) { $stream = $this->readStream($path); fpassthru($stream); fclose($stream); }); return $response; }	type_info: config:unknown name:unknown filename:unknown disposition:unknown stream:unknown adapter:unknown path:unknown  global_variable: config: unknown adapter: unknown function_name: __construct assertExists assertMissing assertDirectoryEmpty exists missing fileExists fileMissing directoryExists directoryMissing path get response download fallbackName put putFile putFileAs getVisibility setVisibility prepend append delete copy move size mimeType lastModified readStream writeStream url getFtpUrl getLocalUrl temporaryUrl concatPathToUrl replaceBaseUrl files allFiles directories allDirectories makeDirectory deleteDirectory getDriver getAdapter getConfig parseVisibility buildTemporaryUrlsUsing throwsExceptions __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	laravel_framework_15b45877b2e8928635bfd3ebe28b536f8b5e7aec_18_0	buggy:  context: <?php namespace Illuminate\Support; use ArrayAccess; use Illuminate\Support\Traits\Macroable; use InvalidArgumentException;	type_info:  global_variable:  function_name: accessible add collapse crossJoin divide dot undot except exists first last flatten forget get has hasAny isAssoc isList join keyBy prependKeysWith only pluck explodePluckParameters map prepend pull query random set shuffle sort sortRecursive toCssClasses where whereNotNull wrap	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	laravel_framework_15b45877b2e8928635bfd3ebe28b536f8b5e7aec_18_0	buggy: $items = array_map($callback, $array, $keys); context: public static function map(array $array, callable $callback) { $keys = array_keys($array); $items = array_map($callback, $array, $keys); $items = array_map($callback, $array, $keys); return array_combine($keys, $items); }	type_info: callback:unknown keys:unknown array:unknown items:unknown  global_variable:  function_name: accessible add collapse crossJoin divide dot undot except exists first last flatten forget get has hasAny isAssoc isList join keyBy prependKeysWith only pluck explodePluckParameters map prepend pull query random set shuffle sort sortRecursive toCssClasses where whereNotNull wrap	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	laravel_framework_7746337149a7ffd6b4a862d9bd54593cf3520708_19_0	buggy:  context: function event(...$args) { return app('events')->dispatch(...$args); } } if (! function_exists('info')) {	type_info:  global_variable:  function_name: abort abort_if abort_unless action app app_path asset auth back base_path bcrypt broadcast cache config config_path cookie csrf_field csrf_token database_path decrypt dispatch dispatch_sync dispatch_now encrypt event info logger lang_path logs method_field mix now old policy public_path redirect report request rescue resolve resource_path response route secure_asset secure_url session storage_path to_route today trans trans_choice __ url validator view	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	laravel_framework_4d46bda6f19d490080512fa053065081f737bf2f_20_0	buggy:  context: public $defaults = []; public $wheres = []; public $parameters; public $parameterNames; protected $originalParameters; protected $withTrashedBindings = false; protected $lockSeconds; protected $waitSeconds; public $computedMiddleware; public $compiled;	type_info: defaults:array wheres:array withTrashedBindings:boolean parameters:unknown uri:unknown action:unknown lockSeconds:unknown validators:array  global_variable: parameters: unknown uri: unknown action: unknown lockSeconds: unknown validators: array function_name: __construct parseAction run isControllerAction runCallable isSerializedClosure runController getController getControllerClass getControllerMethod parseControllerCallback matches compileRoute bind hasParameters hasParameter parameter originalParameter setParameter forgetParameter parameters originalParameters parametersWithoutNulls parameterNames compileParameterNames signatureParameters bindingFieldFor bindingFields setBindingFields parentOfParameter withTrashed allowsTrashedBindings defaults setDefaults where parseWhere setWheres fallback setFallback methods httpOnly httpsOnly secure domain getDomain getPrefix prefix updatePrefixOnAction uri setUri parseUri getName name named uses addGroupNamespaceToStringUses getActionName getActionMethod getAction setAction getMissing missing gatherMiddleware middleware can controllerMiddleware withoutMiddleware excludedMiddleware scopeBindings enforcesScopedBindings block withoutBlocking locksFor waitsFor controllerDispatcher getValidators toSymfonyRoute getOptionalParameterNames getCompiled setRouter setContainer prepareForSerialization __get	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	laravel_framework_4d46bda6f19d490080512fa053065081f737bf2f_20_0	buggy: return array_map(function ($m) { context: protected function compileParameterNames() { preg_match_all('/\{(.*?)\}/', $this->getDomain().$this->uri, $matches); return array_map(function ($m) { return array_map(function ($m) { return trim($m, '?'); }, $matches[1]); } public function signatureParameters($conditions = []) { if (is_string($conditions)) { $conditions = ['subClass' => $conditions]; }	type_info: conditions:array parameters:unknown uri:unknown action:unknown lockSeconds:unknown validators:array  global_variable: parameters: unknown uri: unknown action: unknown lockSeconds: unknown validators: array function_name: __construct parseAction run isControllerAction runCallable isSerializedClosure runController getController getControllerClass getControllerMethod parseControllerCallback matches compileRoute bind hasParameters hasParameter parameter originalParameter setParameter forgetParameter parameters originalParameters parametersWithoutNulls parameterNames compileParameterNames signatureParameters bindingFieldFor bindingFields setBindingFields parentOfParameter withTrashed allowsTrashedBindings defaults setDefaults where parseWhere setWheres fallback setFallback methods httpOnly httpsOnly secure domain getDomain getPrefix prefix updatePrefixOnAction uri setUri parseUri getName name named uses addGroupNamespaceToStringUses getActionName getActionMethod getAction setAction getMissing missing gatherMiddleware middleware can controllerMiddleware withoutMiddleware excludedMiddleware scopeBindings enforcesScopedBindings block withoutBlocking locksFor waitsFor controllerDispatcher getValidators toSymfonyRoute getOptionalParameterNames getCompiled setRouter setContainer prepareForSerialization __get	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	laravel_framework_4d46bda6f19d490080512fa053065081f737bf2f_20_0	buggy: }, $matches[1]); context: protected function compileParameterNames() { preg_match_all('/\{(.*?)\}/', $this->getDomain().$this->uri, $matches); return array_map(function ($m) { return trim($m, '?'); }, $matches[1]); }, $matches[1]); } public function signatureParameters($conditions = []) { if (is_string($conditions)) { $conditions = ['subClass' => $conditions]; } return RouteSignatureParameters::fromAction($this->action, $conditions); }	type_info: conditions:array parameters:unknown uri:unknown action:unknown lockSeconds:unknown validators:array  global_variable: parameters: unknown uri: unknown action: unknown lockSeconds: unknown validators: array function_name: __construct parseAction run isControllerAction runCallable isSerializedClosure runController getController getControllerClass getControllerMethod parseControllerCallback matches compileRoute bind hasParameters hasParameter parameter originalParameter setParameter forgetParameter parameters originalParameters parametersWithoutNulls parameterNames compileParameterNames signatureParameters bindingFieldFor bindingFields setBindingFields parentOfParameter withTrashed allowsTrashedBindings defaults setDefaults where parseWhere setWheres fallback setFallback methods httpOnly httpsOnly secure domain getDomain getPrefix prefix updatePrefixOnAction uri setUri parseUri getName name named uses addGroupNamespaceToStringUses getActionName getActionMethod getAction setAction getMissing missing gatherMiddleware middleware can controllerMiddleware withoutMiddleware excludedMiddleware scopeBindings enforcesScopedBindings block withoutBlocking locksFor waitsFor controllerDispatcher getValidators toSymfonyRoute getOptionalParameterNames getCompiled setRouter setContainer prepareForSerialization __get	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	laravel_framework_4d46bda6f19d490080512fa053065081f737bf2f_20_1	buggy:  context: public function toRoute($route, $parameters, $absolute) { $parameters = collect(Arr::wrap($parameters))->map(function ($value, $key) use ($route) { return $value instanceof UrlRoutable && $route->bindingFieldFor($key) ? $value->{$route->bindingFieldFor($key)} : $value; })->all(); return $this->routeUrl()->to( $route, $this->formatParameters($parameters), $absolute ); }	type_info: assetRoot:unknown parameters:unknown key:unknown absolute:unknown route:unknown  global_variable: assetRoot: unknown function_name: __construct full current previous previousPath getPreviousUrlFromSession to secure asset secureAsset assetFrom removeIndex formatScheme signedRoute ensureSignedRouteParametersAreNotReserved temporarySignedRoute hasValidSignature hasValidRelativeSignature hasCorrectSignature signatureHasNotExpired route toRoute action formatAction formatParameters extractQueryString formatRoot format isValidUrl routeUrl defaults getDefaultParameters forceScheme forceRootUrl formatHostUsing formatPathUsing pathFormatter getRequest setRequest setRoutes getSession setSessionResolver setKeyResolver getRootControllerNamespace setRootControllerNamespace	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	laravel_framework_1711a5c99584624e243c7bd41f4bb9513892a613_21_0	buggy: * @var callable|bool context: <?php namespace Illuminate\Validation\Rules; use Closure; use InvalidArgumentException; class ExcludeIf { * @var callable|bool public $condition; public function __construct($condition) { if ($condition instanceof Closure || is_bool($condition)) { $this->condition = $condition; } else { throw new InvalidArgumentException('The provided condition must be a callable or boolean.'); }	type_info:  global_variable:  function_name: __construct __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	laravel_framework_1711a5c99584624e243c7bd41f4bb9513892a613_21_1	buggy:  context: <?php namespace Illuminate\Validation\Rules; use InvalidArgumentException; class ProhibitedIf {	type_info:  global_variable:  function_name: __construct __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	laravel_framework_1711a5c99584624e243c7bd41f4bb9513892a613_21_1	buggy: * @var callable|bool context: <?php namespace Illuminate\Validation\Rules; use InvalidArgumentException; class ProhibitedIf { * @var callable|bool public $condition; public function __construct($condition) { if (! is_string($condition)) { $this->condition = $condition; } else { throw new InvalidArgumentException('The provided condition must be a callable or boolean.');	type_info:  global_variable:  function_name: __construct __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	laravel_framework_1711a5c99584624e243c7bd41f4bb9513892a613_21_1	buggy: * @param callable|bool $condition context: <?php namespace Illuminate\Validation\Rules; use InvalidArgumentException; class ProhibitedIf { public $condition; * @param callable|bool $condition public function __construct($condition) { if (! is_string($condition)) { $this->condition = $condition; } else { throw new InvalidArgumentException('The provided condition must be a callable or boolean.'); } } public function __toString()	type_info:  global_variable:  function_name: __construct __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	laravel_framework_1711a5c99584624e243c7bd41f4bb9513892a613_21_1	buggy:  context: <?php namespace Illuminate\Validation\Rules; use InvalidArgumentException; class ProhibitedIf { public $condition; public function __construct($condition) { if (! is_string($condition)) { $this->condition = $condition; } else { throw new InvalidArgumentException('The provided condition must be a callable or boolean.'); } } public function __toString()	type_info:  global_variable:  function_name: __construct __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	laravel_framework_1711a5c99584624e243c7bd41f4bb9513892a613_21_1	buggy: if (! is_string($condition)) { context: public function __construct($condition) { if (! is_string($condition)) { if (! is_string($condition)) { $this->condition = $condition; } else { throw new InvalidArgumentException('The provided condition must be a callable or boolean.'); } } public function __toString() { if (is_callable($this->condition)) { return call_user_func($this->condition) ? 'prohibited' : '';	type_info:  global_variable:  function_name: __construct __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	laravel_framework_3b3a568ebdbdd509a90bc6cb32cb01eec09a795a_22_0	"buggy: if (Str::contains($name, '-')) { context: $value = preg_replace_callback($pattern, function ($matches) { $name = $this->stripQuotes($matches['inlineName'] ?: $matches['name']); if (Str::contains($name, '-')) { if (Str::contains($name, '-')) { $name = Str::camel($name); } if ($matches[2] !== ':') { $name = ""'{$name}'""; } $this->boundAttributes = []; $attributes = $this->getAttributesFromAttributeString($matches['attributes']);"	type_info: value:string pattern:string attributes:unknown name:string  global_variable:  function_name: __construct compile compileTags compileOpeningTags compileSelfClosingTags componentString componentClass findClassByComponent guessClassName formatClassName guessViewName partitionDataAndAttributes compileClosingTags compileSlots getAttributesFromAttributeString parseAttributeBag parseBindAttributes compileAttributeEchos escapeSingleQuotesOutsideOfPhpBlocks attributesToString stripQuotes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	laravel_framework_8f1d5483217d466ffe54c0df3177ad38703ef207_23_0	buggy: $logger->log( $level, $e->getMessage(), array_merge( $this->exceptionContext($e), $this->context(), ['exception' => $e] ) context: try { $logger = $this->container->make(LoggerInterface::class); } catch (Exception $ex) { throw $e; } $level = Arr::first( $this->levels, fn ($level, $type) => $e instanceof $type, LogLevel::ERROR ); $logger->log( $level, $e->getMessage(), array_merge( $this->exceptionContext($e), $this->context(), ['exception' => $e] ) $logger->log( $level, $e->getMessage(), array_merge( $this->exceptionContext($e), $this->context(), ['exception' => $e] ) ); }	type_info: e:unknown logger:unknown level:unknown  global_variable:  function_name: __construct register reportable renderable map ignore level report shouldReport shouldntReport exceptionContext context render prepareException mapException renderViaCallbacks renderExceptionResponse unauthenticated convertValidationExceptionToResponse invalid invalidJson shouldReturnJson prepareResponse convertExceptionToResponse renderExceptionContent renderExceptionWithCustomRenderer renderExceptionWithSymfony renderHttpException registerErrorViewPaths getHttpExceptionView toIlluminateResponse prepareJsonResponse convertExceptionToArray renderForConsole isHttpException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	laravel_framework_8f1d5483217d466ffe54c0df3177ad38703ef207_23_0	buggy:  context: $logger->log( $level, $e->getMessage(), array_merge( $this->exceptionContext($e), $this->context(), ['exception' => $e] ) ); } public function shouldReport(Throwable $e) { return ! $this->shouldntReport($e); } protected function shouldntReport(Throwable $e) { $dontReport = array_merge($this->dontReport, $this->internalDontReport);	type_info: dontReport:array e:unknown logger:unknown level:unknown  global_variable:  function_name: __construct register reportable renderable map ignore level report shouldReport shouldntReport exceptionContext context render prepareException mapException renderViaCallbacks renderExceptionResponse unauthenticated convertValidationExceptionToResponse invalid invalidJson shouldReturnJson prepareResponse convertExceptionToResponse renderExceptionContent renderExceptionWithCustomRenderer renderExceptionWithSymfony renderHttpException registerErrorViewPaths getHttpExceptionView toIlluminateResponse prepareJsonResponse convertExceptionToArray renderForConsole isHttpException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	laravel_framework_a324e92671e9d57dbaf66a674080f2e601f3c03c_24_0	buggy:  context: if ($shouldConfirm) { if ($this->hasOption('force') && $this->option('force')) { return true; } $this->components->alert($warning); $confirmed = $this->components->confirm('Do you really wish to run this command?'); if (! $confirmed) { $this->components->warn('Command canceled.'); return false; } } return true; } protected function getDefaultConfirmCallback()	type_info: warning:unknown shouldConfirm:unknown confirmed:unknown  global_variable:  function_name: confirmToProceed getDefaultConfirmCallback	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	laravel_framework_a324e92671e9d57dbaf66a674080f2e601f3c03c_24_1	buggy: public function render($question, $default = true) context: <?php namespace Illuminate\Console\View\Components; class Confirm extends Component { public function render($question, $default = true) public function render($question, $default = true) { return $this->usingQuestionHelper( fn () => $this->output->confirm($question, $default), ); }	type_info: default:unknown  global_variable:  function_name: render	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	laravel_framework_c717a1d17c24aaf0a50b9424d9f721e673fad308_25_0	buggy: use Illuminate\Console\View\Components\Task; context: <?php namespace Illuminate\Database; use Illuminate\Console\Command; use Illuminate\Console\View\Components\Task; use Illuminate\Console\View\Components\Task; use Illuminate\Container\Container; use Illuminate\Database\Console\Seeds\WithoutModelEvents; use Illuminate\Support\Arr; use InvalidArgumentException;	type_info:  global_variable:  function_name: call callWith callSilent callOnce resolve setContainer setCommand __invoke	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	laravel_framework_c717a1d17c24aaf0a50b9424d9f721e673fad308_25_0	buggy: if ($silent || ! isset($this->command)) { $seeder->__invoke($parameters); } else { with(new Task($this->command->getOutput()))->render( context: public function call($class, $silent = false, array $parameters = []) { $classes = Arr::wrap($class); foreach ($classes as $class) { $seeder = $this->resolve($class); $name = get_class($seeder); if ($silent || ! isset($this->command)) { $seeder->__invoke($parameters); } else { with(new Task($this->command->getOutput()))->render( if ($silent || ! isset($this->command)) { $seeder->__invoke($parameters); } else { with(new Task($this->command->getOutput()))->render( $name, fn () => $seeder->__invoke($parameters), ); } static::$called[] = $class; } if (! $silent && $this->command->getOutput()) { $this->command->getOutput()->writeln('');	type_info: called:array silent:unknown seeder:unknown name:unknown parameters:unknown  global_variable:  function_name: call callWith callSilent callOnce resolve setContainer setCommand __invoke	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	laravel_framework_c717a1d17c24aaf0a50b9424d9f721e673fad308_25_0	buggy: fn () => $seeder->__invoke($parameters), context: foreach ($classes as $class) { $seeder = $this->resolve($class); $name = get_class($seeder); if ($silent || ! isset($this->command)) { $seeder->__invoke($parameters); } else { with(new Task($this->command->getOutput()))->render( $name, fn () => $seeder->__invoke($parameters), fn () => $seeder->__invoke($parameters), ); } static::$called[] = $class; } if (! $silent && $this->command->getOutput()) { $this->command->getOutput()->writeln(''); }	type_info: called:array silent:unknown seeder:unknown name:unknown parameters:unknown  global_variable:  function_name: call callWith callSilent callOnce resolve setContainer setCommand __invoke	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	laravel_framework_c717a1d17c24aaf0a50b9424d9f721e673fad308_25_0	buggy: static::$called[] = $class; } context: if ($silent || ! isset($this->command)) { $seeder->__invoke($parameters); } else { with(new Task($this->command->getOutput()))->render( $name, fn () => $seeder->__invoke($parameters), ); } static::$called[] = $class; } static::$called[] = $class; } if (! $silent && $this->command->getOutput()) { $this->command->getOutput()->writeln(''); } return $this; }	type_info: called:array silent:unknown seeder:unknown name:unknown parameters:unknown  global_variable:  function_name: call callWith callSilent callOnce resolve setContainer setCommand __invoke	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	laravel_framework_c717a1d17c24aaf0a50b9424d9f721e673fad308_25_0	buggy: if (! $silent && $this->command->getOutput()) { $this->command->getOutput()->writeln(''); context: } else { with(new Task($this->command->getOutput()))->render( $name, fn () => $seeder->__invoke($parameters), ); } static::$called[] = $class; } if (! $silent && $this->command->getOutput()) { $this->command->getOutput()->writeln(''); if (! $silent && $this->command->getOutput()) { $this->command->getOutput()->writeln(''); } return $this; } public function callWith($class, array $parameters = []) { $this->call($class, false, $parameters);	type_info: called:array silent:unknown seeder:unknown name:unknown parameters:unknown  global_variable:  function_name: call callWith callSilent callOnce resolve setContainer setCommand __invoke	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	laravel_framework_d65260d12656e41a371a054a60dbe6e2163ebcd5_26_0	"buggy: $options = $config->get('logging.deprecations'); $driver = is_array($options) ? $options['channel'] : ($options ?? 'null'); context: with(static::$app['config'], function ($config) { if ($config->get('logging.channels.deprecations')) { return; } $this->ensureNullLogDriverIsConfigured(); $options = $config->get('logging.deprecations'); $driver = is_array($options) ? $options['channel'] : ($options ?? 'null'); $options = $config->get('logging.deprecations'); $driver = is_array($options) ? $options['channel'] : ($options ?? 'null'); $config->set('logging.channels.deprecations', $config->get(""logging.channels.{$driver}"")); }); }"	type_info: reservedMemory:unknown app:unknown options:array driver:unknown  global_variable: reservedMemory: unknown app: unknown function_name: bootstrap handleError handleDeprecation handleDeprecationError ensureDeprecationLoggerIsConfigured ensureNullLogDriverIsConfigured handleException renderForConsole renderHttpResponse handleShutdown fatalErrorFromPhpError forwardsTo isDeprecation isFatal getExceptionHandler forgetApp	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	laravel_framework_5bba757882b6313ea1adeafa1ceffdfc8cc91078_27_0	buggy: foreach (Arr::flatten((array) $rules) as $rule) { context: protected function explodeWildcardRules($results, $attribute, $rules) { $pattern = str_replace('\*', '[^\.]*', preg_quote($attribute)); $data = ValidationData::initializeAndGatherData($attribute, $this->data); foreach ($data as $key => $value) { if (Str::startsWith($key, $attribute) || (bool) preg_match('/^'.$pattern.'\z/', $key)) { foreach (Arr::flatten((array) $rules) as $rule) { foreach (Arr::flatten((array) $rules) as $rule) { if ($rule instanceof NestedRules) { $compiled = $rule->compile($key, $value, $data); $this->implicitAttributes = array_merge_recursive( $compiled->implicitAttributes, $this->implicitAttributes, [$attribute => [$key]] ); $results = $this->mergeRules($results, $compiled->rules);	type_info: rules:unknown key:unknown rule:unknown pattern:unknown data:array attribute:unknown results:unknown  global_variable: data: array function_name: __construct explode explodeRules explodeExplicitRule prepareRule explodeWildcardRules mergeRules mergeRulesForAttribute parse parseArrayRule parseStringRule parseParameters ruleIsRegex normalizeRule filterConditionalRules	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	laravel_framework_0fa80d15524be4c6fe6b57f4d93b97541eb2a8e2_28_0	buggy: return isset($new['prefix']) ? trim($old, '/').'/'.trim($new['prefix'], '/') : $old; context: protected static function formatPrefix($new, $old, $prependExistingPrefix = true) { $old = $old['prefix'] ?? ''; if ($prependExistingPrefix) { return isset($new['prefix']) ? trim($old, '/').'/'.trim($new['prefix'], '/') : $old; return isset($new['prefix']) ? trim($old, '/').'/'.trim($new['prefix'], '/') : $old; } else { return isset($new['prefix']) ? trim($new['prefix'], '/').'/'.trim($old, '/') : $old; } } protected static function formatWhere($new, $old) { return array_merge( $old['where'] ?? [], $new['where'] ?? []	type_info: prependExistingPrefix:unknown new:unknown  global_variable:  function_name: merge formatNamespace formatPrefix formatWhere formatAs	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	laravel_framework_0fa80d15524be4c6fe6b57f4d93b97541eb2a8e2_28_0	buggy: return isset($new['prefix']) ? trim($new['prefix'], '/').'/'.trim($old, '/') : $old; context: protected static function formatPrefix($new, $old, $prependExistingPrefix = true) { $old = $old['prefix'] ?? ''; if ($prependExistingPrefix) { return isset($new['prefix']) ? trim($old, '/').'/'.trim($new['prefix'], '/') : $old; } else { return isset($new['prefix']) ? trim($new['prefix'], '/').'/'.trim($old, '/') : $old; return isset($new['prefix']) ? trim($new['prefix'], '/').'/'.trim($old, '/') : $old; } } protected static function formatWhere($new, $old) { return array_merge( $old['where'] ?? [], $new['where'] ?? [] ); }	type_info: prependExistingPrefix:unknown new:unknown  global_variable:  function_name: merge formatNamespace formatPrefix formatWhere formatAs	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	laravel_framework_5de463e56b458518a0a590e187d97e7345b13af0_29_0	buggy:  context: { if (isset($this->config['url'])) { return $this->concatPathToUrl($this->config['url'], $this->prefixer->prefixPath($path)); } return $this->client->getObjectUrl( $this->config['bucket'], $this->prefixer->prefixPath($path) ); } public function temporaryUrl($path, $expiration, array $options = []) { $command = $this->client->getCommand('GetObject', array_merge([ 'Bucket' => $this->config['bucket'], 'Key' => $this->prefixer->prefixPath($path), ], $options)); $uri = $this->client->createPresignedRequest( $command, $expiration, $options )->getUri();	type_info: options:unknown uri:unknown  global_variable:  function_name: __construct url temporaryUrl getClient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	laravel_framework_150bd1b91d7f850aa08bad7a984d154c9800eefa_30_0	buggy:  context: protected function resolvePrimitive(ReflectionParameter $parameter) { if (! is_null($concrete = $this->getContextualConcrete('$'.$parameter->getName()))) { return Util::unwrapIfClosure($concrete, $this); } if ($parameter->isDefaultValueAvailable()) { return $parameter->getDefaultValue(); } $this->unresolvablePrimitive($parameter); }	type_info: concrete:unknown instance:unknown  global_variable: instance: unknown function_name: when bound has resolved isShared isAlias bind getClosure hasMethodBinding bindMethod parseBindMethod callMethodBinding addContextualBinding bindIf singleton singletonIf scoped scopedIf extend instance removeAbstractAlias tag tagged alias rebinding refresh rebound getReboundCallbacks wrap call factory makeWith make get resolve getConcrete getContextualConcrete findInContextualBindings isBuildable build resolveDependencies hasParameterOverride getParameterOverride getLastParameterOverride resolvePrimitive resolveClass resolveVariadicClass notInstantiable unresolvablePrimitive beforeResolving resolving afterResolving fireBeforeResolvingCallbacks fireBeforeCallbackArray fireResolvingCallbacks fireAfterResolvingCallbacks getCallbacksForType fireCallbackArray getBindings getAlias getExtenders forgetExtenders dropStaleInstances forgetInstance forgetInstances forgetScopedInstances flush getInstance setInstance offsetExists offsetGet offsetSet offsetUnset __get __set	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	laravel_framework_cbeb50b482277dc0a81fc6552e280cdff98b0de9_31_0	buggy:  context: <?php namespace Illuminate\Http\Middleware; use Closure; use Illuminate\Support\Carbon; class SetCacheHeaders { public function handle($request, Closure $next, $options = []) { $response = $next($request);	type_info: options:unknown  global_variable:  function_name: handle parseOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	laravel_framework_cbeb50b482277dc0a81fc6552e280cdff98b0de9_31_0	buggy: if (! $request->isMethodCacheable() || ! $response->getContent()) { context: public function handle($request, Closure $next, $options = []) { $response = $next($request); if (! $request->isMethodCacheable() || ! $response->getContent()) { if (! $request->isMethodCacheable() || ! $response->getContent()) { return $response; } if (is_string($options)) { $options = $this->parseOptions($options); } if (isset($options['etag']) && $options['etag'] === true) { $options['etag'] = $response->getEtag() ?? md5($response->getContent()); }	type_info: options:unknown  global_variable:  function_name: handle parseOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	laravel_framework_75ec9c3939601c2a6c6885a9333109214a2eb204_32_0	buggy: $query->$method($key, '=', $value, $boolean); context: protected function addArrayOfWheres($column, $boolean, $method = 'where') { return $this->whereNested(function ($query) use ($column, $method, $boolean) { foreach ($column as $key => $value) { if (is_numeric($key) && is_array($value)) { $query->{$method}(...array_values($value)); } else { $query->$method($key, '=', $value, $boolean); $query->$method($key, '=', $value, $boolean); } } }, $boolean); } public function prepareValueAndOperator($value, $operator, $useDefault = false) { if ($useDefault) { return [$operator, '=']; } elseif ($this->invalidOperatorAndValue($operator, $value)) {	type_info: grammar:unknown columns:array query:unknown operator:unknown method:string value:unknown useDefault:unknown boolean:string column:unknown key:unknown  global_variable: grammar: unknown columns: array function_name: __construct select selectSub selectRaw fromSub fromRaw createSub parseSub prependDatabaseNameIfCrossDatabaseQuery addSelect distinct from join joinWhere joinSub leftJoin leftJoinWhere leftJoinSub rightJoin rightJoinWhere rightJoinSub crossJoin crossJoinSub newJoinClause mergeWheres where addArrayOfWheres prepareValueAndOperator invalidOperatorAndValue invalidOperator isBitwiseOperator orWhere whereNot orWhereNot whereColumn orWhereColumn whereRaw orWhereRaw whereIn orWhereIn whereNotIn orWhereNotIn whereIntegerInRaw orWhereIntegerInRaw whereIntegerNotInRaw orWhereIntegerNotInRaw whereNull orWhereNull whereNotNull whereBetween whereBetweenColumns orWhereBetween orWhereBetweenColumns whereNotBetween whereNotBetweenColumns orWhereNotBetween orWhereNotBetweenColumns orWhereNotNull whereDate orWhereDate whereTime orWhereTime whereDay orWhereDay whereMonth orWhereMonth whereYear orWhereYear addDateBasedWhere whereNested forNestedWhere addNestedWhereQuery whereSub whereExists orWhereExists whereNotExists orWhereNotExists addWhereExistsQuery whereRowValues orWhereRowValues whereJsonContains orWhereJsonContains whereJsonDoesntContain orWhereJsonDoesntContain whereJsonContainsKey orWhereJsonContainsKey whereJsonDoesntContainKey orWhereJsonDoesntContainKey whereJsonLength orWhereJsonLength dynamicWhere addDynamic whereFullText orWhereFullText groupBy groupByRaw having orHaving havingNested addNestedHavingQuery havingNull orHavingNull havingNotNull orHavingNotNull havingBetween havingRaw orHavingRaw orderBy orderByDesc latest oldest inRandomOrder orderByRaw skip offset take limit forPage forPageBeforeId forPageAfterId reorder removeExistingOrdersFor union unionAll lock lockForUpdate sharedLock beforeQuery applyBeforeQueryCallbacks toSql find findOr value soleValue get runSelect paginate simplePaginate cursorPaginate ensureOrderForCursorPagination getCountForPagination runPaginationCountQuery cloneForPaginationCount withoutSelectAliases cursor enforceOrderBy pluck stripTableForPluck pluckFromObjectColumn pluckFromArrayColumn implode exists doesntExist existsOr doesntExistOr count min max sum avg average aggregate numericAggregate setAggregate onceWithColumns insert insertOrIgnore insertGetId insertUsing update updateFrom updateOrInsert upsert increment decrement delete truncate newQuery forSubQuery raw getBindings getRawBindings setBindings addBinding castBinding mergeBindings cleanBindings flattenValue defaultKeyName getConnection getProcessor getGrammar useWritePdo isQueryable clone cloneWithout cloneWithoutBindings dump dd __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	laravel_framework_75ec9c3939601c2a6c6885a9333109214a2eb204_32_0	buggy:  context: public function whereNot($column, $operator = null, $value = null, $boolean = 'and') { return $this->where($column, $operator, $value, $boolean.' not'); }	type_info: grammar:unknown columns:array operator:unknown value:unknown boolean:string column:unknown  global_variable: grammar: unknown columns: array function_name: __construct select selectSub selectRaw fromSub fromRaw createSub parseSub prependDatabaseNameIfCrossDatabaseQuery addSelect distinct from join joinWhere joinSub leftJoin leftJoinWhere leftJoinSub rightJoin rightJoinWhere rightJoinSub crossJoin crossJoinSub newJoinClause mergeWheres where addArrayOfWheres prepareValueAndOperator invalidOperatorAndValue invalidOperator isBitwiseOperator orWhere whereNot orWhereNot whereColumn orWhereColumn whereRaw orWhereRaw whereIn orWhereIn whereNotIn orWhereNotIn whereIntegerInRaw orWhereIntegerInRaw whereIntegerNotInRaw orWhereIntegerNotInRaw whereNull orWhereNull whereNotNull whereBetween whereBetweenColumns orWhereBetween orWhereBetweenColumns whereNotBetween whereNotBetweenColumns orWhereNotBetween orWhereNotBetweenColumns orWhereNotNull whereDate orWhereDate whereTime orWhereTime whereDay orWhereDay whereMonth orWhereMonth whereYear orWhereYear addDateBasedWhere whereNested forNestedWhere addNestedWhereQuery whereSub whereExists orWhereExists whereNotExists orWhereNotExists addWhereExistsQuery whereRowValues orWhereRowValues whereJsonContains orWhereJsonContains whereJsonDoesntContain orWhereJsonDoesntContain whereJsonContainsKey orWhereJsonContainsKey whereJsonDoesntContainKey orWhereJsonDoesntContainKey whereJsonLength orWhereJsonLength dynamicWhere addDynamic whereFullText orWhereFullText groupBy groupByRaw having orHaving havingNested addNestedHavingQuery havingNull orHavingNull havingNotNull orHavingNotNull havingBetween havingRaw orHavingRaw orderBy orderByDesc latest oldest inRandomOrder orderByRaw skip offset take limit forPage forPageBeforeId forPageAfterId reorder removeExistingOrdersFor union unionAll lock lockForUpdate sharedLock beforeQuery applyBeforeQueryCallbacks toSql find findOr value soleValue get runSelect paginate simplePaginate cursorPaginate ensureOrderForCursorPagination getCountForPagination runPaginationCountQuery cloneForPaginationCount withoutSelectAliases cursor enforceOrderBy pluck stripTableForPluck pluckFromObjectColumn pluckFromArrayColumn implode exists doesntExist existsOr doesntExistOr count min max sum avg average aggregate numericAggregate setAggregate onceWithColumns insert insertOrIgnore insertGetId insertUsing update updateFrom updateOrInsert upsert increment decrement delete truncate newQuery forSubQuery raw getBindings getRawBindings setBindings addBinding castBinding mergeBindings cleanBindings flattenValue defaultKeyName getConnection getProcessor getGrammar useWritePdo isQueryable clone cloneWithout cloneWithoutBindings dump dd __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	laravel_framework_b8989240a401628e539096ff9b18558b72515258_33_0	buggy:  context: use Symfony\Component\VarDumper\VarDumper; class PendingRequest { use Conditionable, Macroable; protected $factory; protected $client; protected $baseUrl = ''; protected $bodyFormat; protected $pendingBody; protected $pendingFiles = []; protected $cookies;	type_info: baseUrl:string pendingFiles:array factory:unknown promise:unknown request:unknown  global_variable: factory: unknown promise: unknown request: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies maxRedirects withoutRedirecting withoutVerifying sink timeout connectTimeout retry withOptions withMiddleware beforeSending throw throwIf throwUnless dump dd get head post patch put delete pool send parseHttpOptions parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub preventStrayRequests async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	laravel_framework_b8989240a401628e539096ff9b18558b72515258_33_0	buggy: return $this->requestsReusableClient() ? $this->getReusableClient() : $this->createClient($this->buildHandlerStack()); context: public function buildClient() { return $this->requestsReusableClient() ? $this->getReusableClient() : $this->createClient($this->buildHandlerStack()); return $this->requestsReusableClient() ? $this->getReusableClient() : $this->createClient($this->buildHandlerStack()); }	type_info: factory:unknown promise:unknown request:unknown  global_variable: factory: unknown promise: unknown request: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies maxRedirects withoutRedirecting withoutVerifying sink timeout connectTimeout retry withOptions withMiddleware beforeSending throw throwIf throwUnless dump dd get head post patch put delete pool send parseHttpOptions parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub preventStrayRequests async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	laravel_framework_b8989240a401628e539096ff9b18558b72515258_33_0	buggy: return $this->pushHandlers(HandlerStack::create()); context: public function buildHandlerStack() { return $this->pushHandlers(HandlerStack::create()); return $this->pushHandlers(HandlerStack::create()); }	type_info: factory:unknown promise:unknown request:unknown  global_variable: factory: unknown promise: unknown request: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies maxRedirects withoutRedirecting withoutVerifying sink timeout connectTimeout retry withOptions withMiddleware beforeSending throw throwIf throwUnless dump dd get head post patch put delete pool send parseHttpOptions parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub preventStrayRequests async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	laravel_framework_b8989240a401628e539096ff9b18558b72515258_33_0	buggy: $this->client = $this->createClient( $this->pushHandlers(HandlerStack::create($handler)) ); context: public function setHandler($handler) { $this->client = $this->createClient( $this->pushHandlers(HandlerStack::create($handler)) ); $this->client = $this->createClient( $this->pushHandlers(HandlerStack::create($handler)) ); return $this; }	type_info: factory:unknown promise:unknown request:unknown  global_variable: factory: unknown promise: unknown request: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies maxRedirects withoutRedirecting withoutVerifying sink timeout connectTimeout retry withOptions withMiddleware beforeSending throw throwIf throwUnless dump dd get head post patch put delete pool send parseHttpOptions parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub preventStrayRequests async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	laravel_framework_b5b0288514f24fc2dc896de43bd7f352f30cdbe5_34_0	buggy:  context: public function getKeyType() { if (in_array($this->getKeyName(), $this->uniqueIds())) { return 'string'; } return $this->keyType; } }	type_info:  global_variable:  function_name: bootHasUlids newUniqueId uniqueIds getKeyType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	laravel_framework_b5b0288514f24fc2dc896de43bd7f352f30cdbe5_34_1	buggy:  context: public function getKeyType() { if (in_array($this->getKeyName(), $this->uniqueIds())) { return 'string'; } return $this->keyType; } }	type_info:  global_variable:  function_name: bootHasUuids newUniqueId uniqueIds getKeyType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	laravel_framework_b5b0288514f24fc2dc896de43bd7f352f30cdbe5_34_2	buggy: if ($this->getKeyType() === 'string') { return false; } context: public function getIncrementing() { if ($this->getKeyType() === 'string') { return false; } if ($this->getKeyType() === 'string') { return false; } return $this->incrementing; }	type_info: lazyLoadingViolationCallback:unknown connection:unknown resolver:unknown  global_variable: lazyLoadingViolationCallback: unknown connection: unknown resolver: unknown function_name: __construct bootIfNotBooted booting boot bootTraits initializeTraits booted clearBootedModels withoutTouching withoutTouchingOn isIgnoringTouch preventLazyLoading handleLazyLoadingViolationUsing preventSilentlyDiscardingAttributes withoutBroadcasting fill forceFill qualifyColumn qualifyColumns newInstance newFromBuilder on onWriteConnection all with load loadMorph loadMissing loadAggregate loadCount loadMax loadMin loadSum loadAvg loadExists loadMorphAggregate loadMorphCount loadMorphMax loadMorphMin loadMorphSum loadMorphAvg increment decrement incrementOrDecrement update updateOrFail updateQuietly incrementQuietly decrementQuietly push saveQuietly save saveOrFail finishSave performUpdate setKeysForSelectQuery getKeyForSelectQuery setKeysForSaveQuery getKeyForSaveQuery performInsert insertAndSetId destroy delete deleteQuietly deleteOrFail forceDelete performDeleteOnModel query newQuery newModelQuery newQueryWithoutRelationships registerGlobalScopes newQueryWithoutScopes newQueryWithoutScope newQueryForRestoration newEloquentBuilder newBaseQueryBuilder newCollection newPivot hasNamedScope callNamedScope toArray toJson jsonSerialize fresh refresh replicate replicateQuietly is isNot getConnection getConnectionName setConnection resolveConnection getConnectionResolver setConnectionResolver unsetConnectionResolver getTable setTable getKeyName setKeyName getQualifiedKeyName getKeyType setKeyType getIncrementing setIncrementing getKey getQueueableId getQueueableRelations getQueueableConnection getRouteKey getRouteKeyName resolveRouteBinding resolveSoftDeletableRouteBinding resolveChildRouteBinding resolveSoftDeletableChildRouteBinding resolveChildRouteBindingQuery childRouteBindingRelationshipName resolveRouteBindingQuery getForeignKey getPerPage setPerPage preventsLazyLoading preventsSilentlyDiscardingAttributes broadcastChannelRoute broadcastChannel __get __set offsetExists offsetGet offsetSet offsetUnset __isset __unset __call __callStatic __toString escapeWhenCastingToString __sleep __wakeup	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	laravel_framework_3f3a57ae87f76aa69d8122acb6d367d03c795fc9_35_0	buggy:  context: public function setKeyResolver(callable $keyResolver) { $this->keyResolver = $keyResolver; return $this; } public function getRootControllerNamespace()	type_info: assetRoot:unknown  global_variable: assetRoot: unknown function_name: __construct full current previous previousPath getPreviousUrlFromSession to secure asset secureAsset assetFrom removeIndex formatScheme signedRoute ensureSignedRouteParametersAreNotReserved temporarySignedRoute hasValidSignature hasValidRelativeSignature hasCorrectSignature signatureHasNotExpired route toRoute action formatAction formatParameters extractQueryString formatRoot format isValidUrl routeUrl defaults getDefaultParameters forceScheme forceRootUrl formatHostUsing formatPathUsing pathFormatter getRequest setRequest setRoutes getSession setSessionResolver setKeyResolver getRootControllerNamespace setRootControllerNamespace	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	laravel_framework_8fefd80f71bebd333121ed6896645a60e1eea8d6_36_0	buggy: * The latest test response. context: protected $unencryptedCookies = []; protected $serverVariables = []; protected $followRedirects = false; protected $encryptCookies = true; protected $withCredentials = false; * The latest test response. public $latestResponse; public function withHeaders(array $headers) { $this->defaultHeaders = array_merge($this->defaultHeaders, $headers); return $this; } public function withHeader(string $name, string $value)	type_info: unencryptedCookies:array serverVariables:array followRedirects:boolean encryptCookies:boolean withCredentials:boolean headers:unknown name:unknown  global_variable:  function_name: withHeaders withHeader withToken withoutToken flushHeaders withServerVariables withoutMiddleware handle withMiddleware withCookies withCookie withUnencryptedCookies withUnencryptedCookie followingRedirects withCredentials disableCookieEncryption from get getJson post postJson put putJson patch patchJson delete deleteJson options optionsJson head json call prepareUrlForRequest transformHeadersToServerVars formatServerHeaderKey extractFilesFromDataArray prepareCookiesForRequest prepareCookiesForJsonRequest followRedirects createTestResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	laravel_framework_8fefd80f71bebd333121ed6896645a60e1eea8d6_36_0	buggy: public $latestResponse; context: protected $unencryptedCookies = []; protected $serverVariables = []; protected $followRedirects = false; protected $encryptCookies = true; protected $withCredentials = false; public $latestResponse; public $latestResponse; public function withHeaders(array $headers) { $this->defaultHeaders = array_merge($this->defaultHeaders, $headers); return $this; } public function withHeader(string $name, string $value)	type_info: unencryptedCookies:array serverVariables:array followRedirects:boolean encryptCookies:boolean withCredentials:boolean headers:unknown name:unknown  global_variable:  function_name: withHeaders withHeader withToken withoutToken flushHeaders withServerVariables withoutMiddleware handle withMiddleware withCookies withCookie withUnencryptedCookies withUnencryptedCookie followingRedirects withCredentials disableCookieEncryption from get getJson post postJson put putJson patch patchJson delete deleteJson options optionsJson head json call prepareUrlForRequest transformHeadersToServerVars formatServerHeaderKey extractFilesFromDataArray prepareCookiesForRequest prepareCookiesForJsonRequest followRedirects createTestResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	laravel_framework_8fefd80f71bebd333121ed6896645a60e1eea8d6_36_0	buggy: return $this->latestResponse = $this->createTestResponse($response); context: $response = $kernel->handle( $request = Request::createFromBase($symfonyRequest) ); $kernel->terminate($request, $response); if ($this->followRedirects) { $response = $this->followRedirects($response); } return $this->latestResponse = $this->createTestResponse($response); return $this->latestResponse = $this->createTestResponse($response); } protected function prepareUrlForRequest($uri) { if (str_starts_with($uri, '/')) { $uri = substr($uri, 1); } return trim(url($uri), '/');	type_info: symfonyRequest:unknown response:unknown uri:unknown  global_variable:  function_name: withHeaders withHeader withToken withoutToken flushHeaders withServerVariables withoutMiddleware handle withMiddleware withCookies withCookie withUnencryptedCookies withUnencryptedCookie followingRedirects withCredentials disableCookieEncryption from get getJson post postJson put putJson patch patchJson delete deleteJson options optionsJson head json call prepareUrlForRequest transformHeadersToServerVars formatServerHeaderKey extractFilesFromDataArray prepareCookiesForRequest prepareCookiesForJsonRequest followRedirects createTestResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	laravel_framework_8fefd80f71bebd333121ed6896645a60e1eea8d6_36_1	buggy: $this->latestResponse = null; context: protected function setUp(): void { $this->latestResponse = null; $this->latestResponse = null; Facade::clearResolvedInstances(); if (! $this->app) { $this->refreshApplication(); ParallelTesting::callSetUpTestCaseCallbacks($this); } $this->setUpTraits();	type_info:  global_variable:  function_name: createApplication setUp refreshApplication setUpTraits tearDown afterApplicationCreated beforeApplicationDestroyed callBeforeApplicationDestroyedCallbacks onNotSuccessfulTest appendExceptionToException appendErrorsToException appendMessageToException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	laravel_framework_8fefd80f71bebd333121ed6896645a60e1eea8d6_36_1	buggy:  context: Artisan::forgetBootstrappers(); Queue::createPayloadUsing(null); HandleExceptions::forgetApp(); if ($this->callbackException) { throw $this->callbackException; } } public function afterApplicationCreated(callable $callback) { $this->afterApplicationCreatedCallbacks[] = $callback; if ($this->setUpHasRun) { $callback(); } } protected function beforeApplicationDestroyed(callable $callback)	type_info:  global_variable:  function_name: createApplication setUp refreshApplication setUpTraits tearDown afterApplicationCreated beforeApplicationDestroyed callBeforeApplicationDestroyedCallbacks onNotSuccessfulTest appendExceptionToException appendErrorsToException appendMessageToException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	laravel_framework_8fefd80f71bebd333121ed6896645a60e1eea8d6_36_1	buggy: if (! $exception instanceof ExpectationFailedException || is_null($this->latestResponse)) { context: protected function onNotSuccessfulTest(Throwable $exception): void { if (! $exception instanceof ExpectationFailedException || is_null($this->latestResponse)) { if (! $exception instanceof ExpectationFailedException || is_null($this->latestResponse)) { parent::onNotSuccessfulTest($exception); } if ($lastException = $this->latestResponse->exceptions->last()) { parent::onNotSuccessfulTest($this->appendExceptionToException($lastException, $exception)); return; } if ($this->latestResponse->baseResponse instanceof RedirectResponse) {	type_info: lastException:unknown  global_variable:  function_name: createApplication setUp refreshApplication setUpTraits tearDown afterApplicationCreated beforeApplicationDestroyed callBeforeApplicationDestroyedCallbacks onNotSuccessfulTest appendExceptionToException appendErrorsToException appendMessageToException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	laravel_framework_8fefd80f71bebd333121ed6896645a60e1eea8d6_36_1	buggy: if ($lastException = $this->latestResponse->exceptions->last()) { context: protected function onNotSuccessfulTest(Throwable $exception): void { if (! $exception instanceof ExpectationFailedException || is_null($this->latestResponse)) { parent::onNotSuccessfulTest($exception); } if ($lastException = $this->latestResponse->exceptions->last()) { if ($lastException = $this->latestResponse->exceptions->last()) { parent::onNotSuccessfulTest($this->appendExceptionToException($lastException, $exception)); return; } if ($this->latestResponse->baseResponse instanceof RedirectResponse) { $session = $this->latestResponse->baseResponse->getSession(); if (! is_null($session) && $session->has('errors')) { parent::onNotSuccessfulTest($this->appendErrorsToException($session->get('errors')->all(), $exception));	type_info: lastException:unknown session:unknown  global_variable:  function_name: createApplication setUp refreshApplication setUpTraits tearDown afterApplicationCreated beforeApplicationDestroyed callBeforeApplicationDestroyedCallbacks onNotSuccessfulTest appendExceptionToException appendErrorsToException appendMessageToException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	laravel_framework_8fefd80f71bebd333121ed6896645a60e1eea8d6_36_1	buggy: if ($this->latestResponse->baseResponse instanceof RedirectResponse) { $session = $this->latestResponse->baseResponse->getSession(); context: if (! $exception instanceof ExpectationFailedException || is_null($this->latestResponse)) { parent::onNotSuccessfulTest($exception); } if ($lastException = $this->latestResponse->exceptions->last()) { parent::onNotSuccessfulTest($this->appendExceptionToException($lastException, $exception)); return; } if ($this->latestResponse->baseResponse instanceof RedirectResponse) { $session = $this->latestResponse->baseResponse->getSession(); if ($this->latestResponse->baseResponse instanceof RedirectResponse) { $session = $this->latestResponse->baseResponse->getSession(); if (! is_null($session) && $session->has('errors')) { parent::onNotSuccessfulTest($this->appendErrorsToException($session->get('errors')->all(), $exception)); return; } }	type_info: lastException:unknown session:unknown  global_variable:  function_name: createApplication setUp refreshApplication setUpTraits tearDown afterApplicationCreated beforeApplicationDestroyed callBeforeApplicationDestroyedCallbacks onNotSuccessfulTest appendExceptionToException appendErrorsToException appendMessageToException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	laravel_framework_8fefd80f71bebd333121ed6896645a60e1eea8d6_36_1	buggy: if ($this->latestResponse->baseResponse->headers->get('Content-Type') === 'application/json') { $testJson = new AssertableJsonString($this->latestResponse->getContent()); context: if ($this->latestResponse->baseResponse instanceof RedirectResponse) { $session = $this->latestResponse->baseResponse->getSession(); if (! is_null($session) && $session->has('errors')) { parent::onNotSuccessfulTest($this->appendErrorsToException($session->get('errors')->all(), $exception)); return; } } if ($this->latestResponse->baseResponse->headers->get('Content-Type') === 'application/json') { $testJson = new AssertableJsonString($this->latestResponse->getContent()); if ($this->latestResponse->baseResponse->headers->get('Content-Type') === 'application/json') { $testJson = new AssertableJsonString($this->latestResponse->getContent()); if (isset($testJson['errors'])) { parent::onNotSuccessfulTest($this->appendErrorsToException($testJson->json(), $exception, true)); return; } }	type_info: session:unknown testJson:unknown  global_variable:  function_name: createApplication setUp refreshApplication setUpTraits tearDown afterApplicationCreated beforeApplicationDestroyed callBeforeApplicationDestroyedCallbacks onNotSuccessfulTest appendExceptionToException appendErrorsToException appendMessageToException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	laravel_framework_7cb6dbfae0420d388d9a2b5a7a068d2185ad308b_37_0	buggy:  context: public function url($path) { $adapter = $this->adapter; if (method_exists($adapter, 'getUrl')) { return $adapter->getUrl($path); } elseif (method_exists($this->driver, 'getUrl')) { return $this->driver->getUrl($path); } elseif ($adapter instanceof FtpAdapter || $adapter instanceof SftpAdapter) { return $this->getFtpUrl($path); } elseif ($adapter instanceof LocalAdapter) { return $this->getLocalUrl($path);	type_info: config:unknown adapter:unknown path:unknown  global_variable: config: unknown adapter: unknown function_name: __construct assertExists assertMissing assertDirectoryEmpty exists missing fileExists fileMissing directoryExists directoryMissing path get response download fallbackName put putFile putFileAs getVisibility setVisibility prepend append delete copy move size mimeType lastModified readStream writeStream url getFtpUrl getLocalUrl providesTemporaryUrls temporaryUrl concatPathToUrl replaceBaseUrl files allFiles directories allDirectories makeDirectory deleteDirectory getDriver getAdapter getConfig parseVisibility buildTemporaryUrlsUsing throwsExceptions __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	laravel_framework_d8eb542122b5b9d1793e1294bdd31ae08c220430_38_0	"buggy: $hashedColumn = $this->getQuery()->from === $relation->getQuery()->getQuery()->from ? ""{$relation->getRelationCountHash(false)}.$column"" : $column; context: unset($alias); if (count($segments) === 3 && Str::lower($segments[1]) === 'as') { [$name, $alias] = [$segments[0], $segments[2]]; } $relation = $this->getRelationWithoutConstraints($name); if ($function) { $hashedColumn = $this->getQuery()->from === $relation->getQuery()->getQuery()->from ? ""{$relation->getRelationCountHash(false)}.$column"" : $column; $hashedColumn = $this->getQuery()->from === $relation->getQuery()->getQuery()->from ? ""{$relation->getRelationCountHash(false)}.$column"" : $column; $wrappedColumn = $this->getQuery()->getGrammar()->wrap( $column === '*' ? $column : $relation->getRelated()->qualifyColumn($hashedColumn) ); $expression = $function === 'exists' ? $wrappedColumn : sprintf('%s(%s)', $function, $wrappedColumn); } else {"	type_info: relation:unknown function:unknown name:unknown hashedColumn:unknown wrappedColumn:unknown expression:unknown  global_variable:  function_name: has hasNested orHas doesntHave orDoesntHave whereHas withWhereHas orWhereHas whereDoesntHave orWhereDoesntHave hasMorph getBelongsToRelation orHasMorph doesntHaveMorph orDoesntHaveMorph whereHasMorph orWhereHasMorph whereDoesntHaveMorph orWhereDoesntHaveMorph whereRelation orWhereRelation whereMorphRelation orWhereMorphRelation whereMorphedTo whereNotMorphedTo orWhereMorphedTo orWhereNotMorphedTo whereBelongsTo orWhereBelongsTo withAggregate withCount withMax withMin withSum withAvg withExists addHasWhere mergeConstraintsFrom requalifyWhereTables addWhereCountQuery getRelationWithoutConstraints canUseExistsForExistenceCheck	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	laravel_framework_d8eb542122b5b9d1793e1294bdd31ae08c220430_38_0	buggy:  context: $this->selectSub( $function ? $query : $query->limit(1), $alias ); } } return $this; } public function withCount($relations) { return $this->withAggregate(is_array($relations) ? $relations : func_get_args(), '*', 'count'); } public function withMax($relation, $column) { return $this->withAggregate($relation, $column, 'max'); }	type_info: relation:unknown function:unknown relations:array query:unknown  global_variable:  function_name: has hasNested orHas doesntHave orDoesntHave whereHas withWhereHas orWhereHas whereDoesntHave orWhereDoesntHave hasMorph getBelongsToRelation orHasMorph doesntHaveMorph orDoesntHaveMorph whereHasMorph orWhereHasMorph whereDoesntHaveMorph orWhereDoesntHaveMorph whereRelation orWhereRelation whereMorphRelation orWhereMorphRelation whereMorphedTo whereNotMorphedTo orWhereMorphedTo orWhereNotMorphedTo whereBelongsTo orWhereBelongsTo withAggregate withCount withMax withMin withSum withAvg withExists addHasWhere mergeConstraintsFrom requalifyWhereTables addWhereCountQuery getRelationWithoutConstraints canUseExistsForExistenceCheck	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	laravel_framework_58a6770932316699886d273e7540ea3cf80a7d14_39_0	buggy: $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); context: public function assertSimilar(array $data) { $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); PHPUnit::assertEquals(json_encode(Arr::sortRecursive($data)), $actual); return $this; }	type_info: actual:unknown data:unknown  global_variable:  function_name: __construct json assertCount assertExact assertSimilar assertFragment assertMissing assertMissingExact assertMissingPath assertPath assertStructure assertSubset reorderAssocKeys assertJsonMessage jsonSearchStrings count offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	laravel_framework_58a6770932316699886d273e7540ea3cf80a7d14_39_0	buggy: PHPUnit::assertEquals(json_encode(Arr::sortRecursive($data)), $actual); context: public function assertSimilar(array $data) { $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); PHPUnit::assertEquals(json_encode(Arr::sortRecursive($data)), $actual); PHPUnit::assertEquals(json_encode(Arr::sortRecursive($data)), $actual); return $this; }	type_info: actual:unknown data:unknown  global_variable:  function_name: __construct json assertCount assertExact assertSimilar assertFragment assertMissing assertMissingExact assertMissingPath assertPath assertStructure assertSubset reorderAssocKeys assertJsonMessage jsonSearchStrings count offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	laravel_framework_58a6770932316699886d273e7540ea3cf80a7d14_39_0	"buggy: $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); context: public function assertFragment(array $data) { $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); foreach (Arr::sortRecursive($data) as $key => $value) { $expected = $this->jsonSearchStrings($key, $value); PHPUnit::assertTrue( Str::contains($actual, $expected), 'Unable to find JSON fragment: '.PHP_EOL.PHP_EOL. '['.json_encode([$key => $value]).']'.PHP_EOL.PHP_EOL. 'within'.PHP_EOL.PHP_EOL. ""[{$actual}]."""	type_info: key:unknown actual:unknown expected:unknown data:unknown  global_variable:  function_name: __construct json assertCount assertExact assertSimilar assertFragment assertMissing assertMissingExact assertMissingPath assertPath assertStructure assertSubset reorderAssocKeys assertJsonMessage jsonSearchStrings count offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	laravel_framework_58a6770932316699886d273e7540ea3cf80a7d14_39_0	"buggy: '['.json_encode([$key => $value]).']'.PHP_EOL.PHP_EOL. context: $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); foreach (Arr::sortRecursive($data) as $key => $value) { $expected = $this->jsonSearchStrings($key, $value); PHPUnit::assertTrue( Str::contains($actual, $expected), 'Unable to find JSON fragment: '.PHP_EOL.PHP_EOL. '['.json_encode([$key => $value]).']'.PHP_EOL.PHP_EOL. '['.json_encode([$key => $value]).']'.PHP_EOL.PHP_EOL. 'within'.PHP_EOL.PHP_EOL. ""[{$actual}]."" ); } return $this; } public function assertMissing(array $data, $exact = false)"	type_info: key:unknown actual:unknown expected:unknown exact:unknown data:unknown  global_variable:  function_name: __construct json assertCount assertExact assertSimilar assertFragment assertMissing assertMissingExact assertMissingPath assertPath assertStructure assertSubset reorderAssocKeys assertJsonMessage jsonSearchStrings count offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	laravel_framework_58a6770932316699886d273e7540ea3cf80a7d14_39_0	"buggy: $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); context: public function assertMissing(array $data, $exact = false) { if ($exact) { return $this->assertMissingExact($data); } $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); foreach (Arr::sortRecursive($data) as $key => $value) { $unexpected = $this->jsonSearchStrings($key, $value); PHPUnit::assertFalse( Str::contains($actual, $unexpected), 'Found unexpected JSON fragment: '.PHP_EOL.PHP_EOL. '['.json_encode([$key => $value]).']'.PHP_EOL.PHP_EOL. 'within'.PHP_EOL.PHP_EOL. ""[{$actual}]."""	type_info: key:unknown actual:unknown exact:unknown data:unknown  global_variable:  function_name: __construct json assertCount assertExact assertSimilar assertFragment assertMissing assertMissingExact assertMissingPath assertPath assertStructure assertSubset reorderAssocKeys assertJsonMessage jsonSearchStrings count offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	laravel_framework_58a6770932316699886d273e7540ea3cf80a7d14_39_0	"buggy: '['.json_encode([$key => $value]).']'.PHP_EOL.PHP_EOL. context: $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); foreach (Arr::sortRecursive($data) as $key => $value) { $unexpected = $this->jsonSearchStrings($key, $value); PHPUnit::assertFalse( Str::contains($actual, $unexpected), 'Found unexpected JSON fragment: '.PHP_EOL.PHP_EOL. '['.json_encode([$key => $value]).']'.PHP_EOL.PHP_EOL. '['.json_encode([$key => $value]).']'.PHP_EOL.PHP_EOL. 'within'.PHP_EOL.PHP_EOL. ""[{$actual}]."" ); } return $this; } public function assertMissingExact(array $data)"	type_info: key:unknown actual:unknown data:unknown  global_variable:  function_name: __construct json assertCount assertExact assertSimilar assertFragment assertMissing assertMissingExact assertMissingPath assertPath assertStructure assertSubset reorderAssocKeys assertJsonMessage jsonSearchStrings count offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	laravel_framework_58a6770932316699886d273e7540ea3cf80a7d14_39_0	buggy: $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); context: public function assertMissingExact(array $data) { $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); $actual = json_encode(Arr::sortRecursive( (array) $this->decoded )); foreach (Arr::sortRecursive($data) as $key => $value) { $unexpected = $this->jsonSearchStrings($key, $value); if (! Str::contains($actual, $unexpected)) { return $this; } } PHPUnit::fail(	type_info: key:unknown actual:unknown data:unknown  global_variable:  function_name: __construct json assertCount assertExact assertSimilar assertFragment assertMissing assertMissingExact assertMissingPath assertPath assertStructure assertSubset reorderAssocKeys assertJsonMessage jsonSearchStrings count offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
67	laravel_framework_58a6770932316699886d273e7540ea3cf80a7d14_39_0	"buggy: '['.json_encode($data).']'.PHP_EOL.PHP_EOL. context: foreach (Arr::sortRecursive($data) as $key => $value) { $unexpected = $this->jsonSearchStrings($key, $value); if (! Str::contains($actual, $unexpected)) { return $this; } } PHPUnit::fail( 'Found unexpected JSON fragment: '.PHP_EOL.PHP_EOL. '['.json_encode($data).']'.PHP_EOL.PHP_EOL. '['.json_encode($data).']'.PHP_EOL.PHP_EOL. 'within'.PHP_EOL.PHP_EOL. ""[{$actual}]."" ); return $this; } public function assertMissingPath($path) {"	type_info: key:unknown actual:unknown data:unknown  global_variable:  function_name: __construct json assertCount assertExact assertSimilar assertFragment assertMissing assertMissingExact assertMissingPath assertPath assertStructure assertSubset reorderAssocKeys assertJsonMessage jsonSearchStrings count offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
68	laravel_framework_58a6770932316699886d273e7540ea3cf80a7d14_39_0	"buggy: $expected = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES); context: protected function assertJsonMessage(array $data) { $expected = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES); $expected = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES); $actual = json_encode($this->decoded, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES); return 'Unable to find JSON: '.PHP_EOL.PHP_EOL. ""[{$expected}]"".PHP_EOL.PHP_EOL. 'within response JSON:'.PHP_EOL.PHP_EOL. ""[{$actual}]."".PHP_EOL.PHP_EOL; }"	type_info: actual:unknown expected:unknown data:unknown  global_variable:  function_name: __construct json assertCount assertExact assertSimilar assertFragment assertMissing assertMissingExact assertMissingPath assertPath assertStructure assertSubset reorderAssocKeys assertJsonMessage jsonSearchStrings count offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
69	laravel_framework_58a6770932316699886d273e7540ea3cf80a7d14_39_0	"buggy: $actual = json_encode($this->decoded, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES); context: protected function assertJsonMessage(array $data) { $expected = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES); $actual = json_encode($this->decoded, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES); $actual = json_encode($this->decoded, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES); return 'Unable to find JSON: '.PHP_EOL.PHP_EOL. ""[{$expected}]"".PHP_EOL.PHP_EOL. 'within response JSON:'.PHP_EOL.PHP_EOL. ""[{$actual}]."".PHP_EOL.PHP_EOL; }"	type_info: actual:unknown expected:unknown data:unknown  global_variable:  function_name: __construct json assertCount assertExact assertSimilar assertFragment assertMissing assertMissingExact assertMissingPath assertPath assertStructure assertSubset reorderAssocKeys assertJsonMessage jsonSearchStrings count offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
70	laravel_framework_58a6770932316699886d273e7540ea3cf80a7d14_39_0	buggy: $needle = substr(json_encode([$key => $value]), 1, -1); context: protected function jsonSearchStrings($key, $value) { $needle = substr(json_encode([$key => $value]), 1, -1); $needle = substr(json_encode([$key => $value]), 1, -1); return [ $needle.']', $needle.'}', $needle.',', ]; }	type_info: key:unknown needle:unknown  global_variable:  function_name: __construct json assertCount assertExact assertSimilar assertFragment assertMissing assertMissingExact assertMissingPath assertPath assertStructure assertSubset reorderAssocKeys assertJsonMessage jsonSearchStrings count offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	laravel_framework_e37e6e0327080dec0bdd38416a48f85211121d5d_40_0	"buggy: $pattern = ""/\:\\\$(\w+)/x""; context: protected function parseShortAttributeSyntax(string $value) { $pattern = ""/\:\\\$(\w+)/x""; $pattern = ""/\:\\\$(\w+)/x""; return preg_replace_callback($pattern, function (array $matches) { return "":{$matches[1]}=\""\${$matches[1]}\""""; }, $value); } protected function parseAttributeBag(string $attributeString) { $pattern = ""/ (?:^|\s+) # start of the string or whitespace between attributes"	type_info: value:string pattern:string attributeString:unknown  global_variable:  function_name: __construct compile compileTags compileOpeningTags compileSelfClosingTags componentString componentClass findClassByComponent guessClassName formatClassName guessViewName partitionDataAndAttributes compileClosingTags compileSlots getAttributesFromAttributeString parseShortAttributeSyntax parseAttributeBag parseComponentTagClassStatements parseBindAttributes compileAttributeEchos escapeSingleQuotesOutsideOfPhpBlocks attributesToString stripQuotes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	laravel_framework_e37e6e0327080dec0bdd38416a48f85211121d5d_40_0	"buggy: return "":{$matches[1]}=\""\${$matches[1]}\""""; context: return preg_replace_callback($pattern, function (array $matches) { return "":{$matches[1]}=\""\${$matches[1]}\""""; return "":{$matches[1]}=\""\${$matches[1]}\""""; }, $value); }"	type_info: value:string pattern:string  global_variable:  function_name: __construct compile compileTags compileOpeningTags compileSelfClosingTags componentString componentClass findClassByComponent guessClassName formatClassName guessViewName partitionDataAndAttributes compileClosingTags compileSlots getAttributesFromAttributeString parseShortAttributeSyntax parseAttributeBag parseComponentTagClassStatements parseBindAttributes compileAttributeEchos escapeSingleQuotesOutsideOfPhpBlocks attributesToString stripQuotes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	laravel_framework_5eaf7907de9e6cf304ab3561a1eca069b6313b91_41_0	buggy: if (! is_null($result = $handler($this->retrieveUser($request, $channel), ...$parameters))) { context: { foreach ($this->channels as $pattern => $callback) { if (! $this->channelNameMatchesPattern($channel, $pattern)) { continue; } $parameters = $this->extractAuthParameters($pattern, $channel, $callback); $handler = $this->normalizeChannelHandlerToCallable($callback); if (! is_null($result = $handler($this->retrieveUser($request, $channel), ...$parameters))) { if (! is_null($result = $handler($this->retrieveUser($request, $channel), ...$parameters))) { return $this->validAuthenticationResponse($request, $result); } } throw new AccessDeniedHttpException; } protected function extractAuthParameters($pattern, $channel, $callback) {	type_info: channel:unknown pattern:unknown parameters:unknown handler:unknown result:unknown  global_variable:  function_name: resolveAuthenticatedUser resolveAuthenticatedUserUsing channel verifyUserCanAccessChannel extractAuthParameters extractParameters extractParametersFromClass extractChannelKeys resolveBinding resolveExplicitBindingIfPossible resolveImplicitBindingIfPossible isImplicitlyBindable formatChannels binder normalizeChannelHandlerToCallable retrieveUser retrieveChannelOptions channelNameMatchesPattern	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	laravel_framework_4e9a0fd659039fcfefbdf2d4759096e3be61af08_42_0	buggy:  context: public function assertUnprocessable() { return $this->assertStatus(422); } public function assertStatus($status)	type_info: status:unknown  global_variable:  function_name: __construct fromBaseResponse assertSuccessful assertOk assertCreated assertNoContent assertNotFound assertForbidden assertUnauthorized assertUnprocessable assertStatus statusMessageWithDetails assertRedirect assertRedirectContains assertRedirectToSignedRoute assertHeader assertHeaderMissing assertLocation assertDownload assertPlainCookie assertCookie assertCookieExpired assertCookieNotExpired assertCookieMissing getCookie assertContent assertSee assertSeeInOrder assertSeeText assertSeeTextInOrder assertDontSee assertDontSeeText assertJson assertJsonPath assertExactJson assertSimilarJson assertJsonFragment assertJsonMissing assertJsonMissingExact assertJsonMissingPath assertJsonStructure assertJsonCount assertJsonValidationErrors assertJsonValidationErrorFor assertJsonMissingValidationErrors decodeResponseJson json collect assertViewIs assertViewHas assertViewHasAll viewData assertViewMissing ensureResponseHasView responseHasView assertValid assertInvalid assertSessionHas assertSessionHasAll assertSessionHasInput assertSessionHasErrors assertSessionDoesntHaveErrors assertSessionHasNoErrors assertSessionHasErrorsIn assertSessionMissing session dd ddHeaders ddSession dump dumpHeaders dumpSession streamedContent withExceptions __get __isset offsetExists offsetGet offsetSet offsetUnset __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	laravel_framework_4f7ee1d15b29031704fd377682d69c44929dbb4a_43_0	buggy: $this->resource->$accessor && context: protected function whenPivotLoadedAs($accessor, $table, $value, $default = null) { if (func_num_args() === 3) { $default = new MissingValue; } return $this->when( $this->resource->$accessor && $this->resource->$accessor && ($this->resource->$accessor instanceof $table || $this->resource->$accessor->getTable() === $table), ...[$value, $default] ); }	type_info: default:array value:unknown  global_variable:  function_name: filter mergeData removeMissingValues when merge mergeWhen mergeUnless attributes whenNull whenNotNull whenAppended whenLoaded whenCounted whenPivotLoaded whenPivotLoadedAs transform	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	laravel_framework_7f5d349bd479850193e2e45765e2879fad158340_44_0	"buggy: <?php if (isset($attributes) && $constructor = (new ReflectionClass('.$class.'::class))->getConstructor()): ?> context: 'view' => $view, 'data' => '['.$this->attributesToString($data->all(), $escapeBound = false).']', ]; $class = AnonymousComponent::class; } else { $parameters = $data->all(); } return ""##BEGIN-COMPONENT-CLASS##@component('{$class}', '{$component}', ["".$this->attributesToString($parameters, $escapeBound = false).']) <?php if (isset($attributes) && $constructor = (new ReflectionClass('.$class.'::class))->getConstructor()): ?> <?php if (isset($attributes) && $constructor = (new ReflectionClass('.$class.'::class))->getConstructor()): ?> <?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?> <?php endif; ?> <?php $component->withAttributes(['.$this->attributesToString($attributes->all(), $escapeAttributes = $class !== DynamicComponent::class).']); ?>'; } public function componentClass(string $component) { $viewFactory = Container::getInstance()->make(Factory::class);"	type_info: attributes:unknown class:unknown data:unknown view:string parameters:array escapeBound:string escapeAttributes:unknown viewFactory:unknown constructor:unknown  global_variable:  function_name: __construct compile compileTags compileOpeningTags compileSelfClosingTags componentString componentClass findClassByComponent guessClassName formatClassName guessViewName partitionDataAndAttributes compileClosingTags compileSlots getAttributesFromAttributeString parseShortAttributeSyntax parseAttributeBag parseComponentTagClassStatements parseBindAttributes compileAttributeEchos escapeSingleQuotesOutsideOfPhpBlocks attributesToString stripQuotes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	laravel_framework_7f5d349bd479850193e2e45765e2879fad158340_44_1	"buggy: '<?php $component = '.$component.'::resolve('.($data ?: '[]').' + (isset($attributes) ? (array) $attributes->getIterator() : [])); ?>', context: public static function compileClassComponentOpening(string $component, string $alias, string $data, string $hash) { return implode(""\n"", [ '<?php if (isset($component)) { $__componentOriginal'.$hash.' = $component; } ?>', '<?php $component = '.$component.'::resolve('.($data ?: '[]').' + (isset($attributes) ? (array) $attributes->getIterator() : [])); ?>', '<?php $component = '.$component.'::resolve('.($data ?: '[]').' + (isset($attributes) ? (array) $attributes->getIterator() : [])); ?>', '<?php $component->withName('.$alias.'); ?>', '<?php if ($component->shouldRender()): ?>', '<?php $__env->startComponent($component->resolveView(), $component->data()); ?>', ]); }"	type_info: component:unknown hash:unknown attributes:unknown  global_variable:  function_name: compileComponent newComponentHash compileClassComponentOpening compileEndComponent compileEndComponentClass compileSlot compileEndSlot compileComponentFirst compileEndComponentFirst compileProps compileAware sanitizeComponentAttribute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	laravel_framework_5b5c595d52bca0e4eae724b6f1603b49e1b9091b_45_0	buggy:  context: <?php namespace Illuminate\Testing; use ArrayAccess; use Closure; use Illuminate\Contracts\View\View; use Illuminate\Cookie\CookieValuePrefix; use Illuminate\Database\Eloquent\Collection as EloquentCollection; use Illuminate\Database\Eloquent\Model; use Illuminate\Http\Request; use Illuminate\Support\Arr;	type_info:  global_variable:  function_name: __construct fromBaseResponse assertSuccessful assertOk assertCreated assertNoContent assertNotFound assertForbidden assertUnauthorized assertUnprocessable assertServerError assertStatus statusMessageWithDetails assertRedirect assertRedirectContains assertRedirectToSignedRoute assertHeader assertHeaderMissing assertLocation assertDownload assertPlainCookie assertCookie assertCookieExpired assertCookieNotExpired assertCookieMissing getCookie assertContent assertSee assertSeeInOrder assertSeeText assertSeeTextInOrder assertDontSee assertDontSeeText assertJson assertJsonPath assertExactJson assertSimilarJson assertJsonFragment assertJsonMissing assertJsonMissingExact assertJsonMissingPath assertJsonStructure assertJsonCount assertJsonValidationErrors assertJsonValidationErrorFor assertJsonMissingValidationErrors decodeResponseJson json collect assertViewIs assertViewHas assertViewHasAll viewData assertViewMissing ensureResponseHasView responseHasView assertValid assertInvalid assertSessionHas assertSessionHasAll assertSessionHasInput assertSessionHasErrors assertSessionDoesntHaveErrors assertSessionHasNoErrors assertSessionHasErrorsIn assertSessionMissing session dd ddHeaders ddSession dump dumpHeaders dumpSession streamedContent withExceptions __get __isset offsetExists offsetGet offsetSet offsetUnset __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	laravel_framework_5b5c595d52bca0e4eae724b6f1603b49e1b9091b_45_0	buggy:  context: use Illuminate\Cookie\CookieValuePrefix; use Illuminate\Database\Eloquent\Collection as EloquentCollection; use Illuminate\Database\Eloquent\Model; use Illuminate\Http\Request; use Illuminate\Support\Arr; use Illuminate\Support\Carbon; use Illuminate\Support\Collection; use Illuminate\Support\Str; use Illuminate\Support\Traits\Macroable; use Illuminate\Support\Traits\Tappable; use Illuminate\Testing\Assert as PHPUnit; use Illuminate\Testing\Constraints\SeeInOrder; use Illuminate\Testing\Fluent\AssertableJson; use LogicException; use Symfony\Component\HttpFoundation\Cookie; use Symfony\Component\HttpFoundation\StreamedResponse; class TestResponse implements ArrayAccess { use Tappable, Macroable {	type_info:  global_variable:  function_name: __construct fromBaseResponse assertSuccessful assertOk assertCreated assertNoContent assertNotFound assertForbidden assertUnauthorized assertUnprocessable assertServerError assertStatus statusMessageWithDetails assertRedirect assertRedirectContains assertRedirectToSignedRoute assertHeader assertHeaderMissing assertLocation assertDownload assertPlainCookie assertCookie assertCookieExpired assertCookieNotExpired assertCookieMissing getCookie assertContent assertSee assertSeeInOrder assertSeeText assertSeeTextInOrder assertDontSee assertDontSeeText assertJson assertJsonPath assertExactJson assertSimilarJson assertJsonFragment assertJsonMissing assertJsonMissingExact assertJsonMissingPath assertJsonStructure assertJsonCount assertJsonValidationErrors assertJsonValidationErrorFor assertJsonMissingValidationErrors decodeResponseJson json collect assertViewIs assertViewHas assertViewHasAll viewData assertViewMissing ensureResponseHasView responseHasView assertValid assertInvalid assertSessionHas assertSessionHasAll assertSessionHasInput assertSessionHasErrors assertSessionDoesntHaveErrors assertSessionHasNoErrors assertSessionHasErrorsIn assertSessionMissing session dd ddHeaders ddSession dump dumpHeaders dumpSession streamedContent withExceptions __get __isset offsetExists offsetGet offsetSet offsetUnset __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	laravel_framework_5b5c595d52bca0e4eae724b6f1603b49e1b9091b_45_0	buggy: $errors = $hasErrors ? $this->session()->get('errors')->all() : []; context: public function assertSessionHasNoErrors() { $hasErrors = $this->session()->has('errors'); $errors = $hasErrors ? $this->session()->get('errors')->all() : []; $errors = $hasErrors ? $this->session()->get('errors')->all() : []; PHPUnit::assertFalse( $hasErrors, 'Session has unexpected errors: '.PHP_EOL.PHP_EOL. json_encode($errors, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) ); return $this; }	type_info: errors:array hasErrors:unknown  global_variable:  function_name: __construct fromBaseResponse assertSuccessful assertOk assertCreated assertNoContent assertNotFound assertForbidden assertUnauthorized assertUnprocessable assertServerError assertStatus statusMessageWithDetails assertRedirect assertRedirectContains assertRedirectToSignedRoute assertHeader assertHeaderMissing assertLocation assertDownload assertPlainCookie assertCookie assertCookieExpired assertCookieNotExpired assertCookieMissing getCookie assertContent assertSee assertSeeInOrder assertSeeText assertSeeTextInOrder assertDontSee assertDontSeeText assertJson assertJsonPath assertExactJson assertSimilarJson assertJsonFragment assertJsonMissing assertJsonMissingExact assertJsonMissingPath assertJsonStructure assertJsonCount assertJsonValidationErrors assertJsonValidationErrorFor assertJsonMissingValidationErrors decodeResponseJson json collect assertViewIs assertViewHas assertViewHasAll viewData assertViewMissing ensureResponseHasView responseHasView assertValid assertInvalid assertSessionHas assertSessionHasAll assertSessionHasInput assertSessionHasErrors assertSessionDoesntHaveErrors assertSessionHasNoErrors assertSessionHasErrorsIn assertSessionMissing session dd ddHeaders ddSession dump dumpHeaders dumpSession streamedContent withExceptions __get __isset offsetExists offsetGet offsetSet offsetUnset __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	laravel_framework_5b5c595d52bca0e4eae724b6f1603b49e1b9091b_45_0	buggy: json_encode($errors, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) context: public function assertSessionHasNoErrors() { $hasErrors = $this->session()->has('errors'); $errors = $hasErrors ? $this->session()->get('errors')->all() : []; PHPUnit::assertFalse( $hasErrors, 'Session has unexpected errors: '.PHP_EOL.PHP_EOL. json_encode($errors, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) json_encode($errors, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE) ); return $this; }	type_info: errors:array hasErrors:unknown  global_variable:  function_name: __construct fromBaseResponse assertSuccessful assertOk assertCreated assertNoContent assertNotFound assertForbidden assertUnauthorized assertUnprocessable assertServerError assertStatus statusMessageWithDetails assertRedirect assertRedirectContains assertRedirectToSignedRoute assertHeader assertHeaderMissing assertLocation assertDownload assertPlainCookie assertCookie assertCookieExpired assertCookieNotExpired assertCookieMissing getCookie assertContent assertSee assertSeeInOrder assertSeeText assertSeeTextInOrder assertDontSee assertDontSeeText assertJson assertJsonPath assertExactJson assertSimilarJson assertJsonFragment assertJsonMissing assertJsonMissingExact assertJsonMissingPath assertJsonStructure assertJsonCount assertJsonValidationErrors assertJsonValidationErrorFor assertJsonMissingValidationErrors decodeResponseJson json collect assertViewIs assertViewHas assertViewHasAll viewData assertViewMissing ensureResponseHasView responseHasView assertValid assertInvalid assertSessionHas assertSessionHasAll assertSessionHasInput assertSessionHasErrors assertSessionDoesntHaveErrors assertSessionHasNoErrors assertSessionHasErrorsIn assertSessionMissing session dd ddHeaders ddSession dump dumpHeaders dumpSession streamedContent withExceptions __get __isset offsetExists offsetGet offsetSet offsetUnset __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	laravel_framework_dc044caaef52faf99ef0eda7a4551d10d1f9890e_46_0	buggy: $class = static::class; if (! isset(static::$mutatorCache[$class])) { static::cacheMutatedAttributes($class); context: public function getMutatedAttributes() { $class = static::class; if (! isset(static::$mutatorCache[$class])) { static::cacheMutatedAttributes($class); $class = static::class; if (! isset(static::$mutatorCache[$class])) { static::cacheMutatedAttributes($class); } return static::$mutatorCache[$class]; }	type_info: mutatorCache:array class:unknown encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	laravel_framework_dc044caaef52faf99ef0eda7a4551d10d1f9890e_46_0	buggy: return static::$mutatorCache[$class]; context: public function getMutatedAttributes() { $class = static::class; if (! isset(static::$mutatorCache[$class])) { static::cacheMutatedAttributes($class); } return static::$mutatorCache[$class]; return static::$mutatorCache[$class]; }	type_info: mutatorCache:array class:unknown encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	laravel_framework_dc044caaef52faf99ef0eda7a4551d10d1f9890e_46_0	buggy: * @param string $class context: { $class = static::class; if (! isset(static::$mutatorCache[$class])) { static::cacheMutatedAttributes($class); } return static::$mutatorCache[$class]; } * @param string $class public static function cacheMutatedAttributes($class) { static::$getAttributeMutatorCache[$class] = collect($attributeMutatorMethods = static::getAttributeMarkedMutatorMethods($class)) ->mapWithKeys(function ($match) { return [lcfirst(static::$snakeAttributes ? Str::snake($match) : $match) => true]; })->all(); static::$mutatorCache[$class] = collect(static::getMutatorMethods($class)) ->merge($attributeMutatorMethods)	type_info: snakeAttributes:boolean mutatorCache:array getAttributeMutatorCache:array class:unknown encrypter:unknown attributeMutatorMethods:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	laravel_framework_dc044caaef52faf99ef0eda7a4551d10d1f9890e_46_0	buggy: public static function cacheMutatedAttributes($class) context: { $class = static::class; if (! isset(static::$mutatorCache[$class])) { static::cacheMutatedAttributes($class); } return static::$mutatorCache[$class]; } public static function cacheMutatedAttributes($class) public static function cacheMutatedAttributes($class) { static::$getAttributeMutatorCache[$class] = collect($attributeMutatorMethods = static::getAttributeMarkedMutatorMethods($class)) ->mapWithKeys(function ($match) { return [lcfirst(static::$snakeAttributes ? Str::snake($match) : $match) => true]; })->all(); static::$mutatorCache[$class] = collect(static::getMutatorMethods($class)) ->merge($attributeMutatorMethods)	type_info: snakeAttributes:boolean mutatorCache:array getAttributeMutatorCache:array class:unknown encrypter:unknown attributeMutatorMethods:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	laravel_framework_dc044caaef52faf99ef0eda7a4551d10d1f9890e_46_0	buggy:  context: public static function cacheMutatedAttributes($class) { static::$getAttributeMutatorCache[$class] = collect($attributeMutatorMethods = static::getAttributeMarkedMutatorMethods($class)) ->mapWithKeys(function ($match) { return [lcfirst(static::$snakeAttributes ? Str::snake($match) : $match) => true]; })->all(); static::$mutatorCache[$class] = collect(static::getMutatorMethods($class)) ->merge($attributeMutatorMethods) ->map(function ($match) { return lcfirst(static::$snakeAttributes ? Str::snake($match) : $match);	type_info: snakeAttributes:boolean mutatorCache:array getAttributeMutatorCache:array class:unknown encrypter:unknown attributeMutatorMethods:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	laravel_framework_dc044caaef52faf99ef0eda7a4551d10d1f9890e_46_0	buggy: collect($attributeMutatorMethods = static::getAttributeMarkedMutatorMethods($class)) context: public static function cacheMutatedAttributes($class) { static::$getAttributeMutatorCache[$class] = collect($attributeMutatorMethods = static::getAttributeMarkedMutatorMethods($class)) collect($attributeMutatorMethods = static::getAttributeMarkedMutatorMethods($class)) ->mapWithKeys(function ($match) { return [lcfirst(static::$snakeAttributes ? Str::snake($match) : $match) => true]; })->all(); static::$mutatorCache[$class] = collect(static::getMutatorMethods($class)) ->merge($attributeMutatorMethods) ->map(function ($match) { return lcfirst(static::$snakeAttributes ? Str::snake($match) : $match); })->all(); }	type_info: snakeAttributes:boolean mutatorCache:array getAttributeMutatorCache:array class:unknown encrypter:unknown attributeMutatorMethods:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	laravel_framework_0bfbf8ed9070df689f446de1ab7314f6769b86e7_47_0	buggy:  context: protected $beforeCallbacks = []; protected $afterCallbacks = []; public $description; public $mutex; public $exitCode; public function __construct(EventMutex $mutex, $command, $timezone = null) { $this->mutex = $mutex; $this->command = $command; $this->timezone = $timezone; $this->output = $this->getDefaultOutput(); } public function getDefaultOutput()	type_info: beforeCallbacks:array afterCallbacks:array timezone:unknown exitCode:unknown  global_variable: timezone: unknown exitCode: unknown function_name: __construct getDefaultOutput run shouldSkipDueToOverlapping start execute finish callBeforeCallbacks callAfterCallbacks buildCommand isDue runsInMaintenanceMode expressionPasses runsInEnvironment filtersPass storeOutput sendOutputTo appendOutputTo emailOutputTo emailWrittenOutputTo emailOutputOnFailure ensureOutputIsBeingCaptured emailOutput getEmailSubject pingBefore pingBeforeIf thenPing thenPingIf pingOnSuccess pingOnFailure pingCallback runInBackground user environments evenInMaintenanceMode withoutOverlapping onOneServer when skip before after then thenWithOutput onSuccess onSuccessWithOutput onFailure onFailureWithOutput withOutputCallback name description getSummaryForDisplay nextRunDate getExpression preventOverlapsUsing mutexName removeMutex	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	laravel_framework_0bfbf8ed9070df689f446de1ab7314f6769b86e7_47_0	buggy:  context: public function mutexName() { return 'framework'.DIRECTORY_SEPARATOR.'schedule-'.sha1($this->expression.$this->command); }	type_info: timezone:unknown exitCode:unknown  global_variable: timezone: unknown exitCode: unknown function_name: __construct getDefaultOutput run shouldSkipDueToOverlapping start execute finish callBeforeCallbacks callAfterCallbacks buildCommand isDue runsInMaintenanceMode expressionPasses runsInEnvironment filtersPass storeOutput sendOutputTo appendOutputTo emailOutputTo emailWrittenOutputTo emailOutputOnFailure ensureOutputIsBeingCaptured emailOutput getEmailSubject pingBefore pingBeforeIf thenPing thenPingIf pingOnSuccess pingOnFailure pingCallback runInBackground user environments evenInMaintenanceMode withoutOverlapping onOneServer when skip before after then thenWithOutput onSuccess onSuccessWithOutput onFailure onFailureWithOutput withOutputCallback name description getSummaryForDisplay nextRunDate getExpression preventOverlapsUsing mutexName removeMutex	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	laravel_framework_0bfbf8ed9070df689f446de1ab7314f6769b86e7_47_0	buggy:  context: public function mutexName() { return 'framework'.DIRECTORY_SEPARATOR.'schedule-'.sha1($this->expression.$this->command); } protected function removeMutex()	type_info: timezone:unknown exitCode:unknown  global_variable: timezone: unknown exitCode: unknown function_name: __construct getDefaultOutput run shouldSkipDueToOverlapping start execute finish callBeforeCallbacks callAfterCallbacks buildCommand isDue runsInMaintenanceMode expressionPasses runsInEnvironment filtersPass storeOutput sendOutputTo appendOutputTo emailOutputTo emailWrittenOutputTo emailOutputOnFailure ensureOutputIsBeingCaptured emailOutput getEmailSubject pingBefore pingBeforeIf thenPing thenPingIf pingOnSuccess pingOnFailure pingCallback runInBackground user environments evenInMaintenanceMode withoutOverlapping onOneServer when skip before after then thenWithOutput onSuccess onSuccessWithOutput onFailure onFailureWithOutput withOutputCallback name description getSummaryForDisplay nextRunDate getExpression preventOverlapsUsing mutexName removeMutex	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	laravel_framework_b6b4a19673d65401f99bee13b0db64b6c6492866_48_0	buggy: if (is_null($value) || ! function_exists('enum_exists') || ! enum_exists($this->type) || ! method_exists($this->type, 'tryFrom')) { return false; } context: public function passes($attribute, $value) { if (is_null($value) || ! function_exists('enum_exists') || ! enum_exists($this->type) || ! method_exists($this->type, 'tryFrom')) { return false; } if (is_null($value) || ! function_exists('enum_exists') || ! enum_exists($this->type) || ! method_exists($this->type, 'tryFrom')) { return false; } if ($value instanceof $this->type) { return true; } try { return ! is_null($this->type::tryFrom($value)); } catch (TypeError $e) { return false; } }	type_info:  global_variable:  function_name: __construct passes message	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	laravel_framework_b6b4a19673d65401f99bee13b0db64b6c6492866_48_0	buggy:  context: public function passes($attribute, $value) { if (is_null($value) || ! function_exists('enum_exists') || ! enum_exists($this->type) || ! method_exists($this->type, 'tryFrom')) { return false; } if ($value instanceof $this->type) { return true; } try { return ! is_null($this->type::tryFrom($value)); } catch (TypeError $e) { return false; } } public function message() { $message = trans('validation.enum');	type_info: message:unknown  global_variable:  function_name: __construct passes message	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	laravel_framework_99aede05b96acda561417511f8350188d45994f5_49_0	buggy:  context: protected function store(Collection $results) { $results->each(function ($model) { if (! isset($this->connection)) { $model->setConnection($model->newQueryWithoutScopes()->getConnection()->getName()); } $model->save(); $this->createChildren($model); }); } protected function createChildren(Model $model) { Model::unguarded(function () use ($model) { $this->has->each(function ($has) use ($model) { $has->recycle($this->recycle)->createFor($model); });	type_info: count:unknown results:unknown model:unknown modelNameResolver:unknown factoryNameResolver:unknown  global_variable: count: unknown model: unknown modelNameResolver: unknown factoryNameResolver: unknown function_name: __construct definition new times configure raw createOne createOneQuietly createMany createManyQuietly create createQuietly lazy store createChildren makeOne make makeInstance getExpandedAttributes getRawAttributes parentResolvers expandAttributes state set sequence forEachSequence crossJoinSequence has guessRelationship hasAttached for recycle getRandomRecycledModel afterMaking afterCreating callAfterMaking callAfterCreating count connection newInstance newModel modelName guessModelNamesUsing useNamespace factoryForModel guessFactoryNamesUsing withFaker resolveFactoryName appNamespace __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	laravel_framework_10a51e60c301beaa6df7fff6a67ff331fdb4bf6c_50_0	buggy:  context: use Closure; use Faker\Generator; use Illuminate\Container\Container; use Illuminate\Contracts\Foundation\Application; use Illuminate\Database\Eloquent\Collection as EloquentCollection; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Carbon; use Illuminate\Support\Collection; use Illuminate\Support\Str; use Illuminate\Support\Traits\Conditionable; use Illuminate\Support\Traits\ForwardsCalls; use Illuminate\Support\Traits\Macroable; use Throwable; abstract class Factory { use Conditionable, ForwardsCalls, Macroable { __call as macroCall;	type_info: count:unknown model:unknown modelNameResolver:unknown factoryNameResolver:unknown  global_variable: count: unknown model: unknown modelNameResolver: unknown factoryNameResolver: unknown function_name: __construct definition new times configure raw createOne createOneQuietly createMany createManyQuietly create createQuietly lazy store createChildren makeOne make makeInstance getExpandedAttributes getRawAttributes parentResolvers expandAttributes state set sequence forEachSequence crossJoinSequence has guessRelationship hasAttached for recycle getRandomRecycledModel afterMaking afterCreating callAfterMaking callAfterCreating count connection newInstance newModel modelName guessModelNamesUsing useNamespace factoryForModel guessFactoryNamesUsing withFaker resolveFactoryName appNamespace __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	laravel_framework_10a51e60c301beaa6df7fff6a67ff331fdb4bf6c_50_0	buggy: if ($items->isEmpty()) { context: protected function store(Collection $results) { $results->each(function ($model) { if (! isset($this->connection)) { $model->setConnection($model->newQueryWithoutScopes()->getConnection()->getName()); } $model->save(); foreach ($model->getRelations() as $name => $items) { if ($items->isEmpty()) { if ($items->isEmpty()) { $model->unsetRelation($name); } } $this->createChildren($model); }); } protected function createChildren(Model $model) {	type_info: count:unknown results:unknown name:unknown model:unknown modelNameResolver:unknown factoryNameResolver:unknown  global_variable: count: unknown model: unknown modelNameResolver: unknown factoryNameResolver: unknown function_name: __construct definition new times configure raw createOne createOneQuietly createMany createManyQuietly create createQuietly lazy store createChildren makeOne make makeInstance getExpandedAttributes getRawAttributes parentResolvers expandAttributes state set sequence forEachSequence crossJoinSequence has guessRelationship hasAttached for recycle getRandomRecycledModel afterMaking afterCreating callAfterMaking callAfterCreating count connection newInstance newModel modelName guessModelNamesUsing useNamespace factoryForModel guessFactoryNamesUsing withFaker resolveFactoryName appNamespace __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	laravel_framework_223c4bc50d291d6deadcb62bee1bf3808bc9b6a2_51_0	buggy: (static::$relationResolvers[get_class($this)][$key] ?? null); context: public function isRelation($key) { if ($this->hasAttributeMutator($key)) { return false; } return method_exists($this, $key) || (static::$relationResolvers[get_class($this)][$key] ?? null); (static::$relationResolvers[get_class($this)][$key] ?? null); }	type_info: key:unknown encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	laravel_framework_223c4bc50d291d6deadcb62bee1bf3808bc9b6a2_51_1	buggy:  context: protected $relations = []; protected $touches = []; public static $manyMethods = [ 'belongsToMany', 'morphToMany', 'morphedByMany', ]; protected static $relationResolvers = []; public static function resolveRelationUsing($name, Closure $callback) { static::$relationResolvers = array_replace_recursive( static::$relationResolvers, [static::class => [$name => $callback]] ); } public function hasOne($related, $foreignKey = null, $localKey = null) {	type_info: relations:array touches:array manyMethods:array relationResolvers:array foreignKey:unknown localKey:unknown name:unknown  global_variable:  function_name: resolveRelationUsing hasOne newHasOne hasOneThrough newHasOneThrough morphOne newMorphOne belongsTo newBelongsTo morphTo morphEagerTo morphInstanceTo newMorphTo getActualClassNameForMorph guessBelongsToRelation hasMany newHasMany hasManyThrough newHasManyThrough morphMany newMorphMany belongsToMany newBelongsToMany morphToMany newMorphToMany morphedByMany guessBelongsToManyRelation joiningTable joiningTableSegment touches touchOwners getMorphs getMorphClass newRelatedInstance newRelatedThroughInstance getRelations getRelation relationLoaded setRelation unsetRelation setRelations withoutRelations unsetRelations getTouchedRelations setTouchedRelations	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	laravel_framework_223c4bc50d291d6deadcb62bee1bf3808bc9b6a2_51_2	buggy: if ($resolver = (static::$relationResolvers[get_class($this)][$method] ?? null)) { context: public function __call($method, $parameters) { if (in_array($method, ['increment', 'decrement'])) { return $this->$method(...$parameters); } if ($resolver = (static::$relationResolvers[get_class($this)][$method] ?? null)) { if ($resolver = (static::$relationResolvers[get_class($this)][$method] ?? null)) { return $resolver($this); } return $this->forwardCallTo($this->newQuery(), $method, $parameters); }	type_info: method:unknown lazyLoadingViolationCallback:unknown discardedAttributeViolationCallback:unknown missingAttributeViolationCallback:unknown connection:unknown parameters:unknown resolver:unknown  global_variable: lazyLoadingViolationCallback: unknown discardedAttributeViolationCallback: unknown missingAttributeViolationCallback: unknown connection: unknown resolver: unknown function_name: __construct bootIfNotBooted booting boot bootTraits initializeTraits booted clearBootedModels withoutTouching withoutTouchingOn isIgnoringTouch shouldBeStrict preventLazyLoading handleLazyLoadingViolationUsing preventSilentlyDiscardingAttributes handleDiscardedAttributeViolationUsing preventAccessingMissingAttributes handleMissingAttributeViolationUsing withoutBroadcasting fill forceFill qualifyColumn qualifyColumns newInstance newFromBuilder on onWriteConnection all with load loadMorph loadMissing loadAggregate loadCount loadMax loadMin loadSum loadAvg loadExists loadMorphAggregate loadMorphCount loadMorphMax loadMorphMin loadMorphSum loadMorphAvg increment decrement incrementOrDecrement update updateOrFail updateQuietly incrementQuietly decrementQuietly push saveQuietly save saveOrFail finishSave performUpdate setKeysForSelectQuery getKeyForSelectQuery setKeysForSaveQuery getKeyForSaveQuery performInsert insertAndSetId destroy delete deleteQuietly deleteOrFail forceDelete performDeleteOnModel query newQuery newModelQuery newQueryWithoutRelationships registerGlobalScopes newQueryWithoutScopes newQueryWithoutScope newQueryForRestoration newEloquentBuilder newBaseQueryBuilder newCollection newPivot hasNamedScope callNamedScope toArray toJson jsonSerialize fresh refresh replicate replicateQuietly is isNot getConnection getConnectionName setConnection resolveConnection getConnectionResolver setConnectionResolver unsetConnectionResolver getTable setTable getKeyName setKeyName getQualifiedKeyName getKeyType setKeyType getIncrementing setIncrementing getKey getQueueableId getQueueableRelations getQueueableConnection getRouteKey getRouteKeyName resolveRouteBinding resolveSoftDeletableRouteBinding resolveChildRouteBinding resolveSoftDeletableChildRouteBinding resolveChildRouteBindingQuery childRouteBindingRelationshipName resolveRouteBindingQuery getForeignKey getPerPage setPerPage preventsLazyLoading preventsSilentlyDiscardingAttributes preventsAccessingMissingAttributes broadcastChannelRoute broadcastChannel __get __set offsetExists offsetGet offsetSet offsetUnset __isset __unset __call __callStatic __toString escapeWhenCastingToString __sleep __wakeup	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	laravel_framework_38c2126003fd6c797139378b25d89a9b0c5ffbca_52_0	buggy: if (($position = stripos($column, ' as ')) !== false) { $as = substr($column, $position, 4); context: protected function getOriginalColumnNameForCursorPagination($builder, string $parameter) { $columns = $builder instanceof Builder ? $builder->getQuery()->columns : $builder->columns; if (! is_null($columns)) { foreach ($columns as $column) { if (($position = stripos($column, ' as ')) !== false) { $as = substr($column, $position, 4); if (($position = stripos($column, ' as ')) !== false) { $as = substr($column, $position, 4); [$original, $alias] = explode($as, $column); if ($parameter === $alias || $builder->getGrammar()->wrap($parameter) === $alias) { return $original; } } } }	type_info: column:unknown columns:unknown position:unknown parameter:unknown  global_variable:  function_name: chunk chunkMap each chunkById eachById lazy lazyById lazyByIdDesc orderedLazyById first sole paginateUsingCursor getOriginalColumnNameForCursorPagination paginator simplePaginator cursorPaginator tap	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	laravel_framework_38c2126003fd6c797139378b25d89a9b0c5ffbca_52_0	buggy: [$original, $alias] = explode($as, $column); context: protected function getOriginalColumnNameForCursorPagination($builder, string $parameter) { $columns = $builder instanceof Builder ? $builder->getQuery()->columns : $builder->columns; if (! is_null($columns)) { foreach ($columns as $column) { if (($position = stripos($column, ' as ')) !== false) { $as = substr($column, $position, 4); [$original, $alias] = explode($as, $column); [$original, $alias] = explode($as, $column); if ($parameter === $alias || $builder->getGrammar()->wrap($parameter) === $alias) { return $original; } } } } return $parameter; }	type_info: column:unknown columns:unknown position:unknown parameter:unknown  global_variable:  function_name: chunk chunkMap each chunkById eachById lazy lazyById lazyByIdDesc orderedLazyById first sole paginateUsingCursor getOriginalColumnNameForCursorPagination paginator simplePaginator cursorPaginator tap	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	laravel_framework_28bd78682c104d8e63e1ef0d62c5e8fe7c3829e7_53_0	buggy: return is_array($payload) && isset($payload['iv'], $payload['value'], $payload['mac']) && strlen(base64_decode($payload['iv'], true)) === openssl_cipher_iv_length(strtolower($this->cipher)); context: protected function validPayload($payload) { return is_array($payload) && isset($payload['iv'], $payload['value'], $payload['mac']) && strlen(base64_decode($payload['iv'], true)) === openssl_cipher_iv_length(strtolower($this->cipher)); return is_array($payload) && isset($payload['iv'], $payload['value'], $payload['mac']) && strlen(base64_decode($payload['iv'], true)) === openssl_cipher_iv_length(strtolower($this->cipher)); }	type_info: cipher:unknown payload:unknown  global_variable: cipher: unknown function_name: __construct supported generateKey encrypt encryptString decrypt decryptString hash getJsonPayload validPayload validMac ensureTagIsValid getKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	laravel_framework_ab5cddbc7dd60ba41780cc54ce9b083192d7251c_54_0	buggy: * @param (callable(string, string, ?array, ?array): array)|array $attributes context: { if (! is_callable($attributes)) { $attributes = fn () => $attributes; } $this->styleTagAttributesResolvers[] = $attributes; return $this; } * @param (callable(string, string, ?array, ?array): array)|array $attributes public function usePreloadTagAttributes($attributes) { if (! is_callable($attributes)) { $attributes = fn () => $attributes; } $this->preloadTagAttributesResolvers[] = $attributes; return $this; }	type_info: nonce:unknown attributes:array  global_variable: nonce: unknown function_name: preloadedAssets cspNonce useCspNonce useIntegrityKey withEntryPoints useManifestFilename hotFile useHotFile useBuildDirectory useScriptTagAttributes useStyleTagAttributes usePreloadTagAttributes __invoke makeTagForChunk makePreloadTagForChunk resolveScriptTagAttributes resolveStylesheetTagAttributes resolvePreloadTagAttributes makeTag makeScriptTag makeStylesheetTag makeScriptTagWithAttributes makeStylesheetTagWithAttributes isCssPath parseAttributes reactRefresh hotAsset asset assetPath manifest manifestPath manifestHash chunk isRunningHot toHtml	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	laravel_framework_ab5cddbc7dd60ba41780cc54ce9b083192d7251c_54_0	buggy: * @param ?array $chunk * @param ?array $manifest context: } [$stylesheets, $scripts] = $tags->partition(fn ($tag) => str_starts_with($tag, '<link')); $preloads = $preloads->sortByDesc(fn ($args) => $this->isCssPath($args[1])) ->map(fn ($args) => $this->makePreloadTagForChunk(...$args)); return new HtmlString($preloads->join('').$stylesheets->join('').$scripts->join('')); } * @param ?array $chunk * @param ?array $manifest protected function makeTagForChunk($src, $url, $chunk, $manifest) { if ( $this->nonce === null && $this->integrityKey !== false && ! array_key_exists($this->integrityKey, $chunk ?? []) && $this->scriptTagAttributesResolvers === [] && $this->styleTagAttributesResolvers === []) { return $this->makeTag($url); }	type_info: nonce:unknown manifest:unknown tags:unknown preloads:unknown chunk:unknown  global_variable: nonce: unknown function_name: preloadedAssets cspNonce useCspNonce useIntegrityKey withEntryPoints useManifestFilename hotFile useHotFile useBuildDirectory useScriptTagAttributes useStyleTagAttributes usePreloadTagAttributes __invoke makeTagForChunk makePreloadTagForChunk resolveScriptTagAttributes resolveStylesheetTagAttributes resolvePreloadTagAttributes makeTag makeScriptTag makeStylesheetTag makeScriptTagWithAttributes makeStylesheetTagWithAttributes isCssPath parseAttributes reactRefresh hotAsset asset assetPath manifest manifestPath manifestHash chunk isRunningHot toHtml	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	laravel_framework_ab5cddbc7dd60ba41780cc54ce9b083192d7251c_54_0	buggy: * @return string|null context: $this->resolveStylesheetTagAttributes($src, $url, $chunk, $manifest) ); } return $this->makeScriptTagWithAttributes( $url, $this->resolveScriptTagAttributes($src, $url, $chunk, $manifest) ); } * @return string|null protected function makePreloadTagForChunk($src, $url, $chunk, $manifest) { $attributes = $this->resolvePreloadTagAttributes($src, $url, $chunk, $manifest); $this->preloadedAssets[$url] = $this->parseAttributes( Collection::make($attributes)->forget('href')->all() ); return '<link '.implode(' ', $this->parseAttributes($attributes)).' />'; }	type_info: nonce:unknown attributes:array manifest:unknown chunk:unknown  global_variable: nonce: unknown function_name: preloadedAssets cspNonce useCspNonce useIntegrityKey withEntryPoints useManifestFilename hotFile useHotFile useBuildDirectory useScriptTagAttributes useStyleTagAttributes usePreloadTagAttributes __invoke makeTagForChunk makePreloadTagForChunk resolveScriptTagAttributes resolveStylesheetTagAttributes resolvePreloadTagAttributes makeTag makeScriptTag makeStylesheetTag makeScriptTagWithAttributes makeStylesheetTagWithAttributes isCssPath parseAttributes reactRefresh hotAsset asset assetPath manifest manifestPath manifestHash chunk isRunningHot toHtml	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	laravel_framework_ab5cddbc7dd60ba41780cc54ce9b083192d7251c_54_0	buggy:  context: protected function makePreloadTagForChunk($src, $url, $chunk, $manifest) { $attributes = $this->resolvePreloadTagAttributes($src, $url, $chunk, $manifest); $this->preloadedAssets[$url] = $this->parseAttributes( Collection::make($attributes)->forget('href')->all() ); return '<link '.implode(' ', $this->parseAttributes($attributes)).' />'; }	type_info: nonce:unknown attributes:array manifest:unknown chunk:unknown  global_variable: nonce: unknown function_name: preloadedAssets cspNonce useCspNonce useIntegrityKey withEntryPoints useManifestFilename hotFile useHotFile useBuildDirectory useScriptTagAttributes useStyleTagAttributes usePreloadTagAttributes __invoke makeTagForChunk makePreloadTagForChunk resolveScriptTagAttributes resolveStylesheetTagAttributes resolvePreloadTagAttributes makeTag makeScriptTag makeStylesheetTag makeScriptTagWithAttributes makeStylesheetTagWithAttributes isCssPath parseAttributes reactRefresh hotAsset asset assetPath manifest manifestPath manifestHash chunk isRunningHot toHtml	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	laravel_framework_ab5cddbc7dd60ba41780cc54ce9b083192d7251c_54_0	buggy: * @param ?array $chunk * @param ?array $manifest context: { $attributes = $this->resolvePreloadTagAttributes($src, $url, $chunk, $manifest); $this->preloadedAssets[$url] = $this->parseAttributes( Collection::make($attributes)->forget('href')->all() ); return '<link '.implode(' ', $this->parseAttributes($attributes)).' />'; } * @param ?array $chunk * @param ?array $manifest protected function resolveScriptTagAttributes($src, $url, $chunk, $manifest) { $attributes = $this->integrityKey !== false ? ['integrity' => $chunk[$this->integrityKey] ?? false] : []; foreach ($this->scriptTagAttributesResolvers as $resolver) { $attributes = array_merge($attributes, $resolver($src, $url, $chunk, $manifest)); }	type_info: nonce:unknown attributes:array manifest:unknown chunk:unknown  global_variable: nonce: unknown function_name: preloadedAssets cspNonce useCspNonce useIntegrityKey withEntryPoints useManifestFilename hotFile useHotFile useBuildDirectory useScriptTagAttributes useStyleTagAttributes usePreloadTagAttributes __invoke makeTagForChunk makePreloadTagForChunk resolveScriptTagAttributes resolveStylesheetTagAttributes resolvePreloadTagAttributes makeTag makeScriptTag makeStylesheetTag makeScriptTagWithAttributes makeStylesheetTagWithAttributes isCssPath parseAttributes reactRefresh hotAsset asset assetPath manifest manifestPath manifestHash chunk isRunningHot toHtml	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	laravel_framework_ab5cddbc7dd60ba41780cc54ce9b083192d7251c_54_0	buggy: * @param ?array $chunk * @param ?array $manifest context: ? ['integrity' => $chunk[$this->integrityKey] ?? false] : []; foreach ($this->scriptTagAttributesResolvers as $resolver) { $attributes = array_merge($attributes, $resolver($src, $url, $chunk, $manifest)); } return $attributes; } * @param ?array $chunk * @param ?array $manifest protected function resolveStylesheetTagAttributes($src, $url, $chunk, $manifest) { $attributes = $this->integrityKey !== false ? ['integrity' => $chunk[$this->integrityKey] ?? false] : []; foreach ($this->styleTagAttributesResolvers as $resolver) { $attributes = array_merge($attributes, $resolver($src, $url, $chunk, $manifest)); }	type_info: nonce:unknown attributes:array manifest:unknown chunk:unknown  global_variable: nonce: unknown function_name: preloadedAssets cspNonce useCspNonce useIntegrityKey withEntryPoints useManifestFilename hotFile useHotFile useBuildDirectory useScriptTagAttributes useStyleTagAttributes usePreloadTagAttributes __invoke makeTagForChunk makePreloadTagForChunk resolveScriptTagAttributes resolveStylesheetTagAttributes resolvePreloadTagAttributes makeTag makeScriptTag makeStylesheetTag makeScriptTagWithAttributes makeStylesheetTagWithAttributes isCssPath parseAttributes reactRefresh hotAsset asset assetPath manifest manifestPath manifestHash chunk isRunningHot toHtml	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	laravel_framework_ab5cddbc7dd60ba41780cc54ce9b083192d7251c_54_0	buggy: * @return array context: ? ['integrity' => $chunk[$this->integrityKey] ?? false] : []; foreach ($this->styleTagAttributesResolvers as $resolver) { $attributes = array_merge($attributes, $resolver($src, $url, $chunk, $manifest)); } return $attributes; } * @return array protected function resolvePreloadTagAttributes($src, $url, $chunk, $manifest) { $attributes = $this->isCssPath($url) ? [ 'rel' => 'preload', 'as' => 'style', 'href' => $url, 'nonce' => $this->nonce ?? false, 'crossorigin' => $this->resolveStylesheetTagAttributes($src, $url, $chunk, $manifest)['crossorigin'] ?? false, ] : [ 'rel' => 'modulepreload',	type_info: nonce:unknown attributes:array manifest:unknown chunk:unknown  global_variable: nonce: unknown function_name: preloadedAssets cspNonce useCspNonce useIntegrityKey withEntryPoints useManifestFilename hotFile useHotFile useBuildDirectory useScriptTagAttributes useStyleTagAttributes usePreloadTagAttributes __invoke makeTagForChunk makePreloadTagForChunk resolveScriptTagAttributes resolveStylesheetTagAttributes resolvePreloadTagAttributes makeTag makeScriptTag makeStylesheetTag makeScriptTagWithAttributes makeStylesheetTagWithAttributes isCssPath parseAttributes reactRefresh hotAsset asset assetPath manifest manifestPath manifestHash chunk isRunningHot toHtml	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	laravel_framework_ab5cddbc7dd60ba41780cc54ce9b083192d7251c_54_0	buggy: $attributes = array_merge($attributes, $resolver($src, $url, $chunk, $manifest)); context: 'href' => $url, 'nonce' => $this->nonce ?? false, 'crossorigin' => $this->resolveScriptTagAttributes($src, $url, $chunk, $manifest)['crossorigin'] ?? false, ]; $attributes = $this->integrityKey !== false ? array_merge($attributes, ['integrity' => $chunk[$this->integrityKey] ?? false]) : $attributes; foreach ($this->preloadTagAttributesResolvers as $resolver) { $attributes = array_merge($attributes, $resolver($src, $url, $chunk, $manifest)); $attributes = array_merge($attributes, $resolver($src, $url, $chunk, $manifest)); } return $attributes; } protected function makeTag($url) { if ($this->isCssPath($url)) { return $this->makeStylesheetTag($url);	type_info: nonce:unknown attributes:array manifest:unknown chunk:unknown  global_variable: nonce: unknown function_name: preloadedAssets cspNonce useCspNonce useIntegrityKey withEntryPoints useManifestFilename hotFile useHotFile useBuildDirectory useScriptTagAttributes useStyleTagAttributes usePreloadTagAttributes __invoke makeTagForChunk makePreloadTagForChunk resolveScriptTagAttributes resolveStylesheetTagAttributes resolvePreloadTagAttributes makeTag makeScriptTag makeStylesheetTag makeScriptTagWithAttributes makeStylesheetTagWithAttributes isCssPath parseAttributes reactRefresh hotAsset asset assetPath manifest manifestPath manifestHash chunk isRunningHot toHtml	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	laravel_framework_ab5cddbc7dd60ba41780cc54ce9b083192d7251c_54_1	buggy: * @method static \Illuminate\Foundation\Vite usePreloadTagAttributes((callable(string, string, ?array, ?array): array)|array $attributes) context: <?php namespace Illuminate\Support\Facades; * @method static \Illuminate\Foundation\Vite usePreloadTagAttributes((callable(string, string, ?array, ?array): array)|array $attributes) class Vite extends Facade { protected static function getFacadeAccessor() {	type_info:  global_variable:  function_name: getFacadeAccessor	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	laravel_framework_2427cece1d56e252e9c2673fd6f8263b2b6371e3_55_0	"buggy: return preg_replace_callback('/(?<!@)@php(.*?)@endphp/s', function ($matches) { context: protected function storePhpBlocks($value) { return preg_replace_callback('/(?<!@)@php(.*?)@endphp/s', function ($matches) { return preg_replace_callback('/(?<!@)@php(.*?)@endphp/s', function ($matches) { return $this->storeRawBlock(""<?php{$matches[1]}?>""); }, $value); } protected function storeRawBlock($value) { return $this->getRawPlaceholder( array_push($this->rawBlocks, $value) - 1 ); }"	type_info: path:unknown value:unknown  global_variable: path: unknown function_name: compile appendFilePath getOpenAndClosingPhpTokens getPath setPath compileString render __construct render renderComponent storeUncompiledBlocks storeVerbatimBlocks storePhpBlocks storeRawBlock compileComponentTags restoreRawContent getRawPlaceholder addFooters parseToken compileExtensions compileStatements compileStatement callCustomDirective stripParentheses extend getExtensions if check component components getClassComponentAliases anonymousComponentNamespace componentNamespace getAnonymousComponentNamespaces getClassComponentNamespaces aliasComponent include aliasInclude directive getCustomDirectives precompiler setEchoFormat withDoubleEncoding withoutDoubleEncoding withoutComponentTags	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	laravel_framework_1ff0379d203ac836c3eeae567cc07b99c352b1e7_56_0	buggy:  context: public function getClassComponentAliases() { return $this->classComponentAliases; } public function anonymousComponentPath(string $path)	type_info: path:unknown  global_variable: path: unknown function_name: compile appendFilePath getOpenAndClosingPhpTokens getPath setPath compileString render __construct render renderComponent storeUncompiledBlocks storeVerbatimBlocks storePhpBlocks storeRawBlock compileComponentTags restoreRawContent getRawPlaceholder addFooters parseToken compileExtensions compileStatements compileStatement callCustomDirective stripParentheses extend getExtensions if check component components getClassComponentAliases anonymousComponentPath anonymousComponentNamespace componentNamespace getAnonymousComponentPaths getAnonymousComponentNamespaces getClassComponentNamespaces aliasComponent include aliasInclude directive getCustomDirectives precompiler setEchoFormat withDoubleEncoding withoutDoubleEncoding withoutComponentTags	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	laravel_framework_1ff0379d203ac836c3eeae567cc07b99c352b1e7_56_0	buggy: public function anonymousComponentPath(string $path) context: public function getClassComponentAliases() { return $this->classComponentAliases; } public function anonymousComponentPath(string $path) public function anonymousComponentPath(string $path)	type_info: path:unknown  global_variable: path: unknown function_name: compile appendFilePath getOpenAndClosingPhpTokens getPath setPath compileString render __construct render renderComponent storeUncompiledBlocks storeVerbatimBlocks storePhpBlocks storeRawBlock compileComponentTags restoreRawContent getRawPlaceholder addFooters parseToken compileExtensions compileStatements compileStatement callCustomDirective stripParentheses extend getExtensions if check component components getClassComponentAliases anonymousComponentPath anonymousComponentNamespace componentNamespace getAnonymousComponentPaths getAnonymousComponentNamespaces getClassComponentNamespaces aliasComponent include aliasInclude directive getCustomDirectives precompiler setEchoFormat withDoubleEncoding withoutDoubleEncoding withoutComponentTags	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	laravel_framework_1ff0379d203ac836c3eeae567cc07b99c352b1e7_56_0	buggy: $this->anonymousComponentPaths[] = $path; context: public function anonymousComponentPath(string $path) { $this->anonymousComponentPaths[] = $path; $this->anonymousComponentPaths[] = $path; Container::getInstance() ->make(ViewFactory::class) ->addNamespace(md5($path), $path); }	type_info: path:unknown  global_variable: path: unknown function_name: compile appendFilePath getOpenAndClosingPhpTokens getPath setPath compileString render __construct render renderComponent storeUncompiledBlocks storeVerbatimBlocks storePhpBlocks storeRawBlock compileComponentTags restoreRawContent getRawPlaceholder addFooters parseToken compileExtensions compileStatements compileStatement callCustomDirective stripParentheses extend getExtensions if check component components getClassComponentAliases anonymousComponentPath anonymousComponentNamespace componentNamespace getAnonymousComponentPaths getAnonymousComponentNamespaces getClassComponentNamespaces aliasComponent include aliasInclude directive getCustomDirectives precompiler setEchoFormat withDoubleEncoding withoutDoubleEncoding withoutComponentTags	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	laravel_framework_1ff0379d203ac836c3eeae567cc07b99c352b1e7_56_0	buggy: ->addNamespace(md5($path), $path); context: public function anonymousComponentPath(string $path) { $this->anonymousComponentPaths[] = $path; Container::getInstance() ->make(ViewFactory::class) ->addNamespace(md5($path), $path); ->addNamespace(md5($path), $path); }	type_info: path:unknown  global_variable: path: unknown function_name: compile appendFilePath getOpenAndClosingPhpTokens getPath setPath compileString render __construct render renderComponent storeUncompiledBlocks storeVerbatimBlocks storePhpBlocks storeRawBlock compileComponentTags restoreRawContent getRawPlaceholder addFooters parseToken compileExtensions compileStatements compileStatement callCustomDirective stripParentheses extend getExtensions if check component components getClassComponentAliases anonymousComponentPath anonymousComponentNamespace componentNamespace getAnonymousComponentPaths getAnonymousComponentNamespaces getClassComponentNamespaces aliasComponent include aliasInclude directive getCustomDirectives precompiler setEchoFormat withDoubleEncoding withoutDoubleEncoding withoutComponentTags	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	laravel_framework_1ff0379d203ac836c3eeae567cc07b99c352b1e7_56_1	buggy: if (str_contains($component, ViewFinderInterface::HINT_PATH_DELIMITER)) { return; } context: protected function guessAnonymousComponentUsingPaths(Factory $viewFactory, string $component) { if (str_contains($component, ViewFinderInterface::HINT_PATH_DELIMITER)) { return; } if (str_contains($component, ViewFinderInterface::HINT_PATH_DELIMITER)) { return; } foreach ($this->blade->getAnonymousComponentPaths() as $path) { try { if (! is_null($guess = match (true) { $viewFactory->exists($guess = md5($path).ViewFinderInterface::HINT_PATH_DELIMITER.$component) => $guess, $viewFactory->exists($guess = md5($path).ViewFinderInterface::HINT_PATH_DELIMITER.$component.'.index') => $guess, default => null, })) { return $guess; }	type_info: viewFactory:unknown guess:unknown  global_variable:  function_name: __construct compile compileTags compileOpeningTags compileSelfClosingTags componentString componentClass guessAnonymousComponentUsingPaths guessAnonymousComponentUsingNamespaces findClassByComponent guessClassName formatClassName guessViewName partitionDataAndAttributes compileClosingTags compileSlots getAttributesFromAttributeString parseShortAttributeSyntax parseAttributeBag parseComponentTagClassStatements parseBindAttributes compileAttributeEchos escapeSingleQuotesOutsideOfPhpBlocks attributesToString stripQuotes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	laravel_framework_1ff0379d203ac836c3eeae567cc07b99c352b1e7_56_1	buggy:  context: protected function guessAnonymousComponentUsingPaths(Factory $viewFactory, string $component) { if (str_contains($component, ViewFinderInterface::HINT_PATH_DELIMITER)) { return; } foreach ($this->blade->getAnonymousComponentPaths() as $path) { try { if (! is_null($guess = match (true) { $viewFactory->exists($guess = md5($path).ViewFinderInterface::HINT_PATH_DELIMITER.$component) => $guess, $viewFactory->exists($guess = md5($path).ViewFinderInterface::HINT_PATH_DELIMITER.$component.'.index') => $guess, default => null, })) { return $guess; } } catch (InvalidArgumentException $e) { } }	type_info: viewFactory:unknown guess:unknown  global_variable:  function_name: __construct compile compileTags compileOpeningTags compileSelfClosingTags componentString componentClass guessAnonymousComponentUsingPaths guessAnonymousComponentUsingNamespaces findClassByComponent guessClassName formatClassName guessViewName partitionDataAndAttributes compileClosingTags compileSlots getAttributesFromAttributeString parseShortAttributeSyntax parseAttributeBag parseComponentTagClassStatements parseBindAttributes compileAttributeEchos escapeSingleQuotesOutsideOfPhpBlocks attributesToString stripQuotes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	laravel_framework_1ff0379d203ac836c3eeae567cc07b99c352b1e7_56_1	buggy: $viewFactory->exists($guess = md5($path).ViewFinderInterface::HINT_PATH_DELIMITER.$component) => $guess, $viewFactory->exists($guess = md5($path).ViewFinderInterface::HINT_PATH_DELIMITER.$component.'.index') => $guess, context: protected function guessAnonymousComponentUsingPaths(Factory $viewFactory, string $component) { if (str_contains($component, ViewFinderInterface::HINT_PATH_DELIMITER)) { return; } foreach ($this->blade->getAnonymousComponentPaths() as $path) { try { if (! is_null($guess = match (true) { $viewFactory->exists($guess = md5($path).ViewFinderInterface::HINT_PATH_DELIMITER.$component) => $guess, $viewFactory->exists($guess = md5($path).ViewFinderInterface::HINT_PATH_DELIMITER.$component.'.index') => $guess, $viewFactory->exists($guess = md5($path).ViewFinderInterface::HINT_PATH_DELIMITER.$component) => $guess, $viewFactory->exists($guess = md5($path).ViewFinderInterface::HINT_PATH_DELIMITER.$component.'.index') => $guess, default => null, })) { return $guess; } } catch (InvalidArgumentException $e) { } } } protected function guessAnonymousComponentUsingNamespaces(Factory $viewFactory, string $component)	type_info: viewFactory:unknown guess:unknown  global_variable:  function_name: __construct compile compileTags compileOpeningTags compileSelfClosingTags componentString componentClass guessAnonymousComponentUsingPaths guessAnonymousComponentUsingNamespaces findClassByComponent guessClassName formatClassName guessViewName partitionDataAndAttributes compileClosingTags compileSlots getAttributesFromAttributeString parseShortAttributeSyntax parseAttributeBag parseComponentTagClassStatements parseBindAttributes compileAttributeEchos escapeSingleQuotesOutsideOfPhpBlocks attributesToString stripQuotes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	laravel_framework_39fca5a9acb20395aca6534f09bdc02f792be291_57_0	buggy:  context: use Illuminate\Support\Carbon; use Illuminate\Support\Collection as BaseCollection; use Illuminate\Support\Facades\Crypt; use Illuminate\Support\Facades\Date; use Illuminate\Support\Str; use InvalidArgumentException; use LogicException; use ReflectionClass; use ReflectionMethod; use ReflectionNamedType; trait HasAttributes { protected $attributes = []; protected $original = []; protected $changes = []; protected $casts = [];	type_info: attributes:array original:array changes:array casts:array encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	laravel_framework_39fca5a9acb20395aca6534f09bdc02f792be291_57_0	buggy: return number_format($value, $decimals, '.', ''); context: protected function asDecimal($value, $decimals) { return number_format($value, $decimals, '.', ''); return number_format($value, $decimals, '.', ''); }	type_info: value:unknown encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	laravel_framework_ce33218ea3e7049b9549e8eba7ecb6160d3725a0_58_0	buggy:  context: use Illuminate\Support\Carbon; use Illuminate\Support\Collection as BaseCollection; use Illuminate\Support\Facades\Crypt; use Illuminate\Support\Facades\Date; use Illuminate\Support\Str; use InvalidArgumentException; use LogicException; use ReflectionClass; use ReflectionMethod; use ReflectionNamedType; use TypeError; trait HasAttributes { protected $attributes = []; protected $original = []; protected $changes = [];	type_info: attributes:array original:array changes:array encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	laravel_framework_ce33218ea3e7049b9549e8eba7ecb6160d3725a0_58_0	buggy: * @param float $value context: public function fromFloat($value) { return match ((string) $value) { 'Infinity' => INF, '-Infinity' => -INF, 'NaN' => NAN, default => (float) $value, }; } * @param float $value protected function asDecimal($value, $decimals) { $value = (string) $value; if (! is_numeric($value)) { throw new TypeError('$value must be numeric.'); } [$int, $fraction] = explode('.', $value) + [1 => '']; return $int.'.'.Str::of($fraction)->limit($decimals, '')->padLeft($decimals, '0');	type_info: value:unknown encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	laravel_framework_ce33218ea3e7049b9549e8eba7ecb6160d3725a0_58_0	buggy: $value = (string) $value; context: protected function asDecimal($value, $decimals) { $value = (string) $value; $value = (string) $value; if (! is_numeric($value)) { throw new TypeError('$value must be numeric.'); } [$int, $fraction] = explode('.', $value) + [1 => '']; return $int.'.'.Str::of($fraction)->limit($decimals, '')->padLeft($decimals, '0'); }	type_info: value:unknown encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	laravel_framework_ce33218ea3e7049b9549e8eba7ecb6160d3725a0_58_0	buggy:  context: protected function asDecimal($value, $decimals) { $value = (string) $value; if (! is_numeric($value)) { throw new TypeError('$value must be numeric.'); } [$int, $fraction] = explode('.', $value) + [1 => '']; return $int.'.'.Str::of($fraction)->limit($decimals, '')->padLeft($decimals, '0'); }	type_info: value:unknown encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	laravel_framework_ce33218ea3e7049b9549e8eba7ecb6160d3725a0_58_0	buggy: return $int.'.'.Str::of($fraction)->limit($decimals, '')->padLeft($decimals, '0'); context: protected function asDecimal($value, $decimals) { $value = (string) $value; if (! is_numeric($value)) { throw new TypeError('$value must be numeric.'); } [$int, $fraction] = explode('.', $value) + [1 => '']; return $int.'.'.Str::of($fraction)->limit($decimals, '')->padLeft($decimals, '0'); return $int.'.'.Str::of($fraction)->limit($decimals, '')->padLeft($decimals, '0'); }	type_info: value:unknown encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute throwMissingAttributeExceptionIfApplicable getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getEnumCaseFromValue getStorableEnumValue getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean discardChanges wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append getAppends setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	laravel_framework_a61e4f132029e671e4ea4b8ac0a12db8bff78dec_59_0	buggy: $request->path(), context: protected function requestMethodNotAllowed($request, array $others, $method) { throw new MethodNotAllowedHttpException( $others, sprintf( 'The %s method is not supported for route %s. Supported methods: %s.', $request->path(), $request->path(), $method, implode(', ', $others) ) ); }	type_info: others:unknown  global_variable:  function_name: handleMatchedRoute checkForAlternateVerbs matchAgainstRoutes getRouteForMethods requestMethodNotAllowed methodNotAllowed compile dumper toSymfonyRouteCollection addToSymfonyRoutesCollection generateRouteName getIterator count	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	laravel_framework_a61e4f132029e671e4ea4b8ac0a12db8bff78dec_59_0	buggy:  context: protected function requestMethodNotAllowed($request, array $others, $method) { throw new MethodNotAllowedHttpException( $others, sprintf( 'The %s method is not supported for route %s. Supported methods: %s.', $request->path(), $method, implode(', ', $others) ) ); }	type_info: others:unknown  global_variable:  function_name: handleMatchedRoute checkForAlternateVerbs matchAgainstRoutes getRouteForMethods requestMethodNotAllowed methodNotAllowed compile dumper toSymfonyRouteCollection addToSymfonyRoutesCollection generateRouteName getIterator count	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	laravel_framework_440361e7bad8564012d7c3f73ca33cbe95453a9e_60_0	buggy: return BoundMethod::call($this, $callback, $parameters, $defaultMethod); context: public function call($callback, array $parameters = [], $defaultMethod = null) { return BoundMethod::call($this, $callback, $parameters, $defaultMethod); return BoundMethod::call($this, $callback, $parameters, $defaultMethod); }	type_info: parameters:unknown instance:unknown callback:unknown  global_variable: instance: unknown function_name: when bound has resolved isShared isAlias bind getClosure hasMethodBinding bindMethod parseBindMethod callMethodBinding addContextualBinding bindIf singleton singletonIf scoped scopedIf extend instance removeAbstractAlias tag tagged alias rebinding refresh rebound getReboundCallbacks wrap call factory makeWith make get resolve getConcrete getContextualConcrete findInContextualBindings isBuildable build resolveDependencies hasParameterOverride getParameterOverride getLastParameterOverride resolvePrimitive resolveClass resolveVariadicClass notInstantiable unresolvablePrimitive beforeResolving resolving afterResolving fireBeforeResolvingCallbacks fireBeforeCallbackArray fireResolvingCallbacks fireAfterResolvingCallbacks getCallbacksForType fireCallbackArray getBindings getAlias getExtenders forgetExtenders dropStaleInstances forgetInstance forgetInstances forgetScopedInstances flush getInstance setInstance offsetExists offsetGet offsetSet offsetUnset __get __set	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	laravel_framework_dc725254c031788e6db4f8b1ccdb8f8300979b98_61_0	buggy: [$name] = static::parseStringRule($rule); return static::ruleIsRegex($name) ? [$rule] : explode('|', $rule); context: protected function explodeExplicitRule($rule, $attribute) { if (is_string($rule)) { [$name] = static::parseStringRule($rule); return static::ruleIsRegex($name) ? [$rule] : explode('|', $rule); [$name] = static::parseStringRule($rule); return static::ruleIsRegex($name) ? [$rule] : explode('|', $rule); } if (is_object($rule)) { return Arr::wrap($this->prepareRule($rule, $attribute)); } return array_map( [$this, 'prepareRule'], $rule, array_fill((int) array_key_first($rule), count($rule), $attribute)	type_info: rule:unknown data:array attribute:unknown  global_variable: data: array function_name: __construct explode explodeRules explodeExplicitRule prepareRule explodeWildcardRules mergeRules mergeRulesForAttribute parse parseArrayRule parseStringRule parseParameters ruleIsRegex normalizeRule filterConditionalRules	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	Seldaek_monolog_4b9fdf77caf9100e4adaf10ef45531cbb8d187b1_1_0	buggy:  context: public function __construct(int $batchMode = self::BATCH_MODE_JSON, bool $appendNewline = true, bool $ignoreEmptyContextAndExtra = false) { $this->batchMode = $batchMode; $this->appendNewline = $appendNewline; $this->ignoreEmptyContextAndExtra = $ignoreEmptyContextAndExtra; }	type_info: batchMode:unknown  global_variable: batchMode: unknown function_name: __construct getBatchMode isAppendingNewlines format formatBatch includeStacktraces formatBatchJson formatBatchNewlines normalize normalizeException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	Seldaek_monolog_63e195046ce040b4d30660c7d5f677af03684cf1_2_0	"buggy: return 'c' === $class[0] && 0 === strpos($class, ""class@anonymous\0"") ? get_parent_class($class).'@anonymous' : $class; context: public static function getClass(object $object): string { $class = \get_class($object); return 'c' === $class[0] && 0 === strpos($class, ""class@anonymous\0"") ? get_parent_class($class).'@anonymous' : $class; return 'c' === $class[0] && 0 === strpos($class, ""class@anonymous\0"") ? get_parent_class($class).'@anonymous' : $class; }"	type_info: class:unknown  global_variable:  function_name: getClass substr canonicalizePath jsonEncode handleJsonError throwEncodeError detectAndCleanUtf8	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	Seldaek_monolog_77b71e0baf6370f65f5d21c1df078edbd053a87b_3_0	buggy: 'callType' => isset($trace[$i]['type']) ? $trace[$]['type'] : null, context: } $i += $this->skipStackFramesCount; $record['extra'] = array_merge( $record['extra'], [ 'file' => isset($trace[$i - 1]['file']) ? $trace[$i - 1]['file'] : null, 'line' => isset($trace[$i - 1]['line']) ? $trace[$i - 1]['line'] : null, 'class' => isset($trace[$i]['class']) ? $trace[$i]['class'] : null, 'callType' => isset($trace[$i]['type']) ? $trace[$]['type'] : null, 'callType' => isset($trace[$i]['type']) ? $trace[$]['type'] : null, 'function' => isset($trace[$i]['function']) ? $trace[$i]['function'] : null, ] ); return $record; } private function isTraceClassOrSkippedFunction(array $trace, int $index): bool {	type_info: level:unknown trace:unknown i:integer  global_variable: level: unknown function_name: __construct __invoke isTraceClassOrSkippedFunction	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	Seldaek_monolog_cf0f4b38148bc5ee19e83585b5dea135cbbfe3ca_4_0	buggy: if ($data instanceof \DateTimeInterface) { return $this->formatDate($data); } context: $normalized['...'] = 'Over '.$this->maxNormalizeItemCount.' items ('.count($data).' total), aborting normalization'; break; } $normalized[$key] = $this->normalize($value, $depth + 1); } return $normalized; } if ($data instanceof \DateTimeInterface) { return $this->formatDate($data); } if ($data instanceof \DateTimeInterface) { return $this->formatDate($data); } if ($data instanceof Throwable) { return $this->normalizeException($data, $depth); } if (is_resource($data)) { return parent::normalize($data);	type_info: batchMode:unknown normalized:array value:unknown depth:unknown key:unknown  global_variable: batchMode: unknown function_name: __construct getBatchMode isAppendingNewlines format formatBatch includeStacktraces formatBatchJson formatBatchNewlines normalize normalizeException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	Seldaek_monolog_cf0f4b38148bc5ee19e83585b5dea135cbbfe3ca_4_0	buggy: if ($data instanceof Throwable) { return $this->normalizeException($data, $depth); context: $normalized[$key] = $this->normalize($value, $depth + 1); } return $normalized; } if ($data instanceof \DateTimeInterface) { return $this->formatDate($data); } if ($data instanceof Throwable) { return $this->normalizeException($data, $depth); if ($data instanceof Throwable) { return $this->normalizeException($data, $depth); } if (is_resource($data)) { return parent::normalize($data); } return $data; }	type_info: batchMode:unknown normalized:array value:unknown depth:unknown key:unknown  global_variable: batchMode: unknown function_name: __construct getBatchMode isAppendingNewlines format formatBatch includeStacktraces formatBatchJson formatBatchNewlines normalize normalizeException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	Seldaek_monolog_320909a1d1c68f134603469f866a6991c753639f_5_0	"buggy: return str_replace(array('\r', '\n'), array(""\r"", ""\n""), $str); context: protected function replaceNewlines(string $str): string { if ($this->allowInlineLineBreaks) { if (0 === strpos($str, '{')) { return str_replace(array('\r', '\n'), array(""\r"", ""\n""), $str); return str_replace(array('\r', '\n'), array(""\r"", ""\n""), $str); } return $str; } return str_replace([""\r\n"", ""\r"", ""\n""], ' ', $str); }"	type_info: format:unknown str:unknown  global_variable: format: unknown function_name: __construct includeStacktraces allowInlineLineBreaks ignoreEmptyContextAndExtra format formatBatch stringify normalizeException convertToString replaceNewlines formatException stacktracesParser stacktracesParserCustom	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	Seldaek_monolog_ffd505543cf54c32b6bb8a133aeb773d4a740547_6_0	buggy:  context: self::DEBUG => 'DEBUG', self::INFO => 'INFO', self::NOTICE => 'NOTICE', self::WARNING => 'WARNING', self::ERROR => 'ERROR', self::CRITICAL => 'CRITICAL', self::ALERT => 'ALERT', self::EMERGENCY => 'EMERGENCY', ]; protected $name; protected $handlers; protected $processors; protected $microsecondTimestamps = true; protected $timezone;	type_info: microsecondTimestamps:boolean handlers:unknown  global_variable: handlers: unknown function_name: __construct getName withName pushHandler popHandler setHandlers getHandlers pushProcessor popProcessor getProcessors useMicrosecondTimestamps useLoggingLoopDetection addRecord close reset getLevels getLevelName toMonologLevel isHandling setExceptionHandler getExceptionHandler log debug info notice warning error critical alert emergency setTimezone getTimezone handleException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	Seldaek_monolog_ffd505543cf54c32b6bb8a133aeb773d4a740547_6_0	buggy: * @param int $level The logging level context: public function useLoggingLoopDetection(bool $detectCycles): self { $this->detectCycles = $detectCycles; return $this; } * @param int $level The logging level public function addRecord(int $level, string $message, array $context = [], DateTimeImmutable $datetime = null): bool	type_info: detectCycles:boolean handlers:unknown context:unknown level:unknown  global_variable: handlers: unknown function_name: __construct getName withName pushHandler popHandler setHandlers getHandlers pushProcessor popProcessor getProcessors useMicrosecondTimestamps useLoggingLoopDetection addRecord close reset getLevels getLevelName toMonologLevel isHandling setExceptionHandler getExceptionHandler log debug info notice warning error critical alert emergency setTimezone getTimezone handleException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	Seldaek_monolog_ffd505543cf54c32b6bb8a133aeb773d4a740547_6_0	buggy:  context: public function addRecord(int $level, string $message, array $context = [], DateTimeImmutable $datetime = null): bool { if ($this->detectCycles) { $this->logDepth += 1; } if ($this->logDepth === 3) { $this->warning('A possible infinite logging loop was detected and aborted. It appears some of your handler code is triggering logging, see the previous log record for a hint as to what may be the cause.'); return false; } elseif ($this->logDepth >= 5) { return false; }	type_info: handlers:unknown context:unknown level:unknown  global_variable: handlers: unknown function_name: __construct getName withName pushHandler popHandler setHandlers getHandlers pushProcessor popProcessor getProcessors useMicrosecondTimestamps useLoggingLoopDetection addRecord close reset getLevels getLevelName toMonologLevel isHandling setExceptionHandler getExceptionHandler log debug info notice warning error critical alert emergency setTimezone getTimezone handleException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	Seldaek_monolog_ffd505543cf54c32b6bb8a133aeb773d4a740547_6_0	buggy: * @param mixed $level The log level context: public function getExceptionHandler(): ?callable { return $this->exceptionHandler; } * @param mixed $level The log level public function log($level, $message, array $context = []): void	type_info: handlers:unknown context:unknown level:unknown  global_variable: handlers: unknown function_name: __construct getName withName pushHandler popHandler setHandlers getHandlers pushProcessor popProcessor getProcessors useMicrosecondTimestamps useLoggingLoopDetection addRecord close reset getLevels getLevelName toMonologLevel isHandling setExceptionHandler getExceptionHandler log debug info notice warning error critical alert emergency setTimezone getTimezone handleException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	Seldaek_monolog_ffd505543cf54c32b6bb8a133aeb773d4a740547_6_0	buggy:  context: public function log($level, $message, array $context = []): void { if (!is_int($level) && !is_string($level)) { throw new \InvalidArgumentException('$level is expected to be a string or int'); } $level = static::toMonologLevel($level); $this->addRecord($level, (string) $message, $context); }	type_info: handlers:unknown context:unknown level:unknown  global_variable: handlers: unknown function_name: __construct getName withName pushHandler popHandler setHandlers getHandlers pushProcessor popProcessor getProcessors useMicrosecondTimestamps useLoggingLoopDetection addRecord close reset getLevels getLevelName toMonologLevel isHandling setExceptionHandler getExceptionHandler log debug info notice warning error critical alert emergency setTimezone getTimezone handleException	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	Seldaek_monolog_5df32386644b4653018f14e1bd00e4db3d0e2d84_7_0	buggy: if ($record->level < $this->level) { context: public function __invoke(LogRecord $record): LogRecord { if ($record->level < $this->level) { if ($record->level < $this->level) { return $record; } $record->extra['git'] = self::getGitInfo(); return $record; }	type_info:  global_variable:  function_name: __construct __invoke getGitInfo	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	composer_composer_9f8ee0e40a97ba20961b53ff9302281da7255819_1_0	buggy:  context: if (!is_string($config['version'])) { $config['version'] = (string) $config['version']; } if (strpos($config['version'], 'dev-') !== 0 && '-dev' !== substr($config['version'], -4)) { return null; } if (isset($config['extra']['branch-alias']) && \is_array($config['extra']['branch-alias'])) { foreach ($config['extra']['branch-alias'] as $sourceBranch => $targetBranch) { if ('-dev' !== substr($targetBranch, -4)) { continue; } if ($targetBranch === VersionParser::DEFAULT_BRANCH_ALIAS) { $validatedTargetBranch = VersionParser::DEFAULT_BRANCH_ALIAS; } else { $validatedTargetBranch = $this->versionParser->normalizeBranch(substr($targetBranch, 0, -4)); } if ('-dev' !== substr($validatedTargetBranch, -4)) {	type_info: sourceBranch:unknown targetBranch:unknown validatedTargetBranch:unknown  global_variable:  function_name: __construct load loadPackages createObject configureObject configureCachedLinks parseLinks createLink getBranchAlias	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	composer_composer_146e036b58ffe502bb553c828c349bde24e5be85_2_0	buggy: if (!Preg::isMatch('/^(?<version>[0-9.]+)(?<patch>[a-z]{0,2})?(?<suffix>(?:-?(?:dev|pre|alpha|beta|rc|fips)[\d]*)*)?(?<garbage>-\w+)?$/', $opensslVersion, $matches)) { context: public static function parseOpenssl(string $opensslVersion, ?bool &$isFips): ?string { $isFips = false; if (!Preg::isMatch('/^(?<version>[0-9.]+)(?<patch>[a-z]{0,2})?(?<suffix>(?:-?(?:dev|pre|alpha|beta|rc|fips)[\d]*)*)?(?<garbage>-\w+)?$/', $opensslVersion, $matches)) { if (!Preg::isMatch('/^(?<version>[0-9.]+)(?<patch>[a-z]{0,2})?(?<suffix>(?:-?(?:dev|pre|alpha|beta|rc|fips)[\d]*)*)?(?<garbage>-\w+)?$/', $opensslVersion, $matches)) { return null; } $isFips = strpos($matches['suffix'], 'fips') !== false; $suffix = strtr('-'.ltrim($matches['suffix'], '-'), array('-fips' => '', '-pre' => '-alpha')); $patch = self::convertAlphaVersionToIntVersion($matches['patch']);	type_info: isFips:boolean suffix:unknown patch:unknown  global_variable:  function_name: parseOpenssl parseLibjpeg parseZoneinfoVersion convertAlphaVersionToIntVersion convertLibxpmVersionId convertOpenldapVersionId convertVersionId	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	composer_composer_f1f013edde6528e58a47dfd94af527f5b9af801c_3_0	buggy: $this->errors[] = $linkType.'.'.$err; context: foreach (array_keys(BasePackage::$supportedLinkTypes) as $linkType) { if ($this->validateArray($linkType) && isset($this->config[$linkType])) { foreach ($this->config[$linkType] as $package => $constraint) { if (0 === strcasecmp($package, $this->config['name'])) { $this->errors[] = $linkType.'.'.$package.' : a package cannot set a '.$linkType.' on itself'; unset($this->config[$linkType][$package]); continue; } if ($err = self::hasPackageNamingError($package, true)) { $this->errors[] = $linkType.'.'.$err; $this->errors[] = $linkType.'.'.$err; } elseif (!Preg::isMatch('{^[A-Za-z0-9_./-]+$}', $package)) { $this->warnings[] = $linkType.'.'.$package.' : invalid key, package names must be strings containing only [A-Za-z0-9_./-]'; } if (!is_string($constraint)) { $this->errors[] = $linkType.'.'.$package.' : invalid value, must be a string containing a version constraint'; unset($this->config[$linkType][$package]); } elseif ('self.version' !== $constraint) { try { $linkConstraint = $this->versionParser->parseConstraints($constraint);	type_info: err:unknown package:unknown linkConstraint:unknown linkType:unknown  global_variable:  function_name: __construct load getWarnings getErrors hasPackageNamingError validateRegex validateString validateArray validateFlatArray validateUrl filterUrl	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	composer_composer_f1f013edde6528e58a47dfd94af527f5b9af801c_3_0	buggy: $this->warnings[] = $linkType.'.'.$package.' : invalid key, package names must be strings containing only [A-Za-z0-9_./-]'; context: $this->errors[] = $linkType.'.'.$package.' : a package cannot set a '.$linkType.' on itself'; unset($this->config[$linkType][$package]); continue; } if ($err = self::hasPackageNamingError($package, true)) { $this->errors[] = $linkType.'.'.$err; } elseif (!Preg::isMatch('{^[A-Za-z0-9_./-]+$}', $package)) { $this->warnings[] = $linkType.'.'.$package.' : invalid key, package names must be strings containing only [A-Za-z0-9_./-]'; $this->warnings[] = $linkType.'.'.$package.' : invalid key, package names must be strings containing only [A-Za-z0-9_./-]'; } if (!is_string($constraint)) { $this->errors[] = $linkType.'.'.$package.' : invalid value, must be a string containing a version constraint'; unset($this->config[$linkType][$package]); } elseif ('self.version' !== $constraint) { try {	type_info: err:unknown package:unknown linkType:unknown  global_variable:  function_name: __construct load getWarnings getErrors hasPackageNamingError validateRegex validateString validateArray validateFlatArray validateUrl filterUrl	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	composer_composer_eba49147e78ed4b331e2de7fb8d612101f20e44f_4_0	"buggy: $package = $versionSelector->findBestCandidate($name, $packageVersion, $stability, $platformRequirementFilter); context: continue; } $repositorySet->addRepository(RepositoryFactory::createRepo($io, $config, $repoConfig, $rm)); } } $platformOverrides = $config->get('platform'); $platformRepo = new PlatformRepository(array(), $platformOverrides); $versionSelector = new VersionSelector($repositorySet, $platformRepo); $package = $versionSelector->findBestCandidate($name, $packageVersion, $stability, $platformRequirementFilter); $package = $versionSelector->findBestCandidate($name, $packageVersion, $stability, $platformRequirementFilter); if (!$package) { $errorMessage = ""Could not find package $name with "" . ($packageVersion ? ""version $packageVersion"" : ""stability $stability""); if (!($platformRequirementFilter instanceof IgnoreAllPlatformRequirementFilter) && $versionSelector->findBestCandidate($name, $packageVersion, $stability, PlatformRequirementFilterFactory::ignoreAll())) { throw new \InvalidArgumentException($errorMessage .' in a version installable using your PHP version, PHP extensions and Composer version.'); } throw new \InvalidArgumentException($errorMessage .'.'); }"	type_info: config:unknown io:unknown package:unknown platformRequirementFilter:unknown name:unknown repoConfig:unknown packageVersion:unknown stability:string rm:unknown repositorySet:unknown platformOverrides:unknown platformRepo:unknown versionSelector:unknown errorMessage:unknown  global_variable:  function_name: configure execute installProject installRootPackage	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	composer_composer_eba49147e78ed4b331e2de7fb8d612101f20e44f_4_1	buggy: $package = $versionSelector->findBestCandidate($name, null, $preferredStability, $platformRequirementFilter); context: if ($input->hasOption('ignore-platform-reqs') && $input->hasOption('ignore-platform-req')) { $platformRequirementFilter = $this->getPlatformRequirementFilter($input); } else { $platformRequirementFilter = PlatformRequirementFilterFactory::ignoreNothing(); } $repoSet = $this->getRepositorySet($input); $versionSelector = new VersionSelector($repoSet, $platformRepo); $effectiveMinimumStability = $this->getMinimumStability($input); $package = $versionSelector->findBestCandidate($name, null, $preferredStability, $platformRequirementFilter); $package = $versionSelector->findBestCandidate($name, null, $preferredStability, $platformRequirementFilter); if (false === $package) { if ($platformRequirementFilter->isIgnored($name)) { return array($name, '*'); } $providers = $repoSet->getProviders($name); if (count($providers) > 0) { $constraint = '*';	type_info: package:unknown providers:unknown constraint:string platformRepo:unknown platformRequirementFilter:unknown repoSet:unknown versionSelector:unknown effectiveMinimumStability:unknown  global_variable:  function_name: getRepos getRepositorySet getMinimumStability determineRequirements findBestVersionAndNameForPackage findSimilar getPlatformExceptionDetails	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	composer_composer_eba49147e78ed4b331e2de7fb8d612101f20e44f_4_2	buggy:  context: <?php declare(strict_types=1); namespace Composer\Package\Version; use Composer\Filter\PlatformRequirementFilter\IgnoreAllPlatformRequirementFilter; use Composer\Filter\PlatformRequirementFilter\PlatformRequirementFilterFactory; use Composer\Filter\PlatformRequirementFilter\PlatformRequirementFilterInterface; use Composer\Package\BasePackage; use Composer\Package\AliasPackage; use Composer\Package\PackageInterface; use Composer\Composer; use Composer\Package\Loader\ArrayLoader; use Composer\Package\Dumper\ArrayDumper; use Composer\Pcre\Preg; use Composer\Repository\RepositorySet;	type_info:  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	composer_composer_eba49147e78ed4b331e2de7fb8d612101f20e44f_4_2	buggy: * @param int $repoSetFlags* context: public function __construct(RepositorySet $repositorySet, PlatformRepository $platformRepo = null) { $this->repositorySet = $repositorySet; if ($platformRepo) { foreach ($platformRepo->getPackages() as $package) { $this->platformConstraints[$package->getName()][] = new Constraint('==', $package->getVersion()); } } } * @param int $repoSetFlags* public function findBestCandidate(string $packageName, string $targetPackageVersion = null, string $preferredStability = 'stable', $platformRequirementFilter = null, int $repoSetFlags = 0)	type_info: platformRepo:unknown targetPackageVersion:unknown platformRequirementFilter:unknown package:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	composer_composer_eba49147e78ed4b331e2de7fb8d612101f20e44f_4_2	buggy: public function findBestCandidate(string $packageName, string $targetPackageVersion = null, string $preferredStability = 'stable', $platformRequirementFilter = null, int $repoSetFlags = 0) context: public function __construct(RepositorySet $repositorySet, PlatformRepository $platformRepo = null) { $this->repositorySet = $repositorySet; if ($platformRepo) { foreach ($platformRepo->getPackages() as $package) { $this->platformConstraints[$package->getName()][] = new Constraint('==', $package->getVersion()); } } } public function findBestCandidate(string $packageName, string $targetPackageVersion = null, string $preferredStability = 'stable', $platformRequirementFilter = null, int $repoSetFlags = 0) public function findBestCandidate(string $packageName, string $targetPackageVersion = null, string $preferredStability = 'stable', $platformRequirementFilter = null, int $repoSetFlags = 0)	type_info: platformRepo:unknown targetPackageVersion:unknown platformRequirementFilter:unknown package:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	composer_composer_eba49147e78ed4b331e2de7fb8d612101f20e44f_4_2	buggy:  context: if (null === $platformRequirementFilter) { $platformRequirementFilter = PlatformRequirementFilterFactory::ignoreNothing(); } elseif (!($platformRequirementFilter instanceof PlatformRequirementFilterInterface)) { trigger_error('VersionSelector::findBestCandidate with ignored platform reqs as bool|array is deprecated since Composer 2.2, use an instance of PlatformRequirementFilterInterface instead.', E_USER_DEPRECATED); $platformRequirementFilter = PlatformRequirementFilterFactory::fromBoolOrList($platformRequirementFilter); } $constraint = $targetPackageVersion ? $this->getParser()->parseConstraints($targetPackageVersion) : null; $candidates = $this->repositorySet->findPackages(strtolower($packageName), $constraint, $repoSetFlags); if ($this->platformConstraints && !($platformRequirementFilter instanceof IgnoreAllPlatformRequirementFilter)) { $platformConstraints = $this->platformConstraints; $candidates = array_filter($candidates, static function ($pkg) use ($platformConstraints, $platformRequirementFilter): bool { $reqs = $pkg->getRequires(); foreach ($reqs as $name => $link) { if (!$platformRequirementFilter->isIgnored($name)) { if (isset($platformConstraints[$name])) { foreach ($platformConstraints[$name] as $constraint) {	type_info: platformConstraints:unknown targetPackageVersion:unknown platformRequirementFilter:unknown constraint:unknown candidates:unknown name:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	composer_composer_eba49147e78ed4b331e2de7fb8d612101f20e44f_4_2	buggy: $candidates = array_filter($candidates, static function ($pkg) use ($platformConstraints, $platformRequirementFilter): bool { context: } $constraint = $targetPackageVersion ? $this->getParser()->parseConstraints($targetPackageVersion) : null; $candidates = $this->repositorySet->findPackages(strtolower($packageName), $constraint, $repoSetFlags); if ($this->platformConstraints && !($platformRequirementFilter instanceof IgnoreAllPlatformRequirementFilter)) { $platformConstraints = $this->platformConstraints; $candidates = array_filter($candidates, static function ($pkg) use ($platformConstraints, $platformRequirementFilter): bool { $candidates = array_filter($candidates, static function ($pkg) use ($platformConstraints, $platformRequirementFilter): bool { $reqs = $pkg->getRequires(); foreach ($reqs as $name => $link) { if (!$platformRequirementFilter->isIgnored($name)) { if (isset($platformConstraints[$name])) { foreach ($platformConstraints[$name] as $constraint) {	type_info: platformConstraints:unknown targetPackageVersion:unknown platformRequirementFilter:unknown constraint:unknown candidates:unknown name:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	composer_composer_eba49147e78ed4b331e2de7fb8d612101f20e44f_4_2	buggy:  context: } elseif (!($platformRequirementFilter instanceof PlatformRequirementFilterInterface)) { trigger_error('VersionSelector::findBestCandidate with ignored platform reqs as bool|array is deprecated since Composer 2.2, use an instance of PlatformRequirementFilterInterface instead.', E_USER_DEPRECATED); $platformRequirementFilter = PlatformRequirementFilterFactory::fromBoolOrList($platformRequirementFilter); } $constraint = $targetPackageVersion ? $this->getParser()->parseConstraints($targetPackageVersion) : null; $candidates = $this->repositorySet->findPackages(strtolower($packageName), $constraint, $repoSetFlags); if ($this->platformConstraints && !($platformRequirementFilter instanceof IgnoreAllPlatformRequirementFilter)) { $platformConstraints = $this->platformConstraints; $candidates = array_filter($candidates, static function ($pkg) use ($platformConstraints, $platformRequirementFilter): bool { $reqs = $pkg->getRequires(); foreach ($reqs as $name => $link) { if (!$platformRequirementFilter->isIgnored($name)) { if (isset($platformConstraints[$name])) { foreach ($platformConstraints[$name] as $constraint) { if ($link->getConstraint()->matches($constraint)) { continue 2; }	type_info: platformConstraints:unknown targetPackageVersion:unknown platformRequirementFilter:unknown constraint:unknown candidates:unknown name:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	composer_composer_eba49147e78ed4b331e2de7fb8d612101f20e44f_4_2	buggy:  context: $reqs = $pkg->getRequires(); foreach ($reqs as $name => $link) { if (!$platformRequirementFilter->isIgnored($name)) { if (isset($platformConstraints[$name])) { foreach ($platformConstraints[$name] as $constraint) { if ($link->getConstraint()->matches($constraint)) { continue 2; } } return false; } elseif (PlatformRepository::isPlatformPackage($name)) { return false; } } } return true; });	type_info: platformConstraints:unknown platformRequirementFilter:unknown constraint:unknown name:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	composer_composer_eba49147e78ed4b331e2de7fb8d612101f20e44f_4_2	buggy:  context: if (!$platformRequirementFilter->isIgnored($name)) { if (isset($platformConstraints[$name])) { foreach ($platformConstraints[$name] as $constraint) { if ($link->getConstraint()->matches($constraint)) { continue 2; } } return false; } elseif (PlatformRepository::isPlatformPackage($name)) { return false; } } } return true; }); } if (!$candidates) {	type_info: platformConstraints:unknown platformRequirementFilter:unknown constraint:unknown candidates:unknown name:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	composer_composer_eba49147e78ed4b331e2de7fb8d612101f20e44f_4_2	buggy:  context: } } return true; }); } if (!$candidates) { return false; } $package = reset($candidates); $minPriority = BasePackage::$stabilities[$preferredStability]; foreach ($candidates as $candidate) { $candidatePriority = $candidate->getStabilityPriority(); $currentPriority = $package->getStabilityPriority(); if ($minPriority < $candidatePriority && $currentPriority < $candidatePriority) { continue; }	type_info: candidates:unknown package:unknown minPriority:unknown candidatePriority:unknown currentPriority:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	composer_composer_6776cef441d19a87e527f00b5465c01d1c9c959f_5_0	buggy:  context: unset($this->config['funding']); } } $unboundConstraint = new Constraint('=', '10000000-dev'); $stableConstraint = new Constraint('=', '1.0.0'); foreach (array_keys(BasePackage::$supportedLinkTypes) as $linkType) { if ($this->validateArray($linkType) && isset($this->config[$linkType])) { foreach ($this->config[$linkType] as $package => $constraint) { if (0 === strcasecmp($package, $this->config['name'])) { $this->errors[] = $linkType.'.'.$package.' : a package cannot set a '.$linkType.' on itself'; unset($this->config[$linkType][$package]); continue; } if ($err = self::hasPackageNamingError($package, true)) { $this->warnings[] = $linkType.'.'.$err; } elseif (!Preg::isMatch('{^[A-Za-z0-9_./-]+$}', $package)) { $this->errors[] = $linkType.'.'.$package.' : invalid key, package names must be strings containing only [A-Za-z0-9_./-]'; }	type_info: err:unknown unboundConstraint:unknown stableConstraint:unknown package:unknown linkType:unknown  global_variable:  function_name: __construct load getWarnings getErrors hasPackageNamingError validateRegex validateString validateArray validateFlatArray validateUrl filterUrl	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	composer_composer_9a6d63f0f4f187df304fd60803b340c84211bc13_6_0	"buggy:  context: $this->createDefaultInstallers($im, $composer, $io, $process); if ($composer instanceof Composer && isset($composerFile)) { $lockFile = self::getLockFile($composerFile); if (!$config->get('lock') && file_exists($lockFile)) { $io->writeError('<warning>'.$lockFile.' is present but ignored as the ""lock"" config option is disabled.</warning>'); } $locker = new Package\Locker($io, new JsonFile($config->get('lock') ? $lockFile : Platform::getDevNull(), null, $io), $im, file_get_contents($composerFile), $process); $composer->setLocker($locker); } if ($composer instanceof Composer) { $globalComposer = null; if (realpath($config->get('home')) !== $cwd) { $globalComposer = $this->createGlobalComposer($io, $config, $disablePlugins, $disableScripts); } $pm = $this->createPluginManager($io, $composer, $globalComposer, $disablePlugins); $composer->setPluginManager($pm);"	type_info: io:unknown config:unknown composerFile:unknown composer:unknown process:unknown im:unknown lockFile:unknown locker:unknown globalComposer:unknown pm:unknown disablePlugins:unknown  global_variable:  function_name: getHomeDir getCacheDir getDataDir createConfig getComposerFile getLockFile createAdditionalStyles createOutput createComposer createGlobal addLocalRepository createGlobalComposer createDownloadManager createArchiveManager createPluginManager createInstallationManager createDefaultInstallers purgePackages loadRootPackage create createHttpDownloader useXdg getUserDir validateJsonSchema	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	composer_composer_9a6d63f0f4f187df304fd60803b340c84211bc13_6_1	buggy: $this->composer->getPluginManager()->isPluginAllowed($package->getName(), false); context: public function prepare($type, PackageInterface $package, PackageInterface $prevPackage = null) { if ($type === 'install' || $type === 'update') { $this->composer->getPluginManager()->isPluginAllowed($package->getName(), false); $this->composer->getPluginManager()->isPluginAllowed($package->getName(), false); } return parent::prepare($type, $package, $prevPackage); }	type_info: prevPackage:unknown  global_variable:  function_name: __construct supports prepare download install update uninstall rollbackInstall getPluginManager	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	composer_composer_9a6d63f0f4f187df304fd60803b340c84211bc13_6_2	buggy: $this->allowGlobalPluginRules = $this->parseAllowedPlugins($globalComposer !== null ? $globalComposer->getConfig()->get('allow-plugins') : false, $globalComposer !== null ? $globalComposer->getLocker() : null); context: public function __construct(IOInterface $io, Composer $composer, PartialComposer $globalComposer = null, bool $disablePlugins = false) { $this->io = $io; $this->composer = $composer; $this->globalComposer = $globalComposer; $this->versionParser = new VersionParser(); $this->disablePlugins = $disablePlugins; $this->allowPluginRules = $this->parseAllowedPlugins($composer->getConfig()->get('allow-plugins'), $composer->getLocker()); $this->allowGlobalPluginRules = $this->parseAllowedPlugins($globalComposer !== null ? $globalComposer->getConfig()->get('allow-plugins') : false, $globalComposer !== null ? $globalComposer->getLocker() : null); $this->allowGlobalPluginRules = $this->parseAllowedPlugins($globalComposer !== null ? $globalComposer->getConfig()->get('allow-plugins') : false, $globalComposer !== null ? $globalComposer->getLocker() : null); }	type_info: disablePlugins:boolean globalComposer:unknown composer:unknown  global_variable: globalComposer: unknown composer: unknown function_name: __construct loadInstalledPlugins deactivateInstalledPlugins getPlugins getGlobalComposer registerPackage deactivatePackage uninstallPackage getPluginApiVersion addPlugin removePlugin uninstallPlugin loadRepository deactivateRepository collectDependencies getInstallPath getCapabilityImplementationClassName getPluginCapability getPluginCapabilities parseAllowedPlugins isPluginAllowed	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_0	"buggy: $hint .= ', try using --all (-a) to show all available packages'; context: if ($input->getOption('locked')) { $hint .= ' in lock file'; } if (isset($options['working-dir'])) { $hint .= ' in ' . $options['working-dir'] . '/composer.json'; } if (PlatformRepository::isPlatformPackage($packageFilter) && !$input->getOption('platform')) { $hint .= ', try using --platform (-p) to show platform packages'; } if (!$input->getOption('all')) { $hint .= ', try using --all (-a) to show all available packages'; $hint .= ', try using --all (-a) to show all available packages'; } throw new \InvalidArgumentException('Package ""' . $packageFilter . '"" not found'.$hint.'.'); } } if (isset($package)) { assert(isset($versions));"	type_info: package:unknown packageFilter:unknown versions:unknown options:unknown hint:string repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_0	"buggy: $packageListFilter = array(); context: return 0; } $packages = array(); $packageFilterRegex = null; if (null !== $packageFilter) { $packageFilterRegex = '{^'.str_replace('\\*', '.*?', preg_quote($packageFilter)).'$}i'; } $packageListFilter = array(); $packageListFilter = array(); if ($input->getOption('direct')) { $packageListFilter = $this->getRootRequires(); } if ($input->getOption('path') && null === $composer) { $io->writeError('No composer.json found in the current directory, disabling ""path"" option'); $input->setOption('path', false); }"	type_info: composer:unknown io:unknown packages:unknown packageFilter:unknown packageFilterRegex:string packageListFilter:unknown repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_0	"buggy: foreach ($repos->getRepositories() as $repo) { context: $packageListFilter = array(); if ($input->getOption('direct')) { $packageListFilter = $this->getRootRequires(); } if ($input->getOption('path') && null === $composer) { $io->writeError('No composer.json found in the current directory, disabling ""path"" option'); $input->setOption('path', false); } foreach ($repos->getRepositories() as $repo) { foreach ($repos->getRepositories() as $repo) { if ($repo === $platformRepo) { $type = 'platform'; } elseif ($lockedRepo !== null && $repo === $lockedRepo) { $type = 'locked'; } elseif ($repo === $installedRepo || in_array($repo, $installedRepo->getRepositories(), true)) { $type = 'installed'; } else { $type = 'available'; }"	type_info: composer:unknown io:unknown platformRepo:unknown lockedRepo:unknown repos:unknown installedRepo:unknown packageListFilter:unknown repo:unknown type:string repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_0	buggy: if (!$packageListFilter || in_array($package->getName(), $packageListFilter, true)) { context: } else { foreach ($repo->getPackages() as $package) { if (!isset($packages[$type][$package->getName()]) || !is_object($packages[$type][$package->getName()]) || version_compare($packages[$type][$package->getName()]->getVersion(), $package->getVersion(), '<') ) { while ($package instanceof AliasPackage) { $package = $package->getAliasOf(); } if (!$packageFilterRegex || Preg::isMatch($packageFilterRegex, $package->getName())) { if (!$packageListFilter || in_array($package->getName(), $packageListFilter, true)) { if (!$packageListFilter || in_array($package->getName(), $packageListFilter, true)) { $packages[$type][$package->getName()] = $package; } } } } if ($repo === $platformRepo) { foreach ($platformRepo->getDisabledPackages() as $name => $package) { $packages[$type][$name] = $package; }	type_info: platformRepo:unknown package:unknown packages:unknown packageFilterRegex:string packageListFilter:unknown repo:unknown type:string repositorySet:unknown name:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_0	buggy:  context: } else { $packageViewData['name'] = $package; $nameLength = max($nameLength, strlen($package)); } $viewData[$type][] = $packageViewData; } $viewMetaData[$type] = array( 'nameLength' => $nameLength, 'versionLength' => $versionLength, 'latestLength' => $latestLength, ); if ($input->getOption('strict') && $hasOutdatedPackages) { $exitCode = 1; break; } } } if ('json' === $format) { $io->write(JsonFile::encode($viewData));	type_info: io:unknown format:unknown package:unknown exitCode:integer type:string viewData:unknown viewMetaData:unknown nameLength:unknown hasOutdatedPackages:boolean packageViewData:unknown versionLength:unknown latestLength:unknown repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_0	buggy:  context: } } } $width = $this->getTerminalWidth(); foreach ($viewData as $type => $packages) { $nameLength = $viewMetaData[$type]['nameLength']; $versionLength = $viewMetaData[$type]['versionLength']; $latestLength = $viewMetaData[$type]['latestLength']; $writeVersion = $nameLength + $versionLength + 3 <= $width; $writeLatest = $nameLength + $versionLength + $latestLength + 3 <= $width; $writeDescription = $nameLength + $versionLength + $latestLength + 24 <= $width; if ($writeLatest && !$io->isDecorated()) { $latestLength += 2; } if ($showAllTypes) {	type_info: io:unknown packages:unknown type:string showAllTypes:unknown viewData:unknown viewMetaData:unknown nameLength:unknown writeVersion:unknown writeLatest:unknown writeDescription:unknown versionLength:unknown latestLength:unknown width:unknown repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_0	buggy: $writeVersion = $nameLength + $versionLength + 3 <= $width; $writeLatest = $nameLength + $versionLength + $latestLength + 3 <= $width; $writeDescription = $nameLength + $versionLength + $latestLength + 24 <= $width; context: } } $width = $this->getTerminalWidth(); foreach ($viewData as $type => $packages) { $nameLength = $viewMetaData[$type]['nameLength']; $versionLength = $viewMetaData[$type]['versionLength']; $latestLength = $viewMetaData[$type]['latestLength']; $writeVersion = $nameLength + $versionLength + 3 <= $width; $writeLatest = $nameLength + $versionLength + $latestLength + 3 <= $width; $writeDescription = $nameLength + $versionLength + $latestLength + 24 <= $width; $writeVersion = $nameLength + $versionLength + 3 <= $width; $writeLatest = $nameLength + $versionLength + $latestLength + 3 <= $width; $writeDescription = $nameLength + $versionLength + $latestLength + 24 <= $width; if ($writeLatest && !$io->isDecorated()) { $latestLength += 2; } if ($showAllTypes) { if ('available' === $type) {	type_info: io:unknown packages:unknown type:string showAllTypes:unknown viewData:unknown viewMetaData:unknown nameLength:unknown writeVersion:unknown writeLatest:unknown writeDescription:unknown versionLength:unknown latestLength:unknown width:unknown repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_0	buggy: if ($writeLatest && !$io->isDecorated()) { context: foreach ($viewData as $type => $packages) { $nameLength = $viewMetaData[$type]['nameLength']; $versionLength = $viewMetaData[$type]['versionLength']; $latestLength = $viewMetaData[$type]['latestLength']; $writeVersion = $nameLength + $versionLength + 3 <= $width; $writeLatest = $nameLength + $versionLength + $latestLength + 3 <= $width; $writeDescription = $nameLength + $versionLength + $latestLength + 24 <= $width; if ($writeLatest && !$io->isDecorated()) { if ($writeLatest && !$io->isDecorated()) { $latestLength += 2; } if ($showAllTypes) { if ('available' === $type) { $io->write('<comment>' . $type . '</comment>:'); } else { $io->write('<info>' . $type . '</info>:'); }	type_info: io:unknown packages:unknown type:string showAllTypes:unknown viewData:unknown viewMetaData:unknown nameLength:unknown writeVersion:unknown writeLatest:unknown writeDescription:unknown versionLength:unknown latestLength:unknown width:unknown repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_0	buggy: $this->printPackages($io, $directDeps, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); context: if ($pkg['direct-dependency'] ?? false) { $directDeps[] = $pkg; } else { $transitiveDeps[] = $pkg; } } $io->write(''); $io->write('<info>Direct dependencies:</>'); if (\count($directDeps) > 0) { $this->printPackages($io, $directDeps, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); $this->printPackages($io, $directDeps, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); } else { $io->write('Everything up to date'); } $io->write(''); $io->write('<info>Transitive dependencies:</>'); if (\count($transitiveDeps) > 0) { $this->printPackages($io, $transitiveDeps, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); } else { $io->write('Everything up to date');	type_info: io:unknown indent:string nameLength:unknown writeVersion:unknown writeLatest:unknown writeDescription:unknown versionLength:unknown latestLength:unknown width:unknown directDeps:array transitiveDeps:array repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_0	buggy: $this->printPackages($io, $transitiveDeps, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); context: $io->write(''); $io->write('<info>Direct dependencies:</>'); if (\count($directDeps) > 0) { $this->printPackages($io, $directDeps, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); } else { $io->write('Everything up to date'); } $io->write(''); $io->write('<info>Transitive dependencies:</>'); if (\count($transitiveDeps) > 0) { $this->printPackages($io, $transitiveDeps, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); $this->printPackages($io, $transitiveDeps, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); } else { $io->write('Everything up to date'); } } else { $this->printPackages($io, $packages, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); } if ($showAllTypes) { $io->write('');	type_info: io:unknown packages:unknown showAllTypes:unknown indent:string nameLength:unknown writeVersion:unknown writeLatest:unknown writeDescription:unknown versionLength:unknown latestLength:unknown width:unknown directDeps:array transitiveDeps:array repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_0	buggy: $this->printPackages($io, $packages, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); context: $io->write('Everything up to date'); } $io->write(''); $io->write('<info>Transitive dependencies:</>'); if (\count($transitiveDeps) > 0) { $this->printPackages($io, $transitiveDeps, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); } else { $io->write('Everything up to date'); } } else { $this->printPackages($io, $packages, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); $this->printPackages($io, $packages, $indent, $writeVersion, $writeLatest, $writeDescription, $width, $versionLength, $nameLength, $latestLength); } if ($showAllTypes) { $io->write(''); } } } return $exitCode;	type_info: io:unknown packages:unknown exitCode:integer showAllTypes:unknown indent:string nameLength:unknown writeVersion:unknown writeLatest:unknown writeDescription:unknown versionLength:unknown latestLength:unknown width:unknown transitiveDeps:array repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	composer_composer_f95471f2217cce7effa8f24e0209f78163f94ea7_7_1	buggy:  context: $bucket[] = $candidate; $bucket = self::filterRequiredPackages($packages, $candidate, $bucket); } break; } } } return $bucket; } }	type_info: bucket:unknown  global_variable:  function_name: filterRequiredPackages	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	composer_composer_2d48c7dbb0660c014989319d927af7ca5578193e_8_0	buggy: if ($majorOnly && Preg::isMatch('{^(\d+)\.}', $package->getVersion(), $match)) { $targetVersion = '>='.($match[1] + 1).',<9999999-dev'; context: $targetVersion = null; if (0 === strpos($package->getVersion(), 'dev-')) { $targetVersion = $package->getVersion(); if ($majorOnly) { return null; } } if ($targetVersion === null) { if ($majorOnly && Preg::isMatch('{^(\d+)\.}', $package->getVersion(), $match)) { $targetVersion = '>='.($match[1] + 1).',<9999999-dev'; if ($majorOnly && Preg::isMatch('{^(\d+)\.}', $package->getVersion(), $match)) { $targetVersion = '>='.($match[1] + 1).',<9999999-dev'; } if ($minorOnly) { $targetVersion = '^'.$package->getVersion(); } if ($patchOnly) { $trimmedVersion = Preg::replace('{(\.0)+$}D', '', $package->getVersion());	type_info: package:unknown repositorySet:unknown targetVersion:unknown trimmedVersion:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	composer_composer_3177b2132447a970eb96954df13e45ba57448922_9_0	buggy: if ($majorOnly && Preg::isMatch('{^(?P<zero_major>0\.)?(?P<first_meaningful>\d+)\.}', $package->getVersion(), $match)) { context: $targetVersion = null; if (0 === strpos($package->getVersion(), 'dev-')) { $targetVersion = $package->getVersion(); if ($majorOnly) { return null; } } if ($targetVersion === null) { if ($majorOnly && Preg::isMatch('{^(?P<zero_major>0\.)?(?P<first_meaningful>\d+)\.}', $package->getVersion(), $match)) { if ($majorOnly && Preg::isMatch('{^(?P<zero_major>0\.)?(?P<first_meaningful>\d+)\.}', $package->getVersion(), $match)) { $targetVersion = '>='.$match['zero_major'].($match['first_meaningful'] + 1).',<9999999-dev'; } if ($minorOnly) { $targetVersion = '^'.$package->getVersion(); } if ($patchOnly) { $trimmedVersion = Preg::replace('{(\.0)+$}D', '', $package->getVersion());	type_info: package:unknown repositorySet:unknown targetVersion:unknown trimmedVersion:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	composer_composer_4164b302367ca890066dd4a67c032b129704972a_10_0	buggy: $rootPackage = $this->requireComposer()->getPackage(); context: protected function getRootRequires(): array { $rootPackage = $this->requireComposer()->getPackage(); $rootPackage = $this->requireComposer()->getPackage(); return array_map( 'strtolower', array_keys(array_merge($rootPackage->getRequires(), $rootPackage->getDevRequires())) ); }	type_info: rootPackage:unknown repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	composer_composer_ab29ed5f975a55b99c43b503cbb961649671fecc_11_0	buggy: $constraint = $platformRequirementFilter->filterConstraint($link->getTarget(), $constraint); context: foreach ($this->addedMap as $package) { foreach ($package->getConflicts() as $link) { if (!isset($this->addedPackagesByNames[$link->getTarget()])) { continue; } $constraint = $link->getConstraint(); if ($platformRequirementFilter->isIgnored($link->getTarget())) { continue; } elseif ($platformRequirementFilter instanceof IgnoreListPlatformRequirementFilter) { $constraint = $platformRequirementFilter->filterConstraint($link->getTarget(), $constraint); $constraint = $platformRequirementFilter->filterConstraint($link->getTarget(), $constraint); } $conflicts = $this->pool->whatProvides($link->getTarget(), $constraint); foreach ($conflicts as $conflict) { if (!$conflict instanceof AliasPackage || $conflict->getName() === $link->getTarget()) { $this->addRule(RuleSet::TYPE_PACKAGE, $this->createRule2Literals($package, $conflict, Rule::RULE_PACKAGE_CONFLICT, $link)); } }	type_info: package:unknown constraint:unknown conflicts:unknown platformRequirementFilter:unknown rules:unknown  global_variable: rules: unknown function_name: __construct createRequireRule createInstallOneOfRule createRule2Literals createMultiConflictRule addRule addRulesForPackage addConflictRules addRulesForRequest addRulesForRootAliases getRulesFor	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	composer_composer_ab29ed5f975a55b99c43b503cbb961649671fecc_11_1	buggy: public function filterConstraint(string $req, ConstraintInterface $constraint): ConstraintInterface context: public function isIgnored(string $req): bool { if (!PlatformRepository::isPlatformPackage($req)) { return false; } return Preg::isMatch($this->ignoreRegex, $req); } public function filterConstraint(string $req, ConstraintInterface $constraint): ConstraintInterface public function filterConstraint(string $req, ConstraintInterface $constraint): ConstraintInterface	type_info: constraint:unknown  global_variable:  function_name: __construct isIgnored filterConstraint	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	composer_composer_ab29ed5f975a55b99c43b503cbb961649671fecc_11_1	buggy: if (!Preg::isMatch($this->ignoreUpperBoundRegex, $req)) { context: public function filterConstraint(string $req, ConstraintInterface $constraint): ConstraintInterface { if (!PlatformRepository::isPlatformPackage($req)) { return $constraint; } if (!Preg::isMatch($this->ignoreUpperBoundRegex, $req)) { if (!Preg::isMatch($this->ignoreUpperBoundRegex, $req)) { return $constraint; } if (Preg::isMatch($this->ignoreRegex, $req)) { return new MatchAllConstraint; } $intervals = Intervals::get($constraint); $last = end($intervals['numeric']); if ($last !== false && (string) $last->getEnd() !== (string) Interval::untilPositiveInfinity()) {	type_info: intervals:unknown last:unknown constraint:unknown  global_variable:  function_name: __construct isIgnored filterConstraint	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	composer_composer_ec8bbe905670295af84f7f04810cde667bac0afa_12_0	buggy:  context: <?php declare(strict_types=1); namespace Composer\Command; use Composer\Package\AliasPackage; use Composer\Package\Locker; use Composer\Package\Version\VersionBumper; use Composer\Util\Filesystem; use Symfony\Component\Console\Input\InputInterface; use Composer\Console\Input\InputArgument; use Composer\Console\Input\InputOption;	type_info:  global_variable:  function_name: configure execute updateFileCleanly	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	composer_composer_ec8bbe905670295af84f7f04810cde667bac0afa_12_0	buggy:  context: <?php declare(strict_types=1); namespace Composer\Command; use Composer\Package\AliasPackage; use Composer\Package\Locker; use Composer\Package\Version\VersionBumper; use Composer\Util\Filesystem; use Symfony\Component\Console\Input\InputInterface; use Composer\Console\Input\InputArgument; use Composer\Console\Input\InputOption; use Symfony\Component\Console\Output\OutputInterface; use Composer\Factory; use Composer\Json\JsonFile; use Composer\Json\JsonManipulator;	type_info:  global_variable:  function_name: configure execute updateFileCleanly	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	composer_composer_ec8bbe905670295af84f7f04810cde667bac0afa_12_0	buggy:  context: $bumper = new VersionBumper(); $tasks = []; if (!$input->getOption('no-dev-only')) { $tasks['require-dev'] = $composer->getPackage()->getDevRequires(); } if (!$input->getOption('dev-only')) { $tasks['require'] = $composer->getPackage()->getRequires(); } $updates = []; foreach ($tasks as $key => $reqs) { foreach ($reqs as $pkgName => $link) { if (PlatformRepository::isPlatformPackage($pkgName)) { continue; } $currentConstraint = $link->getPrettyConstraint(); $package = $repo->findPackage($pkgName, '*'); if (null === $package) {	type_info: composer:unknown repo:unknown bumper:unknown tasks:array updates:array key:unknown currentConstraint:unknown package:unknown  global_variable:  function_name: configure execute updateFileCleanly	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	composer_composer_822fd640d0fdd611e3b0efb93501a94098a741fa_13_0	buggy: $candidate = $versionSelector->findBestCandidate($name, $targetVersion, $bestStability, $platformReqFilter); context: if ($patchOnly) { $trimmedVersion = Preg::replace('{(\.0)+$}D', '', $package->getVersion()); $partsNeeded = substr($trimmedVersion, 0, 1) === '0' ? 4 : 3; while (substr_count($trimmedVersion, '.') + 1 < $partsNeeded) { $trimmedVersion .= '.0'; } $targetVersion = '~'.$trimmedVersion; } } $candidate = $versionSelector->findBestCandidate($name, $targetVersion, $bestStability, $platformReqFilter); $candidate = $versionSelector->findBestCandidate($name, $targetVersion, $bestStability, $platformReqFilter); while ($candidate instanceof AliasPackage) { $candidate = $candidate->getAliasOf(); } return $candidate !== false ? $candidate : null; } private function getRepositorySet(Composer $composer): RepositorySet {	type_info: composer:array platformReqFilter:unknown package:unknown repositorySet:unknown name:unknown versionSelector:unknown bestStability:unknown targetVersion:unknown trimmedVersion:unknown partsNeeded:integer candidate:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	composer_composer_822fd640d0fdd611e3b0efb93501a94098a741fa_13_1	buggy:  context: public function __construct(RepositorySet $repositorySet, ?PlatformRepository $platformRepo = null) { $this->repositorySet = $repositorySet; if ($platformRepo) { foreach ($platformRepo->getPackages() as $package) { $this->platformConstraints[$package->getName()][] = new Constraint('==', $package->getVersion()); } } } public function findBestCandidate(string $packageName, ?string $targetPackageVersion = null, string $preferredStability = 'stable', $platformRequirementFilter = null, int $repoSetFlags = 0, ?IOInterface $io = null)	type_info: platformRepo:unknown targetPackageVersion:unknown platformRequirementFilter:unknown package:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	composer_composer_822fd640d0fdd611e3b0efb93501a94098a741fa_13_1	buggy: public function findBestCandidate(string $packageName, ?string $targetPackageVersion = null, string $preferredStability = 'stable', $platformRequirementFilter = null, int $repoSetFlags = 0, ?IOInterface $io = null) context: public function __construct(RepositorySet $repositorySet, ?PlatformRepository $platformRepo = null) { $this->repositorySet = $repositorySet; if ($platformRepo) { foreach ($platformRepo->getPackages() as $package) { $this->platformConstraints[$package->getName()][] = new Constraint('==', $package->getVersion()); } } } public function findBestCandidate(string $packageName, ?string $targetPackageVersion = null, string $preferredStability = 'stable', $platformRequirementFilter = null, int $repoSetFlags = 0, ?IOInterface $io = null) public function findBestCandidate(string $packageName, ?string $targetPackageVersion = null, string $preferredStability = 'stable', $platformRequirementFilter = null, int $repoSetFlags = 0, ?IOInterface $io = null)	type_info: platformRepo:unknown targetPackageVersion:unknown platformRequirementFilter:unknown package:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	composer_composer_822fd640d0fdd611e3b0efb93501a94098a741fa_13_1	buggy:  context: if ($minPriority >= $aPriority && $minPriority < $bPriority) { return -1; } return version_compare($b->getVersion(), $a->getVersion()); }); if (count($this->platformConstraints) > 0 && !($platformRequirementFilter instanceof IgnoreAllPlatformRequirementFilter)) { $alreadyWarnedNames = []; foreach ($candidates as $pkg) { $reqs = $pkg->getRequires(); foreach ($reqs as $name => $link) { if (!PlatformRepository::isPlatformPackage($name) || $platformRequirementFilter->isIgnored($name)) { continue; } if (isset($this->platformConstraints[$name])) { foreach ($this->platformConstraints[$name] as $providedConstraint) { if ($link->getConstraint()->matches($providedConstraint)) {	type_info: platformRequirementFilter:unknown candidates:unknown minPriority:unknown aPriority:unknown bPriority:unknown alreadyWarnedNames:array reqs:unknown name:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	composer_composer_822fd640d0fdd611e3b0efb93501a94098a741fa_13_1	"buggy: if ($io !== null) { $isFirst = !isset($alreadyWarnedNames[$pkg->getName()]); context: if ($link->getConstraint()->matches($providedConstraint)) { continue 2; } } $reason = 'is not satisfied by your platform'; } else { $reason = 'is missing from your platform'; } if ($io !== null) { $isFirst = !isset($alreadyWarnedNames[$pkg->getName()]); if ($io !== null) { $isFirst = !isset($alreadyWarnedNames[$pkg->getName()]); $alreadyWarnedNames[$pkg->getName()] = true; $latest = $isFirst ? ""'s latest version"" : ''; $io->writeError( '<warning>Cannot use '.$pkg->getPrettyName().$latest.' '.$pkg->getPrettyVersion().' as it '.$link->getDescription().' '.$link->getTarget().' '.$link->getPrettyConstraint().' which '.$reason.'.</>', true, $isFirst ? IOInterface::NORMAL : IOInterface::VERBOSE ); }"	type_info: alreadyWarnedNames:array reason:string isFirst:unknown latest:string  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	composer_composer_822fd640d0fdd611e3b0efb93501a94098a741fa_13_1	"buggy: $latest = $isFirst ? ""'s latest version"" : ''; context: } $reason = 'is not satisfied by your platform'; } else { $reason = 'is missing from your platform'; } if ($io !== null) { $isFirst = !isset($alreadyWarnedNames[$pkg->getName()]); $alreadyWarnedNames[$pkg->getName()] = true; $latest = $isFirst ? ""'s latest version"" : ''; $latest = $isFirst ? ""'s latest version"" : ''; $io->writeError( '<warning>Cannot use '.$pkg->getPrettyName().$latest.' '.$pkg->getPrettyVersion().' as it '.$link->getDescription().' '.$link->getTarget().' '.$link->getPrettyConstraint().' which '.$reason.'.</>', true, $isFirst ? IOInterface::NORMAL : IOInterface::VERBOSE ); } continue 2; }"	type_info: alreadyWarnedNames:array reason:string isFirst:unknown latest:string  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	composer_composer_822fd640d0fdd611e3b0efb93501a94098a741fa_13_1	"buggy: $isFirst ? IOInterface::NORMAL : IOInterface::VERBOSE context: $reason = 'is missing from your platform'; } if ($io !== null) { $isFirst = !isset($alreadyWarnedNames[$pkg->getName()]); $alreadyWarnedNames[$pkg->getName()] = true; $latest = $isFirst ? ""'s latest version"" : ''; $io->writeError( '<warning>Cannot use '.$pkg->getPrettyName().$latest.' '.$pkg->getPrettyVersion().' as it '.$link->getDescription().' '.$link->getTarget().' '.$link->getPrettyConstraint().' which '.$reason.'.</>', true, $isFirst ? IOInterface::NORMAL : IOInterface::VERBOSE $isFirst ? IOInterface::NORMAL : IOInterface::VERBOSE ); } continue 2; } $package = $pkg; break; }"	type_info: alreadyWarnedNames:array reason:string isFirst:unknown latest:string package:unknown  global_variable:  function_name: __construct findBestCandidate findRecommendedRequireVersion transformVersion getParser	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	composer_composer_8618f004f791144dc33a196a5e5346ab56f77f7b_14_0	"buggy: if (Preg::isMatch('{^([^,\s#]+)(?:#[^ ]+)? +as +([^,\s]+)$}', $reqVersion, $match)) { context: private function extractAliases(array $requires, array $aliases): array { foreach ($requires as $reqName => $reqVersion) { if (Preg::isMatch('{^([^,\s#]+)(?:#[^ ]+)? +as +([^,\s]+)$}', $reqVersion, $match)) { if (Preg::isMatch('{^([^,\s#]+)(?:#[^ ]+)? +as +([^,\s]+)$}', $reqVersion, $match)) { $aliases[] = [ 'package' => strtolower($reqName), 'version' => $this->versionParser->normalize($match[1], $reqVersion), 'alias' => $match[2], 'alias_normalized' => $this->versionParser->normalize($match[2], $reqVersion), ]; } elseif (strpos($reqVersion, ' as ') !== false) { throw new \UnexpectedValueException('Invalid alias definition in ""'.$reqName.'"": ""'.$reqVersion.'"". Aliases should be in the form ""exact-version as other-exact-version"".'); } }"	type_info: aliases:array reqName:array reqVersion:unknown  global_variable:  function_name: __construct load extractAliases extractStabilityFlags extractReferences	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	composer_composer_a63ce7cf96441a32ba70ef63b924c84422e91a98_15_0	buggy: $this->printPackages($io, $packages, $indent, $versionFits, $latestFits, $descriptionFits, $width, $versionLength, $nameLength, $latestLength); context: $io->writeError('Everything up to date'); } $io->writeError(''); $io->writeError('<info>Transitive dependencies not required in composer.json:</>'); if (\count($transitiveDeps) > 0) { $this->printPackages($io, $transitiveDeps, $indent, $versionFits, $latestFits, $descriptionFits, $width, $versionLength, $nameLength, $latestLength); } else { $io->writeError('Everything up to date'); } } else { $this->printPackages($io, $packages, $indent, $versionFits, $latestFits, $descriptionFits, $width, $versionLength, $nameLength, $latestLength); $this->printPackages($io, $packages, $indent, $versionFits, $latestFits, $descriptionFits, $width, $versionLength, $nameLength, $latestLength); } if ($showAllTypes) { $io->write(''); } } } return $exitCode;	type_info: io:unknown packages:array exitCode:integer showAllTypes:unknown indent:string nameLength:unknown versionLength:unknown latestLength:unknown width:unknown versionFits:unknown latestFits:unknown descriptionFits:unknown transitiveDeps:array repositorySet:unknown  global_variable: repositorySet: unknown function_name: configure suggestPackageBasedOnMode execute printPackages getRootRequires getVersionStyle getPackage printPackageInfo printMeta printVersions printLinks printLicenses printPackageInfoAsJson appendVersions appendLicenses appendAutoload appendLinks appendLink initStyles displayPackageTree generatePackageTree displayTree addTree updateStatusToVersionStyle getUpdateStatus writeTreeLine findLatestPackage getRepositorySet	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	composer_composer_5b28754602d832f3487d92c5021f879007aece9e_16_0	buggy: if (0 !== strpos($from, $commonPath) || '/' === $commonPath) { context: if (\dirname($from) === \dirname($to)) { return './'.basename($to); } $commonPath = $to; while (strpos($from.'/', $commonPath.'/') !== 0 && '/' !== $commonPath && !Preg::isMatch('{^[A-Z]:/?$}i', $commonPath)) { $commonPath = strtr(\dirname($commonPath), '\\', '/'); } if (0 !== strpos($from, $commonPath) || '/' === $commonPath) { if (0 !== strpos($from, $commonPath) || '/' === $commonPath) { return $to; } $commonPath = rtrim($commonPath, '/') . '/'; $sourcePathDepth = substr_count((string) substr($from, \strlen($commonPath)), '/'); $commonPathCode = str_repeat('../', $sourcePathDepth); $result = $commonPathCode . substr($to, \strlen($commonPath)); if (\strlen($result) === 0) {	type_info: result:boolean from:string to:unknown commonPath:unknown sourcePathDepth:unknown commonPathCode:string  global_variable:  function_name: __construct remove isDirEmpty emptyDirectory removeDirectory removeDirectoryAsync removeEdgeCases removeDirectoryPhp ensureDirectoryExists unlink rmdir copyThenRemove copy rename findShortestPath findShortestPathCode isAbsolutePath size normalizePath trimTrailingSlash isLocalPath getPlatformPath isReadable directorySize getProcess unlinkImplementation relativeSymlink isSymlinkedDirectory unlinkSymlinkedDirectory resolveSymlinkedDirectorySymlink junction isJunction removeJunction filePutContentsIfModified safeCopy filesAreEqual	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	composer_composer_5b28754602d832f3487d92c5021f879007aece9e_16_0	buggy:  context: } if (0 !== strpos($from, $commonPath) || '/' === $commonPath) { return $to; } $commonPath = rtrim($commonPath, '/') . '/'; $sourcePathDepth = substr_count((string) substr($from, \strlen($commonPath)), '/'); $commonPathCode = str_repeat('../', $sourcePathDepth); $result = $commonPathCode . substr($to, \strlen($commonPath)); if (\strlen($result) === 0) { return './'; } return $result; } public function findShortestPathCode(string $from, string $to, bool $directories = false, bool $staticCode = false) {	type_info: result:boolean directories:unknown from:string to:unknown commonPath:unknown sourcePathDepth:unknown commonPathCode:string  global_variable:  function_name: __construct remove isDirEmpty emptyDirectory removeDirectory removeDirectoryAsync removeEdgeCases removeDirectoryPhp ensureDirectoryExists unlink rmdir copyThenRemove copy rename findShortestPath findShortestPathCode isAbsolutePath size normalizePath trimTrailingSlash isLocalPath getPlatformPath isReadable directorySize getProcess unlinkImplementation relativeSymlink isSymlinkedDirectory unlinkSymlinkedDirectory resolveSymlinkedDirectorySymlink junction isJunction removeJunction filePutContentsIfModified safeCopy filesAreEqual	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	composer_composer_5b28754602d832f3487d92c5021f879007aece9e_16_0	buggy: if (0 !== strpos($from, $commonPath) || '/' === $commonPath || '.' === $commonPath) { context: } $commonPath = $to; while (strpos($from.'/', $commonPath.'/') !== 0 && '/' !== $commonPath && !Preg::isMatch('{^[A-Z]:/?$}i', $commonPath) && '.' !== $commonPath) { $commonPath = strtr(\dirname($commonPath), '\\', '/'); } if (0 !== strpos($from, $commonPath) || '/' === $commonPath || '.' === $commonPath) { if (0 !== strpos($from, $commonPath) || '/' === $commonPath || '.' === $commonPath) { return var_export($to, true); } $commonPath = rtrim($commonPath, '/') . '/'; if (strpos($to, $from.'/') === 0) { return '__DIR__ . '.var_export((string) substr($to, \strlen($from)), true);	type_info: from:string to:unknown commonPath:unknown  global_variable:  function_name: __construct remove isDirEmpty emptyDirectory removeDirectory removeDirectoryAsync removeEdgeCases removeDirectoryPhp ensureDirectoryExists unlink rmdir copyThenRemove copy rename findShortestPath findShortestPathCode isAbsolutePath size normalizePath trimTrailingSlash isLocalPath getPlatformPath isReadable directorySize getProcess unlinkImplementation relativeSymlink isSymlinkedDirectory unlinkSymlinkedDirectory resolveSymlinkedDirectorySymlink junction isJunction removeJunction filePutContentsIfModified safeCopy filesAreEqual	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	composer_composer_5b28754602d832f3487d92c5021f879007aece9e_16_0	"buggy: if (strpos($to, $from.'/') === 0) { context: } if (0 !== strpos($from, $commonPath) || '/' === $commonPath || '.' === $commonPath) { return var_export($to, true); } $commonPath = rtrim($commonPath, '/') . '/'; if (strpos($to, $from.'/') === 0) { if (strpos($to, $from.'/') === 0) { return '__DIR__ . '.var_export((string) substr($to, \strlen($from)), true); } $sourcePathDepth = substr_count((string) substr($from, \strlen($commonPath)), '/') + (int) $directories; if ($staticCode) { $commonPathCode = ""__DIR__ . '"".str_repeat('/..', $sourcePathDepth).""'""; } else {"	type_info: directories:unknown from:string to:unknown commonPath:unknown sourcePathDepth:unknown commonPathCode:string  global_variable:  function_name: __construct remove isDirEmpty emptyDirectory removeDirectory removeDirectoryAsync removeEdgeCases removeDirectoryPhp ensureDirectoryExists unlink rmdir copyThenRemove copy rename findShortestPath findShortestPathCode isAbsolutePath size normalizePath trimTrailingSlash isLocalPath getPlatformPath isReadable directorySize getProcess unlinkImplementation relativeSymlink isSymlinkedDirectory unlinkSymlinkedDirectory resolveSymlinkedDirectorySymlink junction isJunction removeJunction filePutContentsIfModified safeCopy filesAreEqual	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	composer_composer_5b28754602d832f3487d92c5021f879007aece9e_16_0	"buggy:  context: if (0 !== strpos($from, $commonPath) || '/' === $commonPath || '.' === $commonPath) { return var_export($to, true); } $commonPath = rtrim($commonPath, '/') . '/'; if (strpos($to, $from.'/') === 0) { return '__DIR__ . '.var_export((string) substr($to, \strlen($from)), true); } $sourcePathDepth = substr_count((string) substr($from, \strlen($commonPath)), '/') + (int) $directories; if ($staticCode) { $commonPathCode = ""__DIR__ . '"".str_repeat('/..', $sourcePathDepth).""'""; } else { $commonPathCode = str_repeat('dirname(', $sourcePathDepth).'__DIR__'.str_repeat(')', $sourcePathDepth); } $relTarget = (string) substr($to, \strlen($commonPath)); return $commonPathCode . (\strlen($relTarget) > 0 ? '.' . var_export('/' . $relTarget, true) : ''); }"	type_info: directories:unknown from:string to:unknown commonPath:unknown sourcePathDepth:unknown commonPathCode:string relTarget:unknown  global_variable:  function_name: __construct remove isDirEmpty emptyDirectory removeDirectory removeDirectoryAsync removeEdgeCases removeDirectoryPhp ensureDirectoryExists unlink rmdir copyThenRemove copy rename findShortestPath findShortestPathCode isAbsolutePath size normalizePath trimTrailingSlash isLocalPath getPlatformPath isReadable directorySize getProcess unlinkImplementation relativeSymlink isSymlinkedDirectory unlinkSymlinkedDirectory resolveSymlinkedDirectorySymlink junction isJunction removeJunction filePutContentsIfModified safeCopy filesAreEqual	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	composer_composer_7f9638f65a404e4ad3b69eda320575649377f758_17_0	buggy:  context: use Composer\Package\Loader\ArrayLoader; use Composer\Package\Dumper\ArrayDumper; use Composer\Pcre\Preg; use Composer\Semver\Constraint\Constraint; use Composer\Semver\Constraint\ConstraintInterface; use Composer\Semver\Intervals; use Composer\Util\Platform; class VersionBumper { public function bumpRequirement(ConstraintInterface $constraint, PackageInterface $package): string { $parser = new VersionParser(); $prettyConstraint = $constraint->getPrettyString(); if (str_starts_with($constraint->getPrettyString(), 'dev-')) { return $prettyConstraint; } $version = $package->getVersion(); if (str_starts_with($package->getVersion(), 'dev-')) {	type_info: parser:unknown prettyConstraint:unknown version:unknown  global_variable:  function_name: bumpRequirement	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	composer_composer_7f9638f65a404e4ad3b69eda320575649377f758_17_0	buggy: $modified = substr_replace($modified, $newPrettyConstraint, $match[1], Platform::strlen((string) $match[0])); context: (?P<constraint> \^'.$major.'(?:\.\d+)* # e.g. ^2.anything | ~'.$major.'(?:\.\d+)? # e.g. ~2 or ~2.2 but no more | '.$major.'(?:\.[*x])+ # e.g. 2.* or 2.*.* or 2.x.x.x etc ) (?=,|$|\ |\||@) # trailing separator }x'; if (Preg::isMatchAllWithOffsets($pattern, $prettyConstraint, $matches)) { $modified = $prettyConstraint; foreach (array_reverse($matches['constraint']) as $match) { $modified = substr_replace($modified, $newPrettyConstraint, $match[1], Platform::strlen((string) $match[0])); $modified = substr_replace($modified, $newPrettyConstraint, $match[1], Platform::strlen((string) $match[0])); } $newConstraint = $parser->parseConstraints($modified); if (Intervals::isSubsetOf($newConstraint, $constraint) && Intervals::isSubsetOf($constraint, $newConstraint)) { return $prettyConstraint; } return $modified; }	type_info: parser:unknown prettyConstraint:unknown major:unknown newPrettyConstraint:unknown pattern:string modified:unknown newConstraint:unknown  global_variable:  function_name: bumpRequirement	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	composer_composer_ef7ba73a6ab0dc048e31cd93a1c894216c25b3a1_18_0	buggy: $newPrettyConstraint = '^'.Preg::replace('{(?:\.(?:0|9999999))+(-dev)?$}', '', $version); context: $version = $extra; } $intervals = Intervals::get($constraint); if (\count($intervals['branches']['names']) > 0) { return $prettyConstraint; } $major = Preg::replace('{^(\d+).*}', '$1', $version); $newPrettyConstraint = '^'.Preg::replace('{(?:\.(?:0|9999999))+(-dev)?$}', '', $version); $newPrettyConstraint = '^'.Preg::replace('{(?:\.(?:0|9999999))+(-dev)?$}', '', $version); if (!Preg::isMatch('{^\^\d+(\.\d+)*$}', $newPrettyConstraint)) { return $prettyConstraint; } $pattern = '{ (?<=,|\ |\||^) # leading separator (?P<constraint> \^'.$major.'(?:\.\d+)* # e.g. ^2.anything	type_info: prettyConstraint:unknown version:unknown extra:unknown intervals:unknown major:unknown newPrettyConstraint:unknown pattern:string  global_variable:  function_name: bumpRequirement	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	composer_composer_ef7ba73a6ab0dc048e31cd93a1c894216c25b3a1_18_0	buggy:  context: if (!Preg::isMatch('{^\^\d+(\.\d+)*$}', $newPrettyConstraint)) { return $prettyConstraint; } $pattern = '{ (?<=,|\ |\||^) # leading separator (?P<constraint> \^'.$major.'(?:\.\d+)* # e.g. ^2.anything | ~'.$major.'(?:\.\d+)? # e.g. ~2 or ~2.2 but no more | '.$major.'(?:\.[*x])+ # e.g. 2.* or 2.*.* or 2.x.x.x etc ) (?=,|$|\ |\||@) # trailing separator }x'; if (Preg::isMatchAllWithOffsets($pattern, $prettyConstraint, $matches)) { $modified = $prettyConstraint; foreach (array_reverse($matches['constraint']) as $match) { $suffix = ''; if (substr_count($match[0], '.') === 2 && substr_count($newPrettyConstraint, '.') === 1) { $suffix = '.0'; }	type_info: prettyConstraint:unknown major:unknown newPrettyConstraint:unknown pattern:string modified:unknown suffix:string  global_variable:  function_name: bumpRequirement	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	composer_composer_ef7ba73a6ab0dc048e31cd93a1c894216c25b3a1_18_0	buggy: if (substr_count($match[0], '.') === 2 && substr_count($newPrettyConstraint, '.') === 1) { context: ) (?=,|$|\ |\||@) # trailing separator }x'; if (Preg::isMatchAllWithOffsets($pattern, $prettyConstraint, $matches)) { $modified = $prettyConstraint; foreach (array_reverse($matches['constraint']) as $match) { $suffix = ''; if (substr_count($match[0], '.') === 2 && substr_count($newPrettyConstraint, '.') === 1) { if (substr_count($match[0], '.') === 2 && substr_count($newPrettyConstraint, '.') === 1) { $suffix = '.0'; } $modified = substr_replace($modified, $newPrettyConstraint.$suffix, $match[1], Platform::strlen((string) $match[0])); } $newConstraint = $parser->parseConstraints($modified);	type_info: parser:unknown prettyConstraint:unknown newPrettyConstraint:unknown pattern:string modified:unknown suffix:string newConstraint:unknown  global_variable:  function_name: bumpRequirement	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	composer_composer_ef7ba73a6ab0dc048e31cd93a1c894216c25b3a1_18_0	buggy:  context: (?P<constraint> \^'.$major.'(?:\.\d+)* # e.g. ^2.anything | ~'.$major.'(?:\.\d+)? # e.g. ~2 or ~2.2 but no more | '.$major.'(?:\.[*x])+ # e.g. 2.* or 2.*.* or 2.x.x.x etc ) (?=,|$|\ |\||@) # trailing separator }x'; if (Preg::isMatchAllWithOffsets($pattern, $prettyConstraint, $matches)) { $modified = $prettyConstraint; foreach (array_reverse($matches['constraint']) as $match) { $suffix = ''; if (substr_count($match[0], '.') === 2 && substr_count($newPrettyConstraint, '.') === 1) { $suffix = '.0'; } $modified = substr_replace($modified, $newPrettyConstraint.$suffix, $match[1], Platform::strlen((string) $match[0])); } $newConstraint = $parser->parseConstraints($modified); if (Intervals::isSubsetOf($newConstraint, $constraint) && Intervals::isSubsetOf($constraint, $newConstraint)) { return $prettyConstraint;	type_info: parser:unknown prettyConstraint:unknown major:unknown newPrettyConstraint:unknown pattern:string modified:unknown suffix:string newConstraint:unknown  global_variable:  function_name: bumpRequirement	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	composer_composer_ef7ba73a6ab0dc048e31cd93a1c894216c25b3a1_18_0	buggy: $modified = substr_replace($modified, $newPrettyConstraint.$suffix, $match[1], Platform::strlen((string) $match[0])); context: ) (?=,|$|\ |\||@) # trailing separator }x'; if (Preg::isMatchAllWithOffsets($pattern, $prettyConstraint, $matches)) { $modified = $prettyConstraint; foreach (array_reverse($matches['constraint']) as $match) { $suffix = ''; if (substr_count($match[0], '.') === 2 && substr_count($newPrettyConstraint, '.') === 1) { $suffix = '.0'; } $modified = substr_replace($modified, $newPrettyConstraint.$suffix, $match[1], Platform::strlen((string) $match[0])); $modified = substr_replace($modified, $newPrettyConstraint.$suffix, $match[1], Platform::strlen((string) $match[0])); } $newConstraint = $parser->parseConstraints($modified); if (Intervals::isSubsetOf($newConstraint, $constraint) && Intervals::isSubsetOf($constraint, $newConstraint)) { return $prettyConstraint; } return $modified; }	type_info: parser:unknown prettyConstraint:unknown newPrettyConstraint:unknown pattern:string modified:unknown suffix:string newConstraint:unknown  global_variable:  function_name: bumpRequirement	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
67	laravel_framework_6216534f14c7cb8bdfa213e5f7e3d357119a4579_62_0	buggy:  context: <?php namespace Illuminate\Database\Eloquent\Concerns; use Carbon\CarbonImmutable; use Carbon\CarbonInterface; use DateTimeInterface; use Illuminate\Contracts\Database\Eloquent\Castable; use Illuminate\Contracts\Database\Eloquent\CastsInboundAttributes; use Illuminate\Contracts\Support\Arrayable; use Illuminate\Database\Eloquent\InvalidCastException; use Illuminate\Database\Eloquent\JsonEncodingException; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Database\LazyLoadingViolationException; use Illuminate\Support\Arr; use Illuminate\Support\Carbon; use Illuminate\Support\Collection as BaseCollection; use Illuminate\Support\Facades\Crypt; use Illuminate\Support\Facades\Date; use Illuminate\Support\Str;	type_info: encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator mutateAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator setMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isJsonCastable isEncryptedCastable isClassCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromClassCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
68	laravel_framework_6216534f14c7cb8bdfa213e5f7e3d357119a4579_62_0	buggy:  context: $this->castAttribute($key, $original); } elseif ($this->hasCast($key, ['real', 'float', 'double'])) { if (($attribute === null && $original !== null) || ($attribute !== null && $original === null)) { return false; } return abs($this->castAttribute($key, $attribute) - $this->castAttribute($key, $original)) < PHP_FLOAT_EPSILON * 4; } elseif ($this->hasCast($key, static::$primitiveCastTypes)) { return $this->castAttribute($key, $attribute) === $this->castAttribute($key, $original); } return is_numeric($attribute) && is_numeric($original) && strcmp((string) $attribute, (string) $original) === 0; } protected function transformModelValue($key, $value) { if ($this->hasGetMutator($key)) { return $this->mutateAttribute($key, $value);	type_info: original:array primitiveCastTypes:array key:unknown value:unknown encrypter:unknown attribute:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator mutateAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator setMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isJsonCastable isEncryptedCastable isClassCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromClassCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
69	laravel_framework_74ad9ece6ce88dd947452cc77284087cf354916a_63_0	buggy:  context: public function sometimes($attribute, $rules, callable $callback) { $payload = new Fluent($this->data); foreach ((array) $attribute as $key) { $response = (new ValidationRuleParser($this->data))->explode([$key => $rules]); foreach ($response->rules as $ruleKey => $ruleValue) { if ($callback($payload, $this->dataForSometimesIteration($ruleKey, ! Str::endsWith($key, '.*')))) { $this->addRules([$ruleKey => $ruleValue]); } } } return $this; }	type_info: messages:array key:unknown attribute:unknown data:unknown rules:unknown response:unknown payload:unknown ruleKey:unknown callback:unknown  global_variable: messages: array data: unknown rules: unknown function_name: __construct parseData replacePlaceholders replacePlaceholderInString after passes fails shouldBeExcluded removeAttribute validate validateWithBag safe validated validateAttribute dependsOnOtherFields getExplicitKeys getPrimaryAttribute replaceAsterisksInParameters isValidatable presentOrRuleIsImplicit isImplicit passesOptionalCheck isNotNullIfMarkedAsNullable hasNotFailedPreviousRuleIfPresenceRule validateUsingCustomRule shouldStopValidating addFailure excludeAttribute valid invalid attributesThatHaveMessages failed messages errors getMessageBag hasRule getRule attributes getData setData getValue getRules setRules addRules sometimes dataForSometimesIteration stopOnFirstFailure addExtensions addImplicitExtensions addDependentExtensions addExtension addImplicitExtension addDependentExtension addReplacers addReplacer setCustomMessages setAttributeNames addCustomAttributes setImplicitAttributesFormatter setValueNames addCustomValues setFallbackMessages getPresenceVerifier setPresenceVerifier setException getTranslator setTranslator setContainer callExtension callClassBasedExtension __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
70	laravel_framework_a0fd30ffc59075448bec9f2e430b8af7b9f4cdf6_64_0	buggy:  context: public function passes($attribute, $value) { $validator = Validator::make($this->data, [ $attribute => 'string|min:'.$this->min, ], $this->validator->customMessages, $this->validator->customAttributes); if ($validator->fails()) { return $this->fail($validator->messages()->all()); } $value = (string) $value;	type_info: defaultCallback:unknown validator:unknown value:unknown  global_variable: defaultCallback: unknown validator: unknown function_name: __construct defaults default required sometimes setValidator setData min uncompromised mixedCase letters numbers symbols passes message fail	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
71	laravel_framework_5588c7a0c8f5c352bbb3edccd8da30cae6bb643b_65_0	buggy:  context: public static function is($pattern, $value) { $patterns = Arr::wrap($pattern); if (empty($patterns)) { return false; } foreach ($patterns as $pattern) { if ($pattern == $value) { return true; } $pattern = preg_quote($pattern, '#');	type_info: patterns:unknown pattern:unknown value:unknown uuidFactory:unknown  global_variable: uuidFactory: unknown function_name: of after afterLast ascii before beforeLast between camel contains containsAll endsWith finish is isAscii isUuid kebab length limit lower words markdown match matchAll padBoth padLeft padRight parseCallback plural pluralStudly random repeat replaceArray replace replaceFirst replaceLast remove start upper title singular slug snake startsWith studly substr substrCount ucfirst wordCount uuid orderedUuid createUuidsUsing createUuidsNormally	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
72	laravel_framework_5588c7a0c8f5c352bbb3edccd8da30cae6bb643b_65_0	buggy:  context: public static function is($pattern, $value) { $patterns = Arr::wrap($pattern); if (empty($patterns)) { return false; } foreach ($patterns as $pattern) { if ($pattern == $value) { return true; } $pattern = preg_quote($pattern, '#'); $pattern = str_replace('\*', '.*', $pattern); if (preg_match('#^'.$pattern.'\z#u', $value) === 1) { return true;	type_info: patterns:unknown pattern:unknown value:unknown uuidFactory:unknown  global_variable: uuidFactory: unknown function_name: of after afterLast ascii before beforeLast between camel contains containsAll endsWith finish is isAscii isUuid kebab length limit lower words markdown match matchAll padBoth padLeft padRight parseCallback plural pluralStudly random repeat replaceArray replace replaceFirst replaceLast remove start upper title singular slug snake startsWith studly substr substrCount ucfirst wordCount uuid orderedUuid createUuidsUsing createUuidsNormally	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
73	laravel_framework_9eb56d9e47ea2c5a1698324e9273ac0a6338e7e8_66_0	buggy: $this->timeout = $timeout ?? 10; context: public function __construct($factory, $timeout = null) { $this->factory = $factory; $this->timeout = $timeout ?? 10; $this->timeout = $timeout ?? 10; }	type_info: timeout:unknown  global_variable: timeout: unknown function_name: __construct verify getHash search	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
74	laravel_framework_02bc7ad306fa1237230abd81bda79e0a9d9d6732_67_0	buggy: $position = strrpos($header, 'Bearer'); context: public function bearerToken() { $header = $this->header('Authorization', ''); $position = strrpos($header, 'Bearer'); $position = strrpos($header, 'Bearer'); if ($position !== false) { $header = substr($header, $position + 7); return strpos($header, ',') !== false ? strstr(',', $header, true) : $header; } }	type_info: header:unknown position:unknown  global_variable:  function_name: server hasHeader header bearerToken exists has hasAny whenHas filled isNotFilled anyFilled whenFilled missing isEmptyString keys all input boolean collect only except query post hasCookie cookie allFiles convertUploadedFiles hasFile isValidFile file retrieveItem dd dump	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
75	laravel_framework_024067fd56b227d74ce0b70d6b78ef5ad7095d6d_68_0	buggy: use Illuminate\Support\Collection; context: <?php namespace Illuminate\Translation; use Countable; use Illuminate\Contracts\Translation\Loader; use Illuminate\Contracts\Translation\Translator as TranslatorContract; use Illuminate\Support\Arr; use Illuminate\Support\Collection; use Illuminate\Support\Collection; use Illuminate\Support\NamespacedItemResolver; use Illuminate\Support\Str; use Illuminate\Support\Traits\Macroable; use InvalidArgumentException; class Translator extends NamespacedItemResolver implements TranslatorContract {	type_info: locale:unknown  global_variable: locale: unknown function_name: __construct hasForLocale has get choice localeForChoice getLine makeReplacements sortReplacements addLines load isLoaded addNamespace addJsonPath parseKey localeArray getSelector setSelector getLoader locale getLocale setLocale getFallback setFallback setLoaded	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
76	laravel_framework_024067fd56b227d74ce0b70d6b78ef5ad7095d6d_68_0	buggy: $replace = $this->sortReplacements($replace); context: protected function makeReplacements($line, array $replace) { if (empty($replace)) { return $line; } $replace = $this->sortReplacements($replace); $replace = $this->sortReplacements($replace); foreach ($replace as $key => $value) { $line = str_replace( [':'.$key, ':'.Str::upper($key), ':'.Str::ucfirst($key)], [$value, Str::upper($value), Str::ucfirst($value)], $line ); } return $line;	type_info: locale:unknown replace:unknown line:unknown key:unknown  global_variable: locale: unknown function_name: __construct hasForLocale has get choice localeForChoice getLine makeReplacements sortReplacements addLines load isLoaded addNamespace addJsonPath parseKey localeArray getSelector setSelector getLoader locale getLocale setLocale getFallback setFallback setLoaded	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
77	laravel_framework_024067fd56b227d74ce0b70d6b78ef5ad7095d6d_68_0	buggy: $line = str_replace( [':'.$key, ':'.Str::upper($key), ':'.Str::ucfirst($key)], [$value, Str::upper($value), Str::ucfirst($value)], $line ); context: protected function makeReplacements($line, array $replace) { if (empty($replace)) { return $line; } $replace = $this->sortReplacements($replace); foreach ($replace as $key => $value) { $line = str_replace( [':'.$key, ':'.Str::upper($key), ':'.Str::ucfirst($key)], [$value, Str::upper($value), Str::ucfirst($value)], $line ); $line = str_replace( [':'.$key, ':'.Str::upper($key), ':'.Str::ucfirst($key)], [$value, Str::upper($value), Str::ucfirst($value)], $line ); } return $line; }	type_info: locale:unknown replace:unknown line:unknown key:unknown  global_variable: locale: unknown function_name: __construct hasForLocale has get choice localeForChoice getLine makeReplacements sortReplacements addLines load isLoaded addNamespace addJsonPath parseKey localeArray getSelector setSelector getLoader locale getLocale setLocale getFallback setFallback setLoaded	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
78	laravel_framework_024067fd56b227d74ce0b70d6b78ef5ad7095d6d_68_0	buggy: return $line; } protected function sortReplacements(array $replace) { return (new Collection($replace))->sortBy(function ($value, $key) { return mb_strlen($key) * -1; })->all(); context: $replace = $this->sortReplacements($replace); foreach ($replace as $key => $value) { $line = str_replace( [':'.$key, ':'.Str::upper($key), ':'.Str::ucfirst($key)], [$value, Str::upper($value), Str::ucfirst($value)], $line ); } return $line; } protected function sortReplacements(array $replace) { return (new Collection($replace))->sortBy(function ($value, $key) { return mb_strlen($key) * -1; })->all(); return $line; } protected function sortReplacements(array $replace) { return (new Collection($replace))->sortBy(function ($value, $key) { return mb_strlen($key) * -1; })->all(); }	type_info: locale:unknown replace:unknown line:unknown key:unknown  global_variable: locale: unknown function_name: __construct hasForLocale has get choice localeForChoice getLine makeReplacements sortReplacements addLines load isLoaded addNamespace addJsonPath parseKey localeArray getSelector setSelector getLoader locale getLocale setLocale getFallback setFallback setLoaded	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	laravel_framework_b3329fad6809d69679075bee42b14d685e189217_69_0	buggy: $shouldReplace[':'.$key] = $value; $shouldReplace[':'.Str::upper($key)] = Str::upper($value); context: protected function makeReplacements($line, array $replace) { if (empty($replace)) { return $line; } $shouldReplace = []; foreach ($replace as $key => $value) { $shouldReplace[':'.$key] = $value; $shouldReplace[':'.Str::upper($key)] = Str::upper($value); $shouldReplace[':'.$key] = $value; $shouldReplace[':'.Str::upper($key)] = Str::upper($value); $shouldReplace[':'.Str::ucfirst($key)] = Str::ucfirst($value); } return strtr($line, $shouldReplace); }	type_info: locale:unknown replace:unknown line:unknown key:unknown shouldReplace:array  global_variable: locale: unknown function_name: __construct hasForLocale has get choice localeForChoice getLine makeReplacements addLines load isLoaded addNamespace addJsonPath parseKey localeArray getSelector setSelector getLoader locale getLocale setLocale getFallback setFallback setLoaded	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	laravel_framework_1b1decbca3ebaddefefdd79aba4182670affd650_70_0	buggy: if (! is_string($middleware)) { $middleware = Arr::wrap($middleware); context: public function middleware($middleware) { if (! is_string($middleware)) { $middleware = Arr::wrap($middleware); if (! is_string($middleware)) { $middleware = Arr::wrap($middleware); foreach ($middleware as $key => $value) { $middleware[$key] = (string) $value; } } $this->options['middleware'] = $middleware; return $this; }	type_info: middleware:unknown key:unknown  global_variable:  function_name: __construct only except names name parameters parameter middleware withoutMiddleware where shallow missing scoped register __destruct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	laravel_framework_1b1decbca3ebaddefefdd79aba4182670affd650_70_0	buggy: foreach ($middleware as $key => $value) { $middleware[$key] = (string) $value; } context: public function middleware($middleware) { if (! is_string($middleware)) { $middleware = Arr::wrap($middleware); foreach ($middleware as $key => $value) { $middleware[$key] = (string) $value; } foreach ($middleware as $key => $value) { $middleware[$key] = (string) $value; } } $this->options['middleware'] = $middleware; return $this; }	type_info: middleware:unknown key:unknown  global_variable:  function_name: __construct only except names name parameters parameter middleware withoutMiddleware where shallow missing scoped register __destruct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	laravel_framework_1b1decbca3ebaddefefdd79aba4182670affd650_70_1	buggy: if (is_string($middleware)) { context: public function middleware($middleware = null) { if (is_null($middleware)) { return (array) ($this->action['middleware'] ?? []); } if (is_string($middleware)) { if (is_string($middleware)) { $middleware = func_get_args(); } $this->action['middleware'] = array_merge( (array) ($this->action['middleware'] ?? []), $middleware ); return $this; }	type_info: uri:unknown action:unknown middleware:unknown lockSeconds:unknown validators:array  global_variable: uri: unknown action: unknown lockSeconds: unknown validators: array function_name: __construct parseAction run isControllerAction runCallable isSerializedClosure runController getController getControllerMethod parseControllerCallback matches compileRoute bind hasParameters hasParameter parameter originalParameter setParameter forgetParameter parameters originalParameters parametersWithoutNulls parameterNames compileParameterNames signatureParameters bindingFieldFor bindingFields setBindingFields parentOfParameter withTrashed allowsTrashedBindings defaults setDefaults where parseWhere setWheres fallback setFallback methods httpOnly httpsOnly secure domain getDomain getPrefix prefix updatePrefixOnAction uri setUri parseUri getName name named uses addGroupNamespaceToStringUses getActionName getActionMethod getAction setAction getMissing missing gatherMiddleware middleware controllerMiddleware withoutMiddleware excludedMiddleware block withoutBlocking locksFor waitsFor controllerDispatcher getValidators toSymfonyRoute getOptionalParameterNames getCompiled setRouter setContainer prepareForSerialization __get	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	laravel_framework_1b1decbca3ebaddefefdd79aba4182670affd650_70_1	buggy:  context: public function middleware($middleware = null) { if (is_null($middleware)) { return (array) ($this->action['middleware'] ?? []); } if (is_string($middleware)) { $middleware = func_get_args(); } $this->action['middleware'] = array_merge( (array) ($this->action['middleware'] ?? []), $middleware ); return $this; }	type_info: uri:unknown action:unknown middleware:unknown lockSeconds:unknown validators:array  global_variable: uri: unknown action: unknown lockSeconds: unknown validators: array function_name: __construct parseAction run isControllerAction runCallable isSerializedClosure runController getController getControllerMethod parseControllerCallback matches compileRoute bind hasParameters hasParameter parameter originalParameter setParameter forgetParameter parameters originalParameters parametersWithoutNulls parameterNames compileParameterNames signatureParameters bindingFieldFor bindingFields setBindingFields parentOfParameter withTrashed allowsTrashedBindings defaults setDefaults where parseWhere setWheres fallback setFallback methods httpOnly httpsOnly secure domain getDomain getPrefix prefix updatePrefixOnAction uri setUri parseUri getName name named uses addGroupNamespaceToStringUses getActionName getActionMethod getAction setAction getMissing missing gatherMiddleware middleware controllerMiddleware withoutMiddleware excludedMiddleware block withoutBlocking locksFor waitsFor controllerDispatcher getValidators toSymfonyRoute getOptionalParameterNames getCompiled setRouter setContainer prepareForSerialization __get	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	laravel_framework_1b1decbca3ebaddefefdd79aba4182670affd650_70_2	"buggy: if ($key === 'middleware' && ! is_string($value)) { $value = Arr::wrap($value); context: public function attribute($key, $value) { if (! in_array($key, $this->allowedAttributes)) { throw new InvalidArgumentException(""Attribute [{$key}] does not exist.""); } if ($key === 'middleware' && ! is_string($value)) { $value = Arr::wrap($value); if ($key === 'middleware' && ! is_string($value)) { $value = Arr::wrap($value); foreach ($value as $index => $middleware) { $value[$index] = (string) $middleware; } } $this->attributes[Arr::get($this->aliases, $key, $key)] = $value; return $this; }"	type_info: key:unknown index:unknown  global_variable:  function_name: __construct attribute resource apiResource group match registerRoute compileAction __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	laravel_framework_3282651b0baeabc85073ea4b6818b911ccfc980d_71_0	buggy: ? rtrim($this->prefix, '/').'/'.Str::finish($queue, $this->suffix) context: public function getQueue($queue) { $queue = $queue ?: $this->default; return filter_var($queue, FILTER_VALIDATE_URL) === false ? rtrim($this->prefix, '/').'/'.Str::finish($queue, $this->suffix) ? rtrim($this->prefix, '/').'/'.Str::finish($queue, $this->suffix) : $queue; }	type_info: prefix:unknown queue:unknown  global_variable: prefix: unknown function_name: __construct size push pushRaw later pop clear getQueue getSqs	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	laravel_framework_3282651b0baeabc85073ea4b6818b911ccfc980d_71_0	buggy:  context: public function getQueue($queue) { $queue = $queue ?: $this->default; return filter_var($queue, FILTER_VALIDATE_URL) === false ? rtrim($this->prefix, '/').'/'.Str::finish($queue, $this->suffix) : $queue; } public function getSqs()	type_info: prefix:unknown queue:unknown  global_variable: prefix: unknown function_name: __construct size push pushRaw later pop clear getQueue getSqs	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	laravel_framework_8e2d72728d6911816a97843ec3341e28c92af120_72_0	"buggy: ? trim(explode('=', $contentDisposition[1])[1]) context: } $message = ""Expected file [{$filename}] is not present in Content-Disposition header.""; if (! isset($contentDisposition[1])) { PHPUnit::fail($message); } else { PHPUnit::assertSame( $filename, isset(explode('=', $contentDisposition[1])[1]) ? trim(explode('=', $contentDisposition[1])[1]) ? trim(explode('=', $contentDisposition[1])[1]) : '', $message ); return $this; } } else { PHPUnit::assertTrue(true);"	type_info: message:string filename:unknown  global_variable:  function_name: __construct fromBaseResponse assertSuccessful assertOk assertCreated assertNoContent assertNotFound assertForbidden assertUnauthorized assertUnprocessable assertStatus statusMessageWithDetails statusMessageWithException statusMessageWithErrors assertRedirect assertRedirectContains assertRedirectToSignedRoute assertHeader assertHeaderMissing assertLocation assertDownload assertPlainCookie assertCookie assertCookieExpired assertCookieNotExpired assertCookieMissing getCookie assertSee assertSeeInOrder assertSeeText assertSeeTextInOrder assertDontSee assertDontSeeText assertJson assertJsonPath assertExactJson assertSimilarJson assertJsonFragment assertJsonMissing assertJsonMissingExact assertJsonStructure assertJsonCount assertJsonValidationErrors assertJsonMissingValidationErrors decodeResponseJson json assertViewIs assertViewHas assertViewHasAll viewData assertViewMissing ensureResponseHasView responseHasView assertValid assertInvalid assertSessionHas assertSessionHasAll assertSessionHasInput assertSessionHasErrors assertSessionDoesntHaveErrors assertSessionHasNoErrors assertSessionHasErrorsIn assertSessionMissing session dd ddHeaders ddSession dump dumpHeaders dumpSession streamedContent withExceptions __get __isset offsetExists offsetGet offsetSet offsetUnset __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	laravel_framework_1c92ee586af684ee82f6560d582475fa6bd430ae_73_0	buggy:  context: protected function ensureCacheDirectoryExists($path) { $directory = dirname($path); if (! $this->files->exists($directory)) { $this->files->makeDirectory($directory, 0777, true, true); $this->ensurePermissionsAreCorrect($directory); } }	type_info: filePermission:unknown path:unknown directory:unknown  global_variable: filePermission: unknown directory: unknown function_name: __construct get put add ensureCacheDirectoryExists ensurePermissionsAreCorrect increment decrement forever forget flush getPayload emptyPayload path expiration getFilesystem getDirectory getPrefix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	laravel_framework_1c92ee586af684ee82f6560d582475fa6bd430ae_73_0	buggy:  context: protected function ensureCacheDirectoryExists($path) { $directory = dirname($path); if (! $this->files->exists($directory)) { $this->files->makeDirectory($directory, 0777, true, true); $this->ensurePermissionsAreCorrect($directory); } }	type_info: filePermission:unknown path:unknown directory:unknown  global_variable: filePermission: unknown directory: unknown function_name: __construct get put add ensureCacheDirectoryExists ensurePermissionsAreCorrect increment decrement forever forget flush getPayload emptyPayload path expiration getFilesystem getDirectory getPrefix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	laravel_framework_40f215051692900010098227a2bb30b5e82c57f1_74_0	"buggy: $hash = array_pop(static::$componentHashStack); return implode(""\n"", [ '<?php if (isset($__componentOriginal'.$hash.')): ?>', '<?php $component = $__componentOriginal'.$hash.'; ?>', '<?php unset($__componentOriginal'.$hash.'); ?>', '<?php endif; ?>', '<?php echo $__env->renderComponent(); ?>', ]); context: protected function compileEndComponent() { $hash = array_pop(static::$componentHashStack); return implode(""\n"", [ '<?php if (isset($__componentOriginal'.$hash.')): ?>', '<?php $component = $__componentOriginal'.$hash.'; ?>', '<?php unset($__componentOriginal'.$hash.'); ?>', '<?php endif; ?>', '<?php echo $__env->renderComponent(); ?>', ]); $hash = array_pop(static::$componentHashStack); return implode(""\n"", [ '<?php if (isset($__componentOriginal'.$hash.')): ?>', '<?php $component = $__componentOriginal'.$hash.'; ?>', '<?php unset($__componentOriginal'.$hash.'); ?>', '<?php endif; ?>', '<?php echo $__env->renderComponent(); ?>', ]); }"	type_info: componentHashStack:array component:unknown hash:unknown  global_variable:  function_name: compileComponent newComponentHash compileClassComponentOpening compileEndComponent compileEndComponentClass compileSlot compileEndSlot compileComponentFirst compileEndComponentFirst compileProps compileAware sanitizeComponentAttribute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	laravel_framework_40f215051692900010098227a2bb30b5e82c57f1_74_0	"buggy:  context: public function compileEndComponentClass() { return $this->compileEndComponent().""\n"".implode(""\n"", [ '<?php endif; ?>', ]); }"	type_info:  global_variable:  function_name: compileComponent newComponentHash compileClassComponentOpening compileEndComponent compileEndComponentClass compileSlot compileEndSlot compileComponentFirst compileEndComponentFirst compileProps compileAware sanitizeComponentAttribute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	laravel_framework_40f215051692900010098227a2bb30b5e82c57f1_74_0	"buggy:  context: public function compileEndComponentClass() { return $this->compileEndComponent().""\n"".implode(""\n"", [ '<?php endif; ?>', ]); }"	type_info:  global_variable:  function_name: compileComponent newComponentHash compileClassComponentOpening compileEndComponent compileEndComponentClass compileSlot compileEndSlot compileComponentFirst compileEndComponentFirst compileProps compileAware sanitizeComponentAttribute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	laravel_framework_cfab148764571b75817204a0d9291e2e85dc5b13_75_0	buggy:  context: yield $stripped; $interfaces = @class_implements($stripped); if ($interfaces !== false) { foreach ($interfaces as $interface) { yield $interface; } } } protected function moveMiddleware($middlewares, $from, $to) { array_splice($middlewares, $to, 0, $middlewares[$from]); unset($middlewares[$from + 1]); return $middlewares; }	type_info: middlewares:unknown stripped:unknown interfaces:unknown  global_variable:  function_name: __construct sortMiddleware priorityMapIndex middlewareNames moveMiddleware	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	laravel_framework_cefe5cfd8f4ff0abc90d74d196b8537891d2d68a_76_0	buggy: return $this->assertSoftDeleted($table->getTable(), [$table->getKeyName() => $table->getKey()], $table->getConnectionName(), $table->getDeletedAtColumn()); context: protected function assertSoftDeleted($table, array $data = [], $connection = null, $deletedAtColumn = 'deleted_at') { if ($this->isSoftDeletableModel($table)) { return $this->assertSoftDeleted($table->getTable(), [$table->getKeyName() => $table->getKey()], $table->getConnectionName(), $table->getDeletedAtColumn()); return $this->assertSoftDeleted($table->getTable(), [$table->getKeyName() => $table->getKey()], $table->getConnectionName(), $table->getDeletedAtColumn()); } $this->assertThat( $this->getTable($table), new SoftDeletedInDatabase($this->getConnection($connection), $data, $deletedAtColumn) ); return $this; }	type_info: connection:unknown data:unknown  global_variable:  function_name: assertDatabaseHas assertDatabaseMissing assertDatabaseCount assertDeleted assertSoftDeleted assertNotSoftDeleted assertModelExists assertModelMissing isSoftDeletableModel castAsJson getConnection getTable seed	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	laravel_framework_cefe5cfd8f4ff0abc90d74d196b8537891d2d68a_76_0	buggy:  context: protected function assertNotSoftDeleted($table, array $data = [], $connection = null, $deletedAtColumn = 'deleted_at') { if ($this->isSoftDeletableModel($table)) { return $this->assertNotSoftDeleted($table->getTable(), [$table->getKeyName() => $table->getKey()], $table->getConnectionName(), $table->getDeletedAtColumn()); } $this->assertThat( $this->getTable($table), new NotSoftDeletedInDatabase($this->getConnection($connection), $data, $deletedAtColumn) ); return $this; }	type_info: connection:unknown data:unknown  global_variable:  function_name: assertDatabaseHas assertDatabaseMissing assertDatabaseCount assertDeleted assertSoftDeleted assertNotSoftDeleted assertModelExists assertModelMissing isSoftDeletableModel castAsJson getConnection getTable seed	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	laravel_framework_c9788935c5fc44e678188fdde148315c52448ff7_77_0	buggy:  context: public function runningUnitTests() { return $this->bound('env') && $this['env'] === 'testing'; } public function registerConfiguredProviders()	type_info: basePath:unknown namespace:unknown  global_variable: basePath: unknown namespace: unknown function_name: __construct version registerBaseBindings registerBaseServiceProviders bootstrapWith afterLoadingEnvironment beforeBootstrapping afterBootstrapping hasBeenBootstrapped setBasePath bindPathsInContainer path useAppPath basePath bootstrapPath configPath databasePath useDatabasePath langPath useLangPath publicPath storagePath useStoragePath resourcePath viewPath environmentPath useEnvironmentPath loadEnvironmentFrom environmentFile environmentFilePath environment isLocal isProduction detectEnvironment runningInConsole runningUnitTests registerConfiguredProviders register getProvider getProviders resolveProvider markAsRegistered loadDeferredProviders loadDeferredProvider registerDeferredProvider make resolve loadDeferredProviderIfNeeded bound isBooted boot bootProvider booting booted fireAppCallbacks handle shouldSkipMiddleware getCachedServicesPath getCachedPackagesPath configurationIsCached getCachedConfigPath routesAreCached getCachedRoutesPath eventsAreCached getCachedEventsPath normalizeCachePath addAbsoluteCachePathPrefix isDownForMaintenance abort terminating terminate getLoadedProviders providerIsLoaded getDeferredServices setDeferredServices addDeferredServices isDeferredService provideFacades getLocale currentLocale getFallbackLocale setLocale setFallbackLocale isLocale registerCoreContainerAliases flush getNamespace	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	laravel_framework_606ac0a386c1215b8c472520364b7d86f94afb09_78_0	buggy:  context: <?php namespace Illuminate\Foundation\Bootstrap; use ErrorException; use Exception; use Illuminate\Contracts\Debug\ExceptionHandler; use Illuminate\Contracts\Foundation\Application; use Illuminate\Log\LogManager; use Symfony\Component\Console\Output\ConsoleOutput; use Symfony\Component\ErrorHandler\Error\FatalError; use Throwable; class HandleExceptions { public static $reservedMemory; protected $app;	type_info: reservedMemory:unknown  global_variable: reservedMemory: unknown function_name: bootstrap handleError handleDeprecation ensureDeprecationLoggerIsConfigured handleException renderForConsole renderHttpResponse handleShutdown fatalErrorFromPhpError isDeprecation isFatal getExceptionHandler	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	laravel_framework_606ac0a386c1215b8c472520364b7d86f94afb09_78_0	"buggy:  context: with($this->app['config'], function ($config) { if ($config->get('logging.channels.deprecations')) { return; } $driver = $config->get('logging.deprecations') ?? 'null'; $config->set('logging.channels.deprecations', $config->get(""logging.channels.{$driver}"")); }); }"	type_info: reservedMemory:unknown driver:unknown  global_variable: reservedMemory: unknown function_name: bootstrap handleError handleDeprecation ensureDeprecationLoggerIsConfigured handleException renderForConsole renderHttpResponse handleShutdown fatalErrorFromPhpError isDeprecation isFatal getExceptionHandler	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	laravel_framework_606ac0a386c1215b8c472520364b7d86f94afb09_78_0	"buggy:  context: if ($config->get('logging.channels.deprecations')) { return; } $driver = $config->get('logging.deprecations') ?? 'null'; $config->set('logging.channels.deprecations', $config->get(""logging.channels.{$driver}"")); }); } public function handleException(Throwable $e) { try { self::$reservedMemory = null; $this->getExceptionHandler()->report($e); } catch (Exception $e) { } if ($this->app->runningInConsole()) {"	type_info: reservedMemory:unknown driver:unknown  global_variable: reservedMemory: unknown function_name: bootstrap handleError handleDeprecation ensureDeprecationLoggerIsConfigured handleException renderForConsole renderHttpResponse handleShutdown fatalErrorFromPhpError isDeprecation isFatal getExceptionHandler	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	laravel_framework_451f7f5cfe5595337fac8f3d7f10d9c751cfd1be_79_0	buggy: * @param Model|Relation $query context: public function resolveSoftDeletableRouteBinding($value, $field = null) { return $this->resolveRouteBindingQuery($this, $value, $field)->withTrashed()->first(); } * @param Model|Relation $query public function resolveRouteBindingQuery($query, $value, $field = null)	type_info: value:unknown lazyLoadingViolationCallback:unknown connection:unknown query:unknown resolver:unknown field:unknown  global_variable: lazyLoadingViolationCallback: unknown connection: unknown resolver: unknown function_name: __construct bootIfNotBooted booting boot bootTraits initializeTraits booted clearBootedModels withoutTouching withoutTouchingOn isIgnoringTouch preventLazyLoading handleLazyLoadingViolationUsing withoutBroadcasting fill forceFill qualifyColumn qualifyColumns newInstance newFromBuilder on onWriteConnection all with load loadMorph loadMissing loadAggregate loadCount loadMax loadMin loadSum loadAvg loadExists loadMorphAggregate loadMorphCount loadMorphMax loadMorphMin loadMorphSum loadMorphAvg increment decrement incrementOrDecrement update updateOrFail updateQuietly push saveQuietly save saveOrFail finishSave performUpdate setKeysForSelectQuery getKeyForSelectQuery setKeysForSaveQuery getKeyForSaveQuery performInsert insertAndSetId destroy delete deleteOrFail forceDelete performDeleteOnModel query newQuery newModelQuery newQueryWithoutRelationships registerGlobalScopes newQueryWithoutScopes newQueryWithoutScope newQueryForRestoration newEloquentBuilder newBaseQueryBuilder newCollection newPivot hasNamedScope callNamedScope toArray toJson jsonSerialize fresh refresh replicate is isNot getConnection getConnectionName setConnection resolveConnection getConnectionResolver setConnectionResolver unsetConnectionResolver getTable setTable getKeyName setKeyName getQualifiedKeyName getKeyType setKeyType getIncrementing setIncrementing getKey getQueueableId getQueueableRelations getQueueableConnection getRouteKey getRouteKeyName resolveRouteBinding resolveSoftDeletableRouteBinding resolveRouteBindingQuery resolveChildRouteBinding resolveSoftDeletableChildRouteBinding resolveChildRouteBindingQuery getForeignKey getPerPage setPerPage preventsLazyLoading broadcastChannelRoute broadcastChannel __get __set offsetExists offsetGet offsetSet offsetUnset __isset __unset __call __callStatic __toString escapeWhenCastingToString __sleep __wakeup	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	laravel_framework_451f7f5cfe5595337fac8f3d7f10d9c751cfd1be_79_0	buggy: return $relationship->getRelated()->resolveRouteBindingQuery($relationship, $value, $field); context: $relationship = $this->{Str::plural(Str::camel($childType))}(); $field = $field ?: $relationship->getRelated()->getRouteKeyName(); if ($relationship instanceof HasManyThrough || $relationship instanceof BelongsToMany) { $field = $relationship->getRelated()->getTable().'.'.$field; } if ($relationship instanceof Model) { return $relationship->getRelated()->resolveRouteBindingQuery($relationship, $value, $field); return $relationship->getRelated()->resolveRouteBindingQuery($relationship, $value, $field); } return $relationship->where($field, $value); } public function getForeignKey() { return Str::snake(class_basename($this)).'_'.$this->getKeyName(); }	type_info: value:unknown lazyLoadingViolationCallback:unknown connection:unknown resolver:unknown field:unknown relationship:unknown  global_variable: lazyLoadingViolationCallback: unknown connection: unknown resolver: unknown function_name: __construct bootIfNotBooted booting boot bootTraits initializeTraits booted clearBootedModels withoutTouching withoutTouchingOn isIgnoringTouch preventLazyLoading handleLazyLoadingViolationUsing withoutBroadcasting fill forceFill qualifyColumn qualifyColumns newInstance newFromBuilder on onWriteConnection all with load loadMorph loadMissing loadAggregate loadCount loadMax loadMin loadSum loadAvg loadExists loadMorphAggregate loadMorphCount loadMorphMax loadMorphMin loadMorphSum loadMorphAvg increment decrement incrementOrDecrement update updateOrFail updateQuietly push saveQuietly save saveOrFail finishSave performUpdate setKeysForSelectQuery getKeyForSelectQuery setKeysForSaveQuery getKeyForSaveQuery performInsert insertAndSetId destroy delete deleteOrFail forceDelete performDeleteOnModel query newQuery newModelQuery newQueryWithoutRelationships registerGlobalScopes newQueryWithoutScopes newQueryWithoutScope newQueryForRestoration newEloquentBuilder newBaseQueryBuilder newCollection newPivot hasNamedScope callNamedScope toArray toJson jsonSerialize fresh refresh replicate is isNot getConnection getConnectionName setConnection resolveConnection getConnectionResolver setConnectionResolver unsetConnectionResolver getTable setTable getKeyName setKeyName getQualifiedKeyName getKeyType setKeyType getIncrementing setIncrementing getKey getQueueableId getQueueableRelations getQueueableConnection getRouteKey getRouteKeyName resolveRouteBinding resolveSoftDeletableRouteBinding resolveRouteBindingQuery resolveChildRouteBinding resolveSoftDeletableChildRouteBinding resolveChildRouteBindingQuery getForeignKey getPerPage setPerPage preventsLazyLoading broadcastChannelRoute broadcastChannel __get __set offsetExists offsetGet offsetSet offsetUnset __isset __unset __call __callStatic __toString escapeWhenCastingToString __sleep __wakeup	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	laravel_framework_451f7f5cfe5595337fac8f3d7f10d9c751cfd1be_79_0	buggy: return $relationship->where($field, $value); context: if ($relationship instanceof HasManyThrough || $relationship instanceof BelongsToMany) { $field = $relationship->getRelated()->getTable().'.'.$field; } if ($relationship instanceof Model) { return $relationship->getRelated()->resolveRouteBindingQuery($relationship, $value, $field); } return $relationship->where($field, $value); return $relationship->where($field, $value); } public function getForeignKey() { return Str::snake(class_basename($this)).'_'.$this->getKeyName(); } public function getPerPage() {	type_info: value:unknown lazyLoadingViolationCallback:unknown connection:unknown resolver:unknown field:unknown relationship:unknown  global_variable: lazyLoadingViolationCallback: unknown connection: unknown resolver: unknown function_name: __construct bootIfNotBooted booting boot bootTraits initializeTraits booted clearBootedModels withoutTouching withoutTouchingOn isIgnoringTouch preventLazyLoading handleLazyLoadingViolationUsing withoutBroadcasting fill forceFill qualifyColumn qualifyColumns newInstance newFromBuilder on onWriteConnection all with load loadMorph loadMissing loadAggregate loadCount loadMax loadMin loadSum loadAvg loadExists loadMorphAggregate loadMorphCount loadMorphMax loadMorphMin loadMorphSum loadMorphAvg increment decrement incrementOrDecrement update updateOrFail updateQuietly push saveQuietly save saveOrFail finishSave performUpdate setKeysForSelectQuery getKeyForSelectQuery setKeysForSaveQuery getKeyForSaveQuery performInsert insertAndSetId destroy delete deleteOrFail forceDelete performDeleteOnModel query newQuery newModelQuery newQueryWithoutRelationships registerGlobalScopes newQueryWithoutScopes newQueryWithoutScope newQueryForRestoration newEloquentBuilder newBaseQueryBuilder newCollection newPivot hasNamedScope callNamedScope toArray toJson jsonSerialize fresh refresh replicate is isNot getConnection getConnectionName setConnection resolveConnection getConnectionResolver setConnectionResolver unsetConnectionResolver getTable setTable getKeyName setKeyName getQualifiedKeyName getKeyType setKeyType getIncrementing setIncrementing getKey getQueueableId getQueueableRelations getQueueableConnection getRouteKey getRouteKeyName resolveRouteBinding resolveSoftDeletableRouteBinding resolveRouteBindingQuery resolveChildRouteBinding resolveSoftDeletableChildRouteBinding resolveChildRouteBindingQuery getForeignKey getPerPage setPerPage preventsLazyLoading broadcastChannelRoute broadcastChannel __get __set offsetExists offsetGet offsetSet offsetUnset __isset __unset __call __callStatic __toString escapeWhenCastingToString __sleep __wakeup	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	laravel_framework_5eee71cab56452fed72ea44ebbaac0974da59a0d_80_0	buggy:  context: public function redirect() { return $this->status() >= 300 && $this->status() < 400; } public function failed()	type_info:  global_variable:  function_name: __construct body json object collect header headers status reason effectiveUri successful ok redirect failed clientError serverError onError cookies handlerStats close toPsrResponse toException throw throwIf offsetExists offsetGet offsetSet offsetUnset __toString __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	laravel_framework_00a3c25b002336f7cd20fe1ac30f6986239c7f47_81_0	buggy: $values = array_unique($this->store->connection()->smembers($referenceKey)); context: protected function deleteValues($referenceKey) { $values = array_unique($this->store->connection()->smembers($referenceKey)); $values = array_unique($this->store->connection()->smembers($referenceKey)); if (count($values) > 0) { foreach (array_chunk($values, 1000) as $valuesChunk) { $this->store->connection()->del(...$valuesChunk); } } }	type_info: values:unknown  global_variable:  function_name: put increment decrement forever flush pushStandardKeys pushForeverKeys pushKeys deleteForeverKeys deleteStandardKeys deleteKeysByReference deleteValues referenceKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	laravel_framework_00a3c25b002336f7cd20fe1ac30f6986239c7f47_81_0	buggy: if (count($values) > 0) { foreach (array_chunk($values, 1000) as $valuesChunk) { context: protected function deleteValues($referenceKey) { $values = array_unique($this->store->connection()->smembers($referenceKey)); if (count($values) > 0) { foreach (array_chunk($values, 1000) as $valuesChunk) { if (count($values) > 0) { foreach (array_chunk($values, 1000) as $valuesChunk) { $this->store->connection()->del(...$valuesChunk); } } }	type_info: values:unknown  global_variable:  function_name: put increment decrement forever flush pushStandardKeys pushForeverKeys pushKeys deleteForeverKeys deleteStandardKeys deleteKeysByReference deleteValues referenceKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	laravel_framework_00a3c25b002336f7cd20fe1ac30f6986239c7f47_81_0	buggy: } context: protected function deleteValues($referenceKey) { $values = array_unique($this->store->connection()->smembers($referenceKey)); if (count($values) > 0) { foreach (array_chunk($values, 1000) as $valuesChunk) { $this->store->connection()->del(...$valuesChunk); } } } }	type_info: values:unknown  global_variable:  function_name: put increment decrement forever flush pushStandardKeys pushForeverKeys pushKeys deleteForeverKeys deleteStandardKeys deleteKeysByReference deleteValues referenceKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	laravel_framework_bf949b81439a9e801b67068869073ec36904b340_82_0	buggy: $cursor = $defaultCursorValue = '0'; context: protected function deleteValues($referenceKey) { $cursor = $defaultCursorValue = '0'; $cursor = $defaultCursorValue = '0'; do { [$cursor, $valuesChunk] = $this->store->connection()->sscan( $referenceKey, $cursor, ['MATCH' => '*', 'COUNT' => 1000] ); $valuesChunk = array_unique($valuesChunk); if (count($valuesChunk) > 0) { $this->store->connection()->del(...$valuesChunk);	type_info: cursor:unknown valuesChunk:unknown  global_variable:  function_name: put increment decrement forever flush pushStandardKeys pushForeverKeys pushKeys deleteForeverKeys deleteStandardKeys deleteKeysByReference deleteValues referenceKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	laravel_framework_bf949b81439a9e801b67068869073ec36904b340_82_0	buggy: do { [$cursor, $valuesChunk] = $this->store->connection()->sscan( $referenceKey, $cursor, ['MATCH' => '*', 'COUNT' => 1000] ); $valuesChunk = array_unique($valuesChunk); if (count($valuesChunk) > 0) { context: protected function deleteValues($referenceKey) { $cursor = $defaultCursorValue = '0'; do { [$cursor, $valuesChunk] = $this->store->connection()->sscan( $referenceKey, $cursor, ['MATCH' => '*', 'COUNT' => 1000] ); $valuesChunk = array_unique($valuesChunk); if (count($valuesChunk) > 0) { do { [$cursor, $valuesChunk] = $this->store->connection()->sscan( $referenceKey, $cursor, ['MATCH' => '*', 'COUNT' => 1000] ); $valuesChunk = array_unique($valuesChunk); if (count($valuesChunk) > 0) { $this->store->connection()->del(...$valuesChunk); } } while ($cursor !== $defaultCursorValue); } protected function referenceKey($segment, $suffix) { return $this->store->getPrefix().$segment.':'.$suffix; } }	type_info: segment:unknown cursor:unknown valuesChunk:unknown  global_variable:  function_name: put increment decrement forever flush pushStandardKeys pushForeverKeys pushKeys deleteForeverKeys deleteStandardKeys deleteKeysByReference deleteValues referenceKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	laravel_framework_bf949b81439a9e801b67068869073ec36904b340_82_0	buggy: } while ($cursor !== $defaultCursorValue); context: do { [$cursor, $valuesChunk] = $this->store->connection()->sscan( $referenceKey, $cursor, ['MATCH' => '*', 'COUNT' => 1000] ); $valuesChunk = array_unique($valuesChunk); if (count($valuesChunk) > 0) { $this->store->connection()->del(...$valuesChunk); } } while ($cursor !== $defaultCursorValue); } while ($cursor !== $defaultCursorValue); } protected function referenceKey($segment, $suffix) { return $this->store->getPrefix().$segment.':'.$suffix; } }	type_info: segment:unknown cursor:unknown valuesChunk:unknown  global_variable:  function_name: put increment decrement forever flush pushStandardKeys pushForeverKeys pushKeys deleteForeverKeys deleteStandardKeys deleteKeysByReference deleteValues referenceKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	laravel_framework_74d5464f73e4ddaffa5827b6a351d99d75baba1b_83_0	buggy: $values = array_unique($this->store->connection()->smembers($referenceKey)); context: protected function deleteValues($referenceKey) { $values = array_unique($this->store->connection()->smembers($referenceKey)); $values = array_unique($this->store->connection()->smembers($referenceKey)); if (count($values) > 0) { foreach (array_chunk($values, 1000) as $valuesChunk) { $this->store->connection()->del(...$valuesChunk); } } }	type_info: values:unknown  global_variable:  function_name: put increment decrement forever flush pushStandardKeys pushForeverKeys pushKeys deleteForeverKeys deleteStandardKeys deleteKeysByReference deleteValues referenceKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	laravel_framework_74d5464f73e4ddaffa5827b6a351d99d75baba1b_83_0	buggy: if (count($values) > 0) { foreach (array_chunk($values, 1000) as $valuesChunk) { context: protected function deleteValues($referenceKey) { $values = array_unique($this->store->connection()->smembers($referenceKey)); if (count($values) > 0) { foreach (array_chunk($values, 1000) as $valuesChunk) { if (count($values) > 0) { foreach (array_chunk($values, 1000) as $valuesChunk) { $this->store->connection()->del(...$valuesChunk); } } }	type_info: values:unknown  global_variable:  function_name: put increment decrement forever flush pushStandardKeys pushForeverKeys pushKeys deleteForeverKeys deleteStandardKeys deleteKeysByReference deleteValues referenceKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	laravel_framework_74d5464f73e4ddaffa5827b6a351d99d75baba1b_83_0	buggy: } context: protected function deleteValues($referenceKey) { $values = array_unique($this->store->connection()->smembers($referenceKey)); if (count($values) > 0) { foreach (array_chunk($values, 1000) as $valuesChunk) { $this->store->connection()->del(...$valuesChunk); } } } }	type_info: values:unknown  global_variable:  function_name: put increment decrement forever flush pushStandardKeys pushForeverKeys pushKeys deleteForeverKeys deleteStandardKeys deleteKeysByReference deleteValues referenceKey	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	laravel_framework_d037fc509c8928f451f74ae80ff72074beba721b_84_0	buggy: * Merge new options into the client. context: public function retry(int $times, int $sleep = 0, ?callable $when = null) { $this->tries = $times; $this->retryDelay = $sleep; $this->retryWhenCallback = $when; return $this; } * Merge new options into the client. public function withOptions(array $options)	type_info: options:array factory:unknown sleep:unknown promise:unknown  global_variable: factory: unknown promise: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies withoutRedirecting withoutVerifying sink timeout retry withOptions withMiddleware beforeSending dump dd get head post patch put delete pool send parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	laravel_framework_d037fc509c8928f451f74ae80ff72074beba721b_84_0	buggy: return $this->options = array_merge_recursive($this->options, $options); context: return tap($this, function ($request) use ($options) { return $this->options = array_merge_recursive($this->options, $options); return $this->options = array_merge_recursive($this->options, $options); }); }	type_info: options:array factory:unknown promise:unknown  global_variable: factory: unknown promise: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies withoutRedirecting withoutVerifying sink timeout retry withOptions withMiddleware beforeSending dump dd get head post patch put delete pool send parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	laravel_framework_d037fc509c8928f451f74ae80ff72074beba721b_84_0	buggy: * Merge the given options with the current request options. context: return tap($request, function ($request) use ($options) { $this->beforeSendingCallbacks->each->__invoke( (new Request($request))->withData($options['laravel_data']), $options, $this ); }); } * Merge the given options with the current request options. public function mergeOptions(...$options)	type_info: options:array factory:unknown promise:unknown  global_variable: factory: unknown promise: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies withoutRedirecting withoutVerifying sink timeout retry withOptions withMiddleware beforeSending dump dd get head post patch put delete pool send parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	laravel_framework_d037fc509c8928f451f74ae80ff72074beba721b_84_0	buggy: return array_merge_recursive($this->options, ...$options); context: public function mergeOptions(...$options) { return array_merge_recursive($this->options, ...$options); return array_merge_recursive($this->options, ...$options); }	type_info: options:array factory:unknown promise:unknown  global_variable: factory: unknown promise: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies withoutRedirecting withoutVerifying sink timeout retry withOptions withMiddleware beforeSending dump dd get head post patch put delete pool send parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	laravel_framework_d037fc509c8928f451f74ae80ff72074beba721b_84_0	buggy:  context: public function setHandler($handler) { $this->client = $this->createClient( $this->pushHandlers(HandlerStack::create($handler)) ); return $this; } }	type_info: factory:unknown promise:unknown  global_variable: factory: unknown promise: unknown function_name: __construct baseUrl withBody asJson asForm attach asMultipart bodyFormat contentType acceptJson accept withHeaders withBasicAuth withDigestAuth withToken withUserAgent withCookies withoutRedirecting withoutVerifying sink timeout retry withOptions withMiddleware beforeSending dump dd get head post patch put delete pool send parseMultipartBodyFormat makePromise sendRequest parseRequestData populateResponse buildClient requestsReusableClient getReusableClient createClient buildHandlerStack pushHandlers buildBeforeSendingHandler buildRecorderHandler buildStubHandler sinkStubHandler runBeforeSendingCallbacks mergeOptions stub async getPromise dispatchRequestSendingEvent dispatchResponseReceivedEvent dispatchConnectionFailedEvent setClient setHandler	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	laravel_framework_5a8585ad15265be1c722000ec94d96d40df86f3a_85_0	buggy:  context: public function isRelation($key) { return method_exists($this, $key) || (static::$relationResolvers[get_class($this)][$key] ?? null); }	type_info: key:unknown encrypter:unknown  global_variable: encrypter: unknown function_name: attributesToArray addDateAttributesToArray addMutatedAttributesToArray addCastAttributesToArray getArrayableAttributes getArrayableAppends relationsToArray getArrayableRelations getArrayableItems getAttribute getAttributeValue getAttributeFromArray getRelationValue isRelation handleLazyLoadingViolation getRelationshipFromMethod hasGetMutator hasAttributeMutator hasAttributeGetMutator mutateAttribute mutateAttributeMarkedAttribute mutateAttributeForArray mergeCasts castAttribute getClassCastableAttributeValue getEnumCastableAttributeValue getCastType deviateClassCastableAttribute serializeClassCastableAttribute isCustomDateTimeCast isImmutableCustomDateTimeCast isDecimalCast setAttribute hasSetMutator hasAttributeSetMutator setMutatedAttributeValue setAttributeMarkedMutatedAttributeValue isDateAttribute fillJsonAttribute setClassCastableAttribute setEnumCastableAttribute getArrayAttributeWithValue getArrayAttributeByKey castAttributeAsJson asJson fromJson fromEncryptedString castAttributeAsEncryptedString encryptUsing fromFloat asDecimal asDate asDateTime isStandardDateFormat fromDateTime asTimestamp serializeDate getDates getDateFormat setDateFormat hasCast getCasts isDateCastable isDateCastableWithCustomFormat isJsonCastable isEncryptedCastable isClassCastable isEnumCastable isClassDeviable isClassSerializable resolveCasterClass parseCasterClass mergeAttributesFromCachedCasts mergeAttributesFromClassCasts mergeAttributesFromAttributeCasts normalizeCastClassResponse getAttributes getAttributesForInsert setRawAttributes getOriginal getOriginalWithoutRewindingModel getRawOriginal only syncOriginal syncOriginalAttribute syncOriginalAttributes syncChanges isDirty isClean wasChanged hasChanges getDirty getChanges originalIsEquivalent transformModelValue append setAppends hasAppended getMutatedAttributes cacheMutatedAttributes getMutatorMethods getAttributeMarkedMutatorMethods	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	laravel_framework_424bdd409b141727b9ffafd33a32ca9a17bd34e8_86_0	buggy: $values[$qualifiedColumn] = $values[$column]; context: $values = array_merge( [$column => $this->model->freshTimestampString()], $values ); $segments = preg_split('/\s+as\s+/i', $this->query->from); $qualifiedColumn = end($segments).'.'.$column; $values[$qualifiedColumn] = $values[$column]; $values[$qualifiedColumn] = $values[$column]; unset($values[$column]); return $values; } protected function addTimestampsToUpsertValues(array $values) { if (! $this->model->usesTimestamps()) {	type_info: column:unknown model:unknown values:array segments:unknown qualifiedColumn:unknown query:unknown  global_variable: model: unknown query: unknown function_name: __construct make withGlobalScope withoutGlobalScope withoutGlobalScopes removedScopes whereKey whereKeyNot where firstWhere orWhere latest oldest hydrate fromQuery find findMany findOrFail findOrNew firstOrNew firstOrCreate updateOrCreate firstOrFail firstOr sole value valueOrFail get getModels eagerLoadRelations eagerLoadRelation getRelation relationsNestedUnder isNestedUnder cursor enforceOrderBy pluck paginate simplePaginate cursorPaginate ensureOrderForCursorPagination create forceCreate update upsert increment decrement addUpdatedAtColumn addTimestampsToUpsertValues addUpdatedAtToUpsertColumns delete forceDelete onDelete hasNamedScope scopes applyScopes callScope callNamedScope addNewWheresWithinGroup groupWhereSliceForScope createNestedWhere with without withOnly newModelInstance parseWithRelations createSelectWithConstraint addNestedWiths withCasts getQuery setQuery toBase getEagerLoads setEagerLoads defaultKeyName getModel setModel qualifyColumn qualifyColumns getMacro hasMacro getGlobalMacro hasGlobalMacro __get __call __callStatic registerMixin clone __clone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	laravel_framework_98aa74abd91eefa7fd14cc5a649a6fa264bbdf97_87_0	buggy: foreach ($this->items as $item) { if ($position % $step === $offset) { context: public function nth($step, $offset = 0) { $new = []; $position = 0; foreach ($this->items as $item) { if ($position % $step === $offset) { foreach ($this->items as $item) { if ($position % $step === $offset) { $new[] = $item; } $position++; } return new static($new); }	type_info: offset:array position:integer step:unknown item:unknown  global_variable:  function_name: __construct range all lazy avg median mode collapse contains doesntContain crossJoin diff diffUsing diffAssoc diffAssocUsing diffKeys diffKeysUsing duplicates duplicatesStrict duplicateComparator except filter first flatten flip forget get getOrPut groupBy keyBy has hasAny implode intersect intersectByKeys isEmpty containsOneItem join keys last pluck map mapToDictionary mapWithKeys merge mergeRecursive combine union nth only pop prepend push concat pull put random replace replaceRecursive reverse search shift shuffle sliding skip skipUntil skipWhile slice split splitIn sole firstOrFail chunk chunkWhile sort sortDesc sortBy sortByMany sortByDesc sortKeys sortKeysDesc sortKeysUsing splice take takeUntil takeWhile transform undot unique values zip pad getIterator count countBy add toBase offsetExists offsetGet offsetSet offsetUnset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	laravel_framework_98aa74abd91eefa7fd14cc5a649a6fa264bbdf97_87_1	buggy: foreach ($this as $item) { if ($position % $step === $offset) { context: public function nth($step, $offset = 0) { return new static(function () use ($step, $offset) { $position = 0; foreach ($this as $item) { if ($position % $step === $offset) { foreach ($this as $item) { if ($position % $step === $offset) { yield $item; } $position++; } }); } public function only($keys) {	type_info: source:unknown keys:unknown offset:unknown step:unknown  global_variable: source: unknown function_name: __construct range all eager remember avg median mode collapse contains doesntContain crossJoin countBy diff diffUsing diffAssoc diffAssocUsing diffKeys diffKeysUsing duplicates duplicatesStrict except filter first flatten flip get groupBy keyBy has hasAny implode intersect intersectByKeys isEmpty containsOneItem join keys last pluck map mapToDictionary mapWithKeys merge mergeRecursive combine union nth only concat random replace replaceRecursive reverse search shuffle sliding skip skipUntil skipWhile slice split sole firstOrFail chunk splitIn chunkWhile sort sortDesc sortBy sortByDesc sortKeys sortKeysDesc sortKeysUsing take takeUntil takeUntilTimeout takeWhile tapEach undot unique values zip pad getIterator count makeIterator explodePluckParameters passthru now	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	laravel_framework_d3634359a13a078839363cf34ab24d197ffe4a69_88_0	buggy: if ($domain = $route->getDomain()) { return [$domain.'/'.$route->uri => $route]; } return [$route->uri => $route]; context: public function getRoutesByMethod() { return collect($this->getRoutes()) ->groupBy(function (Route $route) { return $route->methods(); }) ->map(function (Collection $routes) { return $routes->mapWithKeys(function (Route $route) { if ($domain = $route->getDomain()) { return [$domain.'/'.$route->uri => $route]; } return [$route->uri => $route]; if ($domain = $route->getDomain()) { return [$domain.'/'.$route->uri => $route]; } return [$route->uri => $route]; })->all(); }) ->all(); } public function getRoutesByName() { return collect($this->getRoutes()) ->keyBy(function (Route $route) { return $route->getName();	type_info: route:unknown domain:unknown  global_variable:  function_name: __construct add refreshNameLookups refreshActionLookups match requestWithoutTrailingSlash get hasNamedRoute getByName getByAction getRoutes getRoutesByMethod getRoutesByName newRoute setRouter setContainer	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	laravel_framework_08167e8656c920d844ba92b8dd3217bc24a9508b_89_0	buggy:  context: public function setData($data = []) { $this->original = $data; if ($data instanceof Jsonable) { $this->data = $data->toJson($this->encodingOptions); } elseif ($data instanceof JsonSerializable) { $this->data = json_encode($data->jsonSerialize(), $this->encodingOptions); } elseif ($data instanceof Arrayable) { $this->data = json_encode($data->toArray(), $this->encodingOptions); } else { $this->data = json_encode($data, $this->encodingOptions); }	type_info: data:unknown  global_variable:  function_name: __construct fromJsonString withCallback getData setData hasValidJson setEncodingOptions hasEncodingOption	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	laravel_framework_476f920248814b60a5dd1a515d12d5a2484ef0d3_90_0	buggy:  context: public function validateDigitsBetween($attribute, $value, $parameters) { $this->requireParameterCount(2, $parameters, 'digits_between'); $length = strlen((string) $value); return ! preg_match('/[^0-9.]/', $value) && $length >= $parameters[0] && $length <= $parameters[1]; }	type_info: parameters:unknown value:unknown length:unknown  global_variable:  function_name: validateAccepted validateAcceptedIf validateDeclined validateDeclinedIf validateActiveUrl validateBail validateBefore validateBeforeOrEqual validateAfter validateAfterOrEqual compareDates getDateFormat getDateTimestamp checkDateTimeOrder getDateTimeWithOptionalFormat getDateTime validateAlpha validateAlphaDash validateAlphaNum validateArray validateRequiredArrayKeys validateBetween validateBoolean validateConfirmed validateCurrentPassword validateDate validateDateFormat validateDateEquals validateDifferent validateDigits validateDigitsBetween validateDimensions failsBasicDimensionChecks failsRatioCheck validateDistinct getDistinctValues extractDistinctValues validateEmail validateExists getExistCount validateUnique getUniqueIds prepareUniqueId getUniqueExtra parseTable getQueryColumn guessColumnForQuery getExtraConditions validateFile validateFilled validateGt validateLt validateGte validateLte validateImage validateIn validateInArray validateInteger validateIp validateIpv4 validateIpv6 validateMacAddress validateJson validateMax validateMimes validateMimetypes shouldBlockPhpUpload validateMin validateMultipleOf validateNullable validateNotIn validateNumeric validatePassword validatePresent validateRegex validateNotRegex validateRequired validateRequiredIf validateProhibited validateProhibitedIf validateProhibitedUnless validateProhibits validateExclude validateExcludeIf validateExcludeUnless validateRequiredUnless validateExcludeWithout parseDependentRuleParameters shouldConvertToBoolean convertValuesToBoolean convertValuesToNull validateRequiredWith validateRequiredWithAll validateRequiredWithout validateRequiredWithoutAll anyFailingRequired allFailingRequired validateSame validateSize validateSometimes validateStartsWith validateEndsWith validateString validateTimezone validateUrl validateUuid getSize isValidFileInstance compare parseNamedParameters requireParameterCount isSameType shouldBeNumeric	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	laravel_framework_5cd540eccecd1713e068f9b5796bbf1c3c91df44_91_0	buggy: return collect($models); context: protected function models() { if (! empty($models = $this->option('model'))) { return collect($models); return collect($models); } $except = $this->option('except'); if (! empty($models) && ! empty($except)) { throw new InvalidArgumentException('The --models and --except options cannot be combined.'); } return collect((new Finder)->in($this->getDefaultPath())->files()->name('*.php')) ->map(function ($model) {	type_info: models:unknown except:unknown  global_variable:  function_name: handle models getDefaultPath isPrunable pretendToPrune	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	laravel_framework_5cd540eccecd1713e068f9b5796bbf1c3c91df44_91_0	buggy:  context: })->when(! empty($except), function ($models) use ($except) { return $models->reject(function ($model) use ($except) { return in_array($model, $except); }); })->filter(function ($model) { return $this->isPrunable($model); })->values(); } protected function getDefaultPath() { return app_path('Models'); } protected function isPrunable($model) {	type_info: models:unknown except:unknown  global_variable:  function_name: handle models getDefaultPath isPrunable pretendToPrune	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	laravel_framework_cd6e76fe864161af7307be7abb6d4d18cbe064ca_92_0	buggy: $this->all() + $this->route()->parameters(), context: public function offsetExists($offset) { return Arr::has( $this->all() + $this->route()->parameters(), $this->all() + $this->route()->parameters(), $offset ); }	type_info:  global_variable:  function_name: capture instance method root url fullUrl fullUrlWithQuery fullUrlWithoutQuery path decodedPath segment segments is routeIs fullUrlIs ajax pjax prefetch secure ip ips userAgent merge mergeIfMissing replace get json getInputSource createFrom createFromBase duplicate filterFiles session getSession setLaravelSession user route fingerprint setJson getUserResolver setUserResolver getRouteResolver setRouteResolver toArray offsetExists offsetGet offsetSet offsetUnset __isset __get	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	laravel_framework_cd6e76fe864161af7307be7abb6d4d18cbe064ca_92_0	buggy:  context: public function offsetExists($offset) { return Arr::has( $this->all() + $this->route()->parameters(), $offset ); }	type_info:  global_variable:  function_name: capture instance method root url fullUrl fullUrlWithQuery fullUrlWithoutQuery path decodedPath segment segments is routeIs fullUrlIs ajax pjax prefetch secure ip ips userAgent merge mergeIfMissing replace get json getInputSource createFrom createFromBase duplicate filterFiles session getSession setLaravelSession user route fingerprint setJson getUserResolver setUserResolver getRouteResolver setRouteResolver toArray offsetExists offsetGet offsetSet offsetUnset __isset __get	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	laravel_framework_b32193bfd7224b2d37b0ee20a4d8a5efc9285931_93_0	buggy: $start = mb_substr($string, 0, mb_strpos($string, $segment, 0, $encoding), $encoding); $end = mb_substr($string, mb_strpos($string, $segment, 0, $encoding) + mb_strlen($segment, $encoding)); context: if (is_null($length) && PHP_MAJOR_VERSION < 8) { $length = mb_strlen($string, $encoding); } $segment = mb_substr($string, $index, $length, $encoding); if ($segment === '') { return $string; } $start = mb_substr($string, 0, mb_strpos($string, $segment, 0, $encoding), $encoding); $end = mb_substr($string, mb_strpos($string, $segment, 0, $encoding) + mb_strlen($segment, $encoding)); $start = mb_substr($string, 0, mb_strpos($string, $segment, 0, $encoding), $encoding); $end = mb_substr($string, mb_strpos($string, $segment, 0, $encoding) + mb_strlen($segment, $encoding)); return $start.str_repeat(mb_substr($character, 0, 1, $encoding), mb_strlen($segment, $encoding)).$end; } public static function match($pattern, $subject) { preg_match($pattern, $subject, $matches);	type_info: pattern:unknown encoding:unknown length:unknown segment:unknown start:unknown end:unknown uuidFactory:unknown  global_variable: uuidFactory: unknown function_name: of after afterLast ascii transliterate before beforeLast between camel contains containsAll endsWith finish is isAscii isUuid kebab length limit lower words markdown mask match matchAll padBoth padLeft padRight parseCallback plural pluralStudly random repeat replaceArray replace replaceFirst replaceLast remove reverse start upper title headline singular slug snake startsWith studly substr substrCount substrReplace swap ucfirst ucsplit wordCount uuid orderedUuid createUuidsUsing createUuidsNormally flushCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	laravel_framework_b32193bfd7224b2d37b0ee20a4d8a5efc9285931_93_0	buggy: return $start.str_repeat(mb_substr($character, 0, 1, $encoding), mb_strlen($segment, $encoding)).$end; context: $segment = mb_substr($string, $index, $length, $encoding); if ($segment === '') { return $string; } $start = mb_substr($string, 0, mb_strpos($string, $segment, 0, $encoding), $encoding); $end = mb_substr($string, mb_strpos($string, $segment, 0, $encoding) + mb_strlen($segment, $encoding)); return $start.str_repeat(mb_substr($character, 0, 1, $encoding), mb_strlen($segment, $encoding)).$end; return $start.str_repeat(mb_substr($character, 0, 1, $encoding), mb_strlen($segment, $encoding)).$end; } public static function match($pattern, $subject) { preg_match($pattern, $subject, $matches); if (! $matches) { return ''; }	type_info: pattern:unknown encoding:unknown length:unknown segment:unknown start:unknown end:unknown uuidFactory:unknown  global_variable: uuidFactory: unknown function_name: of after afterLast ascii transliterate before beforeLast between camel contains containsAll endsWith finish is isAscii isUuid kebab length limit lower words markdown mask match matchAll padBoth padLeft padRight parseCallback plural pluralStudly random repeat replaceArray replace replaceFirst replaceLast remove reverse start upper title headline singular slug snake startsWith studly substr substrCount substrReplace swap ucfirst ucsplit wordCount uuid orderedUuid createUuidsUsing createUuidsNormally flushCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	laravel_framework_00125498a39d07cee1ba5bc6e4447f9b63a86293_94_0	buggy:  context: public function flushController() { $this->controller = null; }	type_info: uri:unknown action:unknown lockSeconds:unknown validators:array  global_variable: uri: unknown action: unknown lockSeconds: unknown validators: array function_name: __construct parseAction run isControllerAction runCallable isSerializedClosure runController getController getControllerMethod parseControllerCallback flushController matches compileRoute bind hasParameters hasParameter parameter originalParameter setParameter forgetParameter parameters originalParameters parametersWithoutNulls parameterNames compileParameterNames signatureParameters bindingFieldFor bindingFields setBindingFields parentOfParameter withTrashed allowsTrashedBindings defaults setDefaults where parseWhere setWheres fallback setFallback methods httpOnly httpsOnly secure domain getDomain getPrefix prefix updatePrefixOnAction uri setUri parseUri getName name named uses addGroupNamespaceToStringUses getActionName getActionMethod getAction setAction getMissing missing gatherMiddleware middleware can controllerMiddleware withoutMiddleware excludedMiddleware scopeBindings enforcesScopedBindings block withoutBlocking locksFor waitsFor controllerDispatcher getValidators toSymfonyRoute getOptionalParameterNames getCompiled setRouter setContainer prepareForSerialization __get	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	briannesbitt_Carbon_754a9ec1e719b0c44ca896cc4ada0f1d4dbb562a_5_0	buggy: 'ago' => ':time πριν', context: 'd' => ':count μέρ.', 'hour' => ':count ώρα|:count ώρες', 'a_hour' => 'μία ώρα|:count ώρες', 'h' => ':count ώρα|:count ώρες', 'minute' => ':count λεπτό|:count λεπτά', 'a_minute' => 'ένα λεπτό|:count λεπτά', 'min' => ':count λεπ.', 'second' => ':count δευτερόλεπτο|:count δευτερόλεπτα', 'a_second' => 'λίγα δευτερόλεπτα|:count δευτερόλεπτα', 's' => ':count δευ.', 'ago' => ':time πριν', 'ago' => ':time πριν', 'from_now' => 'σε :time', 'after' => ':time μετά', 'before' => ':time πριν', 'diff_now' => 'τώρα', 'diff_yesterday' => 'χθες', 'diff_tomorrow' => 'αύριο', 'formats' => [ 'LT' => 'h:mm A', 'LTS' => 'h:mm:ss A',	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	briannesbitt_Carbon_9b3c472f46c2833057fa3328f15af6b915665fa5_6_0	buggy:  context: 'd' => ':count dan|:count dni|:count dni|:count dni', 'hour' => ':count ura|:count uri|:count ure|:count ur', 'h' => ':count h', 'minute' => ':count minuta|:count minuti|:count minute|:count minut', 'min' => ':count min.', 'second' => ':count sekunda|:count sekundi|:count sekunde|:count sekund', 's' => ':count s', 'year_ago' => ':count letom|:count leti|:count leti|:count leti', 'y_ago' => ':count letom|:count leti|:count leti|:count leti', 'month_ago' => ':count mesecem|:count meseci|:count meseci|:count meseci', 'week_ago' => ':count tednom|:count tednoma|:count tedni|:count tedni', 'day_ago' => ':count dnem|:count dnevoma|:count dnevi|:count dnevi', 'd_ago' => ':count dnem|:count dnevoma|:count dnevi|:count dnevi',	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	briannesbitt_Carbon_9b3c472f46c2833057fa3328f15af6b915665fa5_6_0	buggy: 'months' => ['Januar', 'Februar', 'Marec', 'April', 'Maj', 'Junij', 'Julij', 'Avgust', 'September', 'Oktober', 'November', 'December'], 'months_short' => ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Avg', 'Sep', 'Okt', 'Nov', 'Dec'], 'weekdays' => ['Nedelja', 'Ponedeljek', 'Torek', 'Sreda', 'Četrtek', 'Petek', 'Sobota'], 'weekdays_short' => ['Ned', 'Pon', 'Tor', 'Sre', 'Čet', 'Pet', 'Sob'], 'weekdays_min' => ['Ne', 'Po', 'To', 'Sr', 'Če', 'Pe', 'So'], context: return '[pretekli] [petek] [ob] LT'; case 6: return '[preteklo] [soboto] [ob] LT'; } }, 'sameElse' => 'L', ], 'months' => ['Januar', 'Februar', 'Marec', 'April', 'Maj', 'Junij', 'Julij', 'Avgust', 'September', 'Oktober', 'November', 'December'], 'months_short' => ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Avg', 'Sep', 'Okt', 'Nov', 'Dec'], 'weekdays' => ['Nedelja', 'Ponedeljek', 'Torek', 'Sreda', 'Četrtek', 'Petek', 'Sobota'], 'weekdays_short' => ['Ned', 'Pon', 'Tor', 'Sre', 'Čet', 'Pet', 'Sob'], 'weekdays_min' => ['Ne', 'Po', 'To', 'Sr', 'Če', 'Pe', 'So'], 'months' => ['Januar', 'Februar', 'Marec', 'April', 'Maj', 'Junij', 'Julij', 'Avgust', 'September', 'Oktober', 'November', 'December'], 'months_short' => ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Avg', 'Sep', 'Okt', 'Nov', 'Dec'], 'weekdays' => ['Nedelja', 'Ponedeljek', 'Torek', 'Sreda', 'Četrtek', 'Petek', 'Sobota'], 'weekdays_short' => ['Ned', 'Pon', 'Tor', 'Sre', 'Čet', 'Pet', 'Sob'], 'weekdays_min' => ['Ne', 'Po', 'To', 'Sr', 'Če', 'Pe', 'So'], 'list' => [', ', ' in '], 'meridiem' => ['dopoldan', 'popoldan'],	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	briannesbitt_Carbon_eb872b1b22ab4a4815cfe0293d4516be774c078b_7_0	buggy:  context: $infos = array_filter(get_object_vars($this), function ($var) { return $var; }); if ($this instanceof CarbonInterface || $this instanceof DateTimeInterface) { if (!isset($infos['date'])) { $infos['date'] = $this->format(CarbonInterface::MOCK_DATETIME_FORMAT); } if (!isset($infos['timezone'])) { $infos['timezone'] = $this->tzName; } }	type_info: infos:unknown  global_variable:  function_name: useStrictMode isStrictModeEnabled useMonthsOverflow resetMonthsOverflow shouldOverflowMonths useYearsOverflow resetYearsOverflow shouldOverflowYears settings getSettings __debugInfo	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	briannesbitt_Carbon_94fddb83ff3c79ed50f97659376573831fe7ceec_8_0	buggy: return require __DIR__.'/de.php'; context: <?php return require __DIR__.'/de.php'; return require __DIR__.'/de.php';	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	briannesbitt_Carbon_efd8db45b0f525938653409bc5ee0d7063b9fd22_9_0	"buggy: $hours = floor($minutes / 60); context: public function toOffsetName(DateTimeInterface $date = null) { $minutes = floor($this->getOffset($date ?: Carbon::now($this)) / 60); $hours = floor($minutes / 60); $hours = floor($minutes / 60); $minutes = str_pad((string) (abs($minutes) % 60), 2, '0', STR_PAD_LEFT); return ($hours < 0 ? '-' : '+').str_pad((string) abs($hours), 2, '0', STR_PAD_LEFT)."":$minutes""; }"	type_info: date:unknown hours:unknown minutes:unknown  global_variable:  function_name: __construct parseNumericTimezone getDateTimeZoneNameFromMixed getDateTimeZoneFromName cast instance getAbbreviatedName getAbbr toOffsetName toOffsetTimeZone toRegionName toRegionTimeZone __toString create	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	briannesbitt_Carbon_7cb54ec7480cd9549e31cd56d391bb7c45cb375a_10_0	buggy: $mode & CarbonInterface::TRANSLATE_MONTHS ? array_pad($months, 12, '>>DO NOT REPLACE<<') : [], $mode & CarbonInterface::TRANSLATE_MONTHS ? array_pad($messages['months_short'], 12, '>>DO NOT REPLACE<<') : [], $mode & CarbonInterface::TRANSLATE_DAYS ? array_pad($weekdays, 7, '>>DO NOT REPLACE<<') : [], $mode & CarbonInterface::TRANSLATE_DAYS ? array_pad($messages['weekdays_short'], 7, '>>DO NOT REPLACE<<') : [], context: $name .= '|'.$messages[$variable.'_standalone'][$index]; } } } } $$translationKey = array_merge( $mode & CarbonInterface::TRANSLATE_MONTHS ? array_pad($months, 12, '>>DO NOT REPLACE<<') : [], $mode & CarbonInterface::TRANSLATE_MONTHS ? array_pad($messages['months_short'], 12, '>>DO NOT REPLACE<<') : [], $mode & CarbonInterface::TRANSLATE_DAYS ? array_pad($weekdays, 7, '>>DO NOT REPLACE<<') : [], $mode & CarbonInterface::TRANSLATE_DAYS ? array_pad($messages['weekdays_short'], 7, '>>DO NOT REPLACE<<') : [], $mode & CarbonInterface::TRANSLATE_MONTHS ? array_pad($months, 12, '>>DO NOT REPLACE<<') : [], $mode & CarbonInterface::TRANSLATE_MONTHS ? array_pad($messages['months_short'], 12, '>>DO NOT REPLACE<<') : [], $mode & CarbonInterface::TRANSLATE_DAYS ? array_pad($weekdays, 7, '>>DO NOT REPLACE<<') : [], $mode & CarbonInterface::TRANSLATE_DAYS ? array_pad($messages['weekdays_short'], 7, '>>DO NOT REPLACE<<') : [], $mode & CarbonInterface::TRANSLATE_UNITS ? array_map(function ($unit) use ($messages, $key, $cleanWord) { $parts = explode('|', $messages[$unit]);	type_info: key:string cleanWord:unknown translationKey:unknown messages:unknown months:unknown weekdays:unknown index:unknown  global_variable:  function_name: setHumanDiffOptions enableHumanDiffOption disableHumanDiffOption getHumanDiffOptions translator getTranslator setTranslator hasLocalTranslator getLocalTranslator setLocalTranslator getTranslationMessageWith getTranslationMessage translateWith translate translateNumber translateTimeString translateTimeStringTo locale getLocale setLocale setFallbackLocale getFallbackLocale executeWithLocale localeHasShortUnits localeHasDiffSyntax localeHasDiffOneDayWords localeHasDiffTwoDayWords localeHasPeriodSyntax getAvailableLocales getAvailableLocalesInfo getTranslatorLocale getLocaleAwareTranslator	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	briannesbitt_Carbon_7cb54ec7480cd9549e31cd56d391bb7c45cb375a_10_0	"buggy:  context: foreach ($fromTranslations as $index => $word) { if (preg_match(""/^$word\$/i"", $chunk)) { return $toTranslations[$index] ?? ''; } } return $chunk; }, "" $timeString ""), 1, -1); } public function translateTimeStringTo($timeString, $to = null) { return static::translateTimeString($timeString, $this->getTranslatorLocale(), $to); } public function locale(string $locale = null, ...$fallbackLocales) { if ($locale === null) { return $this->getTranslatorLocale(); }"	type_info: locale:unknown chunk:unknown to:string word:unknown fromTranslations:array toTranslations:array index:unknown  global_variable:  function_name: setHumanDiffOptions enableHumanDiffOption disableHumanDiffOption getHumanDiffOptions translator getTranslator setTranslator hasLocalTranslator getLocalTranslator setLocalTranslator getTranslationMessageWith getTranslationMessage translateWith translate translateNumber translateTimeString translateTimeStringTo locale getLocale setLocale setFallbackLocale getFallbackLocale executeWithLocale localeHasShortUnits localeHasDiffSyntax localeHasDiffOneDayWords localeHasDiffTwoDayWords localeHasPeriodSyntax getAvailableLocales getAvailableLocalesInfo getTranslatorLocale getLocaleAwareTranslator	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	briannesbitt_Carbon_57b9b9fa6a906c3d906c333facd7840e3114ce4d_11_0	buggy: 'year' => '{1}වසර|වසර :count', 'month' => '{1}මාසය|මාස :count', 'week' => '{1}සතියක්|සති :count', 'day' => '{1}දිනය|දින :count', 'hour' => '{1}පැය|පැය :count', 'minute' => '{1}මිනිත්තුව|මිනිත්තු :count', 'second' => '{1}තත්පර කිහිපය|තත්පර :count', context: <?php return [ 'year' => '{1}වසර|වසර :count', 'month' => '{1}මාසය|මාස :count', 'week' => '{1}සතියක්|සති :count', 'day' => '{1}දිනය|දින :count', 'hour' => '{1}පැය|පැය :count', 'minute' => '{1}මිනිත්තුව|මිනිත්තු :count', 'second' => '{1}තත්පර කිහිපය|තත්පර :count', 'year' => '{1}වසර|වසර :count', 'month' => '{1}මාසය|මාස :count', 'week' => '{1}සතියක්|සති :count', 'day' => '{1}දිනය|දින :count',	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	briannesbitt_Carbon_57b9b9fa6a906c3d906c333facd7840e3114ce4d_11_0	buggy:  context: 'from_now' => function ($time) { if (preg_match('/දින \d+/', $time)) { return $time.'න්'; } return $time.'කින්'; }, 'diff_now' => 'දැන්', 'diff_yesterday' => 'ඊයේ', 'diff_tomorrow' => 'හෙට', 'formats' => [ 'LT' => 'a h:mm', 'LTS' => 'a h:mm:ss', 'L' => 'YYYY/MM/DD', 'LL' => 'YYYY MMMM D', 'LLL' => 'YYYY MMMM D, a h:mm', 'LLLL' => 'YYYY MMMM D [වැනි] dddd, a h:mm:ss', ],	type_info:  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	doctrine_orm_242cf1a33df1b8bc5e1b86c3ebd01db07851c833_1_0	buggy:  context: <?php namespace Doctrine\ORM; use Countable; use Doctrine\Common\Collections\ArrayCollection; use Doctrine\DBAL\Cache\QueryCacheProfile; use Doctrine\ORM\Mapping\MappingException as ORMMappingException; use Doctrine\Persistence\Mapping\MappingException; use Doctrine\ORM\Query\Parameter;	type_info: parameters:array  global_variable: parameters: array function_name: __construct setCacheable isCacheable setCacheRegion getCacheRegion isCacheEnabled getLifetime setLifetime getCacheMode setCacheMode getSQL getEntityManager free getParameters getParameter setParameters setParameter processParameterValue setResultSetMapping getResultSetMapping translateNamespaces setHydrationCacheProfile getHydrationCacheProfile setResultCacheProfile setResultCacheDriver getResultCacheDriver useResultCache enableResultCache disableResultCache setResultCacheLifetime getResultCacheLifetime expireResultCache getExpireResultCache getQueryCacheProfile setFetchMode setHydrationMode getHydrationMode getResult getArrayResult getScalarResult getOneOrNullResult getSingleResult getSingleScalarResult setHint getHint hasHint getHints iterate toIterable execute executeIgnoreQueryCache executeUsingQueryCache getTimestampKey getHydrationCacheId setResultCacheId getResultCacheId _doExecute __clone getHash isCountable	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	doctrine_orm_242cf1a33df1b8bc5e1b86c3ebd01db07851c833_1_0	buggy: if ($value instanceof Traversable) { context: public function processParameterValue($value) { if (is_scalar($value)) { return $value; } if ($value instanceof Traversable) { if ($value instanceof Traversable) { $value = iterator_to_array($value); } if (is_array($value)) { foreach ($value as $key => $paramValue) { $paramValue = $this->processParameterValue($paramValue); $value[$key] = is_array($paramValue) ? reset($paramValue) : $paramValue; } return $value;	type_info: key:unknown parameters:array value:unknown  global_variable: parameters: array function_name: __construct setCacheable isCacheable setCacheRegion getCacheRegion isCacheEnabled getLifetime setLifetime getCacheMode setCacheMode getSQL getEntityManager free getParameters getParameter setParameters setParameter processParameterValue setResultSetMapping getResultSetMapping translateNamespaces setHydrationCacheProfile getHydrationCacheProfile setResultCacheProfile setResultCacheDriver getResultCacheDriver useResultCache enableResultCache disableResultCache setResultCacheLifetime getResultCacheLifetime expireResultCache getExpireResultCache getQueryCacheProfile setFetchMode setHydrationMode getHydrationMode getResult getArrayResult getScalarResult getOneOrNullResult getSingleResult getSingleScalarResult setHint getHint hasHint getHints iterate toIterable execute executeIgnoreQueryCache executeUsingQueryCache getTimestampKey getHydrationCacheId setResultCacheId getResultCacheId _doExecute __clone getHash isCountable	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	doctrine_orm_242cf1a33df1b8bc5e1b86c3ebd01db07851c833_1_0	buggy: foreach ($value as $key => $paramValue) { $paramValue = $this->processParameterValue($paramValue); $value[$key] = is_array($paramValue) ? reset($paramValue) : $paramValue; } context: { if (is_scalar($value)) { return $value; } if ($value instanceof Traversable) { $value = iterator_to_array($value); } if (is_array($value)) { foreach ($value as $key => $paramValue) { $paramValue = $this->processParameterValue($paramValue); $value[$key] = is_array($paramValue) ? reset($paramValue) : $paramValue; } foreach ($value as $key => $paramValue) { $paramValue = $this->processParameterValue($paramValue); $value[$key] = is_array($paramValue) ? reset($paramValue) : $paramValue; } return $value; } if ($value instanceof Mapping\ClassMetadata) { return $value->name;	type_info: key:unknown parameters:array value:unknown  global_variable: parameters: array function_name: __construct setCacheable isCacheable setCacheRegion getCacheRegion isCacheEnabled getLifetime setLifetime getCacheMode setCacheMode getSQL getEntityManager free getParameters getParameter setParameters setParameter processParameterValue setResultSetMapping getResultSetMapping translateNamespaces setHydrationCacheProfile getHydrationCacheProfile setResultCacheProfile setResultCacheDriver getResultCacheDriver useResultCache enableResultCache disableResultCache setResultCacheLifetime getResultCacheLifetime expireResultCache getExpireResultCache getQueryCacheProfile setFetchMode setHydrationMode getHydrationMode getResult getArrayResult getScalarResult getOneOrNullResult getSingleResult getSingleScalarResult setHint getHint hasHint getHints iterate toIterable execute executeIgnoreQueryCache executeUsingQueryCache getTimestampKey getHydrationCacheId setResultCacheId getResultCacheId _doExecute __clone getHash isCountable	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	doctrine_orm_242cf1a33df1b8bc5e1b86c3ebd01db07851c833_1_0	buggy:  context: return $value; } try { $value = $this->_em->getUnitOfWork()->getSingleIdentifierValue($value); if ($value === null) { throw ORMInvalidArgumentException::invalidIdentifierBindingEntity(); } } catch (ORMMappingException $e) { } catch (MappingException $e) { } return $value; } public function setResultSetMapping(Query\ResultSetMapping $rsm) { $this->translateNamespaces($rsm); $this->_resultSetMapping = $rsm;	type_info: parameters:array value:unknown rsm:unknown  global_variable: parameters: array function_name: __construct setCacheable isCacheable setCacheRegion getCacheRegion isCacheEnabled getLifetime setLifetime getCacheMode setCacheMode getSQL getEntityManager free getParameters getParameter setParameters setParameter processParameterValue setResultSetMapping getResultSetMapping translateNamespaces setHydrationCacheProfile getHydrationCacheProfile setResultCacheProfile setResultCacheDriver getResultCacheDriver useResultCache enableResultCache disableResultCache setResultCacheLifetime getResultCacheLifetime expireResultCache getExpireResultCache getQueryCacheProfile setFetchMode setHydrationMode getHydrationMode getResult getArrayResult getScalarResult getOneOrNullResult getSingleResult getSingleScalarResult setHint getHint hasHint getHints iterate toIterable execute executeIgnoreQueryCache executeUsingQueryCache getTimestampKey getHydrationCacheId setResultCacheId getResultCacheId _doExecute __clone getHash isCountable	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	doctrine_orm_242cf1a33df1b8bc5e1b86c3ebd01db07851c833_1_0	buggy:  context: } try { $value = $this->_em->getUnitOfWork()->getSingleIdentifierValue($value); if ($value === null) { throw ORMInvalidArgumentException::invalidIdentifierBindingEntity(); } } catch (ORMMappingException $e) { } catch (MappingException $e) { } return $value; } public function setResultSetMapping(Query\ResultSetMapping $rsm) { $this->translateNamespaces($rsm); $this->_resultSetMapping = $rsm;	type_info: parameters:array value:unknown rsm:unknown  global_variable: parameters: array function_name: __construct setCacheable isCacheable setCacheRegion getCacheRegion isCacheEnabled getLifetime setLifetime getCacheMode setCacheMode getSQL getEntityManager free getParameters getParameter setParameters setParameter processParameterValue setResultSetMapping getResultSetMapping translateNamespaces setHydrationCacheProfile getHydrationCacheProfile setResultCacheProfile setResultCacheDriver getResultCacheDriver useResultCache enableResultCache disableResultCache setResultCacheLifetime getResultCacheLifetime expireResultCache getExpireResultCache getQueryCacheProfile setFetchMode setHydrationMode getHydrationMode getResult getArrayResult getScalarResult getOneOrNullResult getSingleResult getSingleScalarResult setHint getHint hasHint getHints iterate toIterable execute executeIgnoreQueryCache executeUsingQueryCache getTimestampKey getHydrationCacheId setResultCacheId getResultCacheId _doExecute __clone getHash isCountable	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	doctrine_orm_8b749642cdda49136a36303d1205dea29b2956e0_2_0	"buggy:  context: case self::STATE_NEW: $this->persistNew($class, $entity); break; case self::STATE_REMOVED: unset($this->entityDeletions[$oid]); $this->addToIdentityMap($entity); $this->entityStates[$oid] = self::STATE_MANAGED; break; case self::STATE_DETACHED: throw ORMInvalidArgumentException::detachedEntityCannot($entity, ""persisted""); default: throw new UnexpectedValueException(""Unexpected entity state: $entityState."" . self::objToStr($entity)); } $this->cascadePersist($entity, $visited);"	type_info: entity:unknown oid:unknown class:unknown visited:array entityState:unknown  global_variable:  function_name: __construct commit postCommitCleanup computeScheduleInsertsChangeSets computeSingleEntityChangeSet executeExtraUpdates computeChangeSet computeChangeSets computeAssociationChanges persistNew hasMissingIdsWhichAreForeignKeys recomputeSingleEntityChangeSet executeInserts addToEntityIdentifiersAndEntityMap executeUpdates executeDeletions getCommitOrder scheduleForInsert isScheduledForInsert scheduleForUpdate scheduleExtraUpdate isScheduledForUpdate isScheduledForDirtyCheck scheduleForDelete isScheduledForDelete isEntityScheduled addToIdentityMap getEntityState removeFromIdentityMap getByIdHash tryGetByIdHash isInIdentityMap containsIdHash persist doPersist remove doRemove merge doMerge ensureVersionMatch isLoaded updateAssociationWithMergedEntity detach doDetach refresh doRefresh cascadeRefresh cascadeDetach cascadeMerge cascadePersist cascadeRemove lock getCommitOrderCalculator clear scheduleOrphanRemoval cancelOrphanRemoval scheduleCollectionDeletion isCollectionScheduledForDeletion newInstance createEntity triggerEagerLoads loadCollection getIdentityMap getOriginalEntityData setOriginalEntityData setOriginalEntityProperty getEntityIdentifier getSingleIdentifierValue tryGetById scheduleForDirtyCheck hasPendingInsertions size getEntityPersister getCollectionPersister registerManaged clearEntityChangeSet propertyChanged getScheduledEntityInsertions getScheduledEntityUpdates getScheduledEntityDeletions getScheduledCollectionDeletions getScheduledCollectionUpdates initializeObject objToStr markReadOnly isReadOnly afterTransactionComplete afterTransactionRolledBack performCallbackOnCachedPersister dispatchOnFlushEvent dispatchPostFlushEvent isIdentifierEquals assertThatThereAreNoUnintentionallyNonPersistedAssociations mergeEntityStateIntoManagedCopy hydrationComplete clearIdentityMapForEntityName clearEntityInsertionsForEntityName convertSingleFieldIdentifierToPHPValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	doctrine_orm_f92c3dba324923729373b1fdfc324b77e5cc5900_3_0	buggy: if ($input->getOption('complete') !== null) { context: protected function execute(InputInterface $input, OutputInterface $output) { $ui = new SymfonyStyle($input, $output); $em = $this->getHelper('em')->getEntityManager(); try { $em->getConfiguration()->ensureProductionSettings(); if ($input->getOption('complete') !== null) { if ($input->getOption('complete') !== null) { $em->getConnection()->connect(); } } catch (Throwable $e) { $ui->error($e->getMessage()); return 1; } $ui->success('Environment is correctly configured for production.');	type_info: ui:unknown em:unknown  global_variable:  function_name: configure execute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	doctrine_orm_e42b3d6584ce895a7420c8466d9fabdbeec4b58a_4_0	buggy:  context: namespace Doctrine\ORM; use Doctrine\Common\Annotations\AnnotationReader; use Doctrine\Common\Annotations\AnnotationRegistry; use Doctrine\Common\Annotations\CachedReader; use Doctrine\Common\Annotations\SimpleAnnotationReader; use Doctrine\Common\Cache\ArrayCache; use Doctrine\Common\Cache\Cache as CacheDriver; use Doctrine\Common\Cache\Psr6\DoctrineProvider; use Doctrine\Common\Proxy\AbstractProxyFactory; use Doctrine\Deprecations\Deprecation; use Doctrine\ORM\Cache\CacheConfiguration; use Doctrine\ORM\Mapping\ClassMetadataFactory; use Doctrine\ORM\Mapping\DefaultEntityListenerResolver; use Doctrine\ORM\Mapping\DefaultNamingStrategy; use Doctrine\ORM\Mapping\DefaultQuoteStrategy; use Doctrine\ORM\Mapping\Driver\AnnotationDriver; use Doctrine\ORM\Mapping\EntityListenerResolver;	type_info:  global_variable:  function_name: setProxyDir getProxyDir getAutoGenerateProxyClasses setAutoGenerateProxyClasses getProxyNamespace setProxyNamespace setMetadataDriverImpl newDefaultAnnotationDriver addEntityNamespace getEntityNamespace setEntityNamespaces getEntityNamespaces getMetadataDriverImpl getQueryCacheImpl setQueryCacheImpl getHydrationCacheImpl setHydrationCacheImpl getMetadataCacheImpl setMetadataCacheImpl getMetadataCache setMetadataCache addNamedQuery getNamedQuery addNamedNativeQuery getNamedNativeQuery ensureProductionSettings addCustomStringFunction getCustomStringFunction setCustomStringFunctions addCustomNumericFunction getCustomNumericFunction setCustomNumericFunctions addCustomDatetimeFunction getCustomDatetimeFunction setCustomDatetimeFunctions setCustomHydrationModes getCustomHydrationMode addCustomHydrationMode setClassMetadataFactoryName getClassMetadataFactoryName addFilter getFilterClassName setDefaultRepositoryClassName getDefaultRepositoryClassName setNamingStrategy getNamingStrategy setQuoteStrategy getQuoteStrategy setEntityListenerResolver getEntityListenerResolver setRepositoryFactory getRepositoryFactory isSecondLevelCacheEnabled setSecondLevelCacheEnabled setSecondLevelCacheConfiguration getSecondLevelCacheConfiguration getDefaultQueryHints setDefaultQueryHints getDefaultQueryHint setDefaultQueryHint	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	doctrine_orm_e42b3d6584ce895a7420c8466d9fabdbeec4b58a_4_0	buggy:  context: public function setMetadataCacheImpl(CacheDriver $cacheImpl) { Deprecation::trigger( 'doctrine/orm', 'https://github.com/doctrine/orm/issues/8650', 'Method %s() is deprecated and will be removed in Doctrine ORM 3.0. Use setMetadataCache() instead.', __METHOD__ ); $this->_attributes['metadataCacheImpl'] = $cacheImpl; }	type_info:  global_variable:  function_name: setProxyDir getProxyDir getAutoGenerateProxyClasses setAutoGenerateProxyClasses getProxyNamespace setProxyNamespace setMetadataDriverImpl newDefaultAnnotationDriver addEntityNamespace getEntityNamespace setEntityNamespaces getEntityNamespaces getMetadataDriverImpl getQueryCacheImpl setQueryCacheImpl getHydrationCacheImpl setHydrationCacheImpl getMetadataCacheImpl setMetadataCacheImpl getMetadataCache setMetadataCache addNamedQuery getNamedQuery addNamedNativeQuery getNamedNativeQuery ensureProductionSettings addCustomStringFunction getCustomStringFunction setCustomStringFunctions addCustomNumericFunction getCustomNumericFunction setCustomNumericFunctions addCustomDatetimeFunction getCustomDatetimeFunction setCustomDatetimeFunctions setCustomHydrationModes getCustomHydrationMode addCustomHydrationMode setClassMetadataFactoryName getClassMetadataFactoryName addFilter getFilterClassName setDefaultRepositoryClassName getDefaultRepositoryClassName setNamingStrategy getNamingStrategy setQuoteStrategy getQuoteStrategy setEntityListenerResolver getEntityListenerResolver setRepositoryFactory getRepositoryFactory isSecondLevelCacheEnabled setSecondLevelCacheEnabled setSecondLevelCacheConfiguration getSecondLevelCacheConfiguration getDefaultQueryHints setDefaultQueryHints getDefaultQueryHint setDefaultQueryHint	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	doctrine_orm_e42b3d6584ce895a7420c8466d9fabdbeec4b58a_4_0	buggy: $this->_attributes['metadataCache'] = $cache; context: public function setMetadataCache(CacheItemPoolInterface $cache): void { $this->_attributes['metadataCache'] = $cache; $this->_attributes['metadataCache'] = $cache; }	type_info:  global_variable:  function_name: setProxyDir getProxyDir getAutoGenerateProxyClasses setAutoGenerateProxyClasses getProxyNamespace setProxyNamespace setMetadataDriverImpl newDefaultAnnotationDriver addEntityNamespace getEntityNamespace setEntityNamespaces getEntityNamespaces getMetadataDriverImpl getQueryCacheImpl setQueryCacheImpl getHydrationCacheImpl setHydrationCacheImpl getMetadataCacheImpl setMetadataCacheImpl getMetadataCache setMetadataCache addNamedQuery getNamedQuery addNamedNativeQuery getNamedNativeQuery ensureProductionSettings addCustomStringFunction getCustomStringFunction setCustomStringFunctions addCustomNumericFunction getCustomNumericFunction setCustomNumericFunctions addCustomDatetimeFunction getCustomDatetimeFunction setCustomDatetimeFunctions setCustomHydrationModes getCustomHydrationMode addCustomHydrationMode setClassMetadataFactoryName getClassMetadataFactoryName addFilter getFilterClassName setDefaultRepositoryClassName getDefaultRepositoryClassName setNamingStrategy getNamingStrategy setQuoteStrategy getQuoteStrategy setEntityListenerResolver getEntityListenerResolver setRepositoryFactory getRepositoryFactory isSecondLevelCacheEnabled setSecondLevelCacheEnabled setSecondLevelCacheConfiguration getSecondLevelCacheConfiguration getDefaultQueryHints setDefaultQueryHints getDefaultQueryHint setDefaultQueryHint	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	doctrine_orm_e42b3d6584ce895a7420c8466d9fabdbeec4b58a_4_0	buggy: if ($this->getMetadataCache()) { return; context: } if ($queryCacheImpl instanceof ArrayCache) { throw ORMException::queryCacheUsesNonPersistentCache($queryCacheImpl); } if ($this->getAutoGenerateProxyClasses()) { throw ORMException::proxyClassesAlwaysRegenerating(); } if ($this->getMetadataCache()) { return; if ($this->getMetadataCache()) { return; } $metadataCacheImpl = $this->getMetadataCacheImpl(); if (! $metadataCacheImpl) { throw ORMException::metadataCacheNotConfigured(); }	type_info: queryCacheImpl:unknown metadataCacheImpl:unknown  global_variable:  function_name: setProxyDir getProxyDir getAutoGenerateProxyClasses setAutoGenerateProxyClasses getProxyNamespace setProxyNamespace setMetadataDriverImpl newDefaultAnnotationDriver addEntityNamespace getEntityNamespace setEntityNamespaces getEntityNamespaces getMetadataDriverImpl getQueryCacheImpl setQueryCacheImpl getHydrationCacheImpl setHydrationCacheImpl getMetadataCacheImpl setMetadataCacheImpl getMetadataCache setMetadataCache addNamedQuery getNamedQuery addNamedNativeQuery getNamedNativeQuery ensureProductionSettings addCustomStringFunction getCustomStringFunction setCustomStringFunctions addCustomNumericFunction getCustomNumericFunction setCustomNumericFunctions addCustomDatetimeFunction getCustomDatetimeFunction setCustomDatetimeFunctions setCustomHydrationModes getCustomHydrationMode addCustomHydrationMode setClassMetadataFactoryName getClassMetadataFactoryName addFilter getFilterClassName setDefaultRepositoryClassName getDefaultRepositoryClassName setNamingStrategy getNamingStrategy setQuoteStrategy getQuoteStrategy setEntityListenerResolver getEntityListenerResolver setRepositoryFactory getRepositoryFactory isSecondLevelCacheEnabled setSecondLevelCacheEnabled setSecondLevelCacheConfiguration getSecondLevelCacheConfiguration getDefaultQueryHints setDefaultQueryHints getDefaultQueryHint setDefaultQueryHint	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	doctrine_orm_e42b3d6584ce895a7420c8466d9fabdbeec4b58a_4_0	buggy: if (! $metadataCacheImpl) { throw ORMException::metadataCacheNotConfigured(); } context: if ($this->getAutoGenerateProxyClasses()) { throw ORMException::proxyClassesAlwaysRegenerating(); } if ($this->getMetadataCache()) { return; } $metadataCacheImpl = $this->getMetadataCacheImpl(); if (! $metadataCacheImpl) { throw ORMException::metadataCacheNotConfigured(); } if (! $metadataCacheImpl) { throw ORMException::metadataCacheNotConfigured(); } if ($metadataCacheImpl instanceof ArrayCache) { throw ORMException::metadataCacheUsesNonPersistentCache($metadataCacheImpl); } } public function addCustomStringFunction($name, $className)	type_info: metadataCacheImpl:unknown name:unknown  global_variable:  function_name: setProxyDir getProxyDir getAutoGenerateProxyClasses setAutoGenerateProxyClasses getProxyNamespace setProxyNamespace setMetadataDriverImpl newDefaultAnnotationDriver addEntityNamespace getEntityNamespace setEntityNamespaces getEntityNamespaces getMetadataDriverImpl getQueryCacheImpl setQueryCacheImpl getHydrationCacheImpl setHydrationCacheImpl getMetadataCacheImpl setMetadataCacheImpl getMetadataCache setMetadataCache addNamedQuery getNamedQuery addNamedNativeQuery getNamedNativeQuery ensureProductionSettings addCustomStringFunction getCustomStringFunction setCustomStringFunctions addCustomNumericFunction getCustomNumericFunction setCustomNumericFunctions addCustomDatetimeFunction getCustomDatetimeFunction setCustomDatetimeFunctions setCustomHydrationModes getCustomHydrationMode addCustomHydrationMode setClassMetadataFactoryName getClassMetadataFactoryName addFilter getFilterClassName setDefaultRepositoryClassName getDefaultRepositoryClassName setNamingStrategy getNamingStrategy setQuoteStrategy getQuoteStrategy setEntityListenerResolver getEntityListenerResolver setRepositoryFactory getRepositoryFactory isSecondLevelCacheEnabled setSecondLevelCacheEnabled setSecondLevelCacheConfiguration getSecondLevelCacheConfiguration getDefaultQueryHints setDefaultQueryHints getDefaultQueryHint setDefaultQueryHint	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	doctrine_orm_796af726503a0c7828816429acfdc24abba516f8_5_0	buggy: foreach ((array) $id as $idName => $idVal) { context: } if ($this->class->isVersioned) { $this->assignDefaultVersionValue($entity, $id); } foreach ($subTableStmts as $tableName => $stmt) { $paramIndex = 1; $data = $insertData[$tableName] ?? []; foreach ((array) $id as $idName => $idVal) { foreach ((array) $id as $idName => $idVal) { $type = $this->columnTypes[$idName] ?? Type::STRING; $stmt->bindValue($paramIndex++, $idVal, $type); } foreach ($data as $columnName => $value) { if (! is_array($id) || ! isset($id[$columnName])) { $stmt->bindValue($paramIndex++, $value, $this->columnTypes[$columnName]); }	type_info: tableName:unknown subTableStmts:array insertData:unknown paramIndex:integer columnName:unknown id:array data:array idName:unknown value:unknown  global_variable:  function_name: getDiscriminatorColumnTableName getVersionedClassMetadata getOwningTable executeInserts update delete getSelectSQL getCountSQL getLockTablesSql getSelectColumnsSQL getInsertColumnList assignDefaultVersionValue getJoinSql	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	doctrine_orm_796af726503a0c7828816429acfdc24abba516f8_5_0	buggy: if (! is_array($id) || ! isset($id[$columnName])) { context: $paramIndex = 1; $data = $insertData[$tableName] ?? []; foreach ((array) $id as $idName => $idVal) { $type = $this->columnTypes[$idName] ?? Type::STRING; $stmt->bindValue($paramIndex++, $idVal, $type); } foreach ($data as $columnName => $value) { if (! is_array($id) || ! isset($id[$columnName])) { if (! is_array($id) || ! isset($id[$columnName])) { $stmt->bindValue($paramIndex++, $value, $this->columnTypes[$columnName]); } } $stmt->execute(); } } $rootTableStmt->closeCursor();	type_info: tableName:unknown rootTableStmt:unknown insertData:unknown paramIndex:integer columnName:unknown id:array data:array idName:unknown value:unknown  global_variable:  function_name: getDiscriminatorColumnTableName getVersionedClassMetadata getOwningTable executeInserts update delete getSelectSQL getCountSQL getLockTablesSql getSelectColumnsSQL getInsertColumnList assignDefaultVersionValue getJoinSql	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	doctrine_orm_796af726503a0c7828816429acfdc24abba516f8_5_1	buggy: * @return mixed The identifier values. context: public function setOriginalEntityProperty($oid, $property, $value) { $this->originalEntityData[$oid][$property] = $value; } * @return mixed The identifier values. public function getEntityIdentifier($entity)	type_info: entity:array oid:unknown value:unknown  global_variable:  function_name: __construct commit postCommitCleanup computeScheduleInsertsChangeSets computeSingleEntityChangeSet executeExtraUpdates computeChangeSet computeChangeSets computeAssociationChanges persistNew hasMissingIdsWhichAreForeignKeys recomputeSingleEntityChangeSet executeInserts addToEntityIdentifiersAndEntityMap executeUpdates executeDeletions getCommitOrder scheduleForInsert isScheduledForInsert scheduleForUpdate scheduleExtraUpdate isScheduledForUpdate isScheduledForDirtyCheck scheduleForDelete isScheduledForDelete isEntityScheduled addToIdentityMap getEntityState removeFromIdentityMap getByIdHash tryGetByIdHash isInIdentityMap containsIdHash persist doPersist remove doRemove merge doMerge ensureVersionMatch isLoaded updateAssociationWithMergedEntity detach doDetach refresh doRefresh cascadeRefresh cascadeDetach cascadeMerge cascadePersist cascadeRemove lock getCommitOrderCalculator clear scheduleOrphanRemoval cancelOrphanRemoval scheduleCollectionDeletion isCollectionScheduledForDeletion newInstance createEntity triggerEagerLoads loadCollection getIdentityMap getOriginalEntityData setOriginalEntityData setOriginalEntityProperty getEntityIdentifier getSingleIdentifierValue tryGetById scheduleForDirtyCheck hasPendingInsertions size getEntityPersister getCollectionPersister registerManaged clearEntityChangeSet propertyChanged getScheduledEntityInsertions getScheduledEntityUpdates getScheduledEntityDeletions getScheduledCollectionDeletions getScheduledCollectionUpdates initializeObject objToStr markReadOnly isReadOnly afterTransactionComplete afterTransactionRolledBack performCallbackOnCachedPersister dispatchOnFlushEvent dispatchPostFlushEvent isIdentifierEquals assertThatThereAreNoUnintentionallyNonPersistedAssociations mergeEntityStateIntoManagedCopy hydrationComplete clearIdentityMapForEntityName clearEntityInsertionsForEntityName convertSingleFieldIdentifierToPHPValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	doctrine_orm_796af726503a0c7828816429acfdc24abba516f8_5_1	buggy: return $this->entityIdentifiers[spl_object_hash($entity)] ?? EntityNotFoundException::noIdentifierFound(get_class($entity)); context: public function getEntityIdentifier($entity) { return $this->entityIdentifiers[spl_object_hash($entity)] ?? EntityNotFoundException::noIdentifierFound(get_class($entity)); return $this->entityIdentifiers[spl_object_hash($entity)] ?? EntityNotFoundException::noIdentifierFound(get_class($entity)); }	type_info: entity:array  global_variable:  function_name: __construct commit postCommitCleanup computeScheduleInsertsChangeSets computeSingleEntityChangeSet executeExtraUpdates computeChangeSet computeChangeSets computeAssociationChanges persistNew hasMissingIdsWhichAreForeignKeys recomputeSingleEntityChangeSet executeInserts addToEntityIdentifiersAndEntityMap executeUpdates executeDeletions getCommitOrder scheduleForInsert isScheduledForInsert scheduleForUpdate scheduleExtraUpdate isScheduledForUpdate isScheduledForDirtyCheck scheduleForDelete isScheduledForDelete isEntityScheduled addToIdentityMap getEntityState removeFromIdentityMap getByIdHash tryGetByIdHash isInIdentityMap containsIdHash persist doPersist remove doRemove merge doMerge ensureVersionMatch isLoaded updateAssociationWithMergedEntity detach doDetach refresh doRefresh cascadeRefresh cascadeDetach cascadeMerge cascadePersist cascadeRemove lock getCommitOrderCalculator clear scheduleOrphanRemoval cancelOrphanRemoval scheduleCollectionDeletion isCollectionScheduledForDeletion newInstance createEntity triggerEagerLoads loadCollection getIdentityMap getOriginalEntityData setOriginalEntityData setOriginalEntityProperty getEntityIdentifier getSingleIdentifierValue tryGetById scheduleForDirtyCheck hasPendingInsertions size getEntityPersister getCollectionPersister registerManaged clearEntityChangeSet propertyChanged getScheduledEntityInsertions getScheduledEntityUpdates getScheduledEntityDeletions getScheduledCollectionDeletions getScheduledCollectionUpdates initializeObject objToStr markReadOnly isReadOnly afterTransactionComplete afterTransactionRolledBack performCallbackOnCachedPersister dispatchOnFlushEvent dispatchPostFlushEvent isIdentifierEquals assertThatThereAreNoUnintentionallyNonPersistedAssociations mergeEntityStateIntoManagedCopy hydrationComplete clearIdentityMapForEntityName clearEntityInsertionsForEntityName convertSingleFieldIdentifierToPHPValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	doctrine_orm_86703cbc7351b5f5a7de59f61e1109d9c9afbe41_6_0	buggy: if ($withCondition) { context: break; default: throw new BadMethodCallException('Type of association must be one of *_TO_ONE or MANY_TO_MANY'); } $withCondition = $condExpr === null ? '' : ('(' . $this->walkConditionalExpression($condExpr) . ')'); if ($targetClass->isInheritanceTypeJoined()) { $ctiJoins = $this->generateClassTableInheritanceJoins($targetClass, $joinedDqlAlias); if ($withCondition) { if ($withCondition) { $sql .= '(' . $targetTableJoin['table'] . $ctiJoins . ') ON ' . $targetTableJoin['condition']; } else { $sql .= $targetTableJoin['table'] . ' ON ' . $targetTableJoin['condition'] . $ctiJoins; } } else { $sql .= $targetTableJoin['table'] . ' ON ' . $targetTableJoin['condition']; } if ($withCondition) {	type_info: sql:string conn:unknown targetClass:unknown joinedDqlAlias:unknown targetTableJoin:array withCondition:unknown ctiJoins:unknown condExpr:unknown  global_variable: conn: unknown function_name: __construct getQuery getConnection getEntityManager getQueryComponent getQueryComponents setQueryComponent getExecutor getSQLTableAlias setSQLTableAlias getSQLColumnAlias generateClassTableInheritanceJoins generateOrderedCollectionOrderByItems generateDiscriminatorColumnConditionSQL generateFilterConditionSQL walkSelectStatement walkUpdateStatement walkDeleteStatement walkEntityIdentificationVariable walkIdentificationVariable walkPathExpression walkSelectClause walkFromClause walkIdentificationVariableDeclaration walkIndexBy walkRangeVariableDeclaration generateRangeVariableDeclarationSQL walkJoinAssociationDeclaration walkFunction walkOrderByClause walkOrderByItem walkHavingClause walkJoin walkCoalesceExpression walkNullIfExpression walkGeneralCaseExpression walkSimpleCaseExpression walkSelectExpression walkQuantifiedExpression walkSubselect walkSubselectFromClause walkSimpleSelectClause walkParenthesisExpression walkNewObject walkSimpleSelectExpression walkAggregateExpression walkGroupByClause walkGroupByItem walkDeleteClause walkUpdateClause walkUpdateItem walkWhereClause walkConditionalExpression walkConditionalTerm walkConditionalFactor walkConditionalPrimary walkExistsExpression walkCollectionMemberExpression walkEmptyCollectionComparisonExpression walkNullComparisonExpression walkInExpression walkInstanceOfExpression walkInParameter walkLiteral walkBetweenExpression walkLikeExpression walkStateFieldPathExpression walkComparisonExpression walkInputParameter walkArithmeticExpression walkSimpleArithmeticExpression walkArithmeticTerm walkArithmeticFactor walkArithmeticPrimary walkStringPrimary walkResultVariable getChildDiscriminatorsFromClassMetadata	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	doctrine_orm_5685dc05f66b166912ace3b97d2833d7e6b4bea8_7_0	"buggy: if (! $class->isInheritanceTypeNone() && ! $class->isRootEntity() && array_search($class->name, $class->discriminatorMap) === false) { context: if ($targetMetadata->isAssociationInverseSide($orderField)) { $ce[] = 'The association ' . $class->name . '#' . $fieldName . ' is ordered by a field ' . $orderField . ' on ' . $targetMetadata->name . ' that is the inverse side of an association.'; continue; } } } } if (! $class->isInheritanceTypeNone() && ! $class->isRootEntity() && array_search($class->name, $class->discriminatorMap) === false) { if (! $class->isInheritanceTypeNone() && ! $class->isRootEntity() && array_search($class->name, $class->discriminatorMap) === false) { $ce[] = ""Entity class '"" . $class->name . ""' is part of inheritance hierarchy, but is "" . ""not mapped in the root entity '"" . $class->rootEntityName . ""' discriminator map. "" . 'All subclasses must be listed in the discriminator map.'; } foreach ($class->subClasses as $subClass) { if (! in_array($class->name, class_parents($subClass))) { $ce[] = ""According to the discriminator map class '"" . $subClass . ""' has to be a child "" . ""of '"" . $class->name . ""' but these entities are not related through inheritance."";"	type_info: ce:array fieldName:unknown targetMetadata:unknown orderField:unknown  global_variable:  function_name: __construct validateMapping validateClass schemaInSyncWithMetadata	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	doctrine_orm_f414e57d8241460e25b5c412436ee4511b023ca6_8_0	buggy: $parentAlias = substr($join, 0, strpos($join, '.')); context: public function leftJoin($join, $alias, $conditionType = null, $condition = null, $indexBy = null) { $parentAlias = substr($join, 0, strpos($join, '.')); $parentAlias = substr($join, 0, strpos($join, '.')); $rootAlias = $this->findRootAlias($alias, $parentAlias); $join = new Expr\Join( Expr\Join::LEFT_JOIN, $join, $alias, $conditionType, $condition, $indexBy	type_info: parameters:array rootAlias:unknown alias:unknown indexBy:unknown conditionType:unknown join:unknown  global_variable: parameters: array function_name: __construct expr setCacheable isCacheable setCacheRegion getCacheRegion getLifetime setLifetime getCacheMode setCacheMode getType getEntityManager getState getDQL getQuery findRootAlias getRootAlias getRootAliases getAllAliases getRootEntities setParameter setParameters getParameters getParameter setFirstResult getFirstResult setMaxResults getMaxResults add select distinct addSelect delete update from indexBy join innerJoin leftJoin set where andWhere orWhere groupBy addGroupBy having andHaving orHaving orderBy addOrderBy addCriteria getDQLPart getDQLParts getDQLForDelete getDQLForUpdate getDQLForSelect getReducedDQLQueryPart resetDQLParts resetDQLPart __toString __clone	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	doctrine_orm_bbb68d007213188dc6008ca04b7167b79433c1a5_9_0	"buggy: if (! $class->isInheritanceTypeNone() && ! $class->isRootEntity() && ! $class->isMappedSuperclass && array_search($class->name, $class->discriminatorMap, true) === false) { context: if ($targetMetadata->isAssociationInverseSide($orderField)) { $ce[] = 'The association ' . $class->name . '#' . $fieldName . ' is ordered by a field ' . $orderField . ' on ' . $targetMetadata->name . ' that is the inverse side of an association.'; continue; } } } } if (! $class->isInheritanceTypeNone() && ! $class->isRootEntity() && ! $class->isMappedSuperclass && array_search($class->name, $class->discriminatorMap, true) === false) { if (! $class->isInheritanceTypeNone() && ! $class->isRootEntity() && ! $class->isMappedSuperclass && array_search($class->name, $class->discriminatorMap, true) === false) { $ce[] = ""Entity class '"" . $class->name . ""' is part of inheritance hierarchy, but is "" . ""not mapped in the root entity '"" . $class->rootEntityName . ""' discriminator map. "" . 'All subclasses must be listed in the discriminator map.'; } foreach ($class->subClasses as $subClass) { if (! in_array($class->name, class_parents($subClass), true)) { $ce[] = ""According to the discriminator map class '"" . $subClass . ""' has to be a child "" . ""of '"" . $class->name . ""' but these entities are not related through inheritance."";"	type_info: ce:array fieldName:unknown targetMetadata:unknown orderField:unknown  global_variable:  function_name: __construct validateMapping validateClass schemaInSyncWithMetadata	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	doctrine_orm_62a0d7359b2595daee097f42a79a680c59c287a2_10_0	buggy: if (count($data[key($data)]) > 1) { context: throw new NonUniqueResultException('The query returned multiple rows. Change the query or use a different result function like getScalarResult().'); } if (count($data[key($data)]) > 1) { if (count($data[key($data)]) > 1) {	type_info: data:unknown  global_variable:  function_name: hydrateAllData	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	doctrine_orm_62a0d7359b2595daee097f42a79a680c59c287a2_10_0	buggy: $result = $this->gatherScalarRowData($data[key($data)]); context: throw new NonUniqueResultException('The query returned a row containing multiple columns. Change the query or use a different result function like getScalarResult().'); } $result = $this->gatherScalarRowData($data[key($data)]); $result = $this->gatherScalarRowData($data[key($data)]); return array_shift($result); } }	type_info: data:unknown result:unknown  global_variable:  function_name: hydrateAllData	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	doctrine_orm_5ccf2eac40abe5817b73bed57de09ece00674046_11_0	buggy: $root->addChild('change-tracking-policy', $trackingPolicy); context: foreach ($metadata->discriminatorMap as $value => $className) { $discriminatorMappingXml = $discriminatorMapXml->addChild('discriminator-mapping'); $discriminatorMappingXml->addAttribute('value', $value); $discriminatorMappingXml->addAttribute('class', $className); } } $trackingPolicy = $this->_getChangeTrackingPolicyString($metadata->changeTrackingPolicy); if ($trackingPolicy !== 'DEFERRED_IMPLICIT') { $root->addChild('change-tracking-policy', $trackingPolicy); $root->addChild('change-tracking-policy', $trackingPolicy); } if (isset($metadata->table['indexes'])) { $indexesXml = $root->addChild('indexes'); foreach ($metadata->table['indexes'] as $name => $index) { $indexXml = $indexesXml->addChild('index'); $indexXml->addAttribute('name', $name); $indexXml->addAttribute('columns', implode(',', $index['columns']));	type_info: root:unknown discriminatorMapXml:unknown value:unknown trackingPolicy:unknown indexesXml:unknown name:unknown  global_variable:  function_name: exportClassMetadata exportTableOptions exportSequenceInformation asXml processEntityListeners generateEntityListenerXml addClassToMapIfExists	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	doctrine_orm_3d00fa817a5aee7be34a7071eb7c4fefa8dbc3e3_12_0	buggy:  context: public function __construct(ReflectionProperty $originalReflectionProperty, string $enumType) { $this->originalReflectionProperty = $originalReflectionProperty; $this->enumType = $enumType; }	type_info:  global_variable:  function_name: __construct getValue setValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	doctrine_orm_79f73a23f378a93305830600ec44ea2306cfb1fc_13_0	"buggy: 'bi-directional relationship, but the specified mappedBy association on the target-entity ' . $assoc['targetEntity'] . '#' . $assoc['mappedBy'] . ' does not contain the required ' . ""'inversedBy' attribute.""; context: } if (! $targetMetadata->hasAssociation($assoc['inversedBy'])) { $ce[] = 'The association ' . $class->name . '#' . $fieldName . ' refers to the inverse side ' . 'field ' . $assoc['targetEntity'] . '#' . $assoc['inversedBy'] . ' which does not exist.'; } elseif ($targetMetadata->associationMappings[$assoc['inversedBy']]['mappedBy'] === null) { $ce[] = 'The field ' . $class->name . '#' . $fieldName . ' is on the owning side of a ' . 'bi-directional relationship, but the specified mappedBy association on the target-entity ' . $assoc['targetEntity'] . '#' . $assoc['mappedBy'] . ' does not contain the required ' . ""'inversedBy' attribute.""; 'bi-directional relationship, but the specified mappedBy association on the target-entity ' . $assoc['targetEntity'] . '#' . $assoc['mappedBy'] . ' does not contain the required ' . ""'inversedBy' attribute.""; } elseif ($targetMetadata->associationMappings[$assoc['inversedBy']]['mappedBy'] !== $fieldName) { $ce[] = 'The mappings ' . $class->name . '#' . $fieldName . ' and ' . $assoc['targetEntity'] . '#' . $assoc['inversedBy'] . ' are ' . 'inconsistent with each other.';"	type_info: ce:array fieldName:unknown targetMetadata:unknown  global_variable:  function_name: __construct validateMapping validateClass schemaInSyncWithMetadata	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	doctrine_orm_8d9ebeded8e0ff430ef0c63b2b851a094b0c67a5_14_0	buggy: if ($parentClass->isMappedSuperclass) { if ($mapping['type'] & ClassMetadata::TO_MANY && ! $mapping['isOwningSide']) { throw MappingException::illegalToManyAssociationOnMappedSuperclass($parentClass->name, $field); } $mapping['sourceEntity'] = $subClass->name; } context: private function addInheritedRelations(ClassMetadata $subClass, ClassMetadata $parentClass): void { foreach ($parentClass->associationMappings as $field => $mapping) { if ($parentClass->isMappedSuperclass) { if ($mapping['type'] & ClassMetadata::TO_MANY && ! $mapping['isOwningSide']) { throw MappingException::illegalToManyAssociationOnMappedSuperclass($parentClass->name, $field); } $mapping['sourceEntity'] = $subClass->name; } if ($parentClass->isMappedSuperclass) { if ($mapping['type'] & ClassMetadata::TO_MANY && ! $mapping['isOwningSide']) { throw MappingException::illegalToManyAssociationOnMappedSuperclass($parentClass->name, $field); } $mapping['sourceEntity'] = $subClass->name; } if (! isset($mapping['inherited']) && ! $parentClass->isMappedSuperclass) { $mapping['inherited'] = $parentClass->name; } if (! isset($mapping['declared'])) { $mapping['declared'] = $parentClass->name; } $subClass->addInheritedAssociationMapping($mapping); }	type_info: field:unknown  global_variable:  function_name: setEntityManager initialize onNotFoundMetadata doLoadMetadata validateRuntimeMetadata newClassMetadataInstance addDefaultDiscriminatorMap getShortName addInheritedFields addInheritedRelations addInheritedEmbeddedClasses addNestedEmbeddedClasses addInheritedIndexes addInheritedNamedQueries addInheritedNamedNativeQueries addInheritedSqlResultSetMappings completeIdGeneratorMapping determineIdGeneratorStrategy truncateSequenceName inheritIdGeneratorMapping wakeupReflection initializeReflection getFqcnFromAlias getDriver isEntity getTargetPlatform	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	doctrine_orm_8d9ebeded8e0ff430ef0c63b2b851a094b0c67a5_14_0	buggy:  context: } if (! isset($mapping['inherited']) && ! $parentClass->isMappedSuperclass) { $mapping['inherited'] = $parentClass->name; } if (! isset($mapping['declared'])) { $mapping['declared'] = $parentClass->name; } $subClass->addInheritedAssociationMapping($mapping); } } private function addInheritedEmbeddedClasses(ClassMetadata $subClass, ClassMetadata $parentClass): void { foreach ($parentClass->embeddedClasses as $field => $embeddedClass) { if (! isset($embeddedClass['inherited']) && ! $parentClass->isMappedSuperclass) { $embeddedClass['inherited'] = $parentClass->name; }	type_info: field:unknown  global_variable:  function_name: setEntityManager initialize onNotFoundMetadata doLoadMetadata validateRuntimeMetadata newClassMetadataInstance addDefaultDiscriminatorMap getShortName addInheritedFields addInheritedRelations addInheritedEmbeddedClasses addNestedEmbeddedClasses addInheritedIndexes addInheritedNamedQueries addInheritedNamedNativeQueries addInheritedSqlResultSetMappings completeIdGeneratorMapping determineIdGeneratorStrategy truncateSequenceName inheritIdGeneratorMapping wakeupReflection initializeReflection getFqcnFromAlias getDriver isEntity getTargetPlatform	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	doctrine_orm_ee8269ea5525c5062daa7b3c733ec90ca3a98ccc_15_0	"buggy:  context: $orderField . ' on ' . $targetMetadata->name . ' that is the inverse side of an association.'; continue; } } } } if ( ! $class->isInheritanceTypeNone() && ! $class->isRootEntity() && ! $class->isMappedSuperclass && array_search($class->name, $class->discriminatorMap, true) === false ) { $ce[] = ""Entity class '"" . $class->name . ""' is part of inheritance hierarchy, but is "" . ""not mapped in the root entity '"" . $class->rootEntityName . ""' discriminator map. "" . 'All subclasses must be listed in the discriminator map.'; } foreach ($class->subClasses as $subClass) { if (! in_array($class->name, class_parents($subClass), true)) {"	type_info: ce:array targetMetadata:unknown orderField:unknown  global_variable:  function_name: __construct validateMapping validateClass schemaInSyncWithMetadata getUpdateSchemaList	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	spatie_laravel-permission_b12159e61f94680be0a95ee5b50d9f1099040714_1_0	buggy: public function boot(PermissionRegistrar $permissionLoader, Filesystem $filesystem) context: use Illuminate\Filesystem\Filesystem; use Illuminate\Routing\Route; use Illuminate\Support\Collection; use Illuminate\Support\ServiceProvider; use Illuminate\View\Compilers\BladeCompiler; use Spatie\Permission\Contracts\Permission as PermissionContract; use Spatie\Permission\Contracts\Role as RoleContract; class PermissionServiceProvider extends ServiceProvider { public function boot(PermissionRegistrar $permissionLoader, Filesystem $filesystem) public function boot(PermissionRegistrar $permissionLoader, Filesystem $filesystem) { $this->offerPublishing(); $this->registerMacroHelpers(); $this->registerCommands(); $this->registerModelBindings();	type_info:  global_variable:  function_name: boot register offerPublishing registerCommands registerModelBindings registerBladeExtensions registerMacroHelpers getMigrationFileName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	spatie_laravel-permission_b12159e61f94680be0a95ee5b50d9f1099040714_1_0	buggy: __DIR__.'/../database/migrations/create_permission_tables.php.stub' => $this->getMigrationFileName($filesystem, 'create_permission_tables.php'), context: { if (! function_exists('config_path')) { return; } $this->publishes([ __DIR__.'/../config/permission.php' => config_path('permission.php'), ], 'config'); $this->publishes([ __DIR__.'/../database/migrations/create_permission_tables.php.stub' => $this->getMigrationFileName($filesystem, 'create_permission_tables.php'), __DIR__.'/../database/migrations/create_permission_tables.php.stub' => $this->getMigrationFileName($filesystem, 'create_permission_tables.php'), ], 'migrations'); } protected function registerCommands() { $this->commands([ Commands\CacheReset::class, Commands\CreateRole::class, Commands\CreatePermission::class,	type_info:  global_variable:  function_name: boot register offerPublishing registerCommands registerModelBindings registerBladeExtensions registerMacroHelpers getMigrationFileName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	spatie_laravel-permission_b12159e61f94680be0a95ee5b50d9f1099040714_1_0	"buggy: * @param Filesystem $filesystem context: } $permissions = implode('|', $permissions); $this->middleware(""permission:$permissions""); return $this; }); } * @param Filesystem $filesystem protected function getMigrationFileName(Filesystem $filesystem, $migrationFileName): string { $timestamp = date('Y_m_d_His'); return Collection::make($this->app->databasePath().DIRECTORY_SEPARATOR.'migrations'.DIRECTORY_SEPARATOR) ->flatMap(function ($path) use ($filesystem) { return $filesystem->glob($path.'*_create_permission_tables.php'); })->push($this->app->databasePath().""/migrations/{$timestamp}_create_permission_tables.php"") ->flatMap(function ($path) use ($filesystem, $migrationFileName) { return $filesystem->glob($path.'*_'.$migrationFileName);"	type_info: permissions:array timestamp:unknown  global_variable:  function_name: boot register offerPublishing registerCommands registerModelBindings registerBladeExtensions registerMacroHelpers getMigrationFileName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	spatie_laravel-permission_b12159e61f94680be0a95ee5b50d9f1099040714_1_0	"buggy: protected function getMigrationFileName(Filesystem $filesystem, $migrationFileName): string context: } $permissions = implode('|', $permissions); $this->middleware(""permission:$permissions""); return $this; }); } protected function getMigrationFileName(Filesystem $filesystem, $migrationFileName): string protected function getMigrationFileName(Filesystem $filesystem, $migrationFileName): string { $timestamp = date('Y_m_d_His'); return Collection::make($this->app->databasePath().DIRECTORY_SEPARATOR.'migrations'.DIRECTORY_SEPARATOR) ->flatMap(function ($path) use ($filesystem) { return $filesystem->glob($path.'*_create_permission_tables.php'); })->push($this->app->databasePath().""/migrations/{$timestamp}_create_permission_tables.php"") ->flatMap(function ($path) use ($filesystem, $migrationFileName) { return $filesystem->glob($path.'*_'.$migrationFileName);"	type_info: permissions:array timestamp:unknown  global_variable:  function_name: boot register offerPublishing registerCommands registerModelBindings registerBladeExtensions registerMacroHelpers getMigrationFileName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	spatie_laravel-permission_b12159e61f94680be0a95ee5b50d9f1099040714_1_0	"buggy:  context: protected function getMigrationFileName(Filesystem $filesystem, $migrationFileName): string { $timestamp = date('Y_m_d_His'); return Collection::make($this->app->databasePath().DIRECTORY_SEPARATOR.'migrations'.DIRECTORY_SEPARATOR) ->flatMap(function ($path) use ($filesystem) { return $filesystem->glob($path.'*_create_permission_tables.php'); })->push($this->app->databasePath().""/migrations/{$timestamp}_create_permission_tables.php"") ->flatMap(function ($path) use ($filesystem, $migrationFileName) { return $filesystem->glob($path.'*_'.$migrationFileName); }) ->push($this->app->databasePath().""/migrations/{$timestamp}_{$migrationFileName}"") ->first(); }"	type_info: timestamp:unknown  global_variable:  function_name: boot register offerPublishing registerCommands registerModelBindings registerBladeExtensions registerMacroHelpers getMigrationFileName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	spatie_laravel-permission_f827b6dc097e9d019946d6a81c0d3c782afb4d37_2_0	buggy:  context: { $permissions = $this->permissions; if ($this->roles) { $permissions = $permissions->merge($this->getPermissionsViaRoles()); } return $permissions->sort()->values(); } public function givePermissionTo(...$permissions) { $permissions = collect($permissions) ->flatten() ->map(function ($permission) { if (empty($permission)) { return false; } return $this->getStoredPermission($permission);	type_info: permissions:array permission:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	spatie_laravel-permission_f827b6dc097e9d019946d6a81c0d3c782afb4d37_2_0	buggy: if (PermissionRegistrar::$teams && ! is_a($this, Role::class)) { $this->permissions()->wherePivot(PermissionRegistrar::$teamsKey, app(PermissionRegistrar::class)->getPermissionsTeamId())->sync($permissions, false); } else { $this->permissions()->sync($permissions, false); } context: ]; }) ->pluck('values', 'id')->toArray(); $model = $this->getModel(); if ($model->exists) { if (PermissionRegistrar::$teams && ! is_a($this, Role::class)) { $this->permissions()->wherePivot(PermissionRegistrar::$teamsKey, app(PermissionRegistrar::class)->getPermissionsTeamId())->sync($permissions, false); } else { $this->permissions()->sync($permissions, false); } if (PermissionRegistrar::$teams && ! is_a($this, Role::class)) { $this->permissions()->wherePivot(PermissionRegistrar::$teamsKey, app(PermissionRegistrar::class)->getPermissionsTeamId())->sync($permissions, false); } else { $this->permissions()->sync($permissions, false); } $model->load('permissions'); } else {	type_info: permissions:array teamsKey:array model:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	spatie_laravel-permission_f827b6dc097e9d019946d6a81c0d3c782afb4d37_2_0	buggy: $this->permissions()->detach(); context: public function syncPermissions(...$permissions) { $this->permissions()->detach(); $this->permissions()->detach(); return $this->givePermissionTo($permissions); }	type_info: permissions:array  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	spatie_laravel-permission_f827b6dc097e9d019946d6a81c0d3c782afb4d37_2_0	buggy: $this->permissions()->detach($this->getStoredPermission($permission)); context: public function revokePermissionTo($permission) { $this->permissions()->detach($this->getStoredPermission($permission)); $this->permissions()->detach($this->getStoredPermission($permission)); if (is_a($this, get_class(app(PermissionRegistrar::class)->getRoleClass()))) { $this->forgetCachedPermissions(); } $this->load('permissions'); return $this; }	type_info: permission:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	spatie_laravel-permission_f827b6dc097e9d019946d6a81c0d3c782afb4d37_2_1	buggy:  context: return $query->whereHas('roles', function (Builder $subQuery) use ($roles) { $subQuery->whereIn(config('permission.table_names.roles').'.id', \array_column($roles, 'id')); }); } public function assignRole(...$roles)	type_info: roles:array  global_variable:  function_name: bootHasRoles getRoleClass roles scopeRole assignRole removeRole syncRoles hasRole hasAnyRole hasAllRoles hasExactRoles getDirectPermissions getRoleNames getStoredRole convertPipeToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	spatie_laravel-permission_f827b6dc097e9d019946d6a81c0d3c782afb4d37_2_1	buggy: if (PermissionRegistrar::$teams && ! is_a($this, Permission::class)) { $this->roles()->wherePivot(PermissionRegistrar::$teamsKey, app(PermissionRegistrar::class)->getPermissionsTeamId())->sync($roles, false); } else { $this->roles()->sync($roles, false); } context: ]; }) ->pluck('values', 'id')->toArray(); $model = $this->getModel(); if ($model->exists) { if (PermissionRegistrar::$teams && ! is_a($this, Permission::class)) { $this->roles()->wherePivot(PermissionRegistrar::$teamsKey, app(PermissionRegistrar::class)->getPermissionsTeamId())->sync($roles, false); } else { $this->roles()->sync($roles, false); } if (PermissionRegistrar::$teams && ! is_a($this, Permission::class)) { $this->roles()->wherePivot(PermissionRegistrar::$teamsKey, app(PermissionRegistrar::class)->getPermissionsTeamId())->sync($roles, false); } else { $this->roles()->sync($roles, false); } $model->load('roles'); } else {	type_info: roles:array teamsKey:array model:unknown  global_variable:  function_name: bootHasRoles getRoleClass roles scopeRole assignRole removeRole syncRoles hasRole hasAnyRole hasAllRoles hasExactRoles getDirectPermissions getRoleNames getStoredRole convertPipeToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	spatie_laravel-permission_f827b6dc097e9d019946d6a81c0d3c782afb4d37_2_1	buggy: $this->roles()->detach($this->getStoredRole($role)); context: public function removeRole($role) { $this->roles()->detach($this->getStoredRole($role)); $this->roles()->detach($this->getStoredRole($role)); $this->load('roles'); if (is_a($this, get_class($this->getPermissionClass()))) { $this->forgetCachedPermissions(); } return $this; }	type_info:  global_variable:  function_name: bootHasRoles getRoleClass roles scopeRole assignRole removeRole syncRoles hasRole hasAnyRole hasAllRoles hasExactRoles getDirectPermissions getRoleNames getStoredRole convertPipeToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	spatie_laravel-permission_f827b6dc097e9d019946d6a81c0d3c782afb4d37_2_1	buggy: $this->roles()->detach(); context: public function syncRoles(...$roles) { $this->roles()->detach(); $this->roles()->detach(); return $this->assignRole($roles); }	type_info: roles:array  global_variable:  function_name: bootHasRoles getRoleClass roles scopeRole assignRole removeRole syncRoles hasRole hasAnyRole hasAllRoles hasExactRoles getDirectPermissions getRoleNames getStoredRole convertPipeToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy:  context: use Spatie\Permission\Contracts\Role; use Spatie\Permission\Exceptions\GuardDoesNotMatch; use Spatie\Permission\Exceptions\PermissionDoesNotExist; use Spatie\Permission\Exceptions\WildcardPermissionInvalidArgument; use Spatie\Permission\Guard; use Spatie\Permission\PermissionRegistrar; use Spatie\Permission\WildcardPermission; trait HasPermissions { private $permissionClass; public static function bootHasPermissions() { static::deleting(function ($model) { if (method_exists($model, 'isForceDeleting') && ! $model->isForceDeleting()) { return; } $model->permissions()->detach();	type_info: permissionClass:unknown model:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: * @param string|array|\Spatie\Permission\Contracts\Permission|\Illuminate\Support\Collection $permissions context: $q->when(PermissionRegistrar::$teams, function ($q) { $q->where(PermissionRegistrar::$teamsKey, app(PermissionRegistrar::class)->getPermissionsTeamId()); }); }); } * @param string|array|\Spatie\Permission\Contracts\Permission|\Illuminate\Support\Collection $permissions public function scopePermission(Builder $query, $permissions): Builder	type_info: permissions:array teamsKey:array  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: * @param string|array|\Spatie\Permission\Contracts\Permission|\Illuminate\Support\Collection $permissions context: $query->orWhereHas('roles', function (Builder $subQuery) use ($rolesWithPermissions) { $subQuery->whereIn(config('permission.table_names.roles').'.id', \array_column($rolesWithPermissions, 'id')); }); } }); } * @param string|array|\Spatie\Permission\Contracts\Permission|\Illuminate\Support\Collection $permissions protected function convertToPermissionModels($permissions): array {	type_info: permissions:array rolesWithPermissions:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy:  context: $query->orWhereHas('roles', function (Builder $subQuery) use ($rolesWithPermissions) { $subQuery->whereIn(config('permission.table_names.roles').'.id', \array_column($rolesWithPermissions, 'id')); }); } }); } protected function convertToPermissionModels($permissions): array {	type_info: permissions:array rolesWithPermissions:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: return $this->getPermissionClass()->findByName($permission, $this->getDefaultGuardName()); context: $permissions = $permissions->all(); } $permissions = is_array($permissions) ? $permissions : [$permissions]; return array_map(function ($permission) { if ($permission instanceof Permission) { return $permission; } return $this->getPermissionClass()->findByName($permission, $this->getDefaultGuardName()); return $this->getPermissionClass()->findByName($permission, $this->getDefaultGuardName()); }, $permissions); } public function hasPermissionTo($permission, $guardName = null): bool { if (config('permission.enable_wildcard_permission', false)) { return $this->hasWildcardPermission($permission, $guardName); }	type_info: permissions:array guardName:unknown permission:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy:  context: if ($permissions instanceof Collection) { $permissions = $permissions->all(); } $permissions = is_array($permissions) ? $permissions : [$permissions]; return array_map(function ($permission) { if ($permission instanceof Permission) { return $permission; } return $this->getPermissionClass()->findByName($permission, $this->getDefaultGuardName()); }, $permissions); } public function hasPermissionTo($permission, $guardName = null): bool { if (config('permission.enable_wildcard_permission', false)) { return $this->hasWildcardPermission($permission, $guardName); }	type_info: permissions:array guardName:unknown permission:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: public function hasUncachedPermissionTo($permission, $guardName = null): bool { return $this->hasPermissionTo($permission, $guardName); } context: $userPermission = new WildcardPermission($userPermission->name); if ($userPermission->implies($permission)) { return true; } } return false; } public function hasUncachedPermissionTo($permission, $guardName = null): bool { return $this->hasPermissionTo($permission, $guardName); } public function hasUncachedPermissionTo($permission, $guardName = null): bool { return $this->hasPermissionTo($permission, $guardName); } public function checkPermissionTo($permission, $guardName = null): bool { try { return $this->hasPermissionTo($permission, $guardName); } catch (PermissionDoesNotExist $e) {	type_info: guardName:unknown permission:unknown userPermission:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: * @param array ...$permissions context: public function checkPermissionTo($permission, $guardName = null): bool { try { return $this->hasPermissionTo($permission, $guardName); } catch (PermissionDoesNotExist $e) { return false; } } * @param array ...$permissions public function hasAnyPermission(...$permissions): bool { $permissions = collect($permissions)->flatten(); foreach ($permissions as $permission) { if ($this->checkPermissionTo($permission)) { return true; } } return false;	type_info: permissions:array guardName:unknown permission:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: * @throws \Exception context: public function checkPermissionTo($permission, $guardName = null): bool { try { return $this->hasPermissionTo($permission, $guardName); } catch (PermissionDoesNotExist $e) { return false; } } * @throws \Exception public function hasAnyPermission(...$permissions): bool { $permissions = collect($permissions)->flatten(); foreach ($permissions as $permission) { if ($this->checkPermissionTo($permission)) { return true; } } return false;	type_info: permissions:array guardName:unknown permission:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: * @param array ...$permissions context: foreach ($permissions as $permission) { if ($this->checkPermissionTo($permission)) { return true; } } return false; } * @param array ...$permissions public function hasAllPermissions(...$permissions): bool { $permissions = collect($permissions)->flatten(); foreach ($permissions as $permission) { if (! $this->hasPermissionTo($permission)) { return false; } }	type_info: permissions:array permission:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: * @param string|array|\Spatie\Permission\Contracts\Permission|\Illuminate\Support\Collection $permissions context: protected function getPermissionsRelation() { $relation = $this->permissions(); if (PermissionRegistrar::$teams && ! is_a($this, Role::class)) { $relation->wherePivot(PermissionRegistrar::$teamsKey, app(PermissionRegistrar::class)->getPermissionsTeamId()); } return $relation; } * @param string|array|\Spatie\Permission\Contracts\Permission|\Illuminate\Support\Collection $permissions public function givePermissionTo(...$permissions)	type_info: permissions:array relation:unknown teamsKey:array  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: * @param string|array|\Spatie\Permission\Contracts\Permission|\Illuminate\Support\Collection $permissions context: ); } if (is_a($this, get_class(app(PermissionRegistrar::class)->getRoleClass()))) { $this->forgetCachedPermissions(); } return $this; } * @param string|array|\Spatie\Permission\Contracts\Permission|\Illuminate\Support\Collection $permissions public function syncPermissions(...$permissions) { $this->getPermissionsRelation()->detach(); return $this->givePermissionTo($permissions); } public function revokePermissionTo($permission) { $this->getPermissionsRelation()->detach($this->getStoredPermission($permission));	type_info: permissions:array permission:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: * @param string|array|\Spatie\Permission\Contracts\Permission|\Illuminate\Support\Collection $permissions context: public function getPermissionNames(): Collection { return $this->permissions->pluck('name'); } * @param string|array|\Spatie\Permission\Contracts\Permission|\Illuminate\Support\Collection $permissions protected function getStoredPermission($permissions)	type_info: permissions:array  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: * @param array ...$permissions context: public function forgetCachedPermissions() { app(PermissionRegistrar::class)->forgetCachedPermissions(); } * @param array ...$permissions public function hasAllDirectPermissions(...$permissions): bool	type_info: permissions:array  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_0	buggy: * @param array ...$permissions context: foreach ($permissions as $permission) { if (! $this->hasDirectPermission($permission)) { return false; } } return true; } * @param array ...$permissions public function hasAnyDirectPermission(...$permissions): bool { $permissions = collect($permissions)->flatten(); foreach ($permissions as $permission) { if ($this->hasDirectPermission($permission)) { return true; } }	type_info: permissions:array permission:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels hasPermissionTo hasWildcardPermission hasUncachedPermissionTo checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions getPermissionsRelation givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_1	buggy:  context: use Illuminate\Database\Eloquent\Relations\BelongsToMany; use Illuminate\Support\Collection; use Spatie\Permission\Contracts\Permission; use Spatie\Permission\Contracts\Role; use Spatie\Permission\PermissionRegistrar; trait HasRoles { use HasPermissions; private $roleClass; public static function bootHasRoles() { static::deleting(function ($model) { if (method_exists($model, 'isForceDeleting') && ! $model->isForceDeleting()) { return; } $model->roles()->detach();	type_info: model:unknown roleClass:unknown  global_variable:  function_name: bootHasRoles getRoleClass roles scopeRole getRolesRelation assignRole removeRole syncRoles hasRole hasAnyRole hasAllRoles hasExactRoles getDirectPermissions getRoleNames getStoredRole convertPipeToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_1	buggy: $guard = $guard ?: $this->getDefaultGuardName(); context: if (! is_array($roles)) { $roles = [$roles]; } $roles = array_map(function ($role) use ($guard) { if ($role instanceof Role) { return $role; } $method = is_numeric($role) ? 'findById' : 'findByName'; $guard = $guard ?: $this->getDefaultGuardName(); $guard = $guard ?: $this->getDefaultGuardName(); return $this->getRoleClass()->{$method}($role, $guard); }, $roles); return $query->whereHas('roles', function (Builder $subQuery) use ($roles) { $subQuery->whereIn(config('permission.table_names.roles').'.id', \array_column($roles, 'id')); }); }	type_info: guard:unknown roles:array method:string  global_variable:  function_name: bootHasRoles getRoleClass roles scopeRole getRolesRelation assignRole removeRole syncRoles hasRole hasAnyRole hasAllRoles hasExactRoles getDirectPermissions getRoleNames getStoredRole convertPipeToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
67	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_1	buggy: return $this->getRoleClass()->{$method}($role, $guard); context: } $roles = array_map(function ($role) use ($guard) { if ($role instanceof Role) { return $role; } $method = is_numeric($role) ? 'findById' : 'findByName'; $guard = $guard ?: $this->getDefaultGuardName(); return $this->getRoleClass()->{$method}($role, $guard); return $this->getRoleClass()->{$method}($role, $guard); }, $roles); return $query->whereHas('roles', function (Builder $subQuery) use ($roles) { $subQuery->whereIn(config('permission.table_names.roles').'.id', \array_column($roles, 'id')); }); } protected function getRolesRelation() {	type_info: guard:unknown roles:array method:string  global_variable:  function_name: bootHasRoles getRoleClass roles scopeRole getRolesRelation assignRole removeRole syncRoles hasRole hasAnyRole hasAllRoles hasExactRoles getDirectPermissions getRoleNames getStoredRole convertPipeToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
68	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_1	buggy: * @param array|string|int|\Spatie\Permission\Contracts\Role ...$roles context: protected function getRolesRelation() { $relation = $this->roles(); if (PermissionRegistrar::$teams && ! is_a($this, Permission::class)) { $relation->wherePivot(PermissionRegistrar::$teamsKey, app(PermissionRegistrar::class)->getPermissionsTeamId()); } return $relation; } * @param array|string|int|\Spatie\Permission\Contracts\Role ...$roles public function assignRole(...$roles)	type_info: roles:array relation:unknown teamsKey:array  global_variable:  function_name: bootHasRoles getRoleClass roles scopeRole getRolesRelation assignRole removeRole syncRoles hasRole hasAnyRole hasAllRoles hasExactRoles getDirectPermissions getRoleNames getStoredRole convertPipeToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
69	spatie_laravel-permission_ee0a50ad174e7f8b14bd17dd2a79ab51ccbac3df_3_1	buggy: * @param array|\Spatie\Permission\Contracts\Role|string|int ...$roles context: $this->load('roles'); if (is_a($this, get_class($this->getPermissionClass()))) { $this->forgetCachedPermissions(); } return $this; } * @param array|\Spatie\Permission\Contracts\Role|string|int ...$roles public function syncRoles(...$roles) { $this->getRolesRelation()->detach(); return $this->assignRole($roles); } public function hasRole($roles, string $guard = null): bool { if (is_string($roles) && false !== strpos($roles, '|')) {	type_info: guard:unknown roles:array  global_variable:  function_name: bootHasRoles getRoleClass roles scopeRole getRolesRelation assignRole removeRole syncRoles hasRole hasAnyRole hasAllRoles hasExactRoles getDirectPermissions getRoleNames getStoredRole convertPipeToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
70	spatie_laravel-permission_e4493daedcab9aac91b9d1549ebcbad44f3f7326_4_0	buggy: getModelForGuard($this->attributes['guard_name']), context: public function users(): BelongsToMany { return $this->morphedByMany( getModelForGuard($this->attributes['guard_name']), getModelForGuard($this->attributes['guard_name']), 'model', config('permission.table_names.model_has_permissions'), PermissionRegistrar::$pivotPermission, config('permission.column_names.model_morph_key') ); }	type_info:  global_variable:  function_name: __construct getTable create roles users findByName findById findOrCreate getPermissions getPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
71	spatie_laravel-permission_e4493daedcab9aac91b9d1549ebcbad44f3f7326_4_1	buggy: getModelForGuard($this->attributes['guard_name']), context: public function users(): BelongsToMany { return $this->morphedByMany( getModelForGuard($this->attributes['guard_name']), getModelForGuard($this->attributes['guard_name']), 'model', config('permission.table_names.model_has_roles'), PermissionRegistrar::$pivotRole, config('permission.column_names.model_morph_key') ); }	type_info:  global_variable:  function_name: __construct getTable create permissions users findByName findById findOrCreate findByParam hasPermissionTo	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
72	spatie_laravel-permission_3cbed36eb0524f518bb2cbf1bf69e7df489c3424_5_0	buggy:  context: public static function bootHasPermissions() { static::deleting(function ($model) { if (method_exists($model, 'isForceDeleting') && ! $model->isForceDeleting()) { return; } $model->permissions()->detach(); }); } public function getPermissionClass() { if (! isset($this->permissionClass)) { $this->permissionClass = app(PermissionRegistrar::class)->getPermissionClass(); }	type_info: model:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels filterPermission hasPermissionTo hasWildcardPermission checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions collectPermissions givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
73	spatie_laravel-permission_3cbed36eb0524f518bb2cbf1bf69e7df489c3424_5_0	buggy:  context: public static function bootHasPermissions() { static::deleting(function ($model) { if (method_exists($model, 'isForceDeleting') && ! $model->isForceDeleting()) { return; } $model->permissions()->detach(); }); } public function getPermissionClass() { if (! isset($this->permissionClass)) { $this->permissionClass = app(PermissionRegistrar::class)->getPermissionClass(); } return $this->permissionClass;	type_info: model:unknown  global_variable:  function_name: bootHasPermissions getPermissionClass permissions scopePermission convertToPermissionModels filterPermission hasPermissionTo hasWildcardPermission checkPermissionTo hasAnyPermission hasAllPermissions hasPermissionViaRole hasDirectPermission getPermissionsViaRoles getAllPermissions collectPermissions givePermissionTo syncPermissions revokePermissionTo getPermissionNames getStoredPermission ensureModelSharesGuard getGuardNames getDefaultGuardName forgetCachedPermissions hasAllDirectPermissions hasAnyDirectPermission	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
74	spatie_laravel-permission_3cbed36eb0524f518bb2cbf1bf69e7df489c3424_5_1	buggy:  context: public static function bootHasRoles() { static::deleting(function ($model) { if (method_exists($model, 'isForceDeleting') && ! $model->isForceDeleting()) { return; } $model->roles()->detach(); }); } public function getRoleClass() { if (! isset($this->roleClass)) { $this->roleClass = app(PermissionRegistrar::class)->getRoleClass(); }	type_info: model:unknown  global_variable:  function_name: bootHasRoles getRoleClass roles scopeRole assignRole removeRole syncRoles hasRole hasAnyRole hasAllRoles hasExactRoles getDirectPermissions getRoleNames getStoredRole convertPipeToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
75	spatie_laravel-permission_3cbed36eb0524f518bb2cbf1bf69e7df489c3424_5_1	buggy:  context: public static function bootHasRoles() { static::deleting(function ($model) { if (method_exists($model, 'isForceDeleting') && ! $model->isForceDeleting()) { return; } $model->roles()->detach(); }); } public function getRoleClass() { if (! isset($this->roleClass)) { $this->roleClass = app(PermissionRegistrar::class)->getRoleClass(); } return $this->roleClass;	type_info: model:unknown  global_variable:  function_name: bootHasRoles getRoleClass roles scopeRole assignRole removeRole syncRoles hasRole hasAnyRole hasAllRoles hasExactRoles getDirectPermissions getRoleNames getStoredRole convertPipeToArray	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
76	spatie_laravel-permission_b881a0777bdccd536d72ab36128e4f581417d575_6_0	buggy: } public function getTable() { return config('permission.table_names.roles', parent::getTable()); context: public function __construct(array $attributes = []) { $attributes['guard_name'] = $attributes['guard_name'] ?? config('auth.defaults.guard'); parent::__construct($attributes); $this->guarded[] = $this->primaryKey; } public function getTable() { return config('permission.table_names.roles', parent::getTable()); }	type_info: attributes:unknown  global_variable:  function_name: __construct getTable create permissions users findByName findById findOrCreate findByParam hasPermissionTo	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	PHPOffice_PhpSpreadsheet_e41fdf490950d9d409c5e66e9ffcfdcd607795c6_1_0	buggy:  context: foreach ($worksheet->getCoordinates(false) as $coordinate) { $cell = $worksheet->getCell($coordinate); $cell->setXfIndex($cell->getXfIndex() + $countCellXfs); } foreach ($worksheet->getColumnDimensions() as $columnDimension) { $columnDimension->setXfIndex($columnDimension->getXfIndex() + $countCellXfs); } return $this->addSheet($worksheet, $sheetIndex); } public function getNamedRanges(): array { return array_filter( $this->definedNames, function (DefinedName $definedName) { return $definedName->isFormula() === self::DEFINED_NAME_IS_RANGE; }	type_info: sheetIndex:unknown worksheet:unknown countCellXfs:unknown cell:unknown definedName:unknown  global_variable:  function_name: hasMacros setHasMacros setMacrosCode getMacrosCode setMacrosCertificate hasMacrosCertificate getMacrosCertificate discardMacros setRibbonXMLData getRibbonXMLData setRibbonBinObjects getUnparsedLoadedData setUnparsedLoadedData getExtensionOnly getRibbonBinObjects hasRibbon hasRibbonBinObjects sheetCodeNameExists getSheetByCodeName __construct __destruct disconnectWorksheets getCalculationEngine getProperties setProperties getSecurity setSecurity getActiveSheet createSheet sheetNameExists addSheet removeSheetByIndex getSheet getAllSheets getSheetByName getIndex setIndexByName getSheetCount getActiveSheetIndex setActiveSheetIndex setActiveSheetIndexByName getSheetNames addExternalSheet getNamedRanges getNamedFormulae getDefinedNames addNamedRange addNamedFormula addDefinedName getNamedRange getNamedFormula getGlobalDefinedNameByType getLocalDefinedNameByType getDefinedName removeNamedRange removeNamedFormula removeDefinedName getWorksheetIterator copy __clone getCellXfCollection getCellXfByIndex getCellXfByHashCode cellXfExists getDefaultStyle addCellXf removeCellXfByIndex getCellXfSupervisor getCellStyleXfCollection getCellStyleXfByIndex getCellStyleXfByHashCode addCellStyleXf removeCellStyleXfByIndex garbageCollect getID getShowHorizontalScroll setShowHorizontalScroll getShowVerticalScroll setShowVerticalScroll getShowSheetTabs setShowSheetTabs getMinimized setMinimized getAutoFilterDateGrouping setAutoFilterDateGrouping getFirstSheetIndex setFirstSheetIndex getVisibility setVisibility getTabRatio setTabRatio reevaluateAutoFilters getSharedComponent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	PHPOffice_PhpSpreadsheet_3e8d50547c0b7a8acf9352834b3e9155a86210b3_2_0	buggy: $decimalPartSize = $placeHolders = 0; context: } $value *= 100; $format = self::stripQuotes($format); [, $vDecimals] = explode('.', ((string) $value) . '.'); $vDecimalCount = strlen(rtrim($vDecimals, '0')); $format = str_replace('%', '%%', $format); $wholePartSize = strlen((string) floor($value)); $decimalPartSize = $placeHolders = 0; $decimalPartSize = $placeHolders = 0; if (preg_match('/\.([?0]+)/u', $format, $matches)) { $decimalPartSize = strlen($matches[1]); $vMinDecimalCount = strlen(rtrim($matches[1], '?')); $decimalPartSize = min(max($vMinDecimalCount, $vDecimalCount), $decimalPartSize); $placeHolders = str_repeat(' ', strlen($matches[1]) - $decimalPartSize); } if (preg_match('/([#0,]+)\./u', $format, $matches)) { $wholePartSize = max($wholePartSize, strlen($matches[1])); }	type_info: format:unknown vDecimalCount:unknown wholePartSize:unknown decimalPartSize:unknown vMinDecimalCount:unknown placeHolders:unknown  global_variable:  function_name: format	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	PHPOffice_PhpSpreadsheet_3e8d50547c0b7a8acf9352834b3e9155a86210b3_2_0	"buggy: if (preg_match('/([#0,]+)\./u', $format, $matches)) { $wholePartSize = max($wholePartSize, strlen($matches[1])); context: $format = str_replace('%', '%%', $format); $wholePartSize = strlen((string) floor($value)); $decimalPartSize = $placeHolders = 0; if (preg_match('/\.([?0]+)/u', $format, $matches)) { $decimalPartSize = strlen($matches[1]); $vMinDecimalCount = strlen(rtrim($matches[1], '?')); $decimalPartSize = min(max($vMinDecimalCount, $vDecimalCount), $decimalPartSize); $placeHolders = str_repeat(' ', strlen($matches[1]) - $decimalPartSize); } if (preg_match('/([#0,]+)\./u', $format, $matches)) { $wholePartSize = max($wholePartSize, strlen($matches[1])); if (preg_match('/([#0,]+)\./u', $format, $matches)) { $wholePartSize = max($wholePartSize, strlen($matches[1])); } $wholePartSize += $decimalPartSize; $replacement = ""{$wholePartSize}.{$decimalPartSize}""; $mask = (string) preg_replace('/[#0,]+\.?[?#0,]*/ui', ""%{$replacement}f{$placeHolders}"", $format); $valueFloat = $value;"	type_info: format:unknown vDecimalCount:unknown wholePartSize:unknown decimalPartSize:unknown vMinDecimalCount:unknown placeHolders:unknown replacement:string mask:unknown valueFloat:unknown  global_variable:  function_name: format	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	PHPOffice_PhpSpreadsheet_3e8d50547c0b7a8acf9352834b3e9155a86210b3_2_0	"buggy: $wholePartSize += $decimalPartSize; $replacement = ""{$wholePartSize}.{$decimalPartSize}""; context: if (preg_match('/\.([?0]+)/u', $format, $matches)) { $decimalPartSize = strlen($matches[1]); $vMinDecimalCount = strlen(rtrim($matches[1], '?')); $decimalPartSize = min(max($vMinDecimalCount, $vDecimalCount), $decimalPartSize); $placeHolders = str_repeat(' ', strlen($matches[1]) - $decimalPartSize); } if (preg_match('/([#0,]+)\./u', $format, $matches)) { $wholePartSize = max($wholePartSize, strlen($matches[1])); } $wholePartSize += $decimalPartSize; $replacement = ""{$wholePartSize}.{$decimalPartSize}""; $wholePartSize += $decimalPartSize; $replacement = ""{$wholePartSize}.{$decimalPartSize}""; $mask = (string) preg_replace('/[#0,]+\.?[?#0,]*/ui', ""%{$replacement}f{$placeHolders}"", $format); $valueFloat = $value; return sprintf($mask, round($valueFloat, $decimalPartSize)); } }"	type_info: format:unknown vDecimalCount:unknown wholePartSize:unknown decimalPartSize:unknown vMinDecimalCount:unknown placeHolders:unknown replacement:string mask:unknown valueFloat:unknown  global_variable:  function_name: format	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	PHPOffice_PhpSpreadsheet_79f5cf99f68637b4e0db70eb1307e62e570300b8_3_0	buggy: if (is_numeric($arg)) { context: public static function product(...$args) { $returnValue = null; foreach (Functions::flattenArray($args) as $arg) { if (is_numeric($arg)) { if (is_numeric($arg)) { if ($returnValue === null) { $returnValue = $arg; } else { $returnValue *= $arg; } } else { return ExcelError::VALUE(); } }	type_info: returnValue:unknown  global_variable:  function_name: mod power product quotient	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	PHPOffice_PhpSpreadsheet_812c14a6adc8761853a303bb067e294d148124ca_4_0	buggy:  context: $this->addCellXf(clone $cellXf); } $worksheet->rebindParent($this); foreach ($worksheet->getCoordinates(false) as $coordinate) { $cell = $worksheet->getCell($coordinate); $cell->setXfIndex($cell->getXfIndex() + $countCellXfs); } return $this->addSheet($worksheet, $sheetIndex); } public function getNamedRanges(): array { return array_filter( $this->definedNames, function (DefinedName $definedName) { return $definedName->isFormula() === self::DEFINED_NAME_IS_RANGE; }	type_info: sheetIndex:unknown worksheet:unknown countCellXfs:unknown cell:unknown definedName:unknown  global_variable:  function_name: hasMacros setHasMacros setMacrosCode getMacrosCode setMacrosCertificate hasMacrosCertificate getMacrosCertificate discardMacros setRibbonXMLData getRibbonXMLData setRibbonBinObjects getUnparsedLoadedData setUnparsedLoadedData getExtensionOnly getRibbonBinObjects hasRibbon hasRibbonBinObjects sheetCodeNameExists getSheetByCodeName __construct __destruct disconnectWorksheets getCalculationEngine getProperties setProperties getSecurity setSecurity getActiveSheet createSheet sheetNameExists addSheet removeSheetByIndex getSheet getAllSheets getSheetByName getIndex setIndexByName getSheetCount getActiveSheetIndex setActiveSheetIndex setActiveSheetIndexByName getSheetNames addExternalSheet getNamedRanges getNamedFormulae getDefinedNames addNamedRange addNamedFormula addDefinedName getNamedRange getNamedFormula getGlobalDefinedNameByType getLocalDefinedNameByType getDefinedName removeNamedRange removeNamedFormula removeDefinedName getWorksheetIterator copy __clone getCellXfCollection getCellXfByIndex getCellXfByHashCode cellXfExists getDefaultStyle addCellXf removeCellXfByIndex getCellXfSupervisor getCellStyleXfCollection getCellStyleXfByIndex getCellStyleXfByHashCode addCellStyleXf removeCellStyleXfByIndex garbageCollect getID getShowHorizontalScroll setShowHorizontalScroll getShowVerticalScroll setShowVerticalScroll getShowSheetTabs setShowSheetTabs getMinimized setMinimized getAutoFilterDateGrouping setAutoFilterDateGrouping getFirstSheetIndex setFirstSheetIndex getVisibility setVisibility getTabRatio setTabRatio reevaluateAutoFilters getSharedComponent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	PHPOffice_PhpSpreadsheet_269e9ba14de6e26e60eda088a58f53e359cef9a8_5_0	"buggy: (string) preg_replace('/^=/', '', $defined->getValue()); context: { $worksheet = $cell->getWorksheet(); $spreadsheet = $worksheet->getParent(); $pCoordinatex = strtoupper($coordinate); $pCoordinatex = (string) preg_replace('/^=/', '', $pCoordinatex); $defined = $spreadsheet->getDefinedName($pCoordinatex, $worksheet); if ($defined !== null) { $worksheet2 = $defined->getWorkSheet(); if (!$defined->isFormula() && $worksheet2 !== null) { $coordinate = ""'"" . $worksheet2->getTitle() . ""'!"" . (string) preg_replace('/^=/', '', $defined->getValue()); (string) preg_replace('/^=/', '', $defined->getValue()); } } return $coordinate; } public static function trimTrailingRange(string $coordinate): string { return (string) preg_replace('/:[\\w\$]+$/', '', $coordinate);"	type_info: worksheet:unknown spreadsheet:unknown pCoordinatex:unknown defined:unknown worksheet2:unknown coordinate:unknown  global_variable:  function_name: setCompatibilityMode getCompatibilityMode setReturnDateType getReturnDateType DUMMY isMatrixValue isValue isCellValue ifCondition operandSpecialHandling null NAN REF NA VALUE NAME DIV0 errorType isBlank isErr isError isNa isEven isOdd isNumber isLogical isText isNonText n TYPE flattenArray scalar flattenArrayIndexed flattenSingleValue isFormula expandDefinedName trimTrailingRange trimSheetFromCellReference	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	PHPOffice_PhpSpreadsheet_269e9ba14de6e26e60eda088a58f53e359cef9a8_5_1	"buggy:  context: private static function extractWorksheet($cellAddress, Cell $cell): array { $sheetName = ''; if (strpos($cellAddress, '!') !== false) { [$sheetName, $cellAddress] = Worksheet::extractSheetTitle($cellAddress, true); $sheetName = trim($sheetName, ""'""); } $worksheet = ($sheetName !== '') ? $cell->getWorksheet()->getParent()->getSheetByName($sheetName) : $cell->getWorksheet();"	type_info: cellAddress:string sheetName:string worksheet:unknown  global_variable:  function_name: OFFSET extractRequiredCells extractWorksheet adjustEndCellColumnForWidth adustEndCellRowForHeight	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	PHPOffice_PhpSpreadsheet_269e9ba14de6e26e60eda088a58f53e359cef9a8_5_1	"buggy:  context: $sheetName = trim($sheetName, ""'""); } $worksheet = ($sheetName !== '') ? $cell->getWorksheet()->getParent()->getSheetByName($sheetName) : $cell->getWorksheet(); return [$cellAddress, $worksheet]; } private static function adjustEndCellColumnForWidth(string $endCellColumn, $width, int $startCellColumn, $columns) { $endCellColumn = Coordinate::columnIndexFromString($endCellColumn) - 1; if (($width !== null) && (!is_object($width))) { $endCellColumn = $startCellColumn + (int) $width - 1; } else { $endCellColumn += (int) $columns; } return $endCellColumn;"	type_info: cellAddress:string columns:unknown width:unknown startCellColumn:unknown endCellColumn:unknown sheetName:string worksheet:unknown  global_variable:  function_name: OFFSET extractRequiredCells extractWorksheet adjustEndCellColumnForWidth adustEndCellRowForHeight	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	PHPOffice_PhpSpreadsheet_e01a81ec5e1489389c622eb9ef4f876ea43eede1_6_0	buggy: return str_replace(self::SEARCH_SET, self::REPLACEMENT_SET, preg_quote($wildcard)); context: public static function wildcard(string $wildcard): string { return str_replace(self::SEARCH_SET, self::REPLACEMENT_SET, preg_quote($wildcard)); return str_replace(self::SEARCH_SET, self::REPLACEMENT_SET, preg_quote($wildcard)); }	type_info:  global_variable:  function_name: wildcard compare	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	PHPOffice_PhpSpreadsheet_e01a81ec5e1489389c622eb9ef4f876ea43eede1_6_0	buggy: public static function compare(string $value, string $wildcard): bool context: public static function wildcard(string $wildcard): string { return str_replace(self::SEARCH_SET, self::REPLACEMENT_SET, preg_quote($wildcard)); } public static function compare(string $value, string $wildcard): bool public static function compare(string $value, string $wildcard): bool	type_info: value:unknown  global_variable:  function_name: wildcard compare	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	PHPOffice_PhpSpreadsheet_e01a81ec5e1489389c622eb9ef4f876ea43eede1_6_0	"buggy: if ($value === '') { return true; context: public static function compare(string $value, string $wildcard): bool { if ($value === '') { return true; if ($value === '') { return true; } return (bool) preg_match(""/^{$wildcard}\$/mui"", $value); }"	type_info: value:unknown  global_variable:  function_name: wildcard compare	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	PHPOffice_PhpSpreadsheet_5cf4e2cca19be8e2ba831c65e499301d02791118_7_0	"buggy: $format = self::makeString(str_replace(['""', '*'], '', $format)); context: public static function format($value, string $format): string { $format = self::makeString(str_replace(['""', '*'], '', $format)); $format = self::makeString(str_replace(['""', '*'], '', $format)); $useThousands = (bool) preg_match('/(#,#|0,0)/', $format); if ($useThousands) { $format = self::pregReplace('/0,0/', '00', $format); $format = self::pregReplace('/#,#/', '##', $format); } $scale = 1; $matches = []; if (preg_match('/(#|0)(,+)/', $format, $matches)) { $scale = 1000 ** strlen($matches[2]);"	type_info: value:unknown format:unknown useThousands:unknown scale:integer matches:array  global_variable:  function_name: mergeComplexNumberFormatMasks processComplexNumberFormatMask complexNumberFormatMask f2s floatStringConvertScientific formatStraightNumericValue format makeString pregReplace	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	PHPOffice_PhpSpreadsheet_5cf4e2cca19be8e2ba831c65e499301d02791118_7_0	buggy:  context: } $scale = 1; $matches = []; if (preg_match('/(#|0)(,+)/', $format, $matches)) { $scale = 1000 ** strlen($matches[2]); $format = self::pregReplace('/0,+/', '0', $format); $format = self::pregReplace('/#,+/', '#', $format); } if (preg_match('/#?.*\?\/(\?+|\d+)/', $format)) { $value = FractionFormatter::format($value, $format); } else { $value = $value / $scale; $format = self::pregReplace('/\\#/', '0', $format); $format = self::pregReplace('/\[\$\-.*\]/', '', $format); $n = '/\\[[^\\]]+\\]/'; $m = self::pregReplace($n, '', $format);	type_info: value:unknown format:unknown scale:integer matches:array n:string m:unknown  global_variable:  function_name: mergeComplexNumberFormatMasks processComplexNumberFormatMask complexNumberFormatMask f2s floatStringConvertScientific formatStraightNumericValue format makeString pregReplace	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	PHPOffice_PhpSpreadsheet_5cf4e2cca19be8e2ba831c65e499301d02791118_7_0	buggy:  context: $scale = 1000 ** strlen($matches[2]); $format = self::pregReplace('/0,+/', '0', $format); $format = self::pregReplace('/#,+/', '#', $format); } if (preg_match('/#?.*\?\/(\?+|\d+)/', $format)) { $value = FractionFormatter::format($value, $format); } else { $value = $value / $scale; $format = self::pregReplace('/\\#/', '0', $format); $format = self::pregReplace('/\[\$\-.*\]/', '', $format); $n = '/\\[[^\\]]+\\]/'; $m = self::pregReplace($n, '', $format); if (preg_match(self::NUMBER_REGEX, $m, $matches)) { $value = self::formatStraightNumericValue($value, $format, $matches, $useThousands); } elseif ($format !== NumberFormat::FORMAT_GENERAL) { $value = self::makeString(str_replace('?', '', $format)); }	type_info: value:unknown format:unknown useThousands:unknown scale:integer matches:array n:string m:unknown  global_variable:  function_name: mergeComplexNumberFormatMasks processComplexNumberFormatMask complexNumberFormatMask f2s floatStringConvertScientific formatStraightNumericValue format makeString pregReplace	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	PHPOffice_PhpSpreadsheet_5cf4e2cca19be8e2ba831c65e499301d02791118_7_0	buggy: $format = self::pregReplace('/\\#/', '0', $format); context: $scale = 1000 ** strlen($matches[2]); $format = self::pregReplace('/0,+/', '0', $format); $format = self::pregReplace('/#,+/', '#', $format); } if (preg_match('/#?.*\?\/(\?+|\d+)/', $format)) { $value = FractionFormatter::format($value, $format); } else { $value = $value / $scale; $format = self::pregReplace('/\\#/', '0', $format); $format = self::pregReplace('/\\#/', '0', $format); $format = self::pregReplace('/\[\$\-.*\]/', '', $format); $n = '/\\[[^\\]]+\\]/'; $m = self::pregReplace($n, '', $format); if (preg_match(self::NUMBER_REGEX, $m, $matches)) { $value = self::formatStraightNumericValue($value, $format, $matches, $useThousands); } elseif ($format !== NumberFormat::FORMAT_GENERAL) { $value = self::makeString(str_replace('?', '', $format)); }	type_info: value:unknown format:unknown useThousands:unknown scale:integer matches:array n:string m:unknown  global_variable:  function_name: mergeComplexNumberFormatMasks processComplexNumberFormatMask complexNumberFormatMask f2s floatStringConvertScientific formatStraightNumericValue format makeString pregReplace	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	PHPOffice_PhpSpreadsheet_5cf4e2cca19be8e2ba831c65e499301d02791118_7_0	buggy:  context: if (preg_match('/#?.*\?\/(\?+|\d+)/', $format)) { $value = FractionFormatter::format($value, $format); } else { $value = $value / $scale; $format = self::pregReplace('/\\#/', '0', $format); $format = self::pregReplace('/\[\$\-.*\]/', '', $format); $n = '/\\[[^\\]]+\\]/'; $m = self::pregReplace($n, '', $format); if (preg_match(self::NUMBER_REGEX, $m, $matches)) { $value = self::formatStraightNumericValue($value, $format, $matches, $useThousands); } elseif ($format !== NumberFormat::FORMAT_GENERAL) { $value = self::makeString(str_replace('?', '', $format)); } } if (preg_match('/\[\$(.*)\]/u', $format, $m)) { $currencyCode = $m[1]; [$currencyCode] = explode('-', $currencyCode);	type_info: value:unknown format:unknown useThousands:unknown scale:integer matches:array n:string m:unknown currencyCode:unknown  global_variable:  function_name: mergeComplexNumberFormatMasks processComplexNumberFormatMask complexNumberFormatMask f2s floatStringConvertScientific formatStraightNumericValue format makeString pregReplace	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	PHPOffice_PhpSpreadsheet_21b784f20061e0e1c2bbbb1ddb9702d13645a38c_8_0	buggy: return in_array($value, ExcelError::$errorCodes); context: public static function isError($value = '') { if (is_array($value)) { return self::evaluateSingleArgumentArray([self::class, __FUNCTION__], $value); } if (!is_string($value)) { return false; } return in_array($value, ExcelError::$errorCodes); return in_array($value, ExcelError::$errorCodes); }	type_info: value:unknown  global_variable:  function_name: isErr isError isNa	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	PHPOffice_PhpSpreadsheet_21b784f20061e0e1c2bbbb1ddb9702d13645a38c_8_1	buggy:  context: public static $errorCodes = [ 'null' => '#NULL!', 'divisionbyzero' => '#DIV/0!', 'value' => '#VALUE!', 'reference' => '#REF!', 'name' => '#NAME?', 'num' => '#NUM!', 'na' => '#N/A', 'gettingdata' => '#GETTING_DATA', ]; public static function type($value = '') { if (is_array($value)) { return self::evaluateSingleArgumentArray([self::class, __FUNCTION__], $value); } $i = 1; foreach (self::$errorCodes as $errorCode) {	type_info: errorCodes:array value:unknown i:integer  global_variable:  function_name: type null NAN REF NA VALUE NAME DIV0 CALC	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	PHPOffice_PhpSpreadsheet_21b784f20061e0e1c2bbbb1ddb9702d13645a38c_8_1	buggy:  context: } $i = 1; foreach (self::$errorCodes as $errorCode) { if ($value === $errorCode) { return $i; } ++$i; } return self::NA(); } public static function null() { return self::$errorCodes['null']; } public static function NAN() {	type_info: errorCodes:array value:unknown i:integer  global_variable:  function_name: type null NAN REF NA VALUE NAME DIV0 CALC	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	PHPOffice_PhpSpreadsheet_782644684b07263880e6d1222112c4de66fbf0e8_9_0	"buggy:  context: private static function dataTestReference(&$operandData) { $operand = $operandData['value']; if (($operandData['reference'] === null) && (is_array($operand))) { $rKeys = array_keys($operand); $rowKey = array_shift($rKeys); $cKeys = array_keys(array_keys($operand[$rowKey])); $colKey = array_shift($cKeys); if (ctype_upper(""$colKey"")) { $operandData['reference'] = $colKey . $rowKey; } } return $operand; }"	type_info: spreadsheet:unknown referenceHelper:unknown instance:unknown functionReplaceFromExcel:array functionReplaceToLocale:array functionReplaceFromLocale:array functionReplaceToExcel:array rowKey:unknown operand:unknown rKeys:unknown cKeys:unknown colKey:unknown  global_variable: spreadsheet: unknown referenceHelper: unknown instance: unknown functionReplaceFromExcel: array functionReplaceToLocale: array functionReplaceFromLocale: array functionReplaceToExcel: array function_name: __construct loadLocales getInstance flushInstance getDebugLog __clone getTRUE getFALSE setArrayReturnType getArrayReturnType getCalculationCacheEnabled setCalculationCacheEnabled enableCalculationCache disableCalculationCache clearCalculationCache clearCalculationCacheForWorksheet renameCalculationCacheForWorksheet setBranchPruningEnabled enableBranchPruning disableBranchPruning clearBranchStore getLocale getLocaleFile setLocale translateSeparator translateFormula _translateFormulaToLocale _translateFormulaToEnglish localeFunc wrapResult unwrapResult calculate calculateCellValue parseFormula calculateFormula getValueFromCache saveValueToCache _calculateFormulaValue checkMatrixOperands getMatrixDimensions resizeMatricesShrink resizeMatricesExtend showValue showTypeDetails convertMatrixReferences if internalParseFormula dataTestReference processTokenStack validateBinaryOperand executeArrayComparison executeBinaryComparisonOperation executeNumericBinaryOperation raiseFormulaError extractCellRange extractNamedRange isImplemented getFunctions getImplementedFunctionNames addDefaultArgumentValues getArgumentDefaultValue addCellReference getUnusedBranchStoreKey getTokensAsString evaluateDefinedName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	PHPOffice_PhpSpreadsheet_9f6bbd71b6be9b93c995e2af25310034af2693d5_10_0	buggy: public static function TEXTJOIN($delimiter, $ignoreEmpty, ...$args) context: if (StringHelper::countCharacters($returnValue) > DataType::MAX_STRING_LENGTH) { $returnValue = ExcelError::CALC(); break; } } return $returnValue; } public static function TEXTJOIN($delimiter, $ignoreEmpty, ...$args) public static function TEXTJOIN($delimiter, $ignoreEmpty, ...$args) { if (is_array($delimiter) || is_array($ignoreEmpty)) { return self::evaluateArrayArgumentsSubset( [self::class, __FUNCTION__], 2, $delimiter, $ignoreEmpty, ...$args );	type_info: returnValue:string ignoreEmpty:unknown  global_variable:  function_name: CONCATENATE TEXTJOIN builtinREPT	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	PHPOffice_PhpSpreadsheet_9f6bbd71b6be9b93c995e2af25310034af2693d5_10_0	buggy:  context: if (is_array($delimiter) || is_array($ignoreEmpty)) { return self::evaluateArrayArgumentsSubset( [self::class, __FUNCTION__], 2, $delimiter, $ignoreEmpty, ...$args ); } $aArgs = Functions::flattenArray($args); $returnValue = ''; foreach ($aArgs as $key => &$arg) { $value = Helpers::extractString($arg); if (ErrorValue::isError($value)) { $returnValue = $value; break; } if ($ignoreEmpty === true && is_string($arg) && trim($arg) === '') {	type_info: returnValue:string aArgs:unknown value:unknown key:unknown ignoreEmpty:unknown arg:unknown  global_variable:  function_name: CONCATENATE TEXTJOIN builtinREPT	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	PHPOffice_PhpSpreadsheet_9f6bbd71b6be9b93c995e2af25310034af2693d5_10_0	buggy: $returnValue = ''; context: return self::evaluateArrayArgumentsSubset( [self::class, __FUNCTION__], 2, $delimiter, $ignoreEmpty, ...$args ); } $aArgs = Functions::flattenArray($args); $returnValue = ''; $returnValue = ''; foreach ($aArgs as $key => &$arg) { $value = Helpers::extractString($arg); if (ErrorValue::isError($value)) { $returnValue = $value; break; } if ($ignoreEmpty === true && is_string($arg) && trim($arg) === '') { unset($aArgs[$key]);	type_info: returnValue:string aArgs:unknown value:unknown key:unknown ignoreEmpty:unknown arg:unknown  global_variable:  function_name: CONCATENATE TEXTJOIN builtinREPT	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	PHPOffice_PhpSpreadsheet_9f6bbd71b6be9b93c995e2af25310034af2693d5_10_0	buggy: $returnValue = $value; break; context: $ignoreEmpty, ...$args ); } $aArgs = Functions::flattenArray($args); $returnValue = ''; foreach ($aArgs as $key => &$arg) { $value = Helpers::extractString($arg); if (ErrorValue::isError($value)) { $returnValue = $value; break; $returnValue = $value; break; } if ($ignoreEmpty === true && is_string($arg) && trim($arg) === '') { unset($aArgs[$key]); } elseif (is_bool($arg)) { $arg = Helpers::convertBooleanValue($arg); } }	type_info: returnValue:string aArgs:unknown value:unknown key:unknown ignoreEmpty:unknown arg:unknown  global_variable:  function_name: CONCATENATE TEXTJOIN builtinREPT	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	PHPOffice_PhpSpreadsheet_9f6bbd71b6be9b93c995e2af25310034af2693d5_10_0	buggy: if ($ignoreEmpty === true && is_string($arg) && trim($arg) === '') { context: $aArgs = Functions::flattenArray($args); $returnValue = ''; foreach ($aArgs as $key => &$arg) { $value = Helpers::extractString($arg); if (ErrorValue::isError($value)) { $returnValue = $value; break; } if ($ignoreEmpty === true && is_string($arg) && trim($arg) === '') { if ($ignoreEmpty === true && is_string($arg) && trim($arg) === '') { unset($aArgs[$key]); } elseif (is_bool($arg)) { $arg = Helpers::convertBooleanValue($arg); } } $returnValue = ($returnValue !== '') ? $returnValue : implode($delimiter, $aArgs); if (StringHelper::countCharacters($returnValue) > DataType::MAX_STRING_LENGTH) { $returnValue = ExcelError::CALC();	type_info: returnValue:string aArgs:unknown value:unknown key:unknown ignoreEmpty:unknown arg:unknown  global_variable:  function_name: CONCATENATE TEXTJOIN builtinREPT	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	PHPOffice_PhpSpreadsheet_9f6bbd71b6be9b93c995e2af25310034af2693d5_10_0	buggy: $returnValue = ($returnValue !== '') ? $returnValue : implode($delimiter, $aArgs); if (StringHelper::countCharacters($returnValue) > DataType::MAX_STRING_LENGTH) { $returnValue = ExcelError::CALC(); } return $returnValue; context: break; } if ($ignoreEmpty === true && is_string($arg) && trim($arg) === '') { unset($aArgs[$key]); } elseif (is_bool($arg)) { $arg = Helpers::convertBooleanValue($arg); } } $returnValue = ($returnValue !== '') ? $returnValue : implode($delimiter, $aArgs); if (StringHelper::countCharacters($returnValue) > DataType::MAX_STRING_LENGTH) { $returnValue = ExcelError::CALC(); } return $returnValue; $returnValue = ($returnValue !== '') ? $returnValue : implode($delimiter, $aArgs); if (StringHelper::countCharacters($returnValue) > DataType::MAX_STRING_LENGTH) { $returnValue = ExcelError::CALC(); } return $returnValue; } public static function builtinREPT($stringValue, $repeatCount) {	type_info: returnValue:string aArgs:unknown key:unknown ignoreEmpty:unknown arg:unknown stringValue:unknown  global_variable:  function_name: CONCATENATE TEXTJOIN builtinREPT	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	PHPOffice_PhpSpreadsheet_3c57d9e291f67c0555f936c0f582f48f4b884c2d_11_0	buggy: $regexpMatchString = '/^(' . self::CALCULATION_REGEXP_FUNCTION . context: private function internalParseFormula($formula, ?Cell $cell = null) { if (($formula = $this->convertMatrixReferences(trim($formula))) === false) { return false; } $pCellParent = ($cell !== null) ? $cell->getWorksheet() : null; $regexpMatchString = '/^(' . self::CALCULATION_REGEXP_FUNCTION . $regexpMatchString = '/^(' . self::CALCULATION_REGEXP_FUNCTION . '|' . self::CALCULATION_REGEXP_CELLREF . '|' . self::CALCULATION_REGEXP_COLUMN_RANGE . '|' . self::CALCULATION_REGEXP_ROW_RANGE . '|' . self::CALCULATION_REGEXP_NUMBER . '|' . self::CALCULATION_REGEXP_STRING . '|' . self::CALCULATION_REGEXP_OPENBRACE . '|' . self::CALCULATION_REGEXP_DEFINEDNAME . '|' . self::CALCULATION_REGEXP_ERROR . ')/sui';	type_info: spreadsheet:unknown referenceHelper:unknown instance:unknown functionReplaceFromExcel:array formula:unknown functionReplaceToLocale:array functionReplaceFromLocale:array functionReplaceToExcel:array cell:unknown pCellParent:unknown regexpMatchString:string  global_variable: spreadsheet: unknown referenceHelper: unknown instance: unknown functionReplaceFromExcel: array functionReplaceToLocale: array functionReplaceFromLocale: array functionReplaceToExcel: array function_name: __construct loadLocales getInstance flushInstance getDebugLog __clone getTRUE getFALSE setArrayReturnType getArrayReturnType getCalculationCacheEnabled setCalculationCacheEnabled enableCalculationCache disableCalculationCache clearCalculationCache clearCalculationCacheForWorksheet renameCalculationCacheForWorksheet setBranchPruningEnabled enableBranchPruning disableBranchPruning clearBranchStore getLocale getLocaleFile setLocale translateSeparator translateFormula _translateFormulaToLocale _translateFormulaToEnglish localeFunc wrapResult unwrapResult calculate calculateCellValue parseFormula calculateFormula getValueFromCache saveValueToCache _calculateFormulaValue checkMatrixOperands getMatrixDimensions resizeMatricesShrink resizeMatricesExtend showValue showTypeDetails convertMatrixReferences if internalParseFormula dataTestReference processTokenStack validateBinaryOperand executeArrayComparison executeBinaryComparisonOperation executeNumericBinaryOperation raiseFormulaError extractCellRange extractNamedRange isImplemented getFunctions getImplementedFunctionNames addDefaultArgumentValues getArgumentDefaultValue addCellReference getUnusedBranchStoreKey getTokensAsString evaluateDefinedName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	PHPOffice_PhpSpreadsheet_3c57d9e291f67c0555f936c0f582f48f4b884c2d_11_0	buggy: '|' . self::CALCULATION_REGEXP_STRING . context: return false; } $pCellParent = ($cell !== null) ? $cell->getWorksheet() : null; $regexpMatchString = '/^(' . self::CALCULATION_REGEXP_FUNCTION . '|' . self::CALCULATION_REGEXP_CELLREF . '|' . self::CALCULATION_REGEXP_COLUMN_RANGE . '|' . self::CALCULATION_REGEXP_ROW_RANGE . '|' . self::CALCULATION_REGEXP_NUMBER . '|' . self::CALCULATION_REGEXP_STRING . '|' . self::CALCULATION_REGEXP_STRING . '|' . self::CALCULATION_REGEXP_OPENBRACE . '|' . self::CALCULATION_REGEXP_DEFINEDNAME . '|' . self::CALCULATION_REGEXP_ERROR . ')/sui'; $index = 0; $stack = new Stack(); $output = []; $expectingOperator = false;	type_info: spreadsheet:unknown referenceHelper:unknown instance:unknown functionReplaceFromExcel:array functionReplaceToLocale:array functionReplaceFromLocale:array functionReplaceToExcel:array cell:unknown pCellParent:unknown regexpMatchString:string index:integer stack:unknown output:array expectingOperator:boolean  global_variable: spreadsheet: unknown referenceHelper: unknown instance: unknown functionReplaceFromExcel: array functionReplaceToLocale: array functionReplaceFromLocale: array functionReplaceToExcel: array function_name: __construct loadLocales getInstance flushInstance getDebugLog __clone getTRUE getFALSE setArrayReturnType getArrayReturnType getCalculationCacheEnabled setCalculationCacheEnabled enableCalculationCache disableCalculationCache clearCalculationCache clearCalculationCacheForWorksheet renameCalculationCacheForWorksheet setBranchPruningEnabled enableBranchPruning disableBranchPruning clearBranchStore getLocale getLocaleFile setLocale translateSeparator translateFormula _translateFormulaToLocale _translateFormulaToEnglish localeFunc wrapResult unwrapResult calculate calculateCellValue parseFormula calculateFormula getValueFromCache saveValueToCache _calculateFormulaValue checkMatrixOperands getMatrixDimensions resizeMatricesShrink resizeMatricesExtend showValue showTypeDetails convertMatrixReferences if internalParseFormula dataTestReference processTokenStack validateBinaryOperand executeArrayComparison executeBinaryComparisonOperation executeNumericBinaryOperation raiseFormulaError extractCellRange extractNamedRange isImplemented getFunctions getImplementedFunctionNames addDefaultArgumentValues getArgumentDefaultValue addCellReference getUnusedBranchStoreKey getTokensAsString evaluateDefinedName	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	PHPOffice_PhpSpreadsheet_d5936172872d255a31855473c617f1b581bee07f_12_0	buggy: $fontIndex = $fmtRuns[$i - 1]['fontIndex']; context: } else { $text = StringHelper::substring($this->sst[$index]['value'], $charPos, StringHelper::countCharacters($this->sst[$index]['value'])); } if (StringHelper::countCharacters($text) > 0) { if ($i == 0) { $richText->createText($text); } else { $textRun = $richText->createTextRun($text); if (isset($fmtRuns[$i - 1])) { $fontIndex = $fmtRuns[$i - 1]['fontIndex']; $fontIndex = $fmtRuns[$i - 1]['fontIndex']; if (array_key_exists($fontIndex, $this->objFonts) === false) { $fontIndex = count($this->objFonts) - 1; } $textRun->setFont(clone $this->objFonts[$fontIndex]); } } } }	type_info: data:string i:integer text:unknown version:unknown codepage:unknown fontIndex:unknown xfIndex:unknown pos:integer fmtRuns:array charPos:integer index:unknown textRun:unknown baseCell:integer  global_variable: data: string version: unknown codepage: unknown xfIndex: unknown pos: integer baseCell: integer function_name: __construct canRead setCodepage listWorksheetNames listWorksheetInfo loadSpreadsheetFromFile readRecordData loadOLE readSummaryInformation readDocumentSummaryInformation readDefault readNote readTextObject readBof readFilepass makeKey verifyPassword readCodepage readDateMode readFont readFormat readXf readXfExt readStyle readPalette readSheet readExternalBook readExternName readExternSheet readDefinedName readMsoDrawingGroup readSst readPrintGridlines readDefaultRowHeight readSheetPr readHorizontalPageBreaks readVerticalPageBreaks readHeader readFooter readHcenter readVcenter readLeftMargin readRightMargin readTopMargin readBottomMargin readPageSetup readProtect readScenProtect readObjectProtect readPassword readDefColWidth readColInfo readRow readRk readLabelSst readMulRk readNumber readFormula readSharedFmla readString readBoolErr readMulBlank readLabel readBlank readMsoDrawing readObj readWindow2 readPageLayoutView readScl readPane readSelection includeCellRangeFiltered readMergedCells readHyperLink readDataValidations readDataValidation readSheetLayout readSheetProtection readRangeProtection readContinue getSplicedRecordData getFormulaFromStructure getFormulaFromData createFormulaFromTokens getNextToken switch readBIFF8CellAddress readBIFF8CellAddressB readBIFF5CellRangeAddressFixed readBIFF8CellRangeAddressFixed readBIFF8CellRangeAddress readBIFF8CellRangeAddressB readBIFF8CellRangeAddressList readBIFF5CellRangeAddressList readSheetRangeByRefIndex readBIFF8ConstantArray readBIFF8Constant readRGB readByteStringShort readByteStringLong readUnicodeStringShort readUnicodeStringLong readUnicodeString UTF8toExcelDoubleQuoted extractNumber getIEEE754 encodeUTF16 uncompressByteString decodeCodepage getUInt2d getInt2d getInt4d parseRichText getMapCellStyleXfIndex readCFHeader readCFRule getCFStyleOptions getCFFontStyle getCFAlignmentStyle getCFBorderStyle getCFFillStyle getCFProtectionStyle readCFFormula setCFRules	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	magento_magento2_a9f50039cb2d32b0394f626654d7d7e335fcffa3_1_0	buggy: throw new LocalizedException(new Phrase('Error while checking if topic is synchronous')); context: private function isSynchronousTopic(string $topicName): bool { try { $topic = $this->communicationConfig->getTopic($topicName); return (bool)$topic[CommunicationConfig::TOPIC_IS_SYNCHRONOUS]; } catch (LocalizedException $exception) { throw new LocalizedException(new Phrase('Error while checking if topic is synchronous')); throw new LocalizedException(new Phrase('Error while checking if topic is synchronous')); } } private function matchSynchronousTopics(string $wildcard): array { $topicDefinitions = array_filter( $this->communicationConfig->getTopics(), function ($item) { return (bool)$item[CommunicationConfig::TOPIC_IS_SYNCHRONOUS]; }	type_info: mappedData:array topic:unknown topicDefinitions:unknown  global_variable: mappedData: array function_name: __construct getMappedData createQueueItems isSynchronousTopic matchSynchronousTopics buildWildcardPattern	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy:  context: <?php namespace Magento\Framework\App\Router; use Magento\Framework\App\ActionInterface; use Magento\Framework\App\Filesystem\DirectoryList; use Magento\Framework\App\ObjectManager; use Magento\Framework\App\State; use Magento\Framework\App\Utility\ReflectionClassFactory; use Magento\Framework\Config\CacheInterface; use Magento\Framework\Module\Dir\Reader as ModuleReader; use Magento\Framework\Serialize\Serializer\Serialize; use Magento\Framework\Serialize\SerializerInterface; use ReflectionClass; use ReflectionException; class ActionList { const NOT_ALLOWED_IN_NAMESPACE_PATH = 'adminhtml';	type_info: actionInterface:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy: private $classReflectionFactory; context: 'finally', 'fn', 'for', 'foreach', 'function', 'global', 'goto', 'if', 'implements', 'include', 'instanceof', 'insteadof', 'interface', 'isset', 'list', 'match', 'namespace', 'new', 'or', 'print', 'private', 'protected', 'public', 'require', 'return', 'static', 'switch', 'throw', 'trait', 'try', 'unset', 'use', 'var', 'void', 'while', 'xor', 'yield', ]; private $serializer; private $actionInterface; private $classReflectionFactory; private $classReflectionFactory; public function __construct( CacheInterface $cache, ModuleReader $moduleReader, $actionInterface = ActionInterface::class, $cacheKey = 'app_action_list', $reservedWords = [], SerializerInterface $serializer = null, ReflectionClassFactory $reflectionClassFactory = null	type_info: reservedWords:array actionInterface:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy:  context: 'public', 'require', 'return', 'static', 'switch', 'throw', 'trait', 'try', 'unset', 'use', 'var', 'void', 'while', 'xor', 'yield', ]; private $serializer; private $actionInterface; private $classReflectionFactory; public function __construct( CacheInterface $cache, ModuleReader $moduleReader, $actionInterface = ActionInterface::class, $cacheKey = 'app_action_list', $reservedWords = [], SerializerInterface $serializer = null, ReflectionClassFactory $reflectionClassFactory = null ) { $this->reservedWords = array_merge($reservedWords, $this->reservedWords);	type_info: reservedWords:array actionInterface:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy:  context: public function __construct( CacheInterface $cache, ModuleReader $moduleReader, $actionInterface = ActionInterface::class, $cacheKey = 'app_action_list', $reservedWords = [], SerializerInterface $serializer = null, ReflectionClassFactory $reflectionClassFactory = null	type_info: reservedWords:array actionInterface:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy: $objectManager = ObjectManager::getInstance(); $this->serializer = $serializer ?: $objectManager->get(Serialize::class); $state = $objectManager->get(State::class); context: CacheInterface $cache, ModuleReader $moduleReader, $actionInterface = ActionInterface::class, $cacheKey = 'app_action_list', $reservedWords = [], SerializerInterface $serializer = null, ReflectionClassFactory $reflectionClassFactory = null ) { $this->reservedWords = array_merge($reservedWords, $this->reservedWords); $this->actionInterface = $actionInterface; $objectManager = ObjectManager::getInstance(); $this->serializer = $serializer ?: $objectManager->get(Serialize::class); $state = $objectManager->get(State::class); $objectManager = ObjectManager::getInstance(); $this->serializer = $serializer ?: $objectManager->get(Serialize::class); $state = $objectManager->get(State::class); if ($state->getMode() === State::MODE_PRODUCTION) { $directoryList = $objectManager->get(DirectoryList::class); $file = $directoryList->getPath(DirectoryList::GENERATED_METADATA) . '/' . $cacheKey . '.' . 'php'; if (file_exists($file)) {	type_info: reservedWords:array actionInterface:unknown objectManager:unknown state:unknown directoryList:unknown file:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy: $directoryList = $objectManager->get(DirectoryList::class); context: SerializerInterface $serializer = null, ReflectionClassFactory $reflectionClassFactory = null ) { $this->reservedWords = array_merge($reservedWords, $this->reservedWords); $this->actionInterface = $actionInterface; $objectManager = ObjectManager::getInstance(); $this->serializer = $serializer ?: $objectManager->get(Serialize::class); $state = $objectManager->get(State::class); if ($state->getMode() === State::MODE_PRODUCTION) { $directoryList = $objectManager->get(DirectoryList::class); $directoryList = $objectManager->get(DirectoryList::class); $file = $directoryList->getPath(DirectoryList::GENERATED_METADATA) . '/' . $cacheKey . '.' . 'php'; if (file_exists($file)) { $this->actions = (include $file) ?? $moduleReader->getActionFiles(); } else { $this->actions = $moduleReader->getActionFiles(); } } else {	type_info: reservedWords:array actionInterface:unknown objectManager:unknown state:unknown directoryList:unknown file:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy: $this->classReflectionFactory = $reflectionClassFactory ?: ObjectManager::getInstance()->get(ReflectionClassFactory::class); context: } } else { $data = $cache->load($cacheKey); if (!$data) { $this->actions = $moduleReader->getActionFiles(); $cache->save($this->serializer->serialize($this->actions), $cacheKey); } else { $this->actions = $this->serializer->unserialize($data); } } $this->classReflectionFactory = $reflectionClassFactory ?: ObjectManager::getInstance()->get(ReflectionClassFactory::class); $this->classReflectionFactory = $reflectionClassFactory ?: ObjectManager::getInstance()->get(ReflectionClassFactory::class); } public function get($module, $area, $namespace, $action, $reflectionClass = null) { if ($area) { $area = '\\' . $area; } $namespace = strtolower($namespace);	type_info: actionInterface:unknown data:unknown reflectionClass:unknown namespace:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy: public function get($module, $area, $namespace, $action, $reflectionClass = null) context: $this->actions = $moduleReader->getActionFiles(); $cache->save($this->serializer->serialize($this->actions), $cacheKey); } else { $this->actions = $this->serializer->unserialize($data); } } $this->classReflectionFactory = $reflectionClassFactory ?: ObjectManager::getInstance()->get(ReflectionClassFactory::class); } public function get($module, $area, $namespace, $action, $reflectionClass = null) public function get($module, $area, $namespace, $action, $reflectionClass = null) { if ($area) { $area = '\\' . $area; } $namespace = strtolower($namespace); if (strpos($namespace, self::NOT_ALLOWED_IN_NAMESPACE_PATH) !== false) { return null; } if (in_array(strtolower($action), $this->reservedWords)) {	type_info: actionInterface:unknown data:unknown reflectionClass:unknown namespace:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy: if ($this->validateActionClass($fullPath, $reflectionClass)) { context: $action .= 'action'; } $fullPath = str_replace( '_', '\\', strtolower( $module . '\\controller' . $area . '\\' . $namespace . '\\' . $action ) ); try { if ($this->validateActionClass($fullPath, $reflectionClass)) { if ($this->validateActionClass($fullPath, $reflectionClass)) { return $this->actions[$fullPath]; } } catch (ReflectionException $e) { return null; } return null; }	type_info: actionInterface:unknown reflectionClass:unknown namespace:unknown fullPath:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy: * @param ReflectionClass|null $reflectionClass context: if ($this->validateActionClass($fullPath, $reflectionClass)) { return $this->actions[$fullPath]; } } catch (ReflectionException $e) { return null; } return null; } * @param ReflectionClass|null $reflectionClass private function validateActionClass(string $fullPath, $reflectionClass): bool { if (isset($this->actions[$fullPath])) { if (!is_subclass_of($this->actions[$fullPath], $this->actionInterface)) { return false; } if (!$reflectionClass) { $reflectionClass = $this->classReflectionFactory->create($this->actions[$fullPath]); } if ($reflectionClass->isInstantiable()) {	type_info: actionInterface:unknown reflectionClass:unknown fullPath:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy: private function validateActionClass(string $fullPath, $reflectionClass): bool context: if ($this->validateActionClass($fullPath, $reflectionClass)) { return $this->actions[$fullPath]; } } catch (ReflectionException $e) { return null; } return null; } private function validateActionClass(string $fullPath, $reflectionClass): bool private function validateActionClass(string $fullPath, $reflectionClass): bool { if (isset($this->actions[$fullPath])) { if (!is_subclass_of($this->actions[$fullPath], $this->actionInterface)) { return false; } if (!$reflectionClass) { $reflectionClass = $this->classReflectionFactory->create($this->actions[$fullPath]); } if ($reflectionClass->isInstantiable()) {	type_info: actionInterface:unknown reflectionClass:unknown fullPath:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	magento_magento2_5d765c6d9b5251eb8997d69ddeafbb9ac8dd71ce_2_0	buggy: if (!$reflectionClass) { $reflectionClass = $this->classReflectionFactory->create($this->actions[$fullPath]); } context: private function validateActionClass(string $fullPath, $reflectionClass): bool { if (isset($this->actions[$fullPath])) { if (!is_subclass_of($this->actions[$fullPath], $this->actionInterface)) { return false; } if (!$reflectionClass) { $reflectionClass = $this->classReflectionFactory->create($this->actions[$fullPath]); } if (!$reflectionClass) { $reflectionClass = $this->classReflectionFactory->create($this->actions[$fullPath]); } if ($reflectionClass->isInstantiable()) { return true; } } return false; }	type_info: actionInterface:unknown reflectionClass:unknown fullPath:unknown  global_variable: actionInterface: unknown function_name: __construct get validateActionClass	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	magento_magento2_f3e9ece1a4b77ea841ee661761da7de4bc9b68f8_3_0	"buggy: 'data-partner-attribution-id' => $config->getBuildNotationCode() != '' ? $config->getBuildNotationCode() : '' context: Data::XML_PATH_GUEST_CHECKOUT, ScopeInterface::SCOPE_STORE ); $config = $this->payflowpro->getConfig(); return [ 'styles' => $this->getButtonStyles($page), 'isVisibleOnProductPage' => (bool)$this->config->getValue('visible_on_product'), 'isGuestCheckoutAllowed' => $isGuestCheckoutAllowed, 'sdkUrl' => $this->sdkUrl->getUrl(), 'dataAttributes' => [ 'data-partner-attribution-id' => $config->getBuildNotationCode() != '' ? $config->getBuildNotationCode() : '' 'data-partner-attribution-id' => $config->getBuildNotationCode() != '' ? $config->getBuildNotationCode() : '' ] ]; } private function getButtonStyles(string $page): array { $styles = $this->defaultStyles[$page]; if ((boolean)$this->config->getValue(""{$page}_page_button_customize"")) {"	type_info: defaultStyles:unknown isGuestCheckoutAllowed:unknown config:unknown styles:unknown  global_variable: defaultStyles: unknown config: unknown function_name: __construct getConfig getButtonStyles updateStyles	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	magento_magento2_76e27e24b7638b444a6a9d4c129401ab96a80cd7_4_0	buggy: $this->setCookie($this->getMessages()); context: public function afterRenderResult( ResultInterface $subject, ResultInterface $result ) { if (!($subject instanceof Json)) { $this->setCookie($this->getMessages()); $this->setCookie($this->getMessages()); } return $result; }	type_info:  global_variable:  function_name: __construct afterRenderResult setCookie convertMessageText getMessages getCookiesMessages	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	magento_magento2_76e27e24b7638b444a6a9d4c129401ab96a80cd7_4_0	buggy: protected function getMessages() { $messages = $this->getCookiesMessages(); foreach ($this->messageManager->getMessages(true)->getItems() as $message) { $messages[] = [ 'type' => $message->getType(), 'text' => $this->interpretationStrategy->interpret($message), ]; } return $messages; } context: private function convertMessageText(string $text): string { if (preg_match('#' . ParserInterface::REGEXP_TOKEN . '#', $text, $matches)) { $text = $matches[1]; } return $text; } protected function getMessages() { $messages = $this->getCookiesMessages(); foreach ($this->messageManager->getMessages(true)->getItems() as $message) { $messages[] = [ 'type' => $message->getType(), 'text' => $this->interpretationStrategy->interpret($message), ]; } return $messages; } protected function getMessages()	type_info: text:unknown messages:array  global_variable:  function_name: __construct afterRenderResult setCookie convertMessageText getMessages getCookiesMessages	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	magento_magento2_494822720e73ace8c69af24370759bfa52f4e154_5_0	buggy:  context: public function getRealPathSafety($path) { if (strpos($path, '/.') === false) { return $path; } $isAbsolute = strpos($path, $this->normalizeAbsolutePath('')) === 0; $path = $this->normalizeRelativePath($path); $path = preg_replace( '/\\/\\/+/', '/',	type_info: metadataProvider:unknown path:unknown isAbsolute:unknown  global_variable: metadataProvider: unknown function_name: __construct __destruct test fileGetContents isExists isWritable createDirectory createDirectoryRecursively copy deleteFile deleteDirectory filePutContents readDirectoryRecursively readDirectory getRealPathSafety getAbsolutePath normalizeRelativePath normalizeAbsolutePath getObjectUrl isReadable isTypeFile isFile isDirectory isTypeDirectory directoryExists getRelativePath getParentDirectory getRealPath rename stat getMetadata search glob symlink changePermissions changePermissionsRecursively touch fileReadLine fileRead fileGetCsv fileTell fileSeek endOfFile filePutCsv fileFlush fileLock fileUnlock fileWrite fileClose fileOpen fixPath getWarningMessage readPath getSearchPattern getDirectoryContent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	magento_magento2_494822720e73ace8c69af24370759bfa52f4e154_5_0	buggy: $path = preg_replace( '/\\/\\/+/', '/', $path ); context: public function getRealPathSafety($path) { if (strpos($path, '/.') === false) { return $path; } $isAbsolute = strpos($path, $this->normalizeAbsolutePath('')) === 0; $path = $this->normalizeRelativePath($path); $path = preg_replace( '/\\/\\/+/', '/', $path ); $path = preg_replace( '/\\/\\/+/', '/', $path ); $pathParts = explode('/', $path); if (end($pathParts) === '.') { $pathParts[count($pathParts) - 1] = ''; } $realPath = []; foreach ($pathParts as $pathPart) { if ($pathPart === '.') { continue; } if ($pathPart === '..') { array_pop($realPath);	type_info: metadataProvider:unknown path:unknown isAbsolute:unknown pathParts:unknown realPath:array pathPart:unknown  global_variable: metadataProvider: unknown function_name: __construct __destruct test fileGetContents isExists isWritable createDirectory createDirectoryRecursively copy deleteFile deleteDirectory filePutContents readDirectoryRecursively readDirectory getRealPathSafety getAbsolutePath normalizeRelativePath normalizeAbsolutePath getObjectUrl isReadable isTypeFile isFile isDirectory isTypeDirectory directoryExists getRelativePath getParentDirectory getRealPath rename stat getMetadata search glob symlink changePermissions changePermissionsRecursively touch fileReadLine fileRead fileGetCsv fileTell fileSeek endOfFile filePutCsv fileFlush fileLock fileUnlock fileWrite fileClose fileOpen fixPath getWarningMessage readPath getSearchPattern getDirectoryContent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	magento_magento2_ecb242fede3419d0000420a1e48ad73df088f720_6_0	buggy: $total += ($hasValidChild && $useChildrenTotal) context: foreach ($children as $child) { if (parent::validate($child)) { $hasValidChild = true; if ($useChildrenTotal) { $childrenAttrTotal += $child->getData($attr); } } } } if ($hasValidChild || parent::validate($item)) { $total += ($hasValidChild && $useChildrenTotal) $total += ($hasValidChild && $useChildrenTotal) ? $childrenAttrTotal * $item->getQty() : $item->getData($attr); } } return $this->validateAttribute($total); } }	type_info: attr:unknown total:integer hasValidChild:boolean useChildrenTotal:unknown childrenAttrTotal:integer children:unknown  global_variable:  function_name: __construct loadArray asXml loadAttributeOptions loadValueOptions loadOperatorOptions getValueElementType asHtml validate	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	magento_magento2_07f73e83fa8d90483e3c18f2a22fced8aa45dbe5_7_0	buggy: return empty(array_merge([], ...$this->_messages)); context: public function isValid($entity) { $this->_messages = []; foreach ($this->_rules as $fieldName => $validator) { $value = $fieldName ? $entity->getDataUsingMethod($fieldName) : $entity; if (!$validator->isValid($value)) { $this->_messages[] = array_values($validator->getMessages()); } } return empty(array_merge([], ...$this->_messages)); return empty(array_merge([], ...$this->_messages)); }	type_info: fieldName:unknown  global_variable:  function_name: addRule isValid getMessages	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	magento_magento2_df203c79a8c251d167d54e42502712889e724122_8_0	buggy: use Magento\Framework\App\ObjectManager; context: <?php namespace Magento\Downloadable\Helper; use Magento\Framework\App\ObjectManager; use Magento\Framework\App\ObjectManager; use Magento\Framework\Exception\FileSystemException; use Magento\Framework\Filesystem\DriverInterface;	type_info:  global_variable:  function_name: __construct uploadFromTmp moveFileFromTmp ensureFileInFilesystem _moveFileFromTmp getFilePath getFileFromPathFile getFileSize getFileType _getFileTypeByExt getAllFileTypes getAllMineTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	magento_magento2_df203c79a8c251d167d54e42502712889e724122_8_0	buggy: use Magento\Framework\Filesystem\DriverInterface; context: <?php namespace Magento\Downloadable\Helper; use Magento\Framework\App\ObjectManager; use Magento\Framework\Exception\FileSystemException; use Magento\Framework\Filesystem\DriverInterface; use Magento\Framework\Filesystem\DriverInterface; use Magento\Framework\App\Filesystem\DirectoryList; use Magento\Framework\Exception\LocalizedException; use Magento\MediaStorage\Model\File\Uploader;	type_info:  global_variable:  function_name: __construct uploadFromTmp moveFileFromTmp ensureFileInFilesystem _moveFileFromTmp getFilePath getFileFromPathFile getFileSize getFileType _getFileTypeByExt getAllFileTypes getAllMineTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	magento_magento2_df203c79a8c251d167d54e42502712889e724122_8_0	buggy: private $driver; context: use Magento\Framework\Exception\FileSystemException; use Magento\Framework\Filesystem\DriverInterface; use Magento\Framework\App\Filesystem\DirectoryList; use Magento\Framework\Exception\LocalizedException; use Magento\MediaStorage\Model\File\Uploader; class File extends \Magento\Framework\App\Helper\AbstractHelper { protected $_coreFileStorageDatabase = null; private $driver; private $driver; protected $_filesystem; protected $_mediaDirectory; public function __construct( \Magento\Framework\App\Helper\Context $context, \Magento\MediaStorage\Helper\File\Storage\Database $coreFileStorageDatabase, \Magento\Framework\Filesystem $filesystem,	type_info: _coreFileStorageDatabase:unknown  global_variable:  function_name: __construct uploadFromTmp moveFileFromTmp ensureFileInFilesystem _moveFileFromTmp getFilePath getFileFromPathFile getFileSize getFileType _getFileTypeByExt getAllFileTypes getAllMineTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	magento_magento2_df203c79a8c251d167d54e42502712889e724122_8_0	buggy:  context: public function __construct( \Magento\Framework\App\Helper\Context $context, \Magento\MediaStorage\Helper\File\Storage\Database $coreFileStorageDatabase, \Magento\Framework\Filesystem $filesystem,	type_info:  global_variable:  function_name: __construct uploadFromTmp moveFileFromTmp ensureFileInFilesystem _moveFileFromTmp getFilePath getFileFromPathFile getFileSize getFileType _getFileTypeByExt getAllFileTypes getAllMineTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	magento_magento2_df203c79a8c251d167d54e42502712889e724122_8_0	buggy: * @param DriverInterface|null $driver context: class File extends \Magento\Framework\App\Helper\AbstractHelper { protected $_coreFileStorageDatabase = null; private $driver; protected $_filesystem; protected $_mediaDirectory; * @param DriverInterface|null $driver public function __construct( \Magento\Framework\App\Helper\Context $context, \Magento\MediaStorage\Helper\File\Storage\Database $coreFileStorageDatabase, \Magento\Framework\Filesystem $filesystem, array $mimeTypes = [], DriverInterface $driver = null ) { $this->_coreFileStorageDatabase = $coreFileStorageDatabase; $this->_filesystem = $filesystem; $this->_mediaDirectory = $filesystem->getDirectoryWrite(DirectoryList::MEDIA);	type_info: _coreFileStorageDatabase:unknown mimeTypes:unknown  global_variable:  function_name: __construct uploadFromTmp moveFileFromTmp ensureFileInFilesystem _moveFileFromTmp getFilePath getFileFromPathFile getFileSize getFileType _getFileTypeByExt getAllFileTypes getAllMineTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	magento_magento2_df203c79a8c251d167d54e42502712889e724122_8_0	buggy: array $mimeTypes = [], DriverInterface $driver = null context: public function __construct( \Magento\Framework\App\Helper\Context $context, \Magento\MediaStorage\Helper\File\Storage\Database $coreFileStorageDatabase, \Magento\Framework\Filesystem $filesystem, array $mimeTypes = [], DriverInterface $driver = null array $mimeTypes = [],	type_info: mimeTypes:unknown  global_variable:  function_name: __construct uploadFromTmp moveFileFromTmp ensureFileInFilesystem _moveFileFromTmp getFilePath getFileFromPathFile getFileSize getFileType _getFileTypeByExt getAllFileTypes getAllMineTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	magento_magento2_df203c79a8c251d167d54e42502712889e724122_8_0	buggy: $this->driver = $driver ?: ObjectManager::getInstance() ->create(DriverInterface::class); context: ) { $this->_coreFileStorageDatabase = $coreFileStorageDatabase; $this->_filesystem = $filesystem; $this->_mediaDirectory = $filesystem->getDirectoryWrite(DirectoryList::MEDIA); parent::__construct($context); if (!empty($mimeTypes)) { foreach ($mimeTypes as $key => $value) { self::$_mimeTypes[$key] = $value; } } $this->driver = $driver ?: ObjectManager::getInstance() ->create(DriverInterface::class); $this->driver = $driver ?: ObjectManager::getInstance() ->create(DriverInterface::class); } public function uploadFromTmp($tmpPath, Uploader $uploader) { $uploader->setAllowRenameFiles(true); $uploader->setFilesDispersion(true); $absoluteTmpPath = $this->_mediaDirectory->getAbsolutePath($tmpPath); $result = $uploader->save($absoluteTmpPath);	type_info: mimeTypes:unknown key:unknown absoluteTmpPath:unknown result:boolean _mimeTypes:array  global_variable:  function_name: __construct uploadFromTmp moveFileFromTmp ensureFileInFilesystem _moveFileFromTmp getFilePath getFileFromPathFile getFileSize getFileType _getFileTypeByExt getAllFileTypes getAllMineTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	magento_magento2_df203c79a8c251d167d54e42502712889e724122_8_0	buggy:  context: protected function _moveFileFromTmp($baseTmpPath, $basePath, $file) { if (strrpos($file, '.tmp') == strlen($file) - 4) { $file = substr($file, 0, strlen($file) - 4); } $destFile = $this->driver->getParentDirectory( $file ) . '/' . Uploader::getNewFileName( $this->getFilePath($basePath, $file) ); $this->_coreFileStorageDatabase->copyFile( $this->getFilePath($baseTmpPath, $file), $this->getFilePath($basePath, $destFile)	type_info: file:unknown destFile:unknown  global_variable:  function_name: __construct uploadFromTmp moveFileFromTmp ensureFileInFilesystem _moveFileFromTmp getFilePath getFileFromPathFile getFileSize getFileType _getFileTypeByExt getAllFileTypes getAllMineTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	magento_magento2_df203c79a8c251d167d54e42502712889e724122_8_0	buggy: $destFile = $this->driver->getParentDirectory( $file ) . '/' . Uploader::getNewFileName( $this->getFilePath($basePath, $file) ); context: protected function _moveFileFromTmp($baseTmpPath, $basePath, $file) { if (strrpos($file, '.tmp') == strlen($file) - 4) { $file = substr($file, 0, strlen($file) - 4); } $destFile = $this->driver->getParentDirectory( $file ) . '/' . Uploader::getNewFileName( $this->getFilePath($basePath, $file) ); $destFile = $this->driver->getParentDirectory( $file ) . '/' . Uploader::getNewFileName( $this->getFilePath($basePath, $file) ); $this->_coreFileStorageDatabase->copyFile( $this->getFilePath($baseTmpPath, $file), $this->getFilePath($basePath, $destFile) ); $this->_mediaDirectory->renameFile( $this->getFilePath($baseTmpPath, $file), $this->getFilePath($basePath, $destFile) );	type_info: file:unknown destFile:unknown  global_variable:  function_name: __construct uploadFromTmp moveFileFromTmp ensureFileInFilesystem _moveFileFromTmp getFilePath getFileFromPathFile getFileSize getFileType _getFileTypeByExt getAllFileTypes getAllMineTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	magento_magento2_1ddbded80d3add3fd3558b825db6192e16ce3f3b_9_0	buggy: $this->addTax((double)$dataContainer->getBaseShippingDiscountTaxCompensationAmnt()); context: protected function _applyDiscountTaxCompensationWorkaround( \Magento\Payment\Model\Cart\SalesModel\SalesModelInterface $salesEntity ) { $dataContainer = $salesEntity->getTaxContainer(); $this->addTax((double)$dataContainer->getBaseDiscountTaxCompensationAmount()); $this->addTax((double)$dataContainer->getBaseShippingDiscountTaxCompensationAmnt()); $this->addTax((double)$dataContainer->getBaseShippingDiscountTaxCompensationAmnt()); }	type_info: dataContainer:unknown  global_variable:  function_name: getAmounts _calculateCustomItemsSubtotal _validate _importItemsFromSalesModel _applyDiscountTaxCompensationWorkaround hasNegativeItemAmount	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	magento_magento2_d524c1c95bc128a21ffdfeadb78db2993d39ad74_10_0	buggy:  context: use Magento\Checkout\Model\Cart\RequestQuantityProcessor; use Magento\Checkout\Model\Sidebar; use Magento\Framework\App\Action\Action; use Magento\Framework\App\Action\Context; use Magento\Framework\App\ObjectManager; use Magento\Framework\App\Response\Http; use Magento\Framework\Exception\LocalizedException; use Magento\Framework\Json\Helper\Data; use Psr\Log\LoggerInterface; class UpdateItemQty extends Action { protected $sidebar; protected $logger; protected $jsonHelper; private $quantityProcessor;	type_info: quantityProcessor:unknown  global_variable: quantityProcessor: unknown function_name: __construct execute jsonResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	magento_magento2_d524c1c95bc128a21ffdfeadb78db2993d39ad74_10_0	buggy: class UpdateItemQty extends Action context: use Magento\Checkout\Model\Cart\RequestQuantityProcessor; use Magento\Checkout\Model\Sidebar; use Magento\Framework\App\Action\Action; use Magento\Framework\App\Action\Context; use Magento\Framework\App\ObjectManager; use Magento\Framework\App\Response\Http; use Magento\Framework\Exception\LocalizedException; use Magento\Framework\Json\Helper\Data; use Psr\Log\LoggerInterface; class UpdateItemQty extends Action class UpdateItemQty extends Action { protected $sidebar; protected $logger; protected $jsonHelper; private $quantityProcessor;	type_info: quantityProcessor:unknown  global_variable: quantityProcessor: unknown function_name: __construct execute jsonResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	magento_magento2_d524c1c95bc128a21ffdfeadb78db2993d39ad74_10_0	buggy: * @throws LocalizedException context: ?RequestQuantityProcessor $quantityProcessor = null ) { $this->sidebar = $sidebar; $this->logger = $logger; $this->jsonHelper = $jsonHelper; parent::__construct($context); $this->quantityProcessor = $quantityProcessor ?? ObjectManager::getInstance()->get(RequestQuantityProcessor::class); } * @throws LocalizedException public function execute() { if (!$this->getRequest()->isPost()) { throw new LocalizedException(__('Wrong request.')); } $itemId = (int)$this->getRequest()->getParam('item_id'); $itemQty = (float)$this->getRequest()->getParam('item_qty') * 1; $itemQty = $this->quantityProcessor->prepareQuantity($itemQty);	type_info: quantityProcessor:unknown itemId:unknown itemQty:unknown  global_variable: quantityProcessor: unknown function_name: __construct execute jsonResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	magento_magento2_d524c1c95bc128a21ffdfeadb78db2993d39ad74_10_0	buggy: if (!$this->getRequest()->isPost()) { throw new LocalizedException(__('Wrong request.')); } context: public function execute() { if (!$this->getRequest()->isPost()) { throw new LocalizedException(__('Wrong request.')); } if (!$this->getRequest()->isPost()) { throw new LocalizedException(__('Wrong request.')); } $itemId = (int)$this->getRequest()->getParam('item_id'); $itemQty = (float)$this->getRequest()->getParam('item_qty') * 1; $itemQty = $this->quantityProcessor->prepareQuantity($itemQty); try { $this->sidebar->checkQuoteItem($itemId); $this->sidebar->updateQuoteItem($itemId, $itemQty); return $this->jsonResponse(); } catch (LocalizedException $e) { return $this->jsonResponse($e->getMessage());	type_info: quantityProcessor:unknown itemId:unknown itemQty:unknown  global_variable: quantityProcessor: unknown function_name: __construct execute jsonResponse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	magento_magento2_9e435103edf9af86c330cf942c5f446f24004bc1_11_0	buggy:  context: public function rename($oldPath, $newPath, DriverInterface $targetDriver = null): bool { try { $this->adapter->move( $this->normalizeRelativePath($oldPath, true), $this->normalizeRelativePath($newPath, true), new Config(self::CONFIG) ); } catch (\League\Flysystem\FilesystemException $e) { $this->logger->error($e->getMessage()); return false; }	type_info: metadataProvider:unknown targetDriver:unknown  global_variable: metadataProvider: unknown function_name: __construct __destruct test fileGetContents isExists isWritable createDirectory createDirectoryRecursively copy deleteFile deleteDirectory filePutContents readDirectoryRecursively readDirectory getRealPathSafety getAbsolutePath normalizeRelativePath normalizeAbsolutePath getObjectUrl isReadable isTypeFile isFile isDirectory isTypeDirectory directoryExists getRelativePath getParentDirectory getRealPath rename stat getMetadata search glob symlink changePermissions changePermissionsRecursively touch fileReadLine fileRead fileGetCsv fileTell fileSeek endOfFile filePutCsv fileFlush fileLock fileUnlock fileWrite fileClose fileOpen fixPath getWarningMessage readPath getSearchPattern getDirectoryContent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	magento_magento2_f4066868f3ec96ec320b1cd2ff1694552c45ea84_12_0	buggy: $currencyCode = isset($item['base_currency_code']) ? $item['base_currency_code'] : null; context: public function prepareDataSource(array $dataSource) { if (isset($dataSource['data']['items'])) { foreach ($dataSource['data']['items'] as & $item) { $currencyCode = isset($item['base_currency_code']) ? $item['base_currency_code'] : null; $currencyCode = isset($item['base_currency_code']) ? $item['base_currency_code'] : null; if (!$currencyCode) { $storeId = isset($item['store_id']) && (int)$item['store_id'] !== 0 ? $item['store_id'] : $this->context->getFilterParam('store_id', Store::DEFAULT_STORE_ID); $store = $this->storeManager->getStore( $storeId ); $currencyCode = $store->getBaseCurrency()->getCurrencyCode(); } $basePurchaseCurrency = $this->currency->load($currencyCode); $item[$this->getData('name')] = $basePurchaseCurrency	type_info: currencyCode:unknown storeId:unknown store:unknown basePurchaseCurrency:unknown  global_variable:  function_name: __construct prepareDataSource	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	magento_magento2_f4066868f3ec96ec320b1cd2ff1694552c45ea84_12_0	buggy: $storeId = isset($item['store_id']) && (int)$item['store_id'] !== 0 ? $item['store_id'] : context: public function prepareDataSource(array $dataSource) { if (isset($dataSource['data']['items'])) { foreach ($dataSource['data']['items'] as & $item) { $currencyCode = isset($item['base_currency_code']) ? $item['base_currency_code'] : null; if (!$currencyCode) { $storeId = isset($item['store_id']) && (int)$item['store_id'] !== 0 ? $item['store_id'] : $storeId = isset($item['store_id']) && (int)$item['store_id'] !== 0 ? $item['store_id'] : $this->context->getFilterParam('store_id', Store::DEFAULT_STORE_ID); $store = $this->storeManager->getStore( $storeId ); $currencyCode = $store->getBaseCurrency()->getCurrencyCode(); } $basePurchaseCurrency = $this->currency->load($currencyCode); $item[$this->getData('name')] = $basePurchaseCurrency ->format($item[$this->getData('name')], [], false); }	type_info: currencyCode:unknown storeId:unknown store:unknown basePurchaseCurrency:unknown  global_variable:  function_name: __construct prepareDataSource	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
67	magento_magento2_f4066868f3ec96ec320b1cd2ff1694552c45ea84_12_0	buggy: $store = $this->storeManager->getStore( $storeId ); context: public function prepareDataSource(array $dataSource) { if (isset($dataSource['data']['items'])) { foreach ($dataSource['data']['items'] as & $item) { $currencyCode = isset($item['base_currency_code']) ? $item['base_currency_code'] : null; if (!$currencyCode) { $storeId = isset($item['store_id']) && (int)$item['store_id'] !== 0 ? $item['store_id'] : $this->context->getFilterParam('store_id', Store::DEFAULT_STORE_ID); $store = $this->storeManager->getStore( $storeId ); $store = $this->storeManager->getStore( $storeId ); $currencyCode = $store->getBaseCurrency()->getCurrencyCode(); } $basePurchaseCurrency = $this->currency->load($currencyCode); $item[$this->getData('name')] = $basePurchaseCurrency ->format($item[$this->getData('name')], [], false); } } return $dataSource; }	type_info: currencyCode:unknown storeId:unknown store:unknown basePurchaseCurrency:unknown  global_variable:  function_name: __construct prepareDataSource	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
68	magento_magento2_0a9148c294f80d0b12b6f4b4ebb9542b7fd0da5c_13_0	buggy: if (count($sortOrderArray) > 0) { context: private function addEntityIdSort(SearchCriteriaInterface $searchCriteria): void { $sortOrderArray = $searchCriteria->getSortOrders(); $sortDir = SortOrder::SORT_DESC; if (count($sortOrderArray) > 0) { if (count($sortOrderArray) > 0) { $sortOrder = end($sortOrderArray); $sortDir = $sortOrder->getField() === EavAttributeInterface::POSITION ? SortOrder::SORT_DESC : $sortOrder->getDirection(); } $sortOrderArray[] = $this->sortOrderBuilder ->setField('_id') ->setDirection($sortDir) ->create();	type_info: sortOrderBuilder:unknown searchCriteria:unknown sortOrderArray:unknown sortDir:unknown sortOrder:unknown  global_variable: sortOrderBuilder: unknown function_name: __construct build addVisibilityFilter addEntityIdSort preparePriceAggregation addFilter addDefaultSortOrder updateRangeFilters	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
69	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: * Backend area front name resolver. Reads front name from configuration * context: <?php * Backend area front name resolver. Reads front name from configuration * namespace Magento\Backend\App\Area;	type_info: uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
70	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy:  context: <?php namespace Magento\Backend\App\Area;	type_info: uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
71	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy:  context: <?php namespace Magento\Backend\App\Area; use Magento\Backend\Setup\ConfigOptionsList; use Magento\Framework\App\Config\ScopeConfigInterface; use Magento\Framework\App\DeploymentConfig;	type_info: uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
72	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy:  context: <?php namespace Magento\Backend\App\Area; use Magento\Backend\Setup\ConfigOptionsList; use Magento\Framework\App\Config\ScopeConfigInterface; use Magento\Framework\App\DeploymentConfig; use Magento\Framework\App\ObjectManager; use Magento\Framework\App\RequestInterface;	type_info: uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
73	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: use Laminas\Uri\Uri; context: <?php namespace Magento\Backend\App\Area; use Magento\Backend\Setup\ConfigOptionsList; use Magento\Framework\App\Config\ScopeConfigInterface; use Magento\Framework\App\DeploymentConfig; use Magento\Framework\App\ObjectManager; use Magento\Framework\App\RequestInterface; use Magento\Store\Model\ScopeInterface; use Magento\Store\Model\Store; use Laminas\Uri\Uri; use Laminas\Uri\Uri; class FrontNameResolver implements \Magento\Framework\App\Area\FrontNameResolverInterface { const XML_PATH_USE_CUSTOM_ADMIN_PATH = 'admin/url/use_custom_path'; const XML_PATH_CUSTOM_ADMIN_PATH = 'admin/url/custom_path'; const XML_PATH_USE_CUSTOM_ADMIN_URL = 'admin/url/use_custom';	type_info: uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
74	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: * Class to get area front name. context: use Magento\Backend\Setup\ConfigOptionsList; use Magento\Framework\App\Config\ScopeConfigInterface; use Magento\Framework\App\DeploymentConfig; use Magento\Framework\App\ObjectManager; use Magento\Framework\App\RequestInterface; use Magento\Store\Model\ScopeInterface; use Magento\Store\Model\Store; use Laminas\Uri\Uri; * Class to get area front name. class FrontNameResolver implements \Magento\Framework\App\Area\FrontNameResolverInterface { const XML_PATH_USE_CUSTOM_ADMIN_PATH = 'admin/url/use_custom_path'; const XML_PATH_CUSTOM_ADMIN_PATH = 'admin/url/custom_path'; const XML_PATH_USE_CUSTOM_ADMIN_URL = 'admin/url/use_custom'; const XML_PATH_CUSTOM_ADMIN_URL = 'admin/url/custom';	type_info: uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
75	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: class FrontNameResolver implements \Magento\Framework\App\Area\FrontNameResolverInterface context: use Magento\Backend\Setup\ConfigOptionsList; use Magento\Framework\App\Config\ScopeConfigInterface; use Magento\Framework\App\DeploymentConfig; use Magento\Framework\App\ObjectManager; use Magento\Framework\App\RequestInterface; use Magento\Store\Model\ScopeInterface; use Magento\Store\Model\Store; use Laminas\Uri\Uri; class FrontNameResolver implements \Magento\Framework\App\Area\FrontNameResolverInterface class FrontNameResolver implements \Magento\Framework\App\Area\FrontNameResolverInterface { const XML_PATH_USE_CUSTOM_ADMIN_PATH = 'admin/url/use_custom_path'; const XML_PATH_CUSTOM_ADMIN_PATH = 'admin/url/custom_path'; const XML_PATH_USE_CUSTOM_ADMIN_URL = 'admin/url/use_custom'; const XML_PATH_CUSTOM_ADMIN_URL = 'admin/url/custom';	type_info: uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
76	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: const XML_PATH_USE_CUSTOM_ADMIN_PATH = 'admin/url/use_custom_path'; context: use Magento\Framework\App\Config\ScopeConfigInterface; use Magento\Framework\App\DeploymentConfig; use Magento\Framework\App\ObjectManager; use Magento\Framework\App\RequestInterface; use Magento\Store\Model\ScopeInterface; use Magento\Store\Model\Store; use Laminas\Uri\Uri; class FrontNameResolver implements \Magento\Framework\App\Area\FrontNameResolverInterface { const XML_PATH_USE_CUSTOM_ADMIN_PATH = 'admin/url/use_custom_path'; const XML_PATH_USE_CUSTOM_ADMIN_PATH = 'admin/url/use_custom_path'; const XML_PATH_CUSTOM_ADMIN_PATH = 'admin/url/custom_path'; const XML_PATH_USE_CUSTOM_ADMIN_URL = 'admin/url/use_custom'; const XML_PATH_CUSTOM_ADMIN_URL = 'admin/url/custom'; const AREA_CODE = 'adminhtml';	type_info: uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
77	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: const XML_PATH_CUSTOM_ADMIN_PATH = 'admin/url/custom_path'; context: use Magento\Framework\App\ObjectManager; use Magento\Framework\App\RequestInterface; use Magento\Store\Model\ScopeInterface; use Magento\Store\Model\Store; use Laminas\Uri\Uri; class FrontNameResolver implements \Magento\Framework\App\Area\FrontNameResolverInterface { const XML_PATH_USE_CUSTOM_ADMIN_PATH = 'admin/url/use_custom_path'; const XML_PATH_CUSTOM_ADMIN_PATH = 'admin/url/custom_path'; const XML_PATH_CUSTOM_ADMIN_PATH = 'admin/url/custom_path'; const XML_PATH_USE_CUSTOM_ADMIN_URL = 'admin/url/use_custom'; const XML_PATH_CUSTOM_ADMIN_URL = 'admin/url/custom'; const AREA_CODE = 'adminhtml'; protected $standardPorts = ['http' => '80', 'https' => '443'];	type_info: standardPorts:array uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
78	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: const XML_PATH_USE_CUSTOM_ADMIN_URL = 'admin/url/use_custom'; context: use Magento\Store\Model\ScopeInterface; use Magento\Store\Model\Store; use Laminas\Uri\Uri; class FrontNameResolver implements \Magento\Framework\App\Area\FrontNameResolverInterface { const XML_PATH_USE_CUSTOM_ADMIN_PATH = 'admin/url/use_custom_path'; const XML_PATH_CUSTOM_ADMIN_PATH = 'admin/url/custom_path'; const XML_PATH_USE_CUSTOM_ADMIN_URL = 'admin/url/use_custom'; const XML_PATH_USE_CUSTOM_ADMIN_URL = 'admin/url/use_custom'; const XML_PATH_CUSTOM_ADMIN_URL = 'admin/url/custom'; const AREA_CODE = 'adminhtml'; protected $standardPorts = ['http' => '80', 'https' => '443']; protected $defaultFrontName;	type_info: standardPorts:array uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
79	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: const XML_PATH_CUSTOM_ADMIN_URL = 'admin/url/custom'; context: use Laminas\Uri\Uri; class FrontNameResolver implements \Magento\Framework\App\Area\FrontNameResolverInterface { const XML_PATH_USE_CUSTOM_ADMIN_PATH = 'admin/url/use_custom_path'; const XML_PATH_CUSTOM_ADMIN_PATH = 'admin/url/custom_path'; const XML_PATH_USE_CUSTOM_ADMIN_URL = 'admin/url/use_custom'; const XML_PATH_CUSTOM_ADMIN_URL = 'admin/url/custom'; const XML_PATH_CUSTOM_ADMIN_URL = 'admin/url/custom'; const AREA_CODE = 'adminhtml'; protected $standardPorts = ['http' => '80', 'https' => '443']; protected $defaultFrontName; protected $config;	type_info: standardPorts:array uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
80	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: const AREA_CODE = 'adminhtml'; context: class FrontNameResolver implements \Magento\Framework\App\Area\FrontNameResolverInterface { const XML_PATH_USE_CUSTOM_ADMIN_PATH = 'admin/url/use_custom_path'; const XML_PATH_CUSTOM_ADMIN_PATH = 'admin/url/custom_path'; const XML_PATH_USE_CUSTOM_ADMIN_URL = 'admin/url/use_custom'; const XML_PATH_CUSTOM_ADMIN_URL = 'admin/url/custom'; const AREA_CODE = 'adminhtml'; const AREA_CODE = 'adminhtml'; protected $standardPorts = ['http' => '80', 'https' => '443']; protected $defaultFrontName; protected $config; protected $deploymentConfig;	type_info: standardPorts:array uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
81	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: * @param \Magento\Backend\App\Config $config context: protected $config; protected $deploymentConfig; private $scopeConfig; private $uri; private $request; * @param \Magento\Backend\App\Config $config public function __construct( \Magento\Backend\App\Config $config, DeploymentConfig $deploymentConfig, ScopeConfigInterface $scopeConfig, Uri $uri = null, RequestInterface $request = null ) { $this->config = $config; $this->defaultFrontName = $deploymentConfig->get(ConfigOptionsList::CONFIG_PATH_BACKEND_FRONTNAME); $this->scopeConfig = $scopeConfig;	type_info: uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
82	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: \Magento\Backend\App\Config $config, context: public function __construct( \Magento\Backend\App\Config $config, \Magento\Backend\App\Config $config,	type_info: uri:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
83	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: $host = $this->request->getServer('HTTP_HOST', ''); return stripos($this->getHostWithPort($backendUrl), (string) $host) !== false; context: $backendUrl = $this->scopeConfig->getValue(self::XML_PATH_CUSTOM_ADMIN_URL, ScopeInterface::SCOPE_STORE); } else { $backendUrl = $this->config->getValue(Store::XML_PATH_UNSECURE_BASE_URL); if ($backendUrl === null) { $backendUrl = $this->scopeConfig->getValue( Store::XML_PATH_UNSECURE_BASE_URL, ScopeInterface::SCOPE_STORE ); } } $host = $this->request->getServer('HTTP_HOST', ''); return stripos($this->getHostWithPort($backendUrl), (string) $host) !== false; $host = $this->request->getServer('HTTP_HOST', ''); return stripos($this->getHostWithPort($backendUrl), (string) $host) !== false; } private function getHostWithPort($url) { $this->uri->parse($url); $scheme = $this->uri->getScheme(); $host = $this->uri->getHost(); $port = $this->uri->getPort();	type_info: uri:unknown backendUrl:unknown host:unknown scheme:unknown port:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
84	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: $port = isset($this->standardPorts[$scheme]) ? $this->standardPorts[$scheme] : null; context: private function getHostWithPort($url) { $this->uri->parse($url); $scheme = $this->uri->getScheme(); $host = $this->uri->getHost(); $port = $this->uri->getPort(); if (!$port) { $port = isset($this->standardPorts[$scheme]) ? $this->standardPorts[$scheme] : null; $port = isset($this->standardPorts[$scheme]) ? $this->standardPorts[$scheme] : null; } return isset($port) ? $host . ':' . $port : $host; }	type_info: uri:unknown host:unknown scheme:unknown port:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
85	magento_magento2_688168d4df5b57278a797c8236fbf3d8aa0e0aa2_14_0	buggy: return isset($port) ? $host . ':' . $port : $host; context: private function getHostWithPort($url) { $this->uri->parse($url); $scheme = $this->uri->getScheme(); $host = $this->uri->getHost(); $port = $this->uri->getPort(); if (!$port) { $port = isset($this->standardPorts[$scheme]) ? $this->standardPorts[$scheme] : null; } return isset($port) ? $host . ':' . $port : $host; return isset($port) ? $host . ':' . $port : $host; }	type_info: uri:unknown host:unknown scheme:unknown port:unknown  global_variable: uri: unknown function_name: __construct getFrontName isHostBackend getHostWithPort	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
86	magento_magento2_c26b670214770cb567d7106bea5657c8e4024ccd_15_0	buggy: return $this->userProfileRepository->getByUserId($adminUserId)->getAccessToken(); context: public function execute(int $adminUserId = null): ?string { try { $adminUserId = $adminUserId ?? (int) $this->userContext->getUserId(); return $this->userProfileRepository->getByUserId($adminUserId)->getAccessToken(); return $this->userProfileRepository->getByUserId($adminUserId)->getAccessToken(); } catch (NoSuchEntityException $exception) { return null; } } }	type_info: adminUserId:unknown  global_variable:  function_name: __construct execute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	magento_magento2_034142a9a3d65376c41b7b8a06b672f400c997d3_16_0	buggy: return $this->amountRender->getPriceType() === 'finalPrice' ? 'basePrice' : 'base' . ucfirst($this->amountRender->getPriceType() ?? ''); context: public function getDataPriceType(): string { return $this->amountRender->getPriceType() === 'finalPrice' ? 'basePrice' : 'base' . ucfirst($this->amountRender->getPriceType() ?? ''); return $this->amountRender->getPriceType() === 'finalPrice' ? 'basePrice' : 'base' . ucfirst($this->amountRender->getPriceType() ?? ''); }	type_info:  global_variable:  function_name: __construct apply getAdjustmentCode displayBothPrices getDisplayAmountExclTax getRawAmount getDefaultExclusions getDisplayAmount buildIdWithPrefix displayPriceIncludingTax displayPriceExcludingTax getDataPriceType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	magento_magento2_92b9794b4889a36b2b79ea34cd1656d0584c87b5_17_0	buggy: use Magento\AdobeImsApi\Api\IsTokenValidInterface; context: <?php declare(strict_types=1); namespace Magento\AdminAdobeIms\Model\Authorization; use Magento\AdminAdobeIms\Model\Auth; use Magento\AdobeImsApi\Api\IsTokenValidInterface; use Magento\AdobeImsApi\Api\IsTokenValidInterface; use Magento\AdminAdobeIms\Service\ImsConfig; use Magento\Authorization\Model\UserContextInterface; use Magento\Framework\Exception\AuthenticationException; class AdobeImsAdminTokenUserContext implements UserContextInterface	type_info:  global_variable:  function_name: __construct getUserId getUserType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	magento_magento2_92b9794b4889a36b2b79ea34cd1656d0584c87b5_17_0	buggy:  context: <?php declare(strict_types=1); namespace Magento\AdminAdobeIms\Model\Authorization; use Magento\AdminAdobeIms\Model\Auth; use Magento\AdobeImsApi\Api\IsTokenValidInterface; use Magento\AdminAdobeIms\Service\ImsConfig; use Magento\Authorization\Model\UserContextInterface; use Magento\Framework\Exception\AuthenticationException; class AdobeImsAdminTokenUserContext implements UserContextInterface { private ?int $userId = null; private bool $isRequestProcessed = false;	type_info: userId:unknown isRequestProcessed:boolean  global_variable:  function_name: __construct getUserId getUserType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	magento_magento2_92b9794b4889a36b2b79ea34cd1656d0584c87b5_17_0	buggy: throw new AuthenticationException(__('An authentication error occurred. Verify and try again.')); context: { if (!$this->adminImsConfig->enabled() || $this->isRequestProcessed) { return $this->userId; } $session = $this->auth->getAuthStorage(); if (!empty($session->getAdobeAccessToken())) { $isTokenValid = $this->isTokenValid->validateToken($session->getAdobeAccessToken()); if (!$isTokenValid) { throw new AuthenticationException(__('An authentication error occurred. Verify and try again.')); throw new AuthenticationException(__('An authentication error occurred. Verify and try again.')); } } else { try { $this->adminTokenUserService->processLoginRequest(); } catch (\Exception $e) { throw new AuthenticationException(__('An authentication error occurred. Verify and try again.')); } }	type_info: session:unknown isTokenValid:unknown  global_variable:  function_name: __construct getUserId getUserType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	magento_magento2_92b9794b4889a36b2b79ea34cd1656d0584c87b5_17_0	buggy: throw new AuthenticationException(__('An authentication error occurred. Verify and try again.')); context: if (!empty($session->getAdobeAccessToken())) { $isTokenValid = $this->isTokenValid->validateToken($session->getAdobeAccessToken()); if (!$isTokenValid) { throw new AuthenticationException(__('An authentication error occurred. Verify and try again.')); } } else { try { $this->adminTokenUserService->processLoginRequest(); } catch (\Exception $e) { throw new AuthenticationException(__('An authentication error occurred. Verify and try again.')); throw new AuthenticationException(__('An authentication error occurred. Verify and try again.')); } } $this->userId = (int) $session->getUser()->getUserId(); $this->isRequestProcessed = true; return $this->userId; }	type_info: session:unknown isTokenValid:unknown  global_variable:  function_name: __construct getUserId getUserType	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	magento_magento2_2fdfdc9aafeda21dbf60568e3f3a2dcba0ea6576_18_0	buggy: $result = $this->resultFactory->create(ResultFactory::TYPE_JSON); context: public function execute() { $bulkUuids = []; foreach ((array)$this->getRequest()->getParam('uuid', []) as $bulkUuid) { $bulkUuids[] = (string)$bulkUuid; } $isAcknowledged = $this->notificationManagement->acknowledgeBulks($bulkUuids); $result = $this->resultFactory->create(ResultFactory::TYPE_JSON); $result = $this->resultFactory->create(ResultFactory::TYPE_JSON); if (!$isAcknowledged) { $result->setHttpResponseCode(400); } return $result; }	type_info: bulkUuids:array isAcknowledged:unknown result:unknown  global_variable:  function_name: __construct _isAllowed execute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	magento_magento2_3c5adaa7331b2aac8bb1f8f3ef7558c1b75f16fe_19_0	buggy: use Magento\Framework\Webapi\Rest\Request as RestRequest; context: <?php declare(strict_types=1); namespace Magento\Quote\Plugin; use Magento\Framework\Event\Observer; use Magento\Framework\Webapi\Rest\Request as RestRequest; use Magento\Framework\Webapi\Rest\Request as RestRequest; use Magento\Quote\Observer\SubmitObserver; use Magento\Sales\Model\Order; class SendOrderNotification { private RestRequest $request;	type_info:  global_variable:  function_name: __construct beforeExecute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	magento_magento2_3c5adaa7331b2aac8bb1f8f3ef7558c1b75f16fe_19_0	buggy: * @var RestRequest $request context: namespace Magento\Quote\Plugin; use Magento\Framework\Event\Observer; use Magento\Framework\Webapi\Rest\Request as RestRequest; use Magento\Quote\Observer\SubmitObserver; use Magento\Sales\Model\Order; class SendOrderNotification { * @var RestRequest $request private RestRequest $request; public function __construct(RestRequest $request) { $this->request = $request; } public function beforeExecute(SubmitObserver $subject, Observer $observer): array { $order = $observer->getEvent()->getOrder();	type_info: order:unknown  global_variable:  function_name: __construct beforeExecute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	magento_magento2_3c5adaa7331b2aac8bb1f8f3ef7558c1b75f16fe_19_0	buggy: private RestRequest $request; context: namespace Magento\Quote\Plugin; use Magento\Framework\Event\Observer; use Magento\Framework\Webapi\Rest\Request as RestRequest; use Magento\Quote\Observer\SubmitObserver; use Magento\Sales\Model\Order; class SendOrderNotification { private RestRequest $request; private RestRequest $request; public function __construct(RestRequest $request) { $this->request = $request; } public function beforeExecute(SubmitObserver $subject, Observer $observer): array { $order = $observer->getEvent()->getOrder();	type_info: order:unknown  global_variable:  function_name: __construct beforeExecute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	magento_magento2_3c5adaa7331b2aac8bb1f8f3ef7558c1b75f16fe_19_0	buggy: * @param RestRequest $request context: use Magento\Framework\Event\Observer; use Magento\Framework\Webapi\Rest\Request as RestRequest; use Magento\Quote\Observer\SubmitObserver; use Magento\Sales\Model\Order; class SendOrderNotification { private RestRequest $request; * @param RestRequest $request public function __construct(RestRequest $request) { $this->request = $request; } public function beforeExecute(SubmitObserver $subject, Observer $observer): array { $order = $observer->getEvent()->getOrder(); $requestInfo = $this->request->getPostValue('order'); $order->setCanSendNewEmailFlag((bool)($requestInfo['send_confirmation'] ?? 0));	type_info: order:unknown requestInfo:unknown  global_variable:  function_name: __construct beforeExecute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	magento_magento2_3c5adaa7331b2aac8bb1f8f3ef7558c1b75f16fe_19_0	buggy: public function __construct(RestRequest $request) context: use Magento\Framework\Event\Observer; use Magento\Framework\Webapi\Rest\Request as RestRequest; use Magento\Quote\Observer\SubmitObserver; use Magento\Sales\Model\Order; class SendOrderNotification { private RestRequest $request; public function __construct(RestRequest $request) public function __construct(RestRequest $request) { $this->request = $request; } public function beforeExecute(SubmitObserver $subject, Observer $observer): array { $order = $observer->getEvent()->getOrder(); $requestInfo = $this->request->getPostValue('order'); $order->setCanSendNewEmailFlag((bool)($requestInfo['send_confirmation'] ?? 0));	type_info: order:unknown requestInfo:unknown  global_variable:  function_name: __construct beforeExecute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	magento_magento2_3c5adaa7331b2aac8bb1f8f3ef7558c1b75f16fe_19_0	buggy: $requestInfo = $this->request->getPostValue('order'); context: public function beforeExecute(SubmitObserver $subject, Observer $observer): array { $order = $observer->getEvent()->getOrder(); $requestInfo = $this->request->getPostValue('order'); $requestInfo = $this->request->getPostValue('order'); $order->setCanSendNewEmailFlag((bool)($requestInfo['send_confirmation'] ?? 0)); return [$observer]; }	type_info: order:unknown requestInfo:unknown  global_variable:  function_name: __construct beforeExecute	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	magento_magento2_dfcf6949858f2b14ecdd361209b893ee36d10f08_20_0	buggy: $isNamedArgument = false; context: if (!preg_match($pattern, $content, $matches)) { return null; } $arguments = $matches[0]; if (!trim($arguments)) { return null; } $isNamedArgument = false; $isNamedArgument = false; $arguments = substr(trim($arguments), 20, -2); $arguments = explode(',', $arguments); $position = strpos(current($arguments), ':'); if ($position !== false) { $isNamedArgument = true; } array_walk($arguments, $trimFunction); $output = [];	type_info: namespaceResolver:unknown position:unknown trimFunction:unknown content:unknown pattern:unknown arguments:unknown isNamedArgument:boolean output:array  global_variable: namespaceResolver: unknown function_name: __construct getConstructorArguments processType getParentCall isCompatibleType _varExportMin getAnnotations	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	magento_magento2_dfcf6949858f2b14ecdd361209b893ee36d10f08_20_0	buggy: $position = strpos(current($arguments), ':'); if ($position !== false) { $isNamedArgument = true; context: } $arguments = $matches[0]; if (!trim($arguments)) { return null; } $isNamedArgument = false; $arguments = substr(trim($arguments), 20, -2); $arguments = explode(',', $arguments); $position = strpos(current($arguments), ':'); if ($position !== false) { $isNamedArgument = true; $position = strpos(current($arguments), ':'); if ($position !== false) { $isNamedArgument = true; } array_walk($arguments, $trimFunction); $output = []; foreach ($arguments as $argumentPosition => $argumentName) { $type = isset($classArguments[$argumentName]) ? $classArguments[$argumentName]['type'] : null; $output[$argumentPosition] = [	type_info: namespaceResolver:unknown position:unknown type:unknown trimFunction:unknown arguments:unknown isNamedArgument:boolean output:array argumentPosition:unknown  global_variable: namespaceResolver: unknown function_name: __construct getConstructorArguments processType getParentCall isCompatibleType _varExportMin getAnnotations	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	magento_magento2_dfcf6949858f2b14ecdd361209b893ee36d10f08_20_0	buggy:  context: } array_walk($arguments, $trimFunction); $output = []; foreach ($arguments as $argumentPosition => $argumentName) { $type = isset($classArguments[$argumentName]) ? $classArguments[$argumentName]['type'] : null; $output[$argumentPosition] = [ 'name' => $argumentName, 'position' => $argumentPosition, 'type' => $type, ]; if ($isNamedArgument) { $output[$argumentPosition]['isNamedArgument'] = true; } } return $output; }	type_info: namespaceResolver:unknown type:unknown trimFunction:unknown arguments:unknown isNamedArgument:boolean output:array argumentPosition:unknown  global_variable: namespaceResolver: unknown function_name: __construct getConstructorArguments processType getParentCall isCompatibleType _varExportMin getAnnotations	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	magento_magento2_dfcf6949858f2b14ecdd361209b893ee36d10f08_20_0	buggy: if ($isNamedArgument) { $output[$argumentPosition]['isNamedArgument'] = true; } context: array_walk($arguments, $trimFunction); $output = []; foreach ($arguments as $argumentPosition => $argumentName) { $type = isset($classArguments[$argumentName]) ? $classArguments[$argumentName]['type'] : null; $output[$argumentPosition] = [ 'name' => $argumentName, 'position' => $argumentPosition, 'type' => $type, ]; if ($isNamedArgument) { $output[$argumentPosition]['isNamedArgument'] = true; } if ($isNamedArgument) { $output[$argumentPosition]['isNamedArgument'] = true; } } return $output; } public function isCompatibleType($requiredType, $actualType)	type_info: namespaceResolver:unknown type:unknown trimFunction:unknown arguments:unknown isNamedArgument:boolean output:array argumentPosition:unknown requiredType:unknown  global_variable: namespaceResolver: unknown function_name: __construct getConstructorArguments processType getParentCall isCompatibleType _varExportMin getAnnotations	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	magento_magento2_dfcf6949858f2b14ecdd361209b893ee36d10f08_20_1	buggy: if (isset(current($callArguments)['isNamedArgument'])) { $callArguments = array_column($callArguments, null, 'name'); foreach ($parentArguments as $requiredArgument) { if (isset($callArguments[$requiredArgument['name']])) { $actualArgument = $callArguments[$requiredArgument['name']]; context: $callArguments = $this->_argumentsReader->getParentCall($class, $classArguments); if (null === $callArguments) { return true; } $parentArguments = $this->_argumentsReader->getConstructorArguments($parent, true, true); if (isset(current($callArguments)['isNamedArgument'])) { $callArguments = array_column($callArguments, null, 'name'); foreach ($parentArguments as $requiredArgument) { if (isset($callArguments[$requiredArgument['name']])) { $actualArgument = $callArguments[$requiredArgument['name']]; if (isset(current($callArguments)['isNamedArgument'])) { $callArguments = array_column($callArguments, null, 'name'); foreach ($parentArguments as $requiredArgument) { if (isset($callArguments[$requiredArgument['name']])) { $actualArgument = $callArguments[$requiredArgument['name']]; $this->checkCompatibleTypes($requiredArgument['type'], $actualArgument['type'], $class);	type_info: class:unknown parent:unknown parentArguments:unknown classArguments:unknown callArguments:unknown actualArgument:unknown  global_variable:  function_name: __construct validate checkCompatibleTypes checkIfRequiredArgumentIsOptional	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	magento_magento2_dfcf6949858f2b14ecdd361209b893ee36d10f08_20_1	buggy: } else { $this->checkIfRequiredArgumentIsOptional($requiredArgument, $class); context: $parentArguments = $this->_argumentsReader->getConstructorArguments($parent, true, true); if (isset(current($callArguments)['isNamedArgument'])) { $callArguments = array_column($callArguments, null, 'name'); foreach ($parentArguments as $requiredArgument) { if (isset($callArguments[$requiredArgument['name']])) { $actualArgument = $callArguments[$requiredArgument['name']]; $this->checkCompatibleTypes($requiredArgument['type'], $actualArgument['type'], $class); } else { $this->checkIfRequiredArgumentIsOptional($requiredArgument, $class); } else { $this->checkIfRequiredArgumentIsOptional($requiredArgument, $class); } } } else { foreach ($parentArguments as $index => $requiredArgument) { if (isset($callArguments[$index])) { $actualArgument = $callArguments[$index]; $this->checkCompatibleTypes($requiredArgument['type'], $actualArgument['type'], $class); } else {	type_info: class:unknown parent:unknown parentArguments:unknown callArguments:unknown actualArgument:unknown index:unknown  global_variable:  function_name: __construct validate checkCompatibleTypes checkIfRequiredArgumentIsOptional	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	magento_magento2_dfcf6949858f2b14ecdd361209b893ee36d10f08_20_1	buggy: } else { foreach ($parentArguments as $index => $requiredArgument) { if (isset($callArguments[$index])) { $actualArgument = $callArguments[$index]; $this->checkCompatibleTypes($requiredArgument['type'], $actualArgument['type'], $class); } else { $this->checkIfRequiredArgumentIsOptional($requiredArgument, $class); } context: if (isset($callArguments[$requiredArgument['name']])) { $actualArgument = $callArguments[$requiredArgument['name']]; $this->checkCompatibleTypes($requiredArgument['type'], $actualArgument['type'], $class); } else { $this->checkIfRequiredArgumentIsOptional($requiredArgument, $class); } } } else { foreach ($parentArguments as $index => $requiredArgument) { if (isset($callArguments[$index])) { $actualArgument = $callArguments[$index]; $this->checkCompatibleTypes($requiredArgument['type'], $actualArgument['type'], $class); } else { $this->checkIfRequiredArgumentIsOptional($requiredArgument, $class); } } else { foreach ($parentArguments as $index => $requiredArgument) { if (isset($callArguments[$index])) { $actualArgument = $callArguments[$index]; $this->checkCompatibleTypes($requiredArgument['type'], $actualArgument['type'], $class); } else { $this->checkIfRequiredArgumentIsOptional($requiredArgument, $class);	type_info: class:unknown parentArguments:unknown callArguments:unknown actualArgument:unknown index:unknown  global_variable:  function_name: __construct validate checkCompatibleTypes checkIfRequiredArgumentIsOptional	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	magento_magento2_9fcc6acced0abdd5c3fb0f24c52af0a17726a5a3_21_0	buggy:  context: <?php declare(strict_types=1); namespace Magento\ConfigurableProduct\Model\Plugin; use Magento\ConfigurableProduct\Model\Product\Type\Configurable as ConfigurableType; use Magento\Catalog\Api\ProductRepositoryInterface; use Magento\Catalog\Model\Product; class ProductIdentitiesExtender	type_info:  global_variable:  function_name: __construct afterGetIdentities getParentIdsByChild	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	magento_magento2_9fcc6acced0abdd5c3fb0f24c52af0a17726a5a3_21_0	buggy: if ($subject->getTypeId() !== ConfigurableType::TYPE_CODE) { context: public function afterGetIdentities(Product $subject, array $identities): array { if ($subject->getTypeId() !== ConfigurableType::TYPE_CODE) { if ($subject->getTypeId() !== ConfigurableType::TYPE_CODE) { return $identities; } $parentProductsIdentities = []; foreach ($this->getParentIdsByChild($subject->getId()) as $parentId) { $parentProduct = $this->productRepository->getById($parentId); $parentProductsIdentities[] = $parentProduct->getIdentities(); } $identities = array_merge($identities, ...$parentProductsIdentities); return array_unique($identities);	type_info: parentProductsIdentities:array parentProduct:unknown identities:unknown  global_variable:  function_name: __construct afterGetIdentities getParentIdsByChild	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	magento_magento2_9fcc6acced0abdd5c3fb0f24c52af0a17726a5a3_21_0	buggy:  context: public function afterGetIdentities(Product $subject, array $identities): array { if ($subject->getTypeId() !== ConfigurableType::TYPE_CODE) { return $identities; } $parentProductsIdentities = []; foreach ($this->getParentIdsByChild($subject->getId()) as $parentId) { $parentProduct = $this->productRepository->getById($parentId); $parentProductsIdentities[] = $parentProduct->getIdentities(); } $identities = array_merge($identities, ...$parentProductsIdentities); return array_unique($identities);	type_info: parentProductsIdentities:array parentProduct:unknown identities:unknown  global_variable:  function_name: __construct afterGetIdentities getParentIdsByChild	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	magento_magento2_510bdd5ddda2bf9cc58f27df6a5c740d98d240dd_22_0	buggy: . ' ' . ($displayCartPricesBoth ? __('Excl. tax:') . ' ' context: $selectionFinalPriceExclTax = $this->taxHelper ->getTaxPrice($product, $selectionPrice, false); } $option['value'][] = $qty . ' x ' . $this->escaper->escapeHtml($bundleSelection->getName()) . ' ' . $this->pricingHelper->currency( $selectionFinalPrice ) . ' ' . ($displayCartPricesBoth ? __('Excl. tax:') . ' ' . ' ' . ($displayCartPricesBoth ? __('Excl. tax:') . ' ' . $this->pricingHelper->currency( $selectionFinalPriceExclTax ) : ''); $option['has_html'] = true; } return $option; }	type_info: serializer:unknown product:unknown option:array qty:unknown selectionPrice:unknown selectionFinalPrice:unknown displayCartPricesBoth:unknown selectionFinalPriceExclTax:unknown  global_variable: serializer: unknown function_name: __construct getSelectionQty getSelectionFinalPrice getBundleOptions getOptionPriceHtml getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	magento_magento2_e99a69b95b22a1e5a86411a0b8738efd412d90bb_23_0	buggy: $selectionFinalPrice = $this->taxHelper->getTaxPrice($item->getProduct(), $selectionPrice); context: private function getOptionPriceHtml(ItemInterface $item, ProductInterface $bundleSelection, array $option): array { $product = $item->getProduct(); $qty = $this->getSelectionQty($item->getProduct(), $bundleSelection->getSelectionId()) * 1; if ($qty) { $selectionPrice = $this->getSelectionFinalPrice($item, $bundleSelection); $selectionFinalPrice = $this->taxHelper->getTaxPrice($item->getProduct(), $selectionPrice); $selectionFinalPrice = $this->taxHelper->getTaxPrice($item->getProduct(), $selectionPrice); $displayCartPricesBoth = $this->taxHelper->displayCartPricesBoth(); if ($displayCartPricesBoth) { $selectionFinalPrice = $this->taxHelper ->getTaxPrice($product, $selectionPrice, true); $selectionFinalPriceExclTax = $this->taxHelper ->getTaxPrice($product, $selectionPrice, false); }	type_info: serializer:unknown product:unknown option:array qty:unknown selectionPrice:unknown selectionFinalPrice:unknown displayCartPricesBoth:unknown selectionFinalPriceExclTax:unknown  global_variable: serializer: unknown function_name: __construct getSelectionQty getSelectionFinalPrice getBundleOptions getOptionPriceHtml getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	magento_magento2_e99a69b95b22a1e5a86411a0b8738efd412d90bb_23_0	buggy:  context: $selectionFinalPrice = $this->taxHelper->getTaxPrice($item->getProduct(), $selectionPrice); $displayCartPricesBoth = $this->taxHelper->displayCartPricesBoth(); if ($displayCartPricesBoth) { $selectionFinalPrice = $this->taxHelper ->getTaxPrice($product, $selectionPrice, true); $selectionFinalPriceExclTax = $this->taxHelper ->getTaxPrice($product, $selectionPrice, false); } $option['value'][] = $qty . ' x ' . $this->escaper->escapeHtml($bundleSelection->getName()) . ' ' . $this->pricingHelper->currency( $selectionFinalPrice ) . ($displayCartPricesBoth ? ' ' . __('Excl. tax:') . ' ' . $this->pricingHelper->currency( $selectionFinalPriceExclTax	type_info: serializer:unknown product:unknown option:array qty:unknown selectionPrice:unknown selectionFinalPrice:unknown displayCartPricesBoth:unknown selectionFinalPriceExclTax:unknown  global_variable: serializer: unknown function_name: __construct getSelectionQty getSelectionFinalPrice getBundleOptions getOptionPriceHtml getOptions	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	magento_magento2_e99a69b95b22a1e5a86411a0b8738efd412d90bb_23_1	buggy:  context: <?php declare(strict_types=1); namespace Magento\Bundle\Pricing\Price; use Magento\Catalog\Model\Product; use Magento\Customer\Api\GroupRepositoryInterface; use Magento\Customer\Model\Session as CustomerSession; use Magento\Framework\Exception\LocalizedException; use Magento\Framework\Exception\NoSuchEntityException; use Magento\Store\Api\Data\StoreInterface; use Magento\Store\Model\Store;	type_info:  global_variable:  function_name: __construct getTaxPrice displayCartPricesBoth	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	magento_magento2_e99a69b95b22a1e5a86411a0b8738efd412d90bb_23_1	buggy:  context: private $quoteDetailsFactory; private $quoteDetailsItemFactory; private $customerSession; private $taxCalculationService; private $customerGroupRepository; public function __construct( StoreManagerInterface $storeManager, TaxClassKeyInterfaceFactory $taxClassKeyFactory, Config $taxConfig, QuoteDetailsInterfaceFactory $quoteDetailsFactory, QuoteDetailsItemInterfaceFactory $quoteDetailsItemFactory, TaxCalculationInterface $taxCalculationService, CustomerSession $customerSession, GroupRepositoryInterface $customerGroupRepository ) {	type_info:  global_variable:  function_name: __construct getTaxPrice displayCartPricesBoth	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	magento_magento2_e99a69b95b22a1e5a86411a0b8738efd412d90bb_23_1	buggy:  context: private $quoteDetailsFactory; private $quoteDetailsItemFactory; private $customerSession; private $taxCalculationService; private $customerGroupRepository; public function __construct( StoreManagerInterface $storeManager, TaxClassKeyInterfaceFactory $taxClassKeyFactory, Config $taxConfig, QuoteDetailsInterfaceFactory $quoteDetailsFactory, QuoteDetailsItemInterfaceFactory $quoteDetailsItemFactory, TaxCalculationInterface $taxCalculationService, CustomerSession $customerSession, GroupRepositoryInterface $customerGroupRepository ) {	type_info:  global_variable:  function_name: __construct getTaxPrice displayCartPricesBoth	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	magento_magento2_e99a69b95b22a1e5a86411a0b8738efd412d90bb_23_1	buggy: GroupRepositoryInterface $customerGroupRepository context: public function __construct( StoreManagerInterface $storeManager, TaxClassKeyInterfaceFactory $taxClassKeyFactory, Config $taxConfig, QuoteDetailsInterfaceFactory $quoteDetailsFactory, QuoteDetailsItemInterfaceFactory $quoteDetailsItemFactory, TaxCalculationInterface $taxCalculationService, CustomerSession $customerSession, GroupRepositoryInterface $customerGroupRepository GroupRepositoryInterface $customerGroupRepository	type_info:  global_variable:  function_name: __construct getTaxPrice displayCartPricesBoth	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	magento_magento2_e99a69b95b22a1e5a86411a0b8738efd412d90bb_23_1	buggy:  context: public function __construct( StoreManagerInterface $storeManager, TaxClassKeyInterfaceFactory $taxClassKeyFactory, Config $taxConfig, QuoteDetailsInterfaceFactory $quoteDetailsFactory, QuoteDetailsItemInterfaceFactory $quoteDetailsItemFactory, TaxCalculationInterface $taxCalculationService, CustomerSession $customerSession, GroupRepositoryInterface $customerGroupRepository ) { $this->storeManager = $storeManager; $this->taxClassKeyFactory = $taxClassKeyFactory; $this->taxConfig = $taxConfig; $this->quoteDetailsFactory = $quoteDetailsFactory; $this->quoteDetailsItemFactory = $quoteDetailsItemFactory; $this->taxCalculationService = $taxCalculationService; $this->customerSession = $customerSession; $this->customerGroupRepository = $customerGroupRepository; }	type_info:  global_variable:  function_name: __construct getTaxPrice displayCartPricesBoth	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	magento_magento2_e99a69b95b22a1e5a86411a0b8738efd412d90bb_23_1	buggy:  context: GroupRepositoryInterface $customerGroupRepository ) { $this->storeManager = $storeManager; $this->taxClassKeyFactory = $taxClassKeyFactory; $this->taxConfig = $taxConfig; $this->quoteDetailsFactory = $quoteDetailsFactory; $this->quoteDetailsItemFactory = $quoteDetailsItemFactory; $this->taxCalculationService = $taxCalculationService; $this->customerSession = $customerSession; $this->customerGroupRepository = $customerGroupRepository; } public function getTaxPrice( Product $product, float $price, bool $includingTax = null, int $ctc = null, Store|bool|int|string $store = null, bool $priceIncludesTax = null ): float {	type_info: includingTax:unknown store:unknown priceIncludesTax:unknown ctc:unknown price:unknown  global_variable:  function_name: __construct getTaxPrice displayCartPricesBoth	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	magento_magento2_e99a69b95b22a1e5a86411a0b8738efd412d90bb_23_1	buggy:  context: if (!$price) { return $price; } $store = $this->storeManager->getStore($store); $storeId = $store?->getId(); $taxClassKey = $this->taxClassKeyFactory->create(); $customerTaxClassKey = $this->taxClassKeyFactory->create(); $item = $this->quoteDetailsItemFactory->create(); $quoteDetails = $this->quoteDetailsFactory->create(); if ($priceIncludesTax === null) { $priceIncludesTax = $this->taxConfig->priceIncludesTax($store); } $taxClassKey->setType(TaxClassKeyInterface::TYPE_ID) ->setValue($product->getTaxClassId()); if ($ctc === null && $this->customerSession->getCustomerGroupId() != null) { $ctc = $this->customerGroupRepository->getById($this->customerSession->getCustomerGroupId())	type_info: store:unknown storeId:unknown taxClassKey:unknown customerTaxClassKey:unknown item:unknown quoteDetails:unknown priceIncludesTax:unknown ctc:unknown price:unknown  global_variable:  function_name: __construct getTaxPrice displayCartPricesBoth	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	magento_magento2_e99a69b95b22a1e5a86411a0b8738efd412d90bb_23_1	buggy:  context: $item->setQuantity(1) ->setCode($product->getSku()) ->setShortDescription($product->getShortDescription()) ->setTaxClassKey($taxClassKey) ->setIsTaxIncluded($priceIncludesTax) ->setType('product') ->setUnitPrice($price); $quoteDetails ->setCustomerTaxClassKey($customerTaxClassKey) ->setItems([$item]) ->setCustomerId($this->customerSession->getCustomerId()); $taxDetails = $this->taxCalculationService->calculateTax($quoteDetails, $storeId); $items = $taxDetails->getItems(); $taxDetailsItem = array_shift($items); if ($includingTax !== null) { if ($includingTax) {	type_info: includingTax:unknown storeId:unknown taxClassKey:unknown customerTaxClassKey:unknown item:unknown quoteDetails:unknown priceIncludesTax:unknown taxDetails:unknown items:unknown taxDetailsItem:unknown price:unknown  global_variable:  function_name: __construct getTaxPrice displayCartPricesBoth	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	PHP-CS-Fixer_PHP-CS-Fixer_26657cb86de19efbec2396228d1cc149decc9dd1_1_0	buggy: $index = $tokens->getNextTokenOfKind($index, ['{']); context: private function findEndOfNextBlock(Tokens $tokens, $index) { $index = $tokens->getNextTokenOfKind($index, ['{']); $index = $tokens->getNextTokenOfKind($index, ['{']); return $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $index); }	type_info: index:unknown  global_variable:  function_name: getDefinition testMe getPriority isRisky createConfigurationDefinition applyPhpUnitClassFix needsConversion findEndOfNextBlock	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	PHP-CS-Fixer_PHP-CS-Fixer_26657cb86de19efbec2396228d1cc149decc9dd1_1_0	buggy: return $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $index); context: private function findEndOfNextBlock(Tokens $tokens, $index) { $index = $tokens->getNextTokenOfKind($index, ['{']); return $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $index); return $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $index); }	type_info: index:unknown  global_variable:  function_name: getDefinition testMe getPriority isRisky createConfigurationDefinition applyPhpUnitClassFix needsConversion findEndOfNextBlock	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	PHP-CS-Fixer_PHP-CS-Fixer_6081f933ffb3512ae5c2cbbf46f1f216aae76dcb_2_0	buggy: $propertyTypeDeclarationKinds = [T_STRING, T_NS_SEPARATOR, CT::T_NULLABLE_TYPE, CT::T_ARRAY_TYPEHINT]; context: protected function applyFix(\SplFileInfo $file, Tokens $tokens) { $tokensAnalyzer = new TokensAnalyzer($tokens); $propertyTypeDeclarationKinds = [T_STRING, T_NS_SEPARATOR, CT::T_NULLABLE_TYPE, CT::T_ARRAY_TYPEHINT]; $propertyTypeDeclarationKinds = [T_STRING, T_NS_SEPARATOR, CT::T_NULLABLE_TYPE, CT::T_ARRAY_TYPEHINT]; foreach (array_reverse($tokensAnalyzer->getClassyElements(), true) as $index => $element) { if (!\in_array($element['type'], $this->configuration['elements'], true)) { continue; } if (\PHP_VERSION_ID < 70100 && 'const' === $element['type']) { continue; }	type_info: tokensAnalyzer:unknown propertyTypeDeclarationKinds:array index:unknown  global_variable:  function_name: getDefinition A isCandidate createConfigurationDefinition applyFix isKeywordPlacedProperly moveTokenAndEnsureSingleSpaceFollows	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	PHP-CS-Fixer_PHP-CS-Fixer_33a07e247ca09ae7c466aaaaab077989bb2d9e79_3_0	buggy:  context: <?php namespace PhpCsFixer\Tokenizer\Analyzer; use PhpCsFixer\Tokenizer\Analyzer\Analysis\ArgumentAnalysis; use PhpCsFixer\Tokenizer\Analyzer\Analysis\TypeAnalysis; use PhpCsFixer\Tokenizer\Tokens; final class ArgumentsAnalyzer { public function countArguments(Tokens $tokens, $openParenthesis, $closeParenthesis) { return \count($this->getArguments($tokens, $openParenthesis, $closeParenthesis));	type_info:  global_variable:  function_name: countArguments getArguments call getArgumentInfo	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	PHP-CS-Fixer_PHP-CS-Fixer_33a07e247ca09ae7c466aaaaab077989bb2d9e79_3_0	buggy: if ($token->isComment() || $token->isWhitespace() || $token->isGivenKind(T_ELLIPSIS) || $token->equals('&')) { context: 'type' => null, 'type_index_start' => null, 'type_index_end' => null, ]; $sawName = false; for ($index = $argumentStart; $index <= $argumentEnd; ++$index) { $token = $tokens[$index]; if ($token->isComment() || $token->isWhitespace() || $token->isGivenKind(T_ELLIPSIS) || $token->equals('&')) { if ($token->isComment() || $token->isWhitespace() || $token->isGivenKind(T_ELLIPSIS) || $token->equals('&')) { continue; } if ($token->isGivenKind(T_VARIABLE)) { $sawName = true; $info['name_index'] = $index; $info['name'] = $token->getContent(); continue;	type_info: token:unknown info:array sawName:boolean index:unknown  global_variable:  function_name: countArguments getArguments call getArgumentInfo	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	PHP-CS-Fixer_PHP-CS-Fixer_b76f42952fe6f8df9837330e009f4f32b4a94f7d_4_0	buggy: if (';' === $tokens[$whitespaceTokenIndex]->getContent()) { context: for ($index = $tokens->count() - 2; $index >= 0; --$index) { $token = $tokens[$index]; if (!$token->isGivenKind($tokenKinds)) { continue; } $whitespaceTokenIndex = $index + 1; if (';' === $tokens[$whitespaceTokenIndex]->getContent()) { if (';' === $tokens[$whitespaceTokenIndex]->getContent()) { continue; } if ( $token->isGivenKind(T_STATIC) && !$tokens[$tokens->getNextMeaningfulToken($index)]->isGivenKind([T_FUNCTION, T_VARIABLE]) ) { continue; }	type_info: tokenKinds:unknown index:unknown token:unknown whitespaceTokenIndex:unknown  global_variable:  function_name: configure getDefinition isCandidate applyFix createConfigurationDefinition isMultiLineReturn isMultilineExtendsOrImplementsWithMoreThanOneAncestor	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	PHP-CS-Fixer_PHP-CS-Fixer_44857f64bed3ee9f39684e5f19c2f6fba0163707_5_0	buggy:  context: { $token = $tokens[$index]; if (!$token->isGivenKind([T_COMMENT, T_DOC_COMMENT])) { throw new \InvalidArgumentException('Given index must point to a comment.'); } $nextIndex = $index; do { $nextIndex = $tokens->getNextMeaningfulToken($nextIndex); } while (null !== $nextIndex && $tokens[$nextIndex]->equals('(')); if (null === $nextIndex || $tokens[$nextIndex]->equals('}')) { return false; } $nextToken = $tokens[$nextIndex]; if ($this->isStructuralElement($nextToken)) { return true;	type_info: token:unknown nextIndex:unknown nextToken:unknown index:unknown  global_variable:  function_name: isHeaderComment isBeforeStructuralElement getCommentBlockIndices isStructuralElement isValidControl isValidLanguageConstruct isValidVariable getCommentType getLineBreakCount	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	PHP-CS-Fixer_PHP-CS-Fixer_0f2098721b92f1fca16078355d033ec758de1c6f_6_0	buggy:  context: private function fixFunctionParameters(Tokens $tokens, array $arguments) { foreach (array_reverse($arguments) as $argumentInfo) { if ( !$argumentInfo->hasTypeAnalysis() || !$argumentInfo->hasDefault() || 'null' !== strtolower($argumentInfo->getDefault()) ) { continue; } $argumentTypeInfo = $argumentInfo->getTypeAnalysis(); if (true === $this->configuration['use_nullable_type_declaration']) { if (!$argumentTypeInfo->isNullable()) {	type_info: arguments:unknown argumentTypeInfo:unknown  global_variable:  function_name: getDefinition sample sample isCandidate getPriority createConfigurationDefinition applyFix fixFunctionParameters	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	PHP-CS-Fixer_PHP-CS-Fixer_0f2098721b92f1fca16078355d033ec758de1c6f_6_0	buggy:  context: private function fixFunctionParameters(Tokens $tokens, array $arguments) { foreach (array_reverse($arguments) as $argumentInfo) { if ( !$argumentInfo->hasTypeAnalysis() || !$argumentInfo->hasDefault() || 'null' !== strtolower($argumentInfo->getDefault()) ) { continue; } $argumentTypeInfo = $argumentInfo->getTypeAnalysis(); if (true === $this->configuration['use_nullable_type_declaration']) { if (!$argumentTypeInfo->isNullable()) {	type_info: arguments:unknown argumentTypeInfo:unknown  global_variable:  function_name: getDefinition sample sample isCandidate getPriority createConfigurationDefinition applyFix fixFunctionParameters	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	PHP-CS-Fixer_PHP-CS-Fixer_0f2098721b92f1fca16078355d033ec758de1c6f_6_0	buggy: || !$argumentInfo->hasDefault() || 'null' !== strtolower($argumentInfo->getDefault()) context: private function fixFunctionParameters(Tokens $tokens, array $arguments) { foreach (array_reverse($arguments) as $argumentInfo) { if ( !$argumentInfo->hasTypeAnalysis() || !$argumentInfo->hasDefault() || 'null' !== strtolower($argumentInfo->getDefault()) || !$argumentInfo->hasDefault() || 'null' !== strtolower($argumentInfo->getDefault()) ) { continue; } $argumentTypeInfo = $argumentInfo->getTypeAnalysis(); if (true === $this->configuration['use_nullable_type_declaration']) { if (!$argumentTypeInfo->isNullable()) { $tokens->insertAt($argumentTypeInfo->getStartIndex(), new Token([CT::T_NULLABLE_TYPE, '?'])); } } else {	type_info: arguments:unknown argumentTypeInfo:unknown  global_variable:  function_name: getDefinition sample sample isCandidate getPriority createConfigurationDefinition applyFix fixFunctionParameters	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	PHP-CS-Fixer_PHP-CS-Fixer_d3e08de82ee25356f0339300611324f1a299ddb3_7_0	"buggy: $deprecated = array_intersect($option, self::SUPPORTED_TYPES); if (\count($deprecated) > 0) { $option = array_fill_keys($deprecated, self::SPACING_ONE); } context: ->setAllowedValues([static function (array $option) { $deprecated = array_intersect($option, self::SUPPORTED_TYPES); if (\count($deprecated) > 0) { $option = array_fill_keys($deprecated, self::SPACING_ONE); } $deprecated = array_intersect($option, self::SUPPORTED_TYPES); if (\count($deprecated) > 0) { $option = array_fill_keys($deprecated, self::SPACING_ONE); } foreach ($option as $type => $spacing) { if (!\in_array($type, self::SUPPORTED_TYPES, true)) { throw new InvalidOptionsException( sprintf( 'Unexpected element type, expected any of ""%s"", got ""%s"".', implode('"", ""', self::SUPPORTED_TYPES), \gettype($type).'#'.$type ) ); }"	type_info: spacing:unknown deprecated:unknown option:unknown type:unknown  global_variable:  function_name: configure getDefinition foo bar getPriority isCandidate applyFix createConfigurationDefinition fixSpaceBelowClassElement fixSpaceBelowClassMethod fixSpaceAboveClassElement correctLineBreaks getLineBreakCount findCommentBlockStart findAttributeBlockStart	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	PHP-CS-Fixer_PHP-CS-Fixer_5669a314f623a688fdc97c88a71fa0959f72b19b_8_0	buggy: Preg::split('/([^|<]+(?:<.*>)?)/', $types, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY), context: private function sortJoinedTypes(string $types): string { $types = array_filter( Preg::split('/([^|<]+(?:<.*>)?)/', $types, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY), Preg::split('/([^|<]+(?:<.*>)?)/', $types, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY), static function (string $value) { return '|' !== $value; } ); return implode('|', $this->sortTypes($types)); }	type_info: types:unknown  global_variable:  function_name: getDefinition getPriority isCandidate createConfigurationDefinition applyFix sortTypes sortJoinedTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	PHP-CS-Fixer_PHP-CS-Fixer_bb7d8f4feeb2b5cde756562c9a9588b726ca854d_9_0	buggy: $uses = array_reverse($tokensAnalyzer->getImportUseIndexes()); context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { $tokensAnalyzer = new TokensAnalyzer($tokens); $uses = array_reverse($tokensAnalyzer->getImportUseIndexes()); $uses = array_reverse($tokensAnalyzer->getImportUseIndexes()); foreach ($uses as $index) { $endIndex = $tokens->getNextTokenOfKind($index, [';', [T_CLOSE_TAG]]); $groupClose = $tokens->getPrevMeaningfulToken($endIndex); if ($tokens[$groupClose]->isGivenKind(CT::T_GROUP_IMPORT_BRACE_CLOSE)) { $this->fixGroupUse($tokens, $index, $endIndex); } else { $this->fixMultipleUse($tokens, $index, $endIndex); }	type_info: tokensAnalyzer:unknown uses:unknown endIndex:unknown groupClose:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix getGroupDeclaration getGroupStatements fixGroupUse fixMultipleUse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	PHP-CS-Fixer_PHP-CS-Fixer_bb7d8f4feeb2b5cde756562c9a9588b726ca854d_9_0	buggy: foreach ($uses as $index) { context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { $tokensAnalyzer = new TokensAnalyzer($tokens); $uses = array_reverse($tokensAnalyzer->getImportUseIndexes()); foreach ($uses as $index) { foreach ($uses as $index) { $endIndex = $tokens->getNextTokenOfKind($index, [';', [T_CLOSE_TAG]]); $groupClose = $tokens->getPrevMeaningfulToken($endIndex); if ($tokens[$groupClose]->isGivenKind(CT::T_GROUP_IMPORT_BRACE_CLOSE)) { $this->fixGroupUse($tokens, $index, $endIndex); } else { $this->fixMultipleUse($tokens, $index, $endIndex); } } }	type_info: tokensAnalyzer:unknown uses:unknown endIndex:unknown groupClose:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix getGroupDeclaration getGroupStatements fixGroupUse fixMultipleUse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	PHP-CS-Fixer_PHP-CS-Fixer_bb7d8f4feeb2b5cde756562c9a9588b726ca854d_9_0	buggy:  context: private function getGroupDeclaration(Tokens $tokens, int $index): array { $groupPrefix = ''; $comment = ''; $groupOpenIndex = null; for ($i = $index + 1;; ++$i) { if ($tokens[$i]->isGivenKind(CT::T_GROUP_IMPORT_BRACE_OPEN)) { $groupOpenIndex = $i; break; } if ($tokens[$i]->isComment()) { $comment .= $tokens[$i]->getContent(); if (!$tokens[$i - 1]->isWhitespace() && !$tokens[$i + 1]->isWhitespace()) {	type_info: groupPrefix:string comment:string groupOpenIndex:unknown i:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix getGroupDeclaration getGroupStatements fixGroupUse fixMultipleUse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	PHP-CS-Fixer_PHP-CS-Fixer_bb7d8f4feeb2b5cde756562c9a9588b726ca854d_9_0	"buggy: continue; } if (false === strpos($tokens[$i - 1]->getContent(), ""\n"")) { context: } $tokens[$i] = new Token(';'); $i = $tokens->getNextMeaningfulToken($i); $tokens->insertAt($i, new Token([T_USE, 'use'])); $tokens->insertAt($i + 1, new Token([T_WHITESPACE, ' '])); $indent = WhitespacesAnalyzer::detectIndent($tokens, $index); if ($tokens[$i - 1]->isWhitespace()) { $tokens[$i - 1] = new Token([T_WHITESPACE, $ending.$indent]); continue; } if (false === strpos($tokens[$i - 1]->getContent(), ""\n"")) { continue; } if (false === strpos($tokens[$i - 1]->getContent(), ""\n"")) { $tokens->insertAt($i, new Token([T_WHITESPACE, $ending.$indent])); } } } }"	type_info: i:unknown ending:unknown indent:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix getGroupDeclaration getGroupStatements fixGroupUse fixMultipleUse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	PHP-CS-Fixer_PHP-CS-Fixer_bb7d8f4feeb2b5cde756562c9a9588b726ca854d_9_0	buggy:  context: private function fixMultipleUse(Tokens $tokens, int $index, int $endIndex): void { $ending = $this->whitespacesConfig->getLineEnding(); for ($i = $endIndex - 1; $i > $index; --$i) { if (!$tokens[$i]->equals(',')) { continue; } $tokens[$i] = new Token(';'); $i = $tokens->getNextMeaningfulToken($i); $tokens->insertAt($i, new Token([T_USE, 'use'])); $tokens->insertAt($i + 1, new Token([T_WHITESPACE, ' '])); $indent = WhitespacesAnalyzer::detectIndent($tokens, $index); if ($tokens[$i - 1]->isWhitespace()) {	type_info: endIndex:unknown i:unknown ending:unknown indent:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix getGroupDeclaration getGroupStatements fixGroupUse fixMultipleUse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	PHP-CS-Fixer_PHP-CS-Fixer_bb7d8f4feeb2b5cde756562c9a9588b726ca854d_9_0	"buggy:  context: if (!$tokens[$i]->equals(',')) { continue; } $tokens[$i] = new Token(';'); $i = $tokens->getNextMeaningfulToken($i); $tokens->insertAt($i, new Token([T_USE, 'use'])); $tokens->insertAt($i + 1, new Token([T_WHITESPACE, ' '])); $indent = WhitespacesAnalyzer::detectIndent($tokens, $index); if ($tokens[$i - 1]->isWhitespace()) { $tokens[$i - 1] = new Token([T_WHITESPACE, $ending.$indent]); continue; } if (false === strpos($tokens[$i - 1]->getContent(), ""\n"")) { $tokens->insertAt($i, new Token([T_WHITESPACE, $ending.$indent])); } }"	type_info: i:unknown ending:unknown indent:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix getGroupDeclaration getGroupStatements fixGroupUse fixMultipleUse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	PHP-CS-Fixer_PHP-CS-Fixer_bb7d8f4feeb2b5cde756562c9a9588b726ca854d_9_0	"buggy:  context: $tokens[$i] = new Token(';'); $i = $tokens->getNextMeaningfulToken($i); $tokens->insertAt($i, new Token([T_USE, 'use'])); $tokens->insertAt($i + 1, new Token([T_WHITESPACE, ' '])); $indent = WhitespacesAnalyzer::detectIndent($tokens, $index); if ($tokens[$i - 1]->isWhitespace()) { $tokens[$i - 1] = new Token([T_WHITESPACE, $ending.$indent]); continue; } if (false === strpos($tokens[$i - 1]->getContent(), ""\n"")) { $tokens->insertAt($i, new Token([T_WHITESPACE, $ending.$indent])); } } } }"	type_info: i:unknown ending:unknown indent:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix getGroupDeclaration getGroupStatements fixGroupUse fixMultipleUse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	PHP-CS-Fixer_PHP-CS-Fixer_bb7d8f4feeb2b5cde756562c9a9588b726ca854d_9_0	"buggy:  context: $tokens[$i] = new Token(';'); $i = $tokens->getNextMeaningfulToken($i); $tokens->insertAt($i, new Token([T_USE, 'use'])); $tokens->insertAt($i + 1, new Token([T_WHITESPACE, ' '])); $indent = WhitespacesAnalyzer::detectIndent($tokens, $index); if ($tokens[$i - 1]->isWhitespace()) { $tokens[$i - 1] = new Token([T_WHITESPACE, $ending.$indent]); continue; } if (false === strpos($tokens[$i - 1]->getContent(), ""\n"")) { $tokens->insertAt($i, new Token([T_WHITESPACE, $ending.$indent])); } } } }"	type_info: i:unknown ending:unknown indent:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix getGroupDeclaration getGroupStatements fixGroupUse fixMultipleUse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	PHP-CS-Fixer_PHP-CS-Fixer_752a7f29a6d35267318d26e52a6bc8e0f6b9eefb_10_0	buggy: Preg::split('/([^|<{]+(?:[<{].*[>}])?)/', $types, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY), context: private function sortJoinedTypes(string $types): string { $types = array_filter( Preg::split('/([^|<{]+(?:[<{].*[>}])?)/', $types, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY), Preg::split('/([^|<{]+(?:[<{].*[>}])?)/', $types, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY), static function (string $value) { return '|' !== $value; } ); return implode('|', $this->sortTypes($types)); }	type_info: types:unknown  global_variable:  function_name: getDefinition getPriority isCandidate createConfigurationDefinition applyFix sortTypes sortJoinedTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	PHP-CS-Fixer_PHP-CS-Fixer_1aea0fd06fc87b1f53d5549933343f51e4e921dd_11_0	buggy: if ($tokenAfterParenthesis->isGivenKind([T_FOR, T_FOREACH, T_SWITCH, T_WHILE])) { context: if ($tokenAfterParenthesis->equals('{') && self::LINE_SAME === $this->configuration['position_after_control_structures']) { $tokens->ensureWhitespaceAtIndex($parenthesisEndIndex + 1, 0, ' '); continue; } if ($tokenAfterParenthesis->equalsAny([';', '{', ':'])) { continue; } if ($tokenAfterParenthesis->isGivenKind([T_FOR, T_FOREACH, T_SWITCH, T_WHILE])) { if ($tokenAfterParenthesis->isGivenKind([T_FOR, T_FOREACH, T_SWITCH, T_WHILE])) { $tokenAfterParenthesisBlockEnd = $tokens->findBlockEnd( Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $tokens->getNextMeaningfulToken($nextAfterParenthesisEndIndex) ); if ($tokens[$tokens->getNextMeaningfulToken($tokenAfterParenthesisBlockEnd)]->equals(':')) { continue; } }	type_info: parenthesisEndIndex:unknown nextAfterParenthesisEndIndex:unknown tokenAfterParenthesis:unknown tokenAfterParenthesisBlockEnd:unknown tokens:array  global_variable:  function_name: getDefinition bar bar getPriority isCandidate applyFix createConfigurationDefinition fixCommentBeforeBrace fixControlContinuationBraces fixDoWhile fixIndents fixMissingControlBraces fixSpaceAroundToken findParenthesisEnd findStatementEnd getControlTokens getControlContinuationTokens getControlContinuationTokensForOpeningToken getFinalControlContinuationTokensForOpeningToken fixDeclareStatement fixSingleLineWhitespaceForDeclare ensureWhitespaceAtIndexAndIndentMultilineComment isMultilined isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	PHP-CS-Fixer_PHP-CS-Fixer_af78040585456a4d40166847bfbb4f5f04ca5e65_12_0	buggy: sprintf( '/({?@(?:%s)(?:}|\h.*?(?:}|(?=\R)|(?=\h+\*\/)))?)/i', implode('|', array_map( function (string $tag) { return preg_quote($tag, '/'); }, array_keys($this->configuration['tags']) )) ), context: if (!$this->configuration['tags']) { return; } foreach ($tokens as $index => $token) { if (!$token->isGivenKind(T_DOC_COMMENT)) { continue; } $parts = Preg::split( sprintf( '/({?@(?:%s)(?:}|\h.*?(?:}|(?=\R)|(?=\h+\*\/)))?)/i', implode('|', array_map( function (string $tag) { return preg_quote($tag, '/'); }, array_keys($this->configuration['tags']) )) ), sprintf( '/({?@(?:%s)(?:}|\h.*?(?:}|(?=\R)|(?=\h+\*\/)))?)/i', implode('|', array_map( function (string $tag) { return preg_quote($tag, '/'); }, array_keys($this->configuration['tags']) )) ), $token->getContent(),	type_info: index:unknown parts:unknown tag:unknown  global_variable:  function_name: isCandidate getDefinition getPriority applyFix createConfigurationDefinition tagIsSurroundedByText cleanComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	PHP-CS-Fixer_PHP-CS-Fixer_af78040585456a4d40166847bfbb4f5f04ca5e65_12_0	buggy:  context: function (string $tag) { return preg_quote($tag, '/'); }, array_keys($this->configuration['tags']) )) ), $token->getContent(), -1, PREG_SPLIT_DELIM_CAPTURE ); for ($i = 1, $max = \count($parts) - 1; $i < $max; $i += 2) { if (!Preg::match(self::TAG_REGEX, $parts[$i], $matches)) { continue; }	type_info: parts:unknown i:unknown tag:unknown  global_variable:  function_name: isCandidate getDefinition getPriority applyFix createConfigurationDefinition tagIsSurroundedByText cleanComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	PHP-CS-Fixer_PHP-CS-Fixer_62455be671bb7a0cb1a7ee6ccaf45dcf524f04e1_13_0	buggy: $prevIndex = $tokens->getTokenNotOfKindsSibling($index, -1, [T_NS_SEPARATOR, T_STRING, CT::T_ARRAY_TYPEHINT, T_WHITESPACE, T_COMMENT, T_DOC_COMMENT]); context: public function process(Tokens $tokens, Token $token, int $index): void { if (!$token->equals('|')) { return; } $prevIndex = $tokens->getTokenNotOfKindsSibling($index, -1, [T_NS_SEPARATOR, T_STRING, CT::T_ARRAY_TYPEHINT, T_WHITESPACE, T_COMMENT, T_DOC_COMMENT]); $prevIndex = $tokens->getTokenNotOfKindsSibling($index, -1, [T_NS_SEPARATOR, T_STRING, CT::T_ARRAY_TYPEHINT, T_WHITESPACE, T_COMMENT, T_DOC_COMMENT]); $prevToken = $tokens[$prevIndex]; if ($prevToken->isGivenKind([ CT::T_TYPE_COLON, CT::T_TYPE_ALTERNATION, T_STATIC, T_VAR, T_PUBLIC, T_PROTECTED, T_PRIVATE, ])) { $this->replaceToken($tokens, $index);	type_info: prevIndex:unknown prevToken:unknown  global_variable:  function_name: foo getPriority getRequiredPhpVersionId process getCustomTokens replaceToken	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	PHP-CS-Fixer_PHP-CS-Fixer_9711c2bb7ea2978d77e174abc6a49380339b37a0_14_0	buggy:  context: <?php declare(strict_types=1); namespace PhpCsFixer\Fixer\Phpdoc; use PhpCsFixer\AbstractFixer; use PhpCsFixer\DocBlock\DocBlock; use PhpCsFixer\Fixer\ConfigurableFixerInterface; use PhpCsFixer\Fixer\WhitespacesAwareFixerInterface; use PhpCsFixer\FixerConfiguration\AllowedValueSubset; use PhpCsFixer\FixerConfiguration\FixerConfigurationResolver; use PhpCsFixer\FixerConfiguration\FixerConfigurationResolverInterface; use PhpCsFixer\FixerConfiguration\FixerOptionBuilder; use PhpCsFixer\FixerDefinition\CodeSample; use PhpCsFixer\FixerDefinition\FixerDefinition; use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;	type_info: align:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	PHP-CS-Fixer_PHP-CS-Fixer_9711c2bb7ea2978d77e174abc6a49380339b37a0_14_0	buggy: $indent = '(?P<indent>(?: {2}|\t)*)'; context: parent::configure($configuration); $tagsWithNameToAlign = array_intersect($this->configuration['tags'], self::TAGS_WITH_NAME); $tagsWithMethodSignatureToAlign = array_intersect($this->configuration['tags'], self::TAGS_WITH_METHOD_SIGNATURE); $tagsWithoutNameToAlign = array_diff($this->configuration['tags'], $tagsWithNameToAlign, $tagsWithMethodSignatureToAlign); $types = []; $indent = '(?P<indent>(?: {2}|\t)*)'; $indent = '(?P<indent>(?: {2}|\t)*)'; if (!empty($tagsWithNameToAlign)) { $types[] = '(?P<tag>'.implode('|', $tagsWithNameToAlign).')\s+(?P<hint>[^$]+?)\s+(?P<var>(?:&|\.{3})?\$[^\s]+)'; } if (!empty($tagsWithoutNameToAlign)) { $types[] = '(?P<tag2>'.implode('|', $tagsWithoutNameToAlign).')\s+(?P<hint2>[^\s]+?)';	type_info: tagsWithNameToAlign:unknown tagsWithMethodSignatureToAlign:unknown tagsWithoutNameToAlign:unknown types:array indent:string align:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	PHP-CS-Fixer_PHP-CS-Fixer_9711c2bb7ea2978d77e174abc6a49380339b37a0_14_0	buggy: if (!empty($tagsWithNameToAlign)) { $types[] = '(?P<tag>'.implode('|', $tagsWithNameToAlign).')\s+(?P<hint>[^$]+?)\s+(?P<var>(?:&|\.{3})?\$[^\s]+)'; context: $tagsWithNameToAlign = array_intersect($this->configuration['tags'], self::TAGS_WITH_NAME); $tagsWithMethodSignatureToAlign = array_intersect($this->configuration['tags'], self::TAGS_WITH_METHOD_SIGNATURE); $tagsWithoutNameToAlign = array_diff($this->configuration['tags'], $tagsWithNameToAlign, $tagsWithMethodSignatureToAlign); $types = []; $indent = '(?P<indent>(?: {2}|\t)*)'; if (!empty($tagsWithNameToAlign)) { $types[] = '(?P<tag>'.implode('|', $tagsWithNameToAlign).')\s+(?P<hint>[^$]+?)\s+(?P<var>(?:&|\.{3})?\$[^\s]+)'; if (!empty($tagsWithNameToAlign)) { $types[] = '(?P<tag>'.implode('|', $tagsWithNameToAlign).')\s+(?P<hint>[^$]+?)\s+(?P<var>(?:&|\.{3})?\$[^\s]+)'; } if (!empty($tagsWithoutNameToAlign)) { $types[] = '(?P<tag2>'.implode('|', $tagsWithoutNameToAlign).')\s+(?P<hint2>[^\s]+?)'; }	type_info: tagsWithNameToAlign:unknown tagsWithMethodSignatureToAlign:unknown tagsWithoutNameToAlign:unknown types:array indent:string align:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	PHP-CS-Fixer_PHP-CS-Fixer_9711c2bb7ea2978d77e174abc6a49380339b37a0_14_0	buggy: if (!empty($tagsWithoutNameToAlign)) { $types[] = '(?P<tag2>'.implode('|', $tagsWithoutNameToAlign).')\s+(?P<hint2>[^\s]+?)'; context: $types = []; $indent = '(?P<indent>(?: {2}|\t)*)'; if (!empty($tagsWithNameToAlign)) { $types[] = '(?P<tag>'.implode('|', $tagsWithNameToAlign).')\s+(?P<hint>[^$]+?)\s+(?P<var>(?:&|\.{3})?\$[^\s]+)'; } if (!empty($tagsWithoutNameToAlign)) { $types[] = '(?P<tag2>'.implode('|', $tagsWithoutNameToAlign).')\s+(?P<hint2>[^\s]+?)'; if (!empty($tagsWithoutNameToAlign)) { $types[] = '(?P<tag2>'.implode('|', $tagsWithoutNameToAlign).')\s+(?P<hint2>[^\s]+?)'; } if (!empty($tagsWithMethodSignatureToAlign)) { $types[] = '(?P<tag3>'.implode('|', $tagsWithMethodSignatureToAlign).')(\s+(?P<hint3>[^\s(]+)|)\s+(?P<signature>.+\))'; }	type_info: tagsWithNameToAlign:unknown tagsWithMethodSignatureToAlign:unknown tagsWithoutNameToAlign:unknown types:array indent:string align:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	PHP-CS-Fixer_PHP-CS-Fixer_9711c2bb7ea2978d77e174abc6a49380339b37a0_14_0	buggy: if (!empty($tagsWithMethodSignatureToAlign)) { context: $types[] = '(?P<tag>'.implode('|', $tagsWithNameToAlign).')\s+(?P<hint>[^$]+?)\s+(?P<var>(?:&|\.{3})?\$[^\s]+)'; } if (!empty($tagsWithoutNameToAlign)) { $types[] = '(?P<tag2>'.implode('|', $tagsWithoutNameToAlign).')\s+(?P<hint2>[^\s]+?)'; } if (!empty($tagsWithMethodSignatureToAlign)) { if (!empty($tagsWithMethodSignatureToAlign)) { $types[] = '(?P<tag3>'.implode('|', $tagsWithMethodSignatureToAlign).')(\s+(?P<hint3>[^\s(]+)|)\s+(?P<signature>.+\))'; } $desc = '(?:\s+(?P<desc>\V*))'; $this->regex = '/^'.$indent.' \* @(?:'.implode('|', $types).')'.$desc.'\s*$/u';	type_info: tagsWithNameToAlign:unknown tagsWithMethodSignatureToAlign:unknown tagsWithoutNameToAlign:unknown types:array indent:string desc:string align:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	PHP-CS-Fixer_PHP-CS-Fixer_9711c2bb7ea2978d77e174abc6a49380339b37a0_14_0	buggy: $this->regex = '/^'.$indent.' \* @(?:'.implode('|', $types).')'.$desc.'\s*$/u'; context: if (!empty($tagsWithoutNameToAlign)) { $types[] = '(?P<tag2>'.implode('|', $tagsWithoutNameToAlign).')\s+(?P<hint2>[^\s]+?)'; } if (!empty($tagsWithMethodSignatureToAlign)) { $types[] = '(?P<tag3>'.implode('|', $tagsWithMethodSignatureToAlign).')(\s+(?P<hint3>[^\s(]+)|)\s+(?P<signature>.+\))'; } $desc = '(?:\s+(?P<desc>\V*))'; $this->regex = '/^'.$indent.' \* @(?:'.implode('|', $types).')'.$desc.'\s*$/u'; $this->regex = '/^'.$indent.' \* @(?:'.implode('|', $types).')'.$desc.'\s*$/u'; $this->regexCommentLine = '/^'.$indent.' \*(?! @)(?:\s+(?P<desc>\V+))(?<!\*\/)\r?$/u'; $this->align = $this->configuration['align']; } public function getDefinition(): FixerDefinitionInterface { $code = <<<'EOF' <?php	type_info: tagsWithMethodSignatureToAlign:unknown tagsWithoutNameToAlign:unknown types:array indent:string desc:string code:unknown align:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	PHP-CS-Fixer_PHP-CS-Fixer_21d66433783838720cae2452c18c8027e4e1f56c_15_0	buggy:  context: while ($tokens[$prev]->isGivenKind([CT::T_NAMESPACE_OPERATOR, T_NS_SEPARATOR, T_STRING])) { $prev = $tokens->getPrevMeaningfulToken($prev); } $prevToken = $tokens[$prev]; if ($prevToken->isGivenKind([T_EXTENDS, T_INSTANCEOF, T_INSTEADOF, T_IMPLEMENTS, T_NEW, CT::T_NULLABLE_TYPE, CT::T_TYPE_ALTERNATION, CT::T_TYPE_COLON, CT::T_USE_TRAIT])) { return true; } if ($nextToken->equals('&') && $tokens[$tokens->getNextMeaningfulToken($next)]->isGivenKind(T_VARIABLE)) { $checkIndex = $tokens->getPrevTokenOfKind($prev + 1, [';', '{', '}', [T_FUNCTION], [T_OPEN_TAG], [T_OPEN_TAG_WITH_ECHO]]); return $tokens[$checkIndex]->isGivenKind(T_FUNCTION); } if (!$prevToken->equals(',')) { return false; }	type_info: next:unknown nextToken:unknown prev:unknown prevToken:unknown checkIndex:unknown  global_variable:  function_name: isClassyInvocation baz	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	PHP-CS-Fixer_PHP-CS-Fixer_21d66433783838720cae2452c18c8027e4e1f56c_15_1	buggy:  context: <?php declare(strict_types=1); namespace PhpCsFixer\Tokenizer; use PhpCsFixer\Tokenizer\Analyzer\GotoLabelAnalyzer; final class TokensAnalyzer { private $tokens; private $gotoLabelAnalyzer;	type_info: tokens:unknown  global_variable: tokens: unknown function_name: __construct getClassyElements getImportUseIndexes isArray isArrayMultiLine isBlockMultiline getMethodAttributes isAnonymousClass isLambda isConstantInvocation baz isUnarySuccessorOperator isUnaryPredecessorOperator isBinaryOperator isWhilePartOfDoWhile isSuperGlobal findClassyElements	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	PHP-CS-Fixer_PHP-CS-Fixer_21d66433783838720cae2452c18c8027e4e1f56c_15_1	"buggy: if ( \defined('T_ATTRIBUTE') && $this->tokens[$prevIndex]->isGivenKind(T_ATTRIBUTE) ) { context: } if ($this->tokens[$prevIndex]->equals('[') && $this->tokens[$nextIndex]->equals(']')) { $checkToken = $this->tokens[$this->tokens->getNextMeaningfulToken($nextIndex)]; if ($checkToken->equals('""') || $checkToken->isGivenKind([T_CURLY_OPEN, T_DOLLAR_OPEN_CURLY_BRACES, T_ENCAPSED_AND_WHITESPACE, T_VARIABLE])) { return false; } } if ( \defined('T_ATTRIBUTE') && $this->tokens[$prevIndex]->isGivenKind(T_ATTRIBUTE) ) { if ( \defined('T_ATTRIBUTE') && $this->tokens[$prevIndex]->isGivenKind(T_ATTRIBUTE) ) { return false; } if ($this->tokens[$nextIndex]->equals(':')) { if (null === $this->gotoLabelAnalyzer) { $this->gotoLabelAnalyzer = new GotoLabelAnalyzer();"	type_info: tokens:unknown nextIndex:unknown prevIndex:unknown checkToken:unknown  global_variable: tokens: unknown function_name: __construct getClassyElements getImportUseIndexes isArray isArrayMultiLine isBlockMultiline getMethodAttributes isAnonymousClass isLambda isConstantInvocation baz isUnarySuccessorOperator isUnaryPredecessorOperator isBinaryOperator isWhilePartOfDoWhile isSuperGlobal findClassyElements	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
67	PHP-CS-Fixer_PHP-CS-Fixer_840a40b787e217ef5306dc936b59e50419cd2d51_16_0	buggy: if ($tokens[$whitespaceTokenIndex]->equalsAny([';', ')', [CT::T_ARRAY_SQUARE_BRACE_CLOSE]])) { context: for ($index = $tokens->count() - 2; $index >= 0; --$index) { $token = $tokens[$index]; if (!$token->isGivenKind($tokenKinds)) { continue; } $whitespaceTokenIndex = $index + 1; if ($tokens[$whitespaceTokenIndex]->equalsAny([';', ')', [CT::T_ARRAY_SQUARE_BRACE_CLOSE]])) { if ($tokens[$whitespaceTokenIndex]->equalsAny([';', ')', [CT::T_ARRAY_SQUARE_BRACE_CLOSE]])) { continue; } if ( $token->isGivenKind(T_STATIC) && !$tokens[$tokens->getNextMeaningfulToken($index)]->isGivenKind([T_FUNCTION, T_VARIABLE]) ) { continue; }	type_info: tokenKinds:unknown index:unknown token:unknown whitespaceTokenIndex:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition isMultiLineReturn isMultilineExtendsOrImplementsWithMoreThanOneAncestor	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
68	PHP-CS-Fixer_PHP-CS-Fixer_d3d6fed1e3f9744ed28b084767fb6d9e4e7c053f_17_0	buggy: if ($tokens[$whitespaceTokenIndex]->equalsAny([',', ';', ')', [CT::T_ARRAY_SQUARE_BRACE_CLOSE]])) { context: for ($index = $tokens->count() - 2; $index >= 0; --$index) { $token = $tokens[$index]; if (!$token->isGivenKind($tokenKinds)) { continue; } $whitespaceTokenIndex = $index + 1; if ($tokens[$whitespaceTokenIndex]->equalsAny([',', ';', ')', [CT::T_ARRAY_SQUARE_BRACE_CLOSE]])) { if ($tokens[$whitespaceTokenIndex]->equalsAny([',', ';', ')', [CT::T_ARRAY_SQUARE_BRACE_CLOSE]])) { continue; } if ( $token->isGivenKind(T_STATIC) && !$tokens[$tokens->getNextMeaningfulToken($index)]->isGivenKind([T_FUNCTION, T_VARIABLE]) ) { continue; }	type_info: tokenKinds:unknown index:unknown token:unknown whitespaceTokenIndex:unknown tokens:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition isMultiLineReturn isMultilineExtendsOrImplementsWithMoreThanOneAncestor	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
69	PHP-CS-Fixer_PHP-CS-Fixer_153e50c45cebba739fae5f84996bd486dc9c2ddc_18_0	buggy:  context: } if ( $nameToken->equalsAny([ [T_STRING, 'setUpBeforeClass'], [T_STRING, 'doSetUpBeforeClass'], [T_STRING, 'tearDownAfterClass'], [T_STRING, 'doTearDownAfterClass'], [T_STRING, 'setUp'], [T_STRING, 'doSetUp'], [T_STRING, 'tearDown'], [T_STRING, 'doTearDown'], ], false) ) { return ['phpunit', strtolower($nameToken->getContent())]; } return str_starts_with($nameToken->getContent(), '__') ? 'magic' : 'method'	type_info: nameToken:unknown  global_variable:  function_name: configure isCandidate getDefinition __construct privStatFunc pubFunc1 __toString protFunc pubFunc2 pubStatFunc1 pubFunc3 pubStatFunc2 privFunc pubStatFunc3 protStatFunc __destruct A B D B A C getPriority applyFix createConfigurationDefinition getElements detectElementType findElementEnd sortElements sortGroupElements sortTokens	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
70	PHP-CS-Fixer_PHP-CS-Fixer_153e50c45cebba739fae5f84996bd486dc9c2ddc_18_0	buggy: 'teardown' => 7, 'doteardown' => 8, context: private function sortElements(array $elements): array { static $phpunitPositions = [ 'setupbeforeclass' => 1, 'dosetupbeforeclass' => 2, 'teardownafterclass' => 3, 'doteardownafterclass' => 4, 'setup' => 5, 'dosetup' => 6, 'teardown' => 7, 'doteardown' => 8, 'teardown' => 7, 'doteardown' => 8, ]; foreach ($elements as &$element) { $type = $element['type']; if (\array_key_exists($type, self::$specialTypes)) { if (isset($this->typePosition[$type])) { $element['position'] = $this->typePosition[$type]; if ('phpunit' === $type) { $element['position'] += $phpunitPositions[$element['name']];	type_info: specialTypes:array type:string elements:array element:array phpunitPositions:array  global_variable:  function_name: configure isCandidate getDefinition __construct privStatFunc pubFunc1 __toString protFunc pubFunc2 pubStatFunc1 pubFunc3 pubStatFunc2 privFunc pubStatFunc3 protStatFunc __destruct A B D B A C getPriority applyFix createConfigurationDefinition getElements detectElementType findElementEnd sortElements sortGroupElements sortTokens	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
71	PHP-CS-Fixer_PHP-CS-Fixer_328fcee4643b925c1f00972fba2ae68039c1d44a_19_0	buggy: if ( !$tokens[$i]->isGivenKind(T_FUNCTION) && (\PHP_VERSION_ID < 70400 || !$tokens[$i]->isGivenKind(T_FN)) ) { context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { for ($i = 0, $l = $tokens->count(); $i < $l; ++$i) { if ( !$tokens[$i]->isGivenKind(T_FUNCTION) && (\PHP_VERSION_ID < 70400 || !$tokens[$i]->isGivenKind(T_FN)) ) { if ( !$tokens[$i]->isGivenKind(T_FUNCTION) && (\PHP_VERSION_ID < 70400 || !$tokens[$i]->isGivenKind(T_FN)) ) { continue; } $startIndex = $tokens->getNextTokenOfKind($i, ['(']); $i = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $startIndex); $this->fixFunctionDefinition($tokens, $startIndex, $i); } }	type_info: i:unknown startIndex:unknown  global_variable:  function_name: getDefinition example getPriority isCandidate isRisky applyFix fixFunctionDefinition getLastNonDefaultArgumentIndex isEllipsis removeDefaultArgument isNonNullableTypehintedNullableVariable clearWhitespacesBeforeIndex	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
72	PHP-CS-Fixer_PHP-CS-Fixer_328fcee4643b925c1f00972fba2ae68039c1d44a_19_0	buggy:  context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { for ($i = 0, $l = $tokens->count(); $i < $l; ++$i) { if ( !$tokens[$i]->isGivenKind(T_FUNCTION) && (\PHP_VERSION_ID < 70400 || !$tokens[$i]->isGivenKind(T_FN)) ) { continue; } $startIndex = $tokens->getNextTokenOfKind($i, ['(']); $i = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $startIndex); $this->fixFunctionDefinition($tokens, $startIndex, $i); } }	type_info: i:unknown startIndex:unknown  global_variable:  function_name: getDefinition example getPriority isCandidate isRisky applyFix fixFunctionDefinition getLastNonDefaultArgumentIndex isEllipsis removeDefaultArgument isNonNullableTypehintedNullableVariable clearWhitespacesBeforeIndex	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
73	PHP-CS-Fixer_PHP-CS-Fixer_328fcee4643b925c1f00972fba2ae68039c1d44a_19_0	buggy: $endIndex = $tokens->getPrevTokenOfKind($lastArgumentIndex, [',']); $endIndex = $tokens->getPrevMeaningfulToken($endIndex); $this->removeDefaultArgument($tokens, $i, $endIndex); context: if ($token->isGivenKind(T_VARIABLE)) { $lastArgumentIndex = $i; continue; } if (!$token->equals('=') || $this->isNonNullableTypehintedNullableVariable($tokens, $i)) { continue; } $endIndex = $tokens->getPrevTokenOfKind($lastArgumentIndex, [',']); $endIndex = $tokens->getPrevMeaningfulToken($endIndex); $this->removeDefaultArgument($tokens, $i, $endIndex); $endIndex = $tokens->getPrevTokenOfKind($lastArgumentIndex, [',']); $endIndex = $tokens->getPrevMeaningfulToken($endIndex); $this->removeDefaultArgument($tokens, $i, $endIndex); } } private function getLastNonDefaultArgumentIndex(Tokens $tokens, int $startIndex, int $endIndex): ?int { for ($i = $endIndex - 1; $i > $startIndex; --$i) { $token = $tokens[$i];	type_info: i:unknown startIndex:unknown lastArgumentIndex:unknown token:unknown endIndex:unknown  global_variable:  function_name: getDefinition example getPriority isCandidate isRisky applyFix fixFunctionDefinition getLastNonDefaultArgumentIndex isEllipsis removeDefaultArgument isNonNullableTypehintedNullableVariable clearWhitespacesBeforeIndex	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
74	PHP-CS-Fixer_PHP-CS-Fixer_328fcee4643b925c1f00972fba2ae68039c1d44a_19_0	buggy: private function removeDefaultArgument(Tokens $tokens, int $startIndex, int $endIndex): void context: private function isEllipsis(Tokens $tokens, int $variableIndex): bool { return $tokens[$tokens->getPrevMeaningfulToken($variableIndex)]->isGivenKind(T_ELLIPSIS); } private function removeDefaultArgument(Tokens $tokens, int $startIndex, int $endIndex): void private function removeDefaultArgument(Tokens $tokens, int $startIndex, int $endIndex): void	type_info: startIndex:unknown endIndex:unknown variableIndex:unknown  global_variable:  function_name: getDefinition example getPriority isCandidate isRisky applyFix fixFunctionDefinition getLastNonDefaultArgumentIndex isEllipsis removeDefaultArgument isNonNullableTypehintedNullableVariable clearWhitespacesBeforeIndex	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	PHP-CS-Fixer_PHP-CS-Fixer_bf323653d74e65958ef82f611055498eb0f06f12_20_0	"buggy: } elseif ($tokens[$j]->equals([T_FUNCTION])) { context: continue; } if ($token->isWhitespace()) { $j = $tokens->getNextMeaningfulToken($i); if ($tokens[$j]->equals([T_AS])) { $statement .= ' as '; $i += 2; } elseif ($tokens[$j]->equals([T_FUNCTION])) { } elseif ($tokens[$j]->equals([T_FUNCTION])) { $statement = ' function'.$statement; $i += 2; } elseif ($tokens[$j]->equals([T_CONST])) { $statement = ' const'.$statement; $i += 2; } if ($token->isWhitespace("" \t"") || !str_starts_with($tokens[$i - 1]->getContent(), '//')) { continue;"	type_info: i:unknown statement:unknown token:unknown j:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix getGroupDeclaration getGroupStatements fixGroupUse fixMultipleUse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	PHP-CS-Fixer_PHP-CS-Fixer_bf323653d74e65958ef82f611055498eb0f06f12_20_0	"buggy: } elseif ($tokens[$j]->equals([T_CONST])) { context: if ($token->isWhitespace()) { $j = $tokens->getNextMeaningfulToken($i); if ($tokens[$j]->equals([T_AS])) { $statement .= ' as '; $i += 2; } elseif ($tokens[$j]->equals([T_FUNCTION])) { $statement = ' function'.$statement; $i += 2; } elseif ($tokens[$j]->equals([T_CONST])) { } elseif ($tokens[$j]->equals([T_CONST])) { $statement = ' const'.$statement; $i += 2; } if ($token->isWhitespace("" \t"") || !str_starts_with($tokens[$i - 1]->getContent(), '//')) { continue; } }"	type_info: i:unknown statement:unknown token:unknown j:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix getGroupDeclaration getGroupStatements fixGroupUse fixMultipleUse	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	PHP-CS-Fixer_PHP-CS-Fixer_bf323653d74e65958ef82f611055498eb0f06f12_20_1	buggy:  context: namespace PhpCsFixer\Tokenizer\Transformer; use PhpCsFixer\Tokenizer\AbstractTransformer; use PhpCsFixer\Tokenizer\CT; use PhpCsFixer\Tokenizer\Token; use PhpCsFixer\Tokenizer\Tokens; final class ImportTransformer extends AbstractTransformer { public function getRequiredPhpVersionId(): int { return 50600; } public function process(Tokens $tokens, Token $token, int $index): void { if (!$token->isGivenKind([T_CONST, T_FUNCTION])) { return; }	type_info:  global_variable:  function_name: getRequiredPhpVersionId process getCustomTokens	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	PHP-CS-Fixer_PHP-CS-Fixer_bf323653d74e65958ef82f611055498eb0f06f12_20_1	buggy: if ($prevToken->isGivenKind(T_USE)) { $tokens[$index] = new Token([ $token->isGivenKind(T_FUNCTION) ? CT::T_FUNCTION_IMPORT : CT::T_CONST_IMPORT, $token->getContent(), ]); context: public function process(Tokens $tokens, Token $token, int $index): void { if (!$token->isGivenKind([T_CONST, T_FUNCTION])) { return; } $prevToken = $tokens[$tokens->getPrevMeaningfulToken($index)]; if ($prevToken->isGivenKind(T_USE)) { $tokens[$index] = new Token([ $token->isGivenKind(T_FUNCTION) ? CT::T_FUNCTION_IMPORT : CT::T_CONST_IMPORT, $token->getContent(), ]); if ($prevToken->isGivenKind(T_USE)) { $tokens[$index] = new Token([ $token->isGivenKind(T_FUNCTION) ? CT::T_FUNCTION_IMPORT : CT::T_CONST_IMPORT, $token->getContent(), ]); } }	type_info: prevToken:unknown  global_variable:  function_name: getRequiredPhpVersionId process getCustomTokens	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	PHP-CS-Fixer_PHP-CS-Fixer_bf323653d74e65958ef82f611055498eb0f06f12_20_1	buggy:  context: } $prevToken = $tokens[$tokens->getPrevMeaningfulToken($index)]; if ($prevToken->isGivenKind(T_USE)) { $tokens[$index] = new Token([ $token->isGivenKind(T_FUNCTION) ? CT::T_FUNCTION_IMPORT : CT::T_CONST_IMPORT, $token->getContent(), ]); } } public function getCustomTokens(): array { return [CT::T_CONST_IMPORT, CT::T_FUNCTION_IMPORT]; } }	type_info: prevToken:unknown  global_variable:  function_name: getRequiredPhpVersionId process getCustomTokens	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	PHP-CS-Fixer_PHP-CS-Fixer_03f5eff63d42e5bb1c0e20d46ffd1a66f258476e_21_0	buggy: while (!$tokens[++$index]->equals('=')); context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { $callback = $this->callback; for ($index = 0, $count = $tokens->count(); $index < $count - 6; ++$index) { if (!$tokens[$index]->isGivenKind(T_DECLARE)) { continue; } while (!$tokens[++$index]->equals('=')); while (!$tokens[++$index]->equals('=')); $this->{$callback}($tokens, $index); } }	type_info: callback:unknown index:unknown  global_variable: callback: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition ensureWhitespaceAroundToken removeWhitespaceAroundToken	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	PHP-CS-Fixer_PHP-CS-Fixer_03f5eff63d42e5bb1c0e20d46ffd1a66f258476e_21_0	buggy: $this->{$callback}($tokens, $index); context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { $callback = $this->callback; for ($index = 0, $count = $tokens->count(); $index < $count - 6; ++$index) { if (!$tokens[$index]->isGivenKind(T_DECLARE)) { continue; } while (!$tokens[++$index]->equals('=')); $this->{$callback}($tokens, $index); $this->{$callback}($tokens, $index); } }	type_info: callback:unknown index:unknown  global_variable: callback: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition ensureWhitespaceAroundToken removeWhitespaceAroundToken	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	PHP-CS-Fixer_PHP-CS-Fixer_c02a44702246eb37f5ef3b8cab7b38107fbeb36a_22_0	"buggy: $content = Preg::replace('/^\'(.*)\'$/', '""$1""', $content); context: $content = str_replace(""\\'"", ""'"", $content); } if ($stringTypeChanged) { $content = Preg::replace('/(\\\\{1,2})/', '\\\\\\\\', $content); $content = str_replace('$', '\$', $content); } if ($swapQuotes) { $content = str_replace('""', '\""', $content); $content = Preg::replace('/^\'(.*)\'$/', '""$1""', $content); $content = Preg::replace('/^\'(.*)\'$/', '""$1""', $content); } $tokens[$index] = new Token([$token->getId(), strtr($content, $escapeSequences)]); continue; } if ($token->isGivenKind(self::$tokens)) { $newContent = strtr($content, $replacements);"	type_info: tokens:array replacements:array escapeSequences:array index:unknown stringTypeChanged:boolean swapQuotes:boolean content:unknown newContent:unknown  global_variable:  function_name: __construct getDefinition isRisky isCandidate createConfigurationDefinition applyFix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	PHP-CS-Fixer_PHP-CS-Fixer_5286244d992f4644e00f95e751d61674178b0594_23_0	buggy:  context: public function generate(ReportSummary $reportSummary): string { $report = []; foreach ($reportSummary->getChanged() as $fileName => $change) { foreach ($change['appliedFixers'] as $fixerName) { $report[] = [ 'description' => $fixerName, 'fingerprint' => md5($fileName.$fixerName), 'location' => [ 'path' => $fileName, 'lines' => [ 'begin' => 0, ], ], ]; } }	type_info: report:array fileName:unknown  global_variable:  function_name: getFormat generate	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	PHP-CS-Fixer_PHP-CS-Fixer_b45f17a99353c86d99e64424f68015fd9ecf229a_24_0	buggy: if (!$token->isGivenKind([T_CLASS, T_TRAIT])) { return; context: public function process(Tokens $tokens, Token $token, int $index): void { if ($token->isGivenKind(T_USE) && $this->isUseForLambda($tokens, $index)) { $tokens[$index] = new Token([CT::T_USE_LAMBDA, $token->getContent()]); return; } if (!$token->isGivenKind([T_CLASS, T_TRAIT])) { return; if (!$token->isGivenKind([T_CLASS, T_TRAIT])) { return; } if ($tokens[$tokens->getPrevMeaningfulToken($index)]->isGivenKind(T_DOUBLE_COLON)) { return; } $index = $tokens->getNextTokenOfKind($index, ['{']); $innerLimit = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $index); while ($index < $innerLimit) {	type_info: index:unknown innerLimit:unknown token:unknown  global_variable:  function_name: getPriority getRequiredPhpVersionId process getCustomTokens isUseForLambda	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	PHP-CS-Fixer_PHP-CS-Fixer_b45f17a99353c86d99e64424f68015fd9ecf229a_24_0	buggy: if ($tokens[$tokens->getPrevMeaningfulToken($index)]->isGivenKind(T_DOUBLE_COLON)) { context: $tokens[$index] = new Token([CT::T_USE_LAMBDA, $token->getContent()]); return; } if (!$token->isGivenKind([T_CLASS, T_TRAIT])) { return; } if ($tokens[$tokens->getPrevMeaningfulToken($index)]->isGivenKind(T_DOUBLE_COLON)) { if ($tokens[$tokens->getPrevMeaningfulToken($index)]->isGivenKind(T_DOUBLE_COLON)) { return; } $index = $tokens->getNextTokenOfKind($index, ['{']); $innerLimit = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $index); while ($index < $innerLimit) { $token = $tokens[++$index];	type_info: index:unknown innerLimit:unknown token:unknown  global_variable:  function_name: getPriority getRequiredPhpVersionId process getCustomTokens isUseForLambda	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	PHP-CS-Fixer_PHP-CS-Fixer_75c640fa9eb4140e81f57e56963720e791cc9d18_25_0	"buggy:  context: } if ($token->isGivenKind([T_EXTENDS, T_IMPLEMENTS]) && $this->isMultilineExtendsOrImplementsWithMoreThanOneAncestor($tokens, $index)) { continue; } if ($token->isGivenKind(T_RETURN) && $this->isMultiLineReturn($tokens, $index)) { continue; } if ($token->isComment() || $token->isGivenKind(CT::T_ATTRIBUTE_CLOSE)) { if ($tokens[$whitespaceTokenIndex]->equals([T_WHITESPACE]) && str_contains($tokens[$whitespaceTokenIndex]->getContent(), ""\n"")) { continue; } } $tokens->ensureWhitespaceAtIndex($whitespaceTokenIndex, 0, ' '); if ( $token->isGivenKind(T_YIELD_FROM)"	type_info: index:unknown token:unknown whitespaceTokenIndex:unknown tokens:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition isMultiLineReturn isMultilineExtendsOrImplementsWithMoreThanOneAncestor	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	PHP-CS-Fixer_PHP-CS-Fixer_75c640fa9eb4140e81f57e56963720e791cc9d18_25_0	"buggy:  context: return false; } if ($hasMoreThanOneAncestor && str_contains($token->getContent(), ""\n"")) { return true; } } return false; } }"	type_info: token:unknown hasMoreThanOneAncestor:boolean  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition isMultiLineReturn isMultilineExtendsOrImplementsWithMoreThanOneAncestor	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	PHP-CS-Fixer_PHP-CS-Fixer_0a59bb47e32af1e1a8f1ce80a2b88413b85bc5d0_26_0	buggy: ->name('*.php') context: public function __construct() { parent::__construct(); $this ->files() ->name('*.php') ->name('*.php') ->exclude('vendor') ; }	type_info:  global_variable:  function_name: __construct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	PHP-CS-Fixer_PHP-CS-Fixer_585b50af5fb01bbf0c6dfc10cf9e3695574f6dfc_27_0	buggy: $prevToken = $tokens[$tokens->getPrevMeaningfulToken($index)]; context: [T_CONSTANT_ENCAPSED_STRING], [T_STRING], [T_STRING_VARNAME], [T_VARIABLE], [CT::T_ARRAY_SQUARE_BRACE_CLOSE], [CT::T_DYNAMIC_PROP_BRACE_CLOSE], [CT::T_DYNAMIC_VAR_BRACE_CLOSE], [CT::T_ARRAY_INDEX_CURLY_BRACE_CLOSE], ]; $prevToken = $tokens[$tokens->getPrevMeaningfulToken($index)]; $prevToken = $tokens[$tokens->getPrevMeaningfulToken($index)]; if ($prevToken->equalsAny($disallowedPrevTokens)) { return false; } if ($prevToken->isGivenKind(T_AS)) { return true; } $type = Tokens::detectBlockType($tokens[$index]);	type_info: index:unknown disallowedPrevTokens:array prevToken:unknown type:unknown  global_variable:  function_name: getPriority getRequiredPhpVersionId process getCustomTokens transformIntoArraySquareBrace transformIntoDestructuringSquareBrace isShortArray isArrayDestructing	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	PHP-CS-Fixer_PHP-CS-Fixer_585b50af5fb01bbf0c6dfc10cf9e3695574f6dfc_27_0	buggy:  context: $prevToken = $tokens[$tokens->getPrevMeaningfulToken($index)]; if ($prevToken->equalsAny($disallowedPrevTokens)) { return false; } if ($prevToken->isGivenKind(T_AS)) { return true; } $type = Tokens::detectBlockType($tokens[$index]); $end = $tokens->findBlockEnd($type['type'], $index); $nextToken = $tokens[$tokens->getNextMeaningfulToken($end)]; return $nextToken->equals('='); } }	type_info: index:unknown disallowedPrevTokens:array prevToken:unknown nextToken:unknown type:unknown end:unknown  global_variable:  function_name: getPriority getRequiredPhpVersionId process getCustomTokens transformIntoArraySquareBrace transformIntoDestructuringSquareBrace isShortArray isArrayDestructing	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	PHP-CS-Fixer_PHP-CS-Fixer_6bf7ba5282dbbcfe67afa4e7c137cd74dcc66597_28_0	buggy: (?<types> # alternation of several types separated by `|` context: namespace PhpCsFixer\DocBlock; use PhpCsFixer\Preg; use PhpCsFixer\Tokenizer\Analyzer\Analysis\NamespaceAnalysis; use PhpCsFixer\Tokenizer\Analyzer\Analysis\NamespaceUseAnalysis; final class TypeExpression { public const REGEX_TYPES = ' (?<types> # alternation of several types separated by `|` (?<types> # alternation of several types separated by `|` (?<type> # single type \?? # optionally nullable (?: (?<object_like_array> array\h*\{ (?<object_like_array_key> \h*[^?:\h]+\h*\??\h*:\h*(?&types) ) (?:\h*,(?&object_like_array_key))*	type_info:  global_variable:  function_name: __construct getTypes getCommonType allowsNull getParentType normalize getAliases	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	PHP-CS-Fixer_PHP-CS-Fixer_6bf7ba5282dbbcfe67afa4e7c137cd74dcc66597_28_0	"buggy: (?: # intersection \h*&\h* (?&type) )* context: | [\d.]+ | \'[^\']+?\' | ""[^""]+?"" | [@$]?(?:this | self | static) (?-i) ) | (?<name> # single type, e.g.: `null`, `int`, `\Foo\Bar` [\\\\\w-]++ ) ) (?: # intersection \h*&\h* (?&type) )* (?: # intersection \h*&\h* (?&type) )* ) (?: \h*\|\h* (?&type) )* )"	type_info:  global_variable:  function_name: __construct getTypes getCommonType allowsNull getParentType normalize getAliases	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	PHP-CS-Fixer_PHP-CS-Fixer_6bf7ba5282dbbcfe67afa4e7c137cd74dcc66597_28_0	buggy: \h*\|\h* context: (?<name> # single type, e.g.: `null`, `int`, `\Foo\Bar` [\\\\\w-]++ ) ) (?: # intersection \h*&\h* (?&type) )* ) (?: \h*\|\h* \h*\|\h* (?&type) )* ) '; private $types = []; private $namespace;	type_info: types:array  global_variable:  function_name: __construct getTypes getCommonType allowsNull getParentType normalize getAliases	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	PHP-CS-Fixer_PHP-CS-Fixer_6bf7ba5282dbbcfe67afa4e7c137cd74dcc66597_28_0	buggy: '/^'.preg_quote($matches['type'], '/').'(\h*\|\h*)?/', context: { while ('' !== $value) { Preg::match( '{^'.self::REGEX_TYPES.'$}x', $value, $matches ); $this->types[] = $matches['type']; $value = Preg::replace( '/^'.preg_quote($matches['type'], '/').'(\h*\|\h*)?/', '/^'.preg_quote($matches['type'], '/').'(\h*\|\h*)?/', '', $value ); } $this->namespace = $namespace; $this->namespaceUses = $namespaceUses; }	type_info: value:unknown  global_variable:  function_name: __construct getTypes getCommonType allowsNull getParentType normalize getAliases	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	PHP-CS-Fixer_PHP-CS-Fixer_6bf7ba5282dbbcfe67afa4e7c137cd74dcc66597_28_1	buggy: while ($tokens[$index]->isGivenKind([T_NS_SEPARATOR, T_STATIC, T_STRING, CT::T_ARRAY_TYPEHINT, T_CALLABLE, CT::T_TYPE_INTERSECTION])) { context: if ($tokens[$index]->isGivenKind(CT::T_NULLABLE_TYPE)) { $allowsNull = true; $index = $tokens->getNextMeaningfulToken($index); } $types = []; while (true) { $type = ''; while ($tokens[$index]->isGivenKind([T_NS_SEPARATOR, T_STATIC, T_STRING, CT::T_ARRAY_TYPEHINT, T_CALLABLE, CT::T_TYPE_INTERSECTION])) { while ($tokens[$index]->isGivenKind([T_NS_SEPARATOR, T_STATIC, T_STRING, CT::T_ARRAY_TYPEHINT, T_CALLABLE, CT::T_TYPE_INTERSECTION])) { $type .= $tokens[$index]->getContent(); $index = $tokens->getNextMeaningfulToken($index); } if ('' === $type) { break; } $types[] = $type;	type_info: index:unknown allowsNull:boolean types:array type:string  global_variable:  function_name: getDefinition doFoo doFoo doFoo doFoo getPriority isCandidate applyFix createConfigurationDefinition findDocumentedElement fixFunctionDocComment fixPropertyDocComment fixClassDocComment getArgumentsInfo getReturnTypeInfo parseTypeHint annotationIsSuperfluous toComparableNames removeSuperfluousInheritDoc removeSuperfluousModifierAnnotation	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	PHP-CS-Fixer_PHP-CS-Fixer_6bf7ba5282dbbcfe67afa4e7c137cd74dcc66597_28_1	buggy: if (!$tokens[$index]->isGivenKind(CT::T_TYPE_ALTERNATION)) { context: $type .= $tokens[$index]->getContent(); $index = $tokens->getNextMeaningfulToken($index); } if ('' === $type) { break; } $types[] = $type; if (!$tokens[$index]->isGivenKind(CT::T_TYPE_ALTERNATION)) { if (!$tokens[$index]->isGivenKind(CT::T_TYPE_ALTERNATION)) { break; } $index = $tokens->getNextMeaningfulToken($index); } return [ 'types' => $types, 'allows_null' => $allowsNull,	type_info: index:unknown allowsNull:boolean types:array type:string  global_variable:  function_name: getDefinition doFoo doFoo doFoo doFoo getPriority isCandidate applyFix createConfigurationDefinition findDocumentedElement fixFunctionDocComment fixPropertyDocComment fixClassDocComment getArgumentsInfo getReturnTypeInfo parseTypeHint annotationIsSuperfluous toComparableNames removeSuperfluousInheritDoc removeSuperfluousModifierAnnotation	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	PHP-CS-Fixer_PHP-CS-Fixer_d9ff4522539de82ea3c16a8843fb9b4d0df8691c_29_0	buggy:  context: #!/usr/bin/env php <?php require_once __DIR__.'/../vendor/autoload.php'; $version = [	type_info: version:array  global_variable:  function_name: 	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	PHP-CS-Fixer_PHP-CS-Fixer_d9ff4522539de82ea3c16a8843fb9b4d0df8691c_29_1	buggy: return isset($tokens[0]) && $tokens[0]->isGivenKind(T_OPEN_TAG) && $tokens->isMonolithicPhp(); context: public function isCandidate(Tokens $tokens): bool { return isset($tokens[0]) && $tokens[0]->isGivenKind(T_OPEN_TAG) && $tokens->isMonolithicPhp(); return isset($tokens[0]) && $tokens[0]->isGivenKind(T_OPEN_TAG) && $tokens->isMonolithicPhp(); }	type_info:  global_variable:  function_name: getDefinition isCandidate getPriority applyFix createConfigurationDefinition getHeaderAsComment findHeaderCommentCurrentIndex findHeaderCommentInsertionIndex fixWhiteSpaceAroundHeader getLineBreakCount removeHeader insertHeader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	PHP-CS-Fixer_PHP-CS-Fixer_d9ff4522539de82ea3c16a8843fb9b4d0df8691c_29_1	buggy: if ('after_open' === $location) { context: private function findHeaderCommentInsertionIndex(Tokens $tokens, string $location): int { if ('after_open' === $location) { if ('after_open' === $location) { return 1; } $index = $tokens->getNextMeaningfulToken(0); if (null === $index) { return 1; } if (!$tokens[$index]->isGivenKind(T_DECLARE)) {	type_info: location:unknown index:unknown  global_variable:  function_name: getDefinition isCandidate getPriority applyFix createConfigurationDefinition getHeaderAsComment findHeaderCommentCurrentIndex findHeaderCommentInsertionIndex fixWhiteSpaceAroundHeader getLineBreakCount removeHeader insertHeader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	PHP-CS-Fixer_PHP-CS-Fixer_d9ff4522539de82ea3c16a8843fb9b4d0df8691c_29_1	buggy: $index = $tokens->getNextMeaningfulToken(0); context: private function findHeaderCommentInsertionIndex(Tokens $tokens, string $location): int { if ('after_open' === $location) { return 1; } $index = $tokens->getNextMeaningfulToken(0); $index = $tokens->getNextMeaningfulToken(0); if (null === $index) { return 1; } if (!$tokens[$index]->isGivenKind(T_DECLARE)) { return 1; } $next = $tokens->getNextMeaningfulToken($index);	type_info: location:unknown index:unknown next:unknown  global_variable:  function_name: getDefinition isCandidate getPriority applyFix createConfigurationDefinition getHeaderAsComment findHeaderCommentCurrentIndex findHeaderCommentInsertionIndex fixWhiteSpaceAroundHeader getLineBreakCount removeHeader insertHeader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	PHP-CS-Fixer_PHP-CS-Fixer_d9ff4522539de82ea3c16a8843fb9b4d0df8691c_29_1	buggy: return 1; context: private function findHeaderCommentInsertionIndex(Tokens $tokens, string $location): int { if ('after_open' === $location) { return 1; } $index = $tokens->getNextMeaningfulToken(0); if (null === $index) { return 1; return 1; } if (!$tokens[$index]->isGivenKind(T_DECLARE)) { return 1; } $next = $tokens->getNextMeaningfulToken($index); if (null === $next || !$tokens[$next]->equals('(')) { return 1;	type_info: location:unknown index:unknown next:unknown  global_variable:  function_name: getDefinition isCandidate getPriority applyFix createConfigurationDefinition getHeaderAsComment findHeaderCommentCurrentIndex findHeaderCommentInsertionIndex fixWhiteSpaceAroundHeader getLineBreakCount removeHeader insertHeader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	PHP-CS-Fixer_PHP-CS-Fixer_d9ff4522539de82ea3c16a8843fb9b4d0df8691c_29_1	buggy: return 1; context: return 1; } $index = $tokens->getNextMeaningfulToken(0); if (null === $index) { return 1; } if (!$tokens[$index]->isGivenKind(T_DECLARE)) { return 1; return 1; } $next = $tokens->getNextMeaningfulToken($index); if (null === $next || !$tokens[$next]->equals('(')) { return 1; } $next = $tokens->getNextMeaningfulToken($next);	type_info: index:unknown next:unknown  global_variable:  function_name: getDefinition isCandidate getPriority applyFix createConfigurationDefinition getHeaderAsComment findHeaderCommentCurrentIndex findHeaderCommentInsertionIndex fixWhiteSpaceAroundHeader getLineBreakCount removeHeader insertHeader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	PHP-CS-Fixer_PHP-CS-Fixer_d9ff4522539de82ea3c16a8843fb9b4d0df8691c_29_1	buggy: return 1; context: $next = $tokens->getNextMeaningfulToken($index); if (null === $next || !$tokens[$next]->equals('(')) { return 1; } $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->equals([T_STRING, 'strict_types'], false)) { return 1; return 1; } $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->equals('=')) { return 1; } $next = $tokens->getNextMeaningfulToken($next);	type_info: index:unknown next:unknown  global_variable:  function_name: getDefinition isCandidate getPriority applyFix createConfigurationDefinition getHeaderAsComment findHeaderCommentCurrentIndex findHeaderCommentInsertionIndex fixWhiteSpaceAroundHeader getLineBreakCount removeHeader insertHeader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	PHP-CS-Fixer_PHP-CS-Fixer_d9ff4522539de82ea3c16a8843fb9b4d0df8691c_29_1	buggy: return 1; context: $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->equals([T_STRING, 'strict_types'], false)) { return 1; } $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->equals('=')) { return 1; return 1; } $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->isGivenKind(T_LNUMBER)) { return 1; } $next = $tokens->getNextMeaningfulToken($next);	type_info: next:unknown  global_variable:  function_name: getDefinition isCandidate getPriority applyFix createConfigurationDefinition getHeaderAsComment findHeaderCommentCurrentIndex findHeaderCommentInsertionIndex fixWhiteSpaceAroundHeader getLineBreakCount removeHeader insertHeader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	PHP-CS-Fixer_PHP-CS-Fixer_d9ff4522539de82ea3c16a8843fb9b4d0df8691c_29_1	buggy: return 1; context: $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->equals('=')) { return 1; } $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->isGivenKind(T_LNUMBER)) { return 1; return 1; } $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->equals(')')) { return 1; } $next = $tokens->getNextMeaningfulToken($next);	type_info: next:unknown  global_variable:  function_name: getDefinition isCandidate getPriority applyFix createConfigurationDefinition getHeaderAsComment findHeaderCommentCurrentIndex findHeaderCommentInsertionIndex fixWhiteSpaceAroundHeader getLineBreakCount removeHeader insertHeader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	PHP-CS-Fixer_PHP-CS-Fixer_d9ff4522539de82ea3c16a8843fb9b4d0df8691c_29_1	buggy: return 1; context: $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->isGivenKind(T_LNUMBER)) { return 1; } $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->equals(')')) { return 1; return 1; } $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->equals(';')) { return 1; } return $next + 1;	type_info: next:unknown  global_variable:  function_name: getDefinition isCandidate getPriority applyFix createConfigurationDefinition getHeaderAsComment findHeaderCommentCurrentIndex findHeaderCommentInsertionIndex fixWhiteSpaceAroundHeader getLineBreakCount removeHeader insertHeader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	PHP-CS-Fixer_PHP-CS-Fixer_d9ff4522539de82ea3c16a8843fb9b4d0df8691c_29_1	buggy: return 1; context: $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->equals(')')) { return 1; } $next = $tokens->getNextMeaningfulToken($next); if (null === $next || !$tokens[$next]->equals(';')) { return 1; return 1; } return $next + 1; } private function fixWhiteSpaceAroundHeader(Tokens $tokens, int $headerIndex): void { $lineEnding = $this->whitespacesConfig->getLineEnding();	type_info: lineEnding:unknown next:unknown headerIndex:unknown  global_variable:  function_name: getDefinition isCandidate getPriority applyFix createConfigurationDefinition getHeaderAsComment findHeaderCommentCurrentIndex findHeaderCommentInsertionIndex fixWhiteSpaceAroundHeader getLineBreakCount removeHeader insertHeader	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	PHP-CS-Fixer_PHP-CS-Fixer_0083ce7835ae8e37e0036ff1ad29abf7dac46f01_30_0	buggy: $regex = '/@param\s+(?:\S|\s(?!\$))++\s\$\S+\s+\S/'; context: private function annotationIsSuperfluous(Annotation $annotation, array $info, array $symbolShortNames): bool { if ('param' === $annotation->getTag()->getName()) { $regex = '/@param\s+(?:\S|\s(?!\$))++\s\$\S+\s+\S/'; $regex = '/@param\s+(?:\S|\s(?!\$))++\s\$\S+\s+\S/'; } elseif ('var' === $annotation->getTag()->getName()) { $regex = '/@var\s+\S+(\s+\$\S+)?(\s+)(?!\*+\/)([^$\s]+)/'; } else { $regex = '/@return\s+\S+\s+\S/'; } if (Preg::match($regex, $annotation->getContent())) { return false; }	type_info: info:array regex:string  global_variable:  function_name: getDefinition doFoo doFoo doFoo doFoo getPriority isCandidate applyFix createConfigurationDefinition findDocumentedElement fixFunctionDocComment fixPropertyDocComment fixClassDocComment getArgumentsInfo getReturnTypeInfo parseTypeHint annotationIsSuperfluous toComparableNames removeSuperfluousInheritDoc removeSuperfluousModifierAnnotation	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	PHP-CS-Fixer_PHP-CS-Fixer_0a19733dc2603059c7ec15615d5c715c1baadd4a_31_0	buggy: $this->lines[0]->setContent(Preg::replace($pattern, implode('|', $types), $this->lines[0]->getContent(), 1)); context: public function setTypes(array $types): void { $pattern = '/'.preg_quote($this->getTypesContent(), '/').'/'; $this->lines[0]->setContent(Preg::replace($pattern, implode('|', $types), $this->lines[0]->getContent(), 1)); $this->lines[0]->setContent(Preg::replace($pattern, implode('|', $types), $this->lines[0]->getContent(), 1)); $this->clearCache(); }	type_info: namespace:unknown pattern:string  global_variable: namespace: unknown function_name: __construct __toString getTagsWithTypes getStart getEnd getTag getTypeExpression getVariableName getTypes setTypes getNormalizedTypes remove getContent supportTypes getTypesContent clearCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	PHP-CS-Fixer_PHP-CS-Fixer_0a19733dc2603059c7ec15615d5c715c1baadd4a_31_1	buggy: \h*[|&]\h* context: | [@$]?(?:this | self | static) (?-i) ) | (?<name> # single type, e.g.: `null`, `int`, `\Foo\Bar` [\\\\\w-]++ ) ) ) (?: \h*[|&]\h* \h*[|&]\h* (?&type) )* ) '; private $value; private $isUnionType = false;	type_info: isUnionType:boolean value:unknown  global_variable: value: unknown function_name: __construct toString getTypes sortUnionTypes getCommonType allowsNull parse parseCommaSeparatedInnerTypes parseObjectLikeArrayKeys inner getParentType normalize getAliases	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	PHP-CS-Fixer_PHP-CS-Fixer_0a19733dc2603059c7ec15615d5c715c1baadd4a_31_1	buggy:  context: )* ) '; private $value; private $isUnionType = false; private $innerTypeExpressions = []; private $namespace; private $namespaceUses; public function __construct(string $value, ?NamespaceAnalysis $namespace, array $namespaceUses) { $this->value = $value; $this->namespace = $namespace; $this->namespaceUses = $namespaceUses;	type_info: isUnionType:boolean innerTypeExpressions:array value:unknown  global_variable: value: unknown function_name: __construct toString getTypes sortUnionTypes getCommonType allowsNull parse parseCommaSeparatedInnerTypes parseObjectLikeArrayKeys inner getParentType normalize getAliases	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	PHP-CS-Fixer_PHP-CS-Fixer_0a19733dc2603059c7ec15615d5c715c1baadd4a_31_1	buggy: public function sortUnionTypes(callable $compareCallback): void context: static function (array $type) { return $type['expression']->toString(); }, $this->innerTypeExpressions ); } return [$this->value]; } public function sortUnionTypes(callable $compareCallback): void public function sortUnionTypes(callable $compareCallback): void { foreach (array_reverse($this->innerTypeExpressions) as [ 'start_index' => $startIndex, 'expression' => $inner, ]) {	type_info: type:string value:unknown  global_variable: value: unknown function_name: __construct toString getTypes sortUnionTypes getCommonType allowsNull parse parseCommaSeparatedInnerTypes parseObjectLikeArrayKeys inner getParentType normalize getAliases	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	PHP-CS-Fixer_PHP-CS-Fixer_0a19733dc2603059c7ec15615d5c715c1baadd4a_31_1	buggy: $inner->sortUnionTypes($compareCallback); context: public function sortUnionTypes(callable $compareCallback): void { foreach (array_reverse($this->innerTypeExpressions) as [ 'start_index' => $startIndex, 'expression' => $inner, ]) { $initialValueLength = \strlen($inner->toString()); $inner->sortUnionTypes($compareCallback); $inner->sortUnionTypes($compareCallback); $this->value = substr_replace( $this->value, $inner->toString(), $startIndex, $initialValueLength ); } if ($this->isUnionType) {	type_info: initialValueLength:unknown value:unknown  global_variable: value: unknown function_name: __construct toString getTypes sortUnionTypes getCommonType allowsNull parse parseCommaSeparatedInnerTypes parseObjectLikeArrayKeys inner getParentType normalize getAliases	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	PHP-CS-Fixer_PHP-CS-Fixer_0a19733dc2603059c7ec15615d5c715c1baadd4a_31_1	buggy: $this->value = implode('|', $this->getTypes()); context: static function (array $type): self { return $type['expression']; }, $compareCallback ); $this->value = implode('|', $this->getTypes()); $this->value = implode('|', $this->getTypes());	type_info: type:string value:unknown  global_variable: value: unknown function_name: __construct toString getTypes sortUnionTypes getCommonType allowsNull parse parseCommaSeparatedInnerTypes parseObjectLikeArrayKeys inner getParentType normalize getAliases	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	PHP-CS-Fixer_PHP-CS-Fixer_0a19733dc2603059c7ec15615d5c715c1baadd4a_31_1	buggy:  context: static function (array $type): self { return $type['expression']; }, $compareCallback ); $this->value = implode('|', $this->getTypes()); } } public function getCommonType(): ?string { $aliases = $this->getAliases(); $mainType = null; foreach ($this->getTypes() as $type) {	type_info: aliases:unknown mainType:unknown type:string value:unknown  global_variable: value: unknown function_name: __construct toString getTypes sortUnionTypes getCommonType allowsNull parse parseCommaSeparatedInnerTypes parseObjectLikeArrayKeys inner getParentType normalize getAliases	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	PHP-CS-Fixer_PHP-CS-Fixer_0a19733dc2603059c7ec15615d5c715c1baadd4a_31_1	buggy:  context: Preg::match( '{^'.self::REGEX_TYPES.'$}x', $value, $matches ); if ([] === $matches) { return; } $index = '' !== $matches['nullable'] ? 1 : 0; if ($matches['type'] !== $matches['types']) { $this->isUnionType = true; while (true) { $innerType = $matches['type']; $newValue = Preg::replace( '/^'.preg_quote($innerType, '/').'(\h*[|&]\h*)?/',	type_info: value:unknown index:integer innerType:unknown newValue:unknown  global_variable: value: unknown function_name: __construct toString getTypes sortUnionTypes getCommonType allowsNull parse parseCommaSeparatedInnerTypes parseObjectLikeArrayKeys inner getParentType normalize getAliases	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	PHP-CS-Fixer_PHP-CS-Fixer_0a19733dc2603059c7ec15615d5c715c1baadd4a_31_2	buggy: $typeExpression->sortUnionTypes( context: $normalizeType = static function (string $type): string { return Preg::replace('/^\\??\\\?/', '', $type); }; $typeExpression->sortUnionTypes( $typeExpression->sortUnionTypes( function (TypeExpression $a, TypeExpression $b) use ($normalizeType): int { $a = $normalizeType($a->toString()); $b = $normalizeType($b->toString()); $lowerCaseA = strtolower($a); $lowerCaseB = strtolower($b); if ('none' !== $this->configuration['null_adjustment']) { if ('null' === $lowerCaseA && 'null' !== $lowerCaseB) { return 'always_last' === $this->configuration['null_adjustment'] ? 1 : -1; }	type_info: normalizeType:unknown a:unknown b:unknown lowerCaseA:unknown lowerCaseB:unknown typeExpression:unknown  global_variable:  function_name: getDefinition getPriority isCandidate createConfigurationDefinition applyFix sortTypes sortJoinedTypes	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	PHP-CS-Fixer_PHP-CS-Fixer_a07f453362987f620a51683b8d2ec1a247278986_32_0	buggy:  context: private function fixFunctionParameters(Tokens $tokens, array $arguments): void { foreach (array_reverse($arguments) as $argumentInfo) { if ( !$argumentInfo->hasTypeAnalysis() || str_contains($argumentInfo->getTypeAnalysis()->getName(), '|') || !$argumentInfo->hasDefault() || 'null' !== strtolower($argumentInfo->getDefault()) ) { continue; } $argumentTypeInfo = $argumentInfo->getTypeAnalysis();	type_info: arguments:unknown argumentTypeInfo:unknown  global_variable:  function_name: getDefinition sample sample isCandidate getPriority createConfigurationDefinition applyFix fixFunctionParameters	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	PHP-CS-Fixer_PHP-CS-Fixer_a07f453362987f620a51683b8d2ec1a247278986_32_0	buggy: if ( \PHP_VERSION_ID >= 80000 && false === $this->configuration['use_nullable_type_declaration'] ) { context: if ( !$argumentInfo->hasTypeAnalysis() || str_contains($argumentInfo->getTypeAnalysis()->getName(), '|') || !$argumentInfo->hasDefault() || 'null' !== strtolower($argumentInfo->getDefault()) ) { continue; } $argumentTypeInfo = $argumentInfo->getTypeAnalysis(); if ( \PHP_VERSION_ID >= 80000 && false === $this->configuration['use_nullable_type_declaration'] ) { if ( \PHP_VERSION_ID >= 80000 && false === $this->configuration['use_nullable_type_declaration'] ) { $visibility = $tokens[$tokens->getPrevMeaningfulToken($argumentTypeInfo->getStartIndex())]; if ($visibility->isGivenKind([ CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PUBLIC, CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PROTECTED, CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PRIVATE,	type_info: argumentTypeInfo:unknown visibility:unknown  global_variable:  function_name: getDefinition sample sample isCandidate getPriority createConfigurationDefinition applyFix fixFunctionParameters	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	PHP-CS-Fixer_PHP-CS-Fixer_a07f453362987f620a51683b8d2ec1a247278986_32_0	buggy: if ($visibility->isGivenKind([ CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PUBLIC, CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PROTECTED, CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PRIVATE, ])) { context: } $argumentTypeInfo = $argumentInfo->getTypeAnalysis(); if ( \PHP_VERSION_ID >= 80000 && false === $this->configuration['use_nullable_type_declaration'] ) { $visibility = $tokens[$tokens->getPrevMeaningfulToken($argumentTypeInfo->getStartIndex())]; if ($visibility->isGivenKind([ CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PUBLIC, CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PROTECTED, CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PRIVATE, ])) { if ($visibility->isGivenKind([ CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PUBLIC, CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PROTECTED, CT::T_CONSTRUCTOR_PROPERTY_PROMOTION_PRIVATE, ])) { continue; } } if (true === $this->configuration['use_nullable_type_declaration']) {	type_info: argumentTypeInfo:unknown visibility:unknown  global_variable:  function_name: getDefinition sample sample isCandidate getPriority createConfigurationDefinition applyFix fixFunctionParameters	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	PHP-CS-Fixer_PHP-CS-Fixer_9743b6f318d222933334fc14a059180e3ae56018_33_0	buggy: $ifToken = $tokens[$ifIndex]; if (!$ifToken->isGivenKind([T_IF, T_ELSEIF])) { context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { for ($ifIndex = $tokens->count() - 1; 0 <= $ifIndex; --$ifIndex) { $ifToken = $tokens[$ifIndex]; if (!$ifToken->isGivenKind([T_IF, T_ELSEIF])) { $ifToken = $tokens[$ifIndex]; if (!$ifToken->isGivenKind([T_IF, T_ELSEIF])) { continue; } $startParenthesisIndex = $tokens->getNextTokenOfKind($ifIndex, ['(']); $endParenthesisIndex = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $startParenthesisIndex); $firstCandidateIndex = $tokens->getNextMeaningfulToken($endParenthesisIndex); foreach ($this->sequences as $sequenceSpec) { $sequenceFound = $tokens->findSequence($sequenceSpec['sequence'], $firstCandidateIndex);	type_info: ifIndex:unknown ifToken:unknown startParenthesisIndex:unknown endParenthesisIndex:unknown firstCandidateIndex:unknown sequenceFound:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	PHP-CS-Fixer_PHP-CS-Fixer_9743b6f318d222933334fc14a059180e3ae56018_33_0	buggy:  context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { for ($ifIndex = $tokens->count() - 1; 0 <= $ifIndex; --$ifIndex) { $ifToken = $tokens[$ifIndex]; if (!$ifToken->isGivenKind([T_IF, T_ELSEIF])) { continue; } $startParenthesisIndex = $tokens->getNextTokenOfKind($ifIndex, ['(']); $endParenthesisIndex = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $startParenthesisIndex); $firstCandidateIndex = $tokens->getNextMeaningfulToken($endParenthesisIndex); foreach ($this->sequences as $sequenceSpec) { $sequenceFound = $tokens->findSequence($sequenceSpec['sequence'], $firstCandidateIndex); if (null === $sequenceFound) { continue; }	type_info: ifIndex:unknown ifToken:unknown startParenthesisIndex:unknown endParenthesisIndex:unknown firstCandidateIndex:unknown sequenceFound:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	PHP-CS-Fixer_PHP-CS-Fixer_2b1ecae344c43f439a7cd65b5864d9ca3607c070_34_0	buggy: 'is_resource', context: 'is_boolean', 'is_callable', 'is_double', 'is_float', 'is_int', 'is_integer', 'is_long', 'is_numeric', 'is_object', 'is_real', 'is_resource', 'is_resource', 'is_scalar', 'is_string', ]); } if (PhpUnitTargetVersion::fulfills($this->configuration['target'], PhpUnitTargetVersion::VERSION_5_0)) { $this->functions = array_merge($this->functions, [ 'is_infinite', 'is_nan',	type_info:  global_variable:  function_name: configure isRisky getDefinition testSomeTest testSomeTest getPriority applyPhpUnitClassFix createConfigurationDefinition fixAssertTrueFalse fixAssertSameEquals getPreviousAssertCall removeFunctionCall swapArguments cloneAndClearTokens	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	PHP-CS-Fixer_PHP-CS-Fixer_90786d9c8feebefb6aec2a37135f9976762a642e_35_0	buggy:  context: namespace PhpCsFixer\Fixer\Casing; use PhpCsFixer\AbstractFixer; use PhpCsFixer\FixerDefinition\CodeSample; use PhpCsFixer\FixerDefinition\FixerDefinition; use PhpCsFixer\FixerDefinition\FixerDefinitionInterface; use PhpCsFixer\Tokenizer\Analyzer\Analysis\NamespaceAnalysis; use PhpCsFixer\Tokenizer\Analyzer\NamespacesAnalyzer; use PhpCsFixer\Tokenizer\CT; use PhpCsFixer\Tokenizer\Token; use PhpCsFixer\Tokenizer\Tokens; final class ClassReferenceNameCasingFixer extends AbstractFixer { public function getDefinition(): FixerDefinitionInterface { return new FixerDefinition( 'When referencing a class it must be written using the correct casing.',	type_info:  global_variable:  function_name: getDefinition isCandidate applyFix getClassReference getClassNames	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	PHP-CS-Fixer_PHP-CS-Fixer_90786d9c8feebefb6aec2a37135f9976762a642e_35_0	buggy:  context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { $namespacesAnalyzer = new NamespacesAnalyzer(); $classNames = $this->getClassNames(); foreach ($namespacesAnalyzer->getDeclarations($tokens) as $namespace) { foreach ($this->getClassReference($tokens, $namespace) as $reference) { $currentContent = $tokens[$reference]->getContent(); $lowerCurrentContent = strtolower($currentContent); if (isset($classNames[$lowerCurrentContent]) && $currentContent !== $classNames[$lowerCurrentContent]) { $tokens[$reference] = new Token([T_STRING, $classNames[$lowerCurrentContent]]); }	type_info: namespacesAnalyzer:unknown classNames:unknown currentContent:unknown lowerCurrentContent:unknown  global_variable:  function_name: getDefinition isCandidate applyFix getClassReference getClassNames	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	PHP-CS-Fixer_PHP-CS-Fixer_90786d9c8feebefb6aec2a37135f9976762a642e_35_0	buggy:  context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { $namespacesAnalyzer = new NamespacesAnalyzer(); $classNames = $this->getClassNames(); foreach ($namespacesAnalyzer->getDeclarations($tokens) as $namespace) { foreach ($this->getClassReference($tokens, $namespace) as $reference) { $currentContent = $tokens[$reference]->getContent(); $lowerCurrentContent = strtolower($currentContent); if (isset($classNames[$lowerCurrentContent]) && $currentContent !== $classNames[$lowerCurrentContent]) { $tokens[$reference] = new Token([T_STRING, $classNames[$lowerCurrentContent]]); } } } }	type_info: namespacesAnalyzer:unknown classNames:unknown currentContent:unknown lowerCurrentContent:unknown  global_variable:  function_name: getDefinition isCandidate applyFix getClassReference getClassNames	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	PHP-CS-Fixer_PHP-CS-Fixer_90786d9c8feebefb6aec2a37135f9976762a642e_35_0	buggy: if (isset($classNames[$lowerCurrentContent]) && $currentContent !== $classNames[$lowerCurrentContent]) { context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { $namespacesAnalyzer = new NamespacesAnalyzer(); $classNames = $this->getClassNames(); foreach ($namespacesAnalyzer->getDeclarations($tokens) as $namespace) { foreach ($this->getClassReference($tokens, $namespace) as $reference) { $currentContent = $tokens[$reference]->getContent(); $lowerCurrentContent = strtolower($currentContent); if (isset($classNames[$lowerCurrentContent]) && $currentContent !== $classNames[$lowerCurrentContent]) { if (isset($classNames[$lowerCurrentContent]) && $currentContent !== $classNames[$lowerCurrentContent]) { $tokens[$reference] = new Token([T_STRING, $classNames[$lowerCurrentContent]]); } } } }	type_info: namespacesAnalyzer:unknown classNames:unknown currentContent:unknown lowerCurrentContent:unknown  global_variable:  function_name: getDefinition isCandidate applyFix getClassReference getClassNames	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	PHP-CS-Fixer_PHP-CS-Fixer_f7750fdeab7a4ef0bd60a23eee7aa89dccc3aea2_36_0	buggy:  context: private function injectAlignmentPlaceholders(Tokens $tokens, int $startAt, int $endAt, string $tokenContent): void { for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index]; $content = $token->getContent(); if ( strtolower($content) === $tokenContent && $this->tokensAnalyzer->isBinaryOperator($index) && ('=' !== $content || !$this->isEqualPartOfDeclareStatement($tokens, $index)) ) { $tokens[$index] = new Token(sprintf(self::ALIGN_PLACEHOLDER, $this->deepestLevel).$content);	type_info: index:unknown tokenContent:unknown content:unknown token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	PHP-CS-Fixer_PHP-CS-Fixer_f7750fdeab7a4ef0bd60a23eee7aa89dccc3aea2_36_0	buggy: if ($token->isGivenKind(T_FUNCTION)) { context: if ( strtolower($content) === $tokenContent && $this->tokensAnalyzer->isBinaryOperator($index) && ('=' !== $content || !$this->isEqualPartOfDeclareStatement($tokens, $index)) ) { $tokens[$index] = new Token(sprintf(self::ALIGN_PLACEHOLDER, $this->deepestLevel).$content); continue; } if ($token->isGivenKind(T_FUNCTION)) { if ($token->isGivenKind(T_FUNCTION)) { ++$this->deepestLevel; continue; } if ($token->equals('(')) { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue;	type_info: index:unknown tokenContent:unknown content:unknown token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	PHP-CS-Fixer_PHP-CS-Fixer_f7750fdeab7a4ef0bd60a23eee7aa89dccc3aea2_36_0	buggy:  context: && $this->tokensAnalyzer->isBinaryOperator($index) && ('=' !== $content || !$this->isEqualPartOfDeclareStatement($tokens, $index)) ) { $tokens[$index] = new Token(sprintf(self::ALIGN_PLACEHOLDER, $this->deepestLevel).$content); continue; } if ($token->isGivenKind(T_FUNCTION)) { ++$this->deepestLevel; continue; } if ($token->equals('(')) { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue; }	type_info: index:unknown content:unknown token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	PHP-CS-Fixer_PHP-CS-Fixer_f7750fdeab7a4ef0bd60a23eee7aa89dccc3aea2_36_0	buggy: if ($token->equals('(')) { context: continue; } if ($token->isGivenKind(T_FUNCTION)) { ++$this->deepestLevel; continue; } if ($token->equals('(')) { if ($token->equals('(')) { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue; } if ($token->equals('[')) { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_INDEX_SQUARE_BRACE, $index); continue;	type_info: index:unknown token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	PHP-CS-Fixer_PHP-CS-Fixer_c7987c2c5810a954330ee50eb3729895c0910a33_37_0	buggy: if (!$tokens[$expectedIndex]->isGivenKind(T_LNUMBER)) { context: private function fixAssertSameEquals(Tokens $tokens, array $assertCall): void { $expectedIndex = $tokens->getNextMeaningfulToken($assertCall['openBraceIndex']); if (!$tokens[$expectedIndex]->isGivenKind(T_LNUMBER)) { if (!$tokens[$expectedIndex]->isGivenKind(T_LNUMBER)) { return; } $commaIndex = $tokens->getNextMeaningfulToken($expectedIndex); if (!$tokens[$commaIndex]->equals(',')) { return; } $countCallIndex = $tokens->getNextMeaningfulToken($commaIndex);	type_info: commaIndex:unknown expectedIndex:unknown countCallIndex:unknown  global_variable:  function_name: configure isRisky getDefinition testSomeTest testSomeTest getPriority applyPhpUnitClassFix createConfigurationDefinition fixAssertTrueFalse fixAssertSameEquals getPreviousAssertCall removeFunctionCall swapArguments cloneAndClearTokens	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	PHP-CS-Fixer_PHP-CS-Fixer_61a5df72523e19e99fab454637f5106fdb344c25_38_0	buggy: $classyTokens = [T_CLASS, T_TRAIT, T_INTERFACE]; context: private function fixIndents(Tokens $tokens): void { $classyTokens = [T_CLASS, T_TRAIT, T_INTERFACE]; $classyTokens = [T_CLASS, T_TRAIT, T_INTERFACE]; $classyAndFunctionTokens = array_merge([T_FUNCTION], $classyTokens); $controlTokens = $this->getControlTokens(); $indentTokens = array_filter( array_merge($classyAndFunctionTokens, $controlTokens), static function (int $item): bool { return T_SWITCH !== $item; } ); $tokensAnalyzer = new TokensAnalyzer($tokens);	type_info: tokensAnalyzer:unknown controlTokens:unknown classyTokens:array classyAndFunctionTokens:unknown indentTokens:unknown tokens:array  global_variable:  function_name: getDefinition bar bar getPriority configure isCandidate applyFix createConfigurationDefinition createProxyFixers fixCommentBeforeBrace fixDoWhile fixIndents fixMissingControlBraces fixSpaceAroundToken findParenthesisEnd findStatementEnd getControlTokens getControlContinuationTokens getControlContinuationTokensForOpeningToken getFinalControlContinuationTokensForOpeningToken ensureWhitespaceAtIndexAndIndentMultilineComment isMultilined isCommentWithFixableIndentation getSiblingContinuousSingleLineComment getControlStructureContinuationPositionFixer	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	PHP-CS-Fixer_PHP-CS-Fixer_c8501a33cfc99ee10de5e24c7db2da9bb651f7ab_39_0	buggy: '{^(?:\s*\*|/\*\*)\s*@'.$name.'\s+'.TypeExpression::REGEX_TYPES.'(?:(?:[*\h\v]|\&[\.\$]).*)?\r?$}sx', context: private function getTypesContent(): string { if (null === $this->typesContent) { $name = $this->getTag()->getName(); if (!$this->supportTypes()) { throw new \RuntimeException('This tag does not support types.'); } $matchingResult = Preg::match( '{^(?:\s*\*|/\*\*)\s*@'.$name.'\s+'.TypeExpression::REGEX_TYPES.'(?:(?:[*\h\v]|\&[\.\$]).*)?\r?$}sx', '{^(?:\s*\*|/\*\*)\s*@'.$name.'\s+'.TypeExpression::REGEX_TYPES.'(?:(?:[*\h\v]|\&[\.\$]).*)?\r?$}sx', $this->lines[0]->getContent(), $matches ); $this->typesContent = 1 === $matchingResult ? $matches['types'] : ''; } return $this->typesContent;	type_info: namespace:unknown name:unknown matchingResult:unknown  global_variable: namespace: unknown function_name: __construct __toString getTagsWithTypes getStart getEnd getTag getTypeExpression getVariableName getTypes setTypes getNormalizedTypes remove getContent supportTypes getTypesContent clearCache	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	PHP-CS-Fixer_PHP-CS-Fixer_bd7296262f39d508e496799cbbc0409f7615435a_40_0	buggy:  context: private function getClassReference(Tokens $tokens, NamespaceAnalysis $namespace): \Generator { static $notBeforeKinds; if (null === $notBeforeKinds) { $notBeforeKinds = [ CT::T_USE_TRAIT, T_AS, T_CASE, T_CLASS, T_CONST, T_DOUBLE_ARROW, T_DOUBLE_COLON,	type_info: notBeforeKinds:array  global_variable:  function_name: getDefinition isCandidate applyFix getClassReference getClassNames	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	PHP-CS-Fixer_PHP-CS-Fixer_bd7296262f39d508e496799cbbc0409f7615435a_40_0	buggy:  context: T_INTERFACE, T_OBJECT_OPERATOR, T_TRAIT, ]; if (\defined('T_ENUM')) { $notBeforeKinds[] = T_ENUM; } } $namespaceIsGlobal = $namespace->isGlobalNamespace(); for ($index = $namespace->getScopeStartIndex(); $index < $namespace->getScopeEndIndex(); ++$index) { if (!$tokens[$index]->isGivenKind(T_STRING)) { continue; } $nextIndex = $tokens->getNextMeaningfulToken($index); if ($tokens[$nextIndex]->isGivenKind(T_NS_SEPARATOR)) {	type_info: notBeforeKinds:array namespaceIsGlobal:unknown index:unknown nextIndex:unknown  global_variable:  function_name: getDefinition isCandidate applyFix getClassReference getClassNames	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	PHP-CS-Fixer_PHP-CS-Fixer_bd7296262f39d508e496799cbbc0409f7615435a_40_0	buggy:  context: continue; } $nextIndex = $tokens->getNextMeaningfulToken($index); if ($tokens[$nextIndex]->isGivenKind(T_NS_SEPARATOR)) { continue; } $prevIndex = $tokens->getPrevMeaningfulToken($index); $isNamespaceSeparator = $tokens[$prevIndex]->isGivenKind(T_NS_SEPARATOR); if (!$isNamespaceSeparator && !$namespaceIsGlobal) { continue; } if ($isNamespaceSeparator) { $prevIndex = $tokens->getPrevMeaningfulToken($prevIndex); if ($tokens[$prevIndex]->isGivenKind(T_STRING)) {	type_info: namespaceIsGlobal:unknown index:unknown nextIndex:unknown prevIndex:unknown isNamespaceSeparator:unknown  global_variable:  function_name: getDefinition isCandidate applyFix getClassReference getClassNames	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	PHP-CS-Fixer_PHP-CS-Fixer_bd7296262f39d508e496799cbbc0409f7615435a_40_0	buggy: if (!$tokens[$prevIndex]->isGivenKind(T_NEW) && $tokens[$nextIndex]->equals('(')) { context: if ($isNamespaceSeparator) { $prevIndex = $tokens->getPrevMeaningfulToken($prevIndex); if ($tokens[$prevIndex]->isGivenKind(T_STRING)) { continue; } } elseif ($tokens[$prevIndex]->isGivenKind($notBeforeKinds)) { continue; } if (!$tokens[$prevIndex]->isGivenKind(T_NEW) && $tokens[$nextIndex]->equals('(')) { if (!$tokens[$prevIndex]->isGivenKind(T_NEW) && $tokens[$nextIndex]->equals('(')) { continue; } yield $index; } } private function getClassNames(): array {	type_info: notBeforeKinds:array index:unknown nextIndex:unknown prevIndex:unknown isNamespaceSeparator:unknown  global_variable:  function_name: getDefinition isCandidate applyFix getClassReference getClassNames	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	PHP-CS-Fixer_PHP-CS-Fixer_85ee54ec7f9c23d272d6a0cc40dcec5bf5ab7f93_41_0	buggy: if ($token->isGivenKind([T_FOREACH, T_FOR, T_WHILE, T_IF, T_SWITCH])) { context: } if ($token->isGivenKind($functionKind)) { ++$this->deepestLevel; $index = $tokens->getNextTokenOfKind($index, ['(']); $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue; } if ($token->isGivenKind([T_FOREACH, T_FOR, T_WHILE, T_IF, T_SWITCH])) { if ($token->isGivenKind([T_FOREACH, T_FOR, T_WHILE, T_IF, T_SWITCH])) { $index = $tokens->getNextMeaningfulToken($index); $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue; } if ($token->equals('[')) { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_INDEX_SQUARE_BRACE, $index);	type_info: index:unknown functionKind:array token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	PHP-CS-Fixer_PHP-CS-Fixer_85ee54ec7f9c23d272d6a0cc40dcec5bf5ab7f93_41_0	buggy: if ($token->isGivenKind([T_FOREACH, T_FOR, T_WHILE, T_IF, T_SWITCH])) { context: private function injectAlignmentPlaceholdersForArrow(Tokens $tokens, int $startAt, int $endAt): void { for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index]; if ($token->isGivenKind([T_FOREACH, T_FOR, T_WHILE, T_IF, T_SWITCH])) { if ($token->isGivenKind([T_FOREACH, T_FOR, T_WHILE, T_IF, T_SWITCH])) { $index = $tokens->getNextMeaningfulToken($index); $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue; } if ($token->isGivenKind(T_ARRAY)) { $from = $tokens->getNextMeaningfulToken($index); $until = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $from); $index = $until;	type_info: index:unknown token:unknown from:unknown until:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	PHP-CS-Fixer_PHP-CS-Fixer_61a5fd5662736e70c524812b953506f0530b90d7_42_0	buggy: if (null === $operatorIndex) { context: private function getCompareTokens(Tokens $tokens, int $offsetIndex, int $direction): ?array { $operatorIndex = $tokens->getMeaningfulTokenSibling($offsetIndex, $direction); if (null === $operatorIndex) { if (null === $operatorIndex) { return null; } $operandIndex = $tokens->getMeaningfulTokenSibling($operatorIndex, $direction); if (null === $operandIndex) { return null; } $operand = $tokens[$operandIndex];	type_info: operatorIndex:unknown operandIndex:unknown operand:unknown  global_variable:  function_name: getDefinition getPriority isCandidate isRisky applyFix fixCall getCompareTokens isOfHigherPrecedence	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
67	PHP-CS-Fixer_PHP-CS-Fixer_61a5fd5662736e70c524812b953506f0530b90d7_42_0	buggy: if (!$tokens[$operatorIndex]->isGivenKind([T_IS_IDENTICAL, T_IS_NOT_IDENTICAL])) { return null; } context: if (null === $operandIndex) { return null; } $operand = $tokens[$operandIndex]; if (!$operand->equals([T_LNUMBER, '0']) && !$operand->equals([T_STRING, 'false'], false)) { return null; } if (!$tokens[$operatorIndex]->isGivenKind([T_IS_IDENTICAL, T_IS_NOT_IDENTICAL])) { return null; } if (!$tokens[$operatorIndex]->isGivenKind([T_IS_IDENTICAL, T_IS_NOT_IDENTICAL])) { return null; } $precedenceTokenIndex = $tokens->getMeaningfulTokenSibling($operandIndex, $direction); if (null !== $precedenceTokenIndex && $this->isOfHigherPrecedence($tokens[$precedenceTokenIndex])) { return null; }	type_info: operatorIndex:unknown operandIndex:unknown operand:unknown precedenceTokenIndex:unknown  global_variable:  function_name: getDefinition getPriority isCandidate isRisky applyFix fixCall getCompareTokens isOfHigherPrecedence	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
68	PHP-CS-Fixer_PHP-CS-Fixer_8885cfc012232170443973bd3d7655179bfaf4ab_43_0	buggy: if ($tokens[$index]->isGivenKind(CT::T_NULLABLE_TYPE)) { $allowsNull = true; $index = $tokens->getNextMeaningfulToken($index); } context: private function parseTypeHint(Tokens $tokens, int $index): array { $allowsNull = false; if ($tokens[$index]->isGivenKind(CT::T_NULLABLE_TYPE)) { $allowsNull = true; $index = $tokens->getNextMeaningfulToken($index); } if ($tokens[$index]->isGivenKind(CT::T_NULLABLE_TYPE)) { $allowsNull = true; $index = $tokens->getNextMeaningfulToken($index); } $types = []; while (true) { $type = ''; while ($tokens[$index]->isGivenKind([T_NS_SEPARATOR, T_STATIC, T_STRING, CT::T_ARRAY_TYPEHINT, T_CALLABLE])) { $type .= $tokens[$index]->getContent(); $index = $tokens->getNextMeaningfulToken($index); }	type_info: index:unknown allowsNull:boolean types:array type:string  global_variable:  function_name: getDefinition doFoo doFoo doFoo doFoo getPriority isCandidate applyFix createConfigurationDefinition findDocumentedElement fixFunctionDocComment fixPropertyDocComment fixClassDocComment getArgumentsInfo getReturnTypeInfo parseTypeHint annotationIsSuperfluous toComparableNames removeSuperfluousInheritDoc removeSuperfluousModifierAnnotation	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
69	PHP-CS-Fixer_PHP-CS-Fixer_8885cfc012232170443973bd3d7655179bfaf4ab_43_0	buggy:  context: if ($tokens[$index]->isGivenKind(CT::T_NULLABLE_TYPE)) { $allowsNull = true; $index = $tokens->getNextMeaningfulToken($index); } $types = []; while (true) { $type = ''; while ($tokens[$index]->isGivenKind([T_NS_SEPARATOR, T_STATIC, T_STRING, CT::T_ARRAY_TYPEHINT, T_CALLABLE])) { $type .= $tokens[$index]->getContent(); $index = $tokens->getNextMeaningfulToken($index); } if ('' === $type) { break; } $types[] = $type;	type_info: index:unknown allowsNull:boolean types:array type:string  global_variable:  function_name: getDefinition doFoo doFoo doFoo doFoo getPriority isCandidate applyFix createConfigurationDefinition findDocumentedElement fixFunctionDocComment fixPropertyDocComment fixClassDocComment getArgumentsInfo getReturnTypeInfo parseTypeHint annotationIsSuperfluous toComparableNames removeSuperfluousInheritDoc removeSuperfluousModifierAnnotation	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
70	PHP-CS-Fixer_PHP-CS-Fixer_c8ac9936d5c04203a9053de0a58d545f4b687930_44_0	buggy: $token->equalsAny(['{', [CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN], [T_EXTENDS], [T_IMPLEMENTS], [CT::T_GROUP_IMPORT_BRACE_OPEN]]) context: $caseBlockStarts = []; foreach ($tokens as $index => $token) { $currentScope = \count($scopes) - 1; if ($token->isComment()) { continue; } if ( $token->equalsAny(['{', [CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN], [T_EXTENDS], [T_IMPLEMENTS], [CT::T_GROUP_IMPORT_BRACE_OPEN]]) $token->equalsAny(['{', [CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN], [T_EXTENDS], [T_IMPLEMENTS], [CT::T_GROUP_IMPORT_BRACE_OPEN]]) || ($token->equals('(') && !$tokens[$tokens->getPrevMeaningfulToken($index)]->isGivenKind(T_ARRAY)) || isset($alternativeBlockStarts[$index]) || isset($caseBlockStarts[$index]) ) { if ($token->isGivenKind([T_EXTENDS, T_IMPLEMENTS])) { $endIndex = $tokens->getNextTokenOfKind($index, ['{']); } elseif ($token->equals(':')) { if (isset($caseBlockStarts[$index])) { $endIndex = $this->findCaseBlockEnd($tokens, $index);	type_info: endIndex:unknown scopes:array alternativeBlockStarts:array caseBlockStarts:array index:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
71	PHP-CS-Fixer_PHP-CS-Fixer_c8ac9936d5c04203a9053de0a58d545f4b687930_44_0	buggy:  context: $token->equalsAny(['{', [CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN], [T_EXTENDS], [T_IMPLEMENTS], [CT::T_GROUP_IMPORT_BRACE_OPEN]]) || ($token->equals('(') && !$tokens[$tokens->getPrevMeaningfulToken($index)]->isGivenKind(T_ARRAY)) || isset($alternativeBlockStarts[$index]) || isset($caseBlockStarts[$index]) ) { if ($token->isGivenKind([T_EXTENDS, T_IMPLEMENTS])) { $endIndex = $tokens->getNextTokenOfKind($index, ['{']); } elseif ($token->equals(':')) { if (isset($caseBlockStarts[$index])) { $endIndex = $this->findCaseBlockEnd($tokens, $index); } else { $endIndex = $this->alternativeSyntaxAnalyzer->findAlternativeSyntaxBlockEnd($tokens, $alternativeBlockStarts[$index]); } } elseif ($token->isGivenKind(CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN)) {	type_info: endIndex:unknown alternativeBlockStarts:array caseBlockStarts:array index:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
72	PHP-CS-Fixer_PHP-CS-Fixer_ba3a02d7b1420bd3a97ae4e3f7ef3c2a405e8fb0_45_0	buggy:  context: $fixFunction = $this->fixFunction; foreach ($tokens as $index => $token) { if (!$token->isNativeConstant()) { continue; } if ( $this->isNeighbourAccepted($tokens, $tokens->getPrevMeaningfulToken($index)) && $this->isNeighbourAccepted($tokens, $tokens->getNextMeaningfulToken($index)) ) { $tokens[$index] = new Token([$token->getId(), $fixFunction($token->getContent())]); } } } private function isNeighbourAccepted(Tokens $tokens, int $index): bool { static $forbiddenTokens = null;	type_info: fixFunction:unknown index:unknown forbiddenTokens:unknown token:unknown  global_variable: fixFunction: unknown function_name: configure getDefinition isCandidate createConfigurationDefinition applyFix isNeighbourAccepted	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
73	PHP-CS-Fixer_PHP-CS-Fixer_ba3a02d7b1420bd3a97ae4e3f7ef3c2a405e8fb0_45_0	buggy:  context: } $token = $tokens[$index]; if ($token->equalsAny(['{', '}'])) { return false; } return !$token->isGivenKind($forbiddenTokens); } }	type_info: fixFunction:unknown index:unknown forbiddenTokens:unknown token:unknown  global_variable: fixFunction: unknown function_name: configure getDefinition isCandidate createConfigurationDefinition applyFix isNeighbourAccepted	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
74	PHP-CS-Fixer_PHP-CS-Fixer_7936fb2ef269e364042eb73f066d34e588ddd9b9_46_0	buggy: if (!$tokens[$classNameIndex]->equals([T_STRING, 'DateTime'], false)) { context: if (!$tokens[$functionNameIndex]->equals([T_STRING, 'createFromFormat'], false)) { continue; } if (!$tokens[$tokens->getNextMeaningfulToken($functionNameIndex)]->equals('(')) { continue; } $classNameIndex = $tokens->getPrevMeaningfulToken($index); if (!$tokens[$classNameIndex]->equals([T_STRING, 'DateTime'], false)) { if (!$tokens[$classNameIndex]->equals([T_STRING, 'DateTime'], false)) { continue; } $preClassNameIndex = $tokens->getPrevMeaningfulToken($classNameIndex); if ($tokens[$preClassNameIndex]->isGivenKind(T_NS_SEPARATOR)) { if ($tokens[$tokens->getPrevMeaningfulToken($preClassNameIndex)]->isGivenKind(T_STRING)) { continue; }	type_info: index:unknown functionNameIndex:unknown classNameIndex:unknown preClassNameIndex:unknown  global_variable:  function_name: getDefinition isCandidate applyFix getFirstArgumentTokenIndex	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
75	PHP-CS-Fixer_PHP-CS-Fixer_7936fb2ef269e364042eb73f066d34e588ddd9b9_46_0	buggy: if ('datetime' === strtolower($useDeclaration->getShortName()) && 'datetime' !== strtolower($useDeclaration->getFullName())) { continue 2; context: $preClassNameIndex = $tokens->getPrevMeaningfulToken($classNameIndex); if ($tokens[$preClassNameIndex]->isGivenKind(T_NS_SEPARATOR)) { if ($tokens[$tokens->getPrevMeaningfulToken($preClassNameIndex)]->isGivenKind(T_STRING)) { continue; } } elseif (!$namespace->isGlobalNamespace()) { continue; } else { foreach ($useDeclarations as $useDeclaration) { if ('datetime' === strtolower($useDeclaration->getShortName()) && 'datetime' !== strtolower($useDeclaration->getFullName())) { continue 2; if ('datetime' === strtolower($useDeclaration->getShortName()) && 'datetime' !== strtolower($useDeclaration->getFullName())) { continue 2; } } } $openIndex = $tokens->getNextTokenOfKind($functionNameIndex, ['(']); $closeIndex = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $openIndex); $argumentIndex = $this->getFirstArgumentTokenIndex($tokens, $argumentsAnalyzer->getArguments($tokens, $openIndex, $closeIndex));	type_info: argumentsAnalyzer:unknown useDeclarations:unknown functionNameIndex:unknown classNameIndex:unknown preClassNameIndex:unknown openIndex:unknown closeIndex:unknown argumentIndex:unknown  global_variable:  function_name: getDefinition isCandidate applyFix getFirstArgumentTokenIndex	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	PHP-CS-Fixer_PHP-CS-Fixer_aa976c58efa66a9781550abf58e542d428c2c7a5_47_0	buggy: for ($i = $startIndex; $i < $endIndex; ++$i) { context: private function hasPossibleReferenceToThis(Tokens $tokens, int $startIndex, int $endIndex): bool { for ($i = $startIndex; $i < $endIndex; ++$i) { for ($i = $startIndex; $i < $endIndex; ++$i) { if ($tokens[$i]->isGivenKind(T_VARIABLE) && '$this' === strtolower($tokens[$i]->getContent())) { return true; } if ($tokens[$i]->isGivenKind([ T_INCLUDE, T_INCLUDE_ONCE, T_REQUIRE, T_REQUIRE_ONCE, CT::T_DYNAMIC_VAR_BRACE_OPEN,	type_info: i:unknown h:unknown  global_variable:  function_name: getDefinition isCandidate isRisky applyFix findExpressionEnd hasPossibleReferenceToThis	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	PHP-CS-Fixer_PHP-CS-Fixer_8438b669e2dc76aa1ab5b0a340736e6574dbdd1c_48_0	buggy: if ($token->isGivenKind(CT::T_ARRAY_SQUARE_BRACE_OPEN)) { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_ARRAY_SQUARE_BRACE, $index); continue; } context: $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue; } if ($token->equals('[')) { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_INDEX_SQUARE_BRACE, $index); continue; } if ($token->isGivenKind(CT::T_ARRAY_SQUARE_BRACE_OPEN)) { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_ARRAY_SQUARE_BRACE, $index); continue; } if ($token->isGivenKind(CT::T_ARRAY_SQUARE_BRACE_OPEN)) { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_ARRAY_SQUARE_BRACE, $index); continue; } } } private function injectAlignmentPlaceholdersForArrow(Tokens $tokens, int $startAt, int $endAt): void	type_info: index:unknown token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	PHP-CS-Fixer_PHP-CS-Fixer_eea710d2417aa1118af5af8f1602d28b7ca329ba_49_0	buggy: ++$this->deepestLevel; context: strtolower($content) === $tokenContent && $this->tokensAnalyzer->isBinaryOperator($index) && ('=' !== $content || !$this->isEqualPartOfDeclareStatement($tokens, $index)) ) { $tokens[$index] = new Token(sprintf(self::ALIGN_PLACEHOLDER, $this->deepestLevel).$content); continue; } if ($token->isGivenKind($functionKind)) { ++$this->deepestLevel; ++$this->deepestLevel; $index = $tokens->getNextTokenOfKind($index, ['(']); $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue; } if ($token->isGivenKind([T_FOREACH, T_FOR, T_WHILE, T_IF, T_SWITCH, T_ELSEIF])) { $index = $tokens->getNextMeaningfulToken($index); $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index);	type_info: index:unknown tokenContent:unknown content:unknown functionKind:array token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	PHP-CS-Fixer_PHP-CS-Fixer_866715801ac121a0a4cde6fdb9d9a3dd6873b606_50_0	buggy: if ($token->isGivenKind(T_ENCAPSED_AND_WHITESPACE)) { context: T_XOR_EQUAL => true, T_SPACESHIP => true, T_COALESCE => true, T_COALESCE_EQUAL => true, ]; } $tokens = $this->tokens; $token = $tokens[$index]; if ($token->isGivenKind(T_ENCAPSED_AND_WHITESPACE)) { if ($token->isGivenKind(T_ENCAPSED_AND_WHITESPACE)) { return false; } if (isset($potentialUnaryNonArrayOperators[$token->getContent()])) { return !$this->isUnaryPredecessorOperator($index); } if ($token->isArray()) { return isset($arrayOperators[$token->getId()]);	type_info: index:unknown token:unknown tokens:unknown potentialUnaryNonArrayOperators:array arrayOperators:array  global_variable:  function_name: __construct getClassyElements getImportUseIndexes isArray isArrayMultiLine isBlockMultiline getMethodAttributes isAnonymousClass isLambda isConstantInvocation baz isUnarySuccessorOperator isUnaryPredecessorOperator isBinaryOperator isWhilePartOfDoWhile isSuperGlobal findClassyElements	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	PHP-CS-Fixer_PHP-CS-Fixer_157135ae718293b9bb78ac6b50d1120679fbccf9_51_0	buggy: return $tokens->isAnyTokenKindsFound([T_CONSTANT_ENCAPSED_STRING, T_START_HEREDOC]); context: public function isCandidate(Tokens $tokens): bool { return $tokens->isAnyTokenKindsFound([T_CONSTANT_ENCAPSED_STRING, T_START_HEREDOC]); return $tokens->isAnyTokenKindsFound([T_CONSTANT_ENCAPSED_STRING, T_START_HEREDOC]); }	type_info:  global_variable:  function_name: isCandidate getDefinition applyFix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	PHP-CS-Fixer_PHP-CS-Fixer_157135ae718293b9bb78ac6b50d1120679fbccf9_51_0	buggy: if (!$token->isGivenKind([T_CONSTANT_ENCAPSED_STRING, T_START_HEREDOC])) { continue; } $content = $token->getContent(); context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { foreach ($tokens as $index => $token) { if (!$token->isGivenKind([T_CONSTANT_ENCAPSED_STRING, T_START_HEREDOC])) { continue; } $content = $token->getContent(); if (!$token->isGivenKind([T_CONSTANT_ENCAPSED_STRING, T_START_HEREDOC])) { continue; } $content = $token->getContent(); if ('b' === strtolower($content[0])) { $tokens[$index] = new Token([$token->getId(), substr($content, 1)]); } } }	type_info: index:unknown content:unknown  global_variable:  function_name: isCandidate getDefinition applyFix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	PHP-CS-Fixer_PHP-CS-Fixer_157135ae718293b9bb78ac6b50d1120679fbccf9_51_0	buggy: if ('b' === strtolower($content[0])) { $tokens[$index] = new Token([$token->getId(), substr($content, 1)]); context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { foreach ($tokens as $index => $token) { if (!$token->isGivenKind([T_CONSTANT_ENCAPSED_STRING, T_START_HEREDOC])) { continue; } $content = $token->getContent(); if ('b' === strtolower($content[0])) { $tokens[$index] = new Token([$token->getId(), substr($content, 1)]); if ('b' === strtolower($content[0])) { $tokens[$index] = new Token([$token->getId(), substr($content, 1)]); } } }	type_info: index:unknown content:unknown  global_variable:  function_name: isCandidate getDefinition applyFix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	PHP-CS-Fixer_PHP-CS-Fixer_a259c0b55877b2e5bbc6329470afa896ee1966a5_52_0	buggy: for ($index = 0, $max = $tokens->count(); $index < $max; ++$index) { $token = $tokens[$index]; context: $classyTokens = Token::getClassyTokenKinds(); $controlStructureTokens = [T_DECLARE, T_DO, T_ELSE, T_ELSEIF, T_FINALLY, T_FOR, T_FOREACH, T_IF, T_WHILE, T_TRY, T_CATCH, T_SWITCH]; if (\defined('T_MATCH')) { $controlStructureTokens[] = T_MATCH; } $tokensAnalyzer = new TokensAnalyzer($tokens); $allowSingleLineUntil = null; for ($index = 0, $max = $tokens->count(); $index < $max; ++$index) { $token = $tokens[$index]; for ($index = 0, $max = $tokens->count(); $index < $max; ++$index) { $token = $tokens[$index]; $allowSingleLine = false; $allowSingleLineIfEmpty = false; if ($token->isGivenKind($classyTokens)) { $openBraceIndex = $tokens->getNextTokenOfKind($index, ['{']); if ($tokensAnalyzer->isAnonymousClass($index)) {	type_info: classyTokens:unknown controlStructureTokens:array tokensAnalyzer:unknown allowSingleLineUntil:unknown index:unknown token:unknown allowSingleLine:boolean allowSingleLineIfEmpty:boolean openBraceIndex:unknown max:unknown  global_variable:  function_name: getDefinition foo foo isCandidate getPriority applyFix createConfigurationDefinition findParenthesisEnd isFollowedByNewLine hasCommentOnSameLine	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	PHP-CS-Fixer_PHP-CS-Fixer_5979f896afaa1f073affcafb8fc5052887bbdd85_53_0	buggy: break; context: if ($token->equals('}')) { $index = $tokens->findBlockStart(Tokens::BLOCK_TYPE_CURLY_BRACE, $index); continue; } if ($token->equals(',')) { $this->fixSpace($tokens, $index); if (!$isMultiline && $this->isNewline($tokens[$index + 1])) { $isMultiline = true; break; break; } } } return $isMultiline; } private function findWhitespaceIndexAfterParenthesis(Tokens $tokens, int $startParenthesisIndex, int $endParenthesisIndex): ?int	type_info: index:unknown token:unknown isMultiline:boolean  global_variable:  function_name: getDefinition sample sample sample sample sample sample sample isCandidate configure getPriority applyFix createConfigurationDefinition fixFunction findWhitespaceIndexAfterParenthesis ensureSingleLine ensureFunctionFullyMultiline fixNewline fixSpace isCommentLastLineToken isNewline	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	PHP-CS-Fixer_PHP-CS-Fixer_9abfac4b3aa670cf2e7544c4f8472f6c9a143557_54_0	buggy:  context: T_TRY, T_FUNCTION, T_CLASS, T_INTERFACE, T_TRAIT, ]; if (\defined('T_MATCH')) { $blockSignatureFirstTokens[] = T_MATCH; } $endIndex = \count($tokens) - 1; if ($tokens[$endIndex]->isWhitespace()) { --$endIndex; } $lastIndent = $this->getLineIndentationWithBracesCompatibility( $tokens, 0, $this->extractIndent($this->computeNewLineContent($tokens, 0)), );	type_info: blockSignatureFirstTokens:array endIndex:unknown lastIndent:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	PHP-CS-Fixer_PHP-CS-Fixer_9abfac4b3aa670cf2e7544c4f8472f6c9a143557_54_0	buggy: $token->equalsAny(['{', [CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN], [T_EXTENDS], [T_IMPLEMENTS], [CT::T_USE_TRAIT], [CT::T_GROUP_IMPORT_BRACE_OPEN]]) context: $currentScope = \count($scopes) - 1; if ($token->isComment()) { continue; } if ( $token->equalsAny(['{', [CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN], [T_EXTENDS], [T_IMPLEMENTS], [CT::T_USE_TRAIT], [CT::T_GROUP_IMPORT_BRACE_OPEN]]) $token->equalsAny(['{', [CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN], [T_EXTENDS], [T_IMPLEMENTS], [CT::T_USE_TRAIT], [CT::T_GROUP_IMPORT_BRACE_OPEN]]) || ($token->equals('(') && !$tokens[$tokens->getPrevMeaningfulToken($index)]->isGivenKind(T_ARRAY)) || isset($alternativeBlockStarts[$index]) || isset($caseBlockStarts[$index]) ) { if ($token->isGivenKind([T_EXTENDS, T_IMPLEMENTS])) { $endIndex = $tokens->getNextTokenOfKind($index, ['{']);	type_info: endIndex:unknown scopes:array alternativeBlockStarts:array caseBlockStarts:array index:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	PHP-CS-Fixer_PHP-CS-Fixer_9abfac4b3aa670cf2e7544c4f8472f6c9a143557_54_0	buggy: $endIndex = $tokens->findBlockEnd( $token->equals('{') ? Tokens::BLOCK_TYPE_CURLY_BRACE : Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index ); context: $endIndex = $this->alternativeSyntaxAnalyzer->findAlternativeSyntaxBlockEnd($tokens, $alternativeBlockStarts[$index]); } } elseif ($token->isGivenKind(CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN)) { $endIndex = $tokens->getNextTokenOfKind($index, [[CT::T_DESTRUCTURING_SQUARE_BRACE_CLOSE]]); } elseif ($token->isGivenKind(CT::T_GROUP_IMPORT_BRACE_OPEN)) { $endIndex = $tokens->getNextTokenOfKind($index, [[CT::T_GROUP_IMPORT_BRACE_CLOSE]]); } else { $endIndex = $tokens->findBlockEnd( $token->equals('{') ? Tokens::BLOCK_TYPE_CURLY_BRACE : Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index ); $endIndex = $tokens->findBlockEnd( $token->equals('{') ? Tokens::BLOCK_TYPE_CURLY_BRACE : Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index ); } if ('block_signature' === $scopes[$currentScope]['type']) {	type_info: endIndex:unknown scopes:array alternativeBlockStarts:array index:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	PHP-CS-Fixer_PHP-CS-Fixer_9abfac4b3aa670cf2e7544c4f8472f6c9a143557_54_0	buggy:  context: } else { $endIndex = $this->alternativeSyntaxAnalyzer->findAlternativeSyntaxBlockEnd($tokens, $alternativeBlockStarts[$index]); } } elseif ($token->isGivenKind(CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN)) { $endIndex = $tokens->getNextTokenOfKind($index, [[CT::T_DESTRUCTURING_SQUARE_BRACE_CLOSE]]); } elseif ($token->isGivenKind(CT::T_GROUP_IMPORT_BRACE_OPEN)) { $endIndex = $tokens->getNextTokenOfKind($index, [[CT::T_GROUP_IMPORT_BRACE_CLOSE]]); } else { $endIndex = $tokens->findBlockEnd( $token->equals('{') ? Tokens::BLOCK_TYPE_CURLY_BRACE : Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index ); } if ('block_signature' === $scopes[$currentScope]['type']) { $initialIndent = $scopes[$currentScope]['initial_indent']; } else { $initialIndent = $this->getLineIndentationWithBracesCompatibility($tokens, $index, $lastIndent); }	type_info: endIndex:unknown lastIndent:unknown scopes:array alternativeBlockStarts:array index:unknown initialIndent:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	PHP-CS-Fixer_PHP-CS-Fixer_9abfac4b3aa670cf2e7544c4f8472f6c9a143557_54_0	buggy: if ($token->equalsAny([';', ',', '}', [T_OPEN_TAG], [T_CLOSE_TAG]])) { context: while ($index >= $scopes[$currentScope]['end_index']) { array_pop($scopes); if ([] === $scopes) { return; } --$currentScope; } if ($token->equalsAny([';', ',', '}', [T_OPEN_TAG], [T_CLOSE_TAG]])) { if ($token->equalsAny([';', ',', '}', [T_OPEN_TAG], [T_CLOSE_TAG]])) { continue; } if ('statement' !== $scopes[$currentScope]['type'] && 'block_signature' !== $scopes[$currentScope]['type']) { $endIndex = $this->findStatementEndIndex($tokens, $index, $scopes[$currentScope]['end_index']); if ($endIndex === $index) { continue; }	type_info: endIndex:unknown scopes:array index:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	PHP-CS-Fixer_PHP-CS-Fixer_3b5d696d9d00f62726222d3ccc8ceeb1bd94e7cb_55_0	buggy:  context: if ($tokens[$braceIndex]->equals(':')) { $index = $this->alternativeSyntaxAnalyzer->findAlternativeSyntaxBlockEnd($tokens, $index); } else { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $braceIndex); } continue; } if ($tokens[$index]->equalsAny([[T_CASE], [T_DEFAULT]])) { return $index; } if ($tokens[$index]->equalsAny(['}', [T_ENDSWITCH]])) { return $tokens->getPrevMeaningfulToken($index); } } throw new \LogicException('End of case block not found.');	type_info: index:unknown braceIndex:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	PHP-CS-Fixer_PHP-CS-Fixer_93beae7eef5b2fb8906cfbef25636ae2253f0c90_56_0	buggy: if ($token->isGivenKind([T_ENCAPSED_AND_WHITESPACE, CT::T_TYPE_INTERSECTION])) { context: T_XOR_EQUAL => true, T_SPACESHIP => true, T_COALESCE => true, T_COALESCE_EQUAL => true, ]; } $tokens = $this->tokens; $token = $tokens[$index]; if ($token->isGivenKind([T_ENCAPSED_AND_WHITESPACE, CT::T_TYPE_INTERSECTION])) { if ($token->isGivenKind([T_ENCAPSED_AND_WHITESPACE, CT::T_TYPE_INTERSECTION])) { return false; } if (isset($potentialUnaryNonArrayOperators[$token->getContent()])) { return !$this->isUnaryPredecessorOperator($index); } if ($token->isArray()) { return isset($arrayOperators[$token->getId()]);	type_info: index:unknown token:unknown tokens:unknown potentialUnaryNonArrayOperators:array arrayOperators:array  global_variable:  function_name: __construct getClassyElements getImportUseIndexes isArray isArrayMultiLine isBlockMultiline getMethodAttributes isAnonymousClass isLambda isConstantInvocation baz isUnarySuccessorOperator isUnaryPredecessorOperator isBinaryOperator isWhilePartOfDoWhile isSuperGlobal findClassyElements	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	PHP-CS-Fixer_PHP-CS-Fixer_d29ea1de7bad3e5e57378b341741e5b27db3647b_57_0	buggy: } while ($tokens[$previousTokenIndex]->isGivenKind([CT::T_TYPE_COLON, CT::T_NULLABLE_TYPE, T_STRING, T_NS_SEPARATOR, CT::T_ARRAY_TYPEHINT, CT::T_TYPE_ALTERNATION, CT::T_TYPE_INTERSECTION])); context: $whitespace = ' '; if (self::NEXT_LINE_UNLESS_NEWLINE_AT_SIGNATURE_END === $this->configuration[$positionOption]) { $whitespace = $this->whitespacesConfig->getLineEnding().$this->getLineIndentation($tokens, $index); $previousTokenIndex = $openBraceIndex; do { $previousTokenIndex = $tokens->getPrevMeaningfulToken($previousTokenIndex); } while ($tokens[$previousTokenIndex]->isGivenKind([CT::T_TYPE_COLON, CT::T_NULLABLE_TYPE, T_STRING, T_NS_SEPARATOR, CT::T_ARRAY_TYPEHINT, CT::T_TYPE_ALTERNATION, CT::T_TYPE_INTERSECTION])); } while ($tokens[$previousTokenIndex]->isGivenKind([CT::T_TYPE_COLON, CT::T_NULLABLE_TYPE, T_STRING, T_NS_SEPARATOR, CT::T_ARRAY_TYPEHINT, CT::T_TYPE_ALTERNATION, CT::T_TYPE_INTERSECTION])); if ($tokens[$previousTokenIndex]->equals(')')) { if ($tokens[--$previousTokenIndex]->isComment()) { --$previousTokenIndex; } if (	type_info: index:unknown openBraceIndex:unknown positionOption:string whitespace:string previousTokenIndex:unknown  global_variable:  function_name: getDefinition foo foo isCandidate getPriority applyFix createConfigurationDefinition findParenthesisEnd isFollowedByNewLine hasCommentOnSameLine	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	PHP-CS-Fixer_PHP-CS-Fixer_f403e7f9108add56c4d3f0c0e3f0e13845737e74_58_0	buggy:  context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { $tokenCount = \count($tokens); $this->tokensAnalyzer = new TokensAnalyzer($tokens); for ($index = 1; $index < $tokenCount; ++$index) { if (!$tokens[$index]->isGivenKind(T_FUNCTION)) { continue; } $functionOpenIndex = $tokens->getNextTokenOfKind($index, ['{', ';']); if ($tokens[$functionOpenIndex]->equals(';')) { $index = $functionOpenIndex - 1; continue; } $functionCloseIndex = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $functionOpenIndex); $totalTokensAdded = 0;	type_info: tokenCount:unknown index:integer functionOpenIndex:unknown functionCloseIndex:unknown totalTokensAdded:integer  global_variable:  function_name: getDefinition a getPriority isCandidate applyFix fixFunction for simplifyReturnStatement clearIfSave	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	PHP-CS-Fixer_PHP-CS-Fixer_b23c1c7beddcb219f6f5ef0428f1c34940060e44_59_0	buggy: if (1 === $delta) { $tokens->clearAt($openBraceIndex - 1); } elseif ($tokens[$openBraceIndex - 1]->isWhitespace() && Preg::match('/\R/', $tokens[$openBraceIndex - 1]->getContent())) { context: } } } if (null !== $moveBraceToIndex) { $movedToken = clone $tokens[$openBraceIndex]; $delta = $openBraceIndex < $moveBraceToIndex ? 1 : -1; if ($tokens[$openBraceIndex + $delta]->isWhitespace()) { if (1 === $delta) { $tokens->clearAt($openBraceIndex - 1); } elseif ($tokens[$openBraceIndex - 1]->isWhitespace() && Preg::match('/\R/', $tokens[$openBraceIndex - 1]->getContent())) { if (1 === $delta) { $tokens->clearAt($openBraceIndex - 1); } elseif ($tokens[$openBraceIndex - 1]->isWhitespace() && Preg::match('/\R/', $tokens[$openBraceIndex - 1]->getContent())) { $content = Preg::replace('/^(\h*?\R)?\h*/', '', $tokens[$openBraceIndex + 1]->getContent()); if ('' !== $content) { $tokens[$openBraceIndex + 1] = new Token([T_WHITESPACE, $content]); } else { $tokens->clearAt($openBraceIndex + 1); } }	type_info: openBraceIndex:unknown moveBraceToIndex:unknown movedToken:unknown delta:unknown content:unknown  global_variable:  function_name: getDefinition foo foo isCandidate getPriority applyFix createConfigurationDefinition findParenthesisEnd isFollowedByNewLine hasCommentOnSameLine	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	PHP-CS-Fixer_PHP-CS-Fixer_b23c1c7beddcb219f6f5ef0428f1c34940060e44_59_0	buggy:  context: if ($tokens[$openBraceIndex + $delta]->isWhitespace()) { if (1 === $delta) { $tokens->clearAt($openBraceIndex - 1); } elseif ($tokens[$openBraceIndex - 1]->isWhitespace() && Preg::match('/\R/', $tokens[$openBraceIndex - 1]->getContent())) { $content = Preg::replace('/^(\h*?\R)?\h*/', '', $tokens[$openBraceIndex + 1]->getContent()); if ('' !== $content) { $tokens[$openBraceIndex + 1] = new Token([T_WHITESPACE, $content]); } else { $tokens->clearAt($openBraceIndex + 1); } } } for (; $openBraceIndex !== $moveBraceToIndex; $openBraceIndex += $delta) { $siblingToken = $tokens[$openBraceIndex + $delta]; $tokens[$openBraceIndex] = $siblingToken; } $tokens[$openBraceIndex] = $movedToken;	type_info: openBraceIndex:unknown moveBraceToIndex:unknown movedToken:unknown delta:unknown content:unknown siblingToken:unknown  global_variable:  function_name: getDefinition foo foo isCandidate getPriority applyFix createConfigurationDefinition findParenthesisEnd isFollowedByNewLine hasCommentOnSameLine	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	PHP-CS-Fixer_PHP-CS-Fixer_c87361818e90bfc7395e2b887498782cd3b25179_60_0	buggy:  context: public function process(Tokens $tokens, Token $token, int $index): void { if (!$token->equals(':')) { return; } $endIndex = $tokens->getPrevMeaningfulToken($index); if (!$tokens[$endIndex]->equals(')')) { return; } $startIndex = $tokens->findBlockStart(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $endIndex); $prevIndex = $tokens->getPrevMeaningfulToken($startIndex); $prevToken = $tokens[$prevIndex]; if ($prevToken->isGivenKind(T_STRING)) { $prevIndex = $tokens->getPrevMeaningfulToken($prevIndex);	type_info: endIndex:unknown startIndex:unknown prevIndex:unknown prevToken:unknown  global_variable:  function_name: foo getPriority getRequiredPhpVersionId process getCustomTokens	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	PHP-CS-Fixer_PHP-CS-Fixer_f63eb5df381eebf2c09a5ed3e1cbe75bde87494e_61_0	buggy: $blockOpeningIndex = $tokens->getNextTokenOfKind( $tokens->findBlockEnd( Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $tokens->getNextTokenOfKind($index + 1, ['(']), ), [':', '{'], ); if (!$tokens[$blockOpeningIndex]->equals(':')) { $index = $blockOpeningIndex; continue; context: $findKinds[] = [$endTokenKind]; } while (true) { $index = $tokens->getNextTokenOfKind($index, $findKinds); if ($tokens[$index]->isGivenKind($endTokenKinds)) { return $index; } $blockOpeningIndex = $tokens->getNextTokenOfKind( $tokens->findBlockEnd( Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $tokens->getNextTokenOfKind($index + 1, ['(']), ), [':', '{'], ); if (!$tokens[$blockOpeningIndex]->equals(':')) { $index = $blockOpeningIndex; continue; $blockOpeningIndex = $tokens->getNextTokenOfKind( $tokens->findBlockEnd( Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $tokens->getNextTokenOfKind($index + 1, ['(']), ), [':', '{'], ); if (!$tokens[$blockOpeningIndex]->equals(':')) { $index = $blockOpeningIndex;	type_info: endTokenKinds:unknown findKinds:array index:unknown blockOpeningIndex:unknown  global_variable:  function_name: belongsToAlternativeSyntax findAlternativeSyntaxBlockEnd isStartOfAlternativeSyntaxBlock	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	PHP-CS-Fixer_PHP-CS-Fixer_f63eb5df381eebf2c09a5ed3e1cbe75bde87494e_61_0	buggy: $index = $this->findAlternativeSyntaxBlockEnd($tokens, $index); context: $tokens->getNextTokenOfKind($index + 1, ['(']), ), [':', '{'], ); if (!$tokens[$blockOpeningIndex]->equals(':')) { $index = $blockOpeningIndex; continue; } $index = $this->findAlternativeSyntaxBlockEnd($tokens, $index); $index = $this->findAlternativeSyntaxBlockEnd($tokens, $index); } } private function isStartOfAlternativeSyntaxBlock(Tokens $tokens, int $index): bool { $map = self::ALTERNATIVE_SYNTAX_BLOCK_EDGES; $startTokenKind = $tokens[$index]->getId();	type_info: startTokenKind:unknown index:unknown blockOpeningIndex:unknown map:unknown  global_variable:  function_name: belongsToAlternativeSyntax findAlternativeSyntaxBlockEnd isStartOfAlternativeSyntaxBlock	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	buggy: $this->injectAlignmentPlaceholders($tokensClone, 0, \count($tokens), $tokenContent); context: { $this->deepestLevel = 0; $this->currentLevel = 0; foreach ($toAlign as $tokenContent => $alignStrategy) { $tokensClone = clone $tokens; if ('=>' === $tokenContent) { $this->injectAlignmentPlaceholdersForArrow($tokensClone, 0, \count($tokens)); } else { $this->injectAlignmentPlaceholders($tokensClone, 0, \count($tokens), $tokenContent); $this->injectAlignmentPlaceholders($tokensClone, 0, \count($tokens), $tokenContent); } if (self::ALIGN_SINGLE_SPACE === $alignStrategy || self::ALIGN_SINGLE_SPACE_MINIMAL === $alignStrategy) { if ('=>' === $tokenContent) { for ($index = $tokens->count() - 2; $index > 0; --$index) { if ($tokens[$index]->isGivenKind(T_DOUBLE_ARROW)) { $this->fixWhiteSpaceBeforeOperator($tokensClone, $index, $alignStrategy); } }	type_info: index:unknown tokenContent:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	buggy: private function injectAlignmentPlaceholders(Tokens $tokens, int $startAt, int $endAt, string $tokenContent): void context: $this->fixWhiteSpaceBeforeOperator($tokensClone, $index, $alignStrategy); } } } } $tokens->setCode($this->replacePlaceholders($tokensClone, $alignStrategy)); } } private function injectAlignmentPlaceholders(Tokens $tokens, int $startAt, int $endAt, string $tokenContent): void private function injectAlignmentPlaceholders(Tokens $tokens, int $startAt, int $endAt, string $tokenContent): void { $functionKind = [T_FUNCTION, T_FN]; for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index]; $content = $token->getContent(); if ( strtolower($content) === $tokenContent	type_info: index:unknown tokenContent:unknown content:unknown functionKind:array token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	buggy:  context: private function injectAlignmentPlaceholders(Tokens $tokens, int $startAt, int $endAt, string $tokenContent): void { $functionKind = [T_FUNCTION, T_FN]; for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index]; $content = $token->getContent(); if ( strtolower($content) === $tokenContent && $this->tokensAnalyzer->isBinaryOperator($index) && ('=' !== $content || !$this->isEqualPartOfDeclareStatement($tokens, $index)) ) {	type_info: index:unknown tokenContent:unknown content:unknown functionKind:array token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	buggy:  context: private function injectAlignmentPlaceholders(Tokens $tokens, int $startAt, int $endAt, string $tokenContent): void { $functionKind = [T_FUNCTION, T_FN]; for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index]; $content = $token->getContent(); if ( strtolower($content) === $tokenContent && $this->tokensAnalyzer->isBinaryOperator($index) && ('=' !== $content || !$this->isEqualPartOfDeclareStatement($tokens, $index)) ) { $tokens[$index] = new Token(sprintf(self::ALIGN_PLACEHOLDER, $this->deepestLevel).$content); continue; }	type_info: index:unknown tokenContent:unknown content:unknown functionKind:array token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	buggy: $tokens[$index] = new Token(sprintf(self::ALIGN_PLACEHOLDER, $this->deepestLevel).$content); context: for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index]; $content = $token->getContent(); if ( strtolower($content) === $tokenContent && $this->tokensAnalyzer->isBinaryOperator($index) && ('=' !== $content || !$this->isEqualPartOfDeclareStatement($tokens, $index)) ) { $tokens[$index] = new Token(sprintf(self::ALIGN_PLACEHOLDER, $this->deepestLevel).$content); $tokens[$index] = new Token(sprintf(self::ALIGN_PLACEHOLDER, $this->deepestLevel).$content); continue; } if ($token->isGivenKind($functionKind)) { $index = $tokens->getNextTokenOfKind($index, ['(']); $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue;	type_info: index:unknown tokenContent:unknown content:unknown functionKind:array token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	buggy:  context: { $functionKind = [T_FUNCTION, T_FN]; for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index]; $content = $token->getContent(); if ( strtolower($content) === $tokenContent && $this->tokensAnalyzer->isBinaryOperator($index) && ('=' !== $content || !$this->isEqualPartOfDeclareStatement($tokens, $index)) ) { $tokens[$index] = new Token(sprintf(self::ALIGN_PLACEHOLDER, $this->deepestLevel).$content); continue; } if ($token->isGivenKind($functionKind)) { $index = $tokens->getNextTokenOfKind($index, ['(']); $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index);	type_info: index:unknown tokenContent:unknown content:unknown functionKind:array token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	buggy:  context: $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue; } if ($token->equals('[')) { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_INDEX_SQUARE_BRACE, $index); continue; } } } private function injectAlignmentPlaceholdersForArrow(Tokens $tokens, int $startAt, int $endAt): void { for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index]; if ($token->isGivenKind([T_FOREACH, T_FOR, T_WHILE, T_IF, T_SWITCH, T_ELSEIF])) { $index = $tokens->getNextMeaningfulToken($index);	type_info: index:unknown token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	buggy:  context: private function injectAlignmentPlaceholdersForArrow(Tokens $tokens, int $startAt, int $endAt): void { for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index]; if ($token->isGivenKind([T_FOREACH, T_FOR, T_WHILE, T_IF, T_SWITCH, T_ELSEIF])) { $index = $tokens->getNextMeaningfulToken($index); $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue; }	type_info: index:unknown token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	buggy:  context: private function injectAlignmentPlaceholdersForArrow(Tokens $tokens, int $startAt, int $endAt): void { for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index]; if ($token->isGivenKind([T_FOREACH, T_FOR, T_WHILE, T_IF, T_SWITCH, T_ELSEIF])) { $index = $tokens->getNextMeaningfulToken($index); $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index); continue; } if ($token->isGivenKind(T_ARRAY)) { $from = $tokens->getNextMeaningfulToken($index);	type_info: index:unknown token:unknown from:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	"buggy: if ($token->isGivenKind(T_DOUBLE_ARROW)) { context: if ($token->isGivenKind(CT::T_ARRAY_SQUARE_BRACE_OPEN)) { $from = $index; $until = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_ARRAY_SQUARE_BRACE, $from); $index = $until; $this->injectArrayAlignmentPlaceholders($tokens, $from + 1, $until - 1); continue; } if ($token->isGivenKind(T_DOUBLE_ARROW)) { if ($token->isGivenKind(T_DOUBLE_ARROW)) { $tokenContent = sprintf(self::ALIGN_PLACEHOLDER, $this->currentLevel).$token->getContent(); $nextToken = $tokens[$index + 1]; if (!$nextToken->isWhitespace()) { $tokenContent .= ' '; } elseif ($nextToken->isWhitespace("" \t"")) { $tokens[$index + 1] = new Token([T_WHITESPACE, ' ']); }"	type_info: index:unknown tokenContent:unknown token:unknown from:unknown until:unknown nextToken:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	"buggy:  context: $tokenContent = sprintf(self::ALIGN_PLACEHOLDER, $this->currentLevel).$token->getContent(); $nextToken = $tokens[$index + 1]; if (!$nextToken->isWhitespace()) { $tokenContent .= ' '; } elseif ($nextToken->isWhitespace("" \t"")) { $tokens[$index + 1] = new Token([T_WHITESPACE, ' ']); } $tokens[$index] = new Token([T_DOUBLE_ARROW, $tokenContent]); continue; } if ($token->equals(';')) { ++$this->deepestLevel; ++$this->currentLevel; continue; }"	type_info: index:unknown tokenContent:unknown token:unknown nextToken:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	PHP-CS-Fixer_PHP-CS-Fixer_953b8380de208061f0d7d2aa4ec4dbc775e0a577_62_0	"buggy:  context: if ($token->equals(';')) { ++$this->deepestLevel; ++$this->currentLevel; continue; } if ($token->equals(',')) { for ($i = $index; $i < $endAt - 1; ++$i) { if (str_contains($tokens[$i - 1]->getContent(), ""\n"")) { break; } if ($tokens[$i + 1]->isGivenKind([T_ARRAY, CT::T_ARRAY_SQUARE_BRACE_OPEN])) { $arrayStartIndex = $tokens[$i + 1]->isGivenKind(T_ARRAY) ? $tokens->getNextMeaningfulToken($i + 1) : $i + 1 ; $blockType = Tokens::detectBlockType($tokens[$arrayStartIndex]); $arrayEndIndex = $tokens->findBlockEnd($blockType['type'], $arrayStartIndex);"	type_info: index:unknown token:unknown i:unknown arrayStartIndex:unknown blockType:unknown arrayEndIndex:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	PHP-CS-Fixer_PHP-CS-Fixer_1d8f50a457ebd54e37e2dba91a15b705ff56baab_63_0	"buggy: if ($tokens[$whitespaceTokenIndex]->equals([T_WHITESPACE]) && !str_contains($token->getContent(), ""\n"")) { context: } if ( $token->isGivenKind(T_STATIC) && !$tokens[$tokens->getNextMeaningfulToken($index)]->isGivenKind([T_FUNCTION, T_VARIABLE]) ) { continue; } if ($token->isGivenKind(T_OPEN_TAG)) { if ($tokens[$whitespaceTokenIndex]->equals([T_WHITESPACE]) && !str_contains($token->getContent(), ""\n"")) { if ($tokens[$whitespaceTokenIndex]->equals([T_WHITESPACE]) && !str_contains($token->getContent(), ""\n"")) { $tokens->clearAt($whitespaceTokenIndex); } continue; } if ($token->isGivenKind(T_CLASS) && $tokens[$tokens->getNextMeaningfulToken($index)]->equals('(')) { continue; }"	type_info: index:unknown token:unknown whitespaceTokenIndex:unknown tokens:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition isMultiLineReturn isMultilineExtendsOrImplementsWithMoreThanOneAncestor isMultilineConstant	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	PHP-CS-Fixer_PHP-CS-Fixer_adf4d08979274845177fd6fcf8c17a9fbb2044a1_64_0	buggy: } elseif ($firstArgToken->isGivenKind([T_FUNCTION, T_STATIC])) { context: $newCallTokens = Tokens::fromCode('<?php '.substr(str_replace('\\\\', '\\', $firstArgToken->getContent()), 1, -1).'();'); $newCallTokensSize = $newCallTokens->count(); $newCallTokens->clearAt(0); $newCallTokens->clearRange($newCallTokensSize - 3, $newCallTokensSize - 1); $newCallTokens->clearEmptyTokens(); $this->replaceCallUserFuncWithCallback($tokens, $index, $newCallTokens, $firstArgIndex, $firstArgIndex); } elseif ($firstArgToken->isGivenKind([T_FUNCTION, T_STATIC])) { } elseif ($firstArgToken->isGivenKind([T_FUNCTION, T_STATIC])) { $firstArgEndIndex = $tokens->findBlockEnd( Tokens::BLOCK_TYPE_CURLY_BRACE, $tokens->getNextTokenOfKind($firstArgIndex, ['{']) ); $newCallTokens = $this->getTokensSubcollection($tokens, $firstArgIndex, $firstArgEndIndex);	type_info: index:unknown firstArgIndex:unknown firstArgToken:unknown newCallTokens:unknown newCallTokensSize:unknown firstArgEndIndex:unknown  global_variable:  function_name: getDefinition getPriority isCandidate isRisky applyFix processCall replaceCallUserFuncWithCallback getTokensSubcollection isValidFunctionInvoke	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	PHP-CS-Fixer_PHP-CS-Fixer_366dea2fde82aa6dfc4c848282dd8e6a6b5881ac_65_0	buggy:  context: T_FOREACH, T_WHILE, T_SWITCH, T_CASE, T_DEFAULT, T_TRY, T_FUNCTION, T_CLASS, T_INTERFACE, T_TRAIT, ]; if (\defined('T_MATCH')) { $blockSignatureFirstTokens[] = T_MATCH; } $blockFirstTokens = ['{', [CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN], [T_EXTENDS], [T_IMPLEMENTS], [CT::T_USE_TRAIT], [CT::T_GROUP_IMPORT_BRACE_OPEN]]; if (\defined('T_ATTRIBUTE')) { $blockFirstTokens[] = [T_ATTRIBUTE]; }	type_info: blockSignatureFirstTokens:array blockFirstTokens:array  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	PHP-CS-Fixer_PHP-CS-Fixer_366dea2fde82aa6dfc4c848282dd8e6a6b5881ac_65_0	buggy: $blockFirstTokens = ['{', [CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN], [T_EXTENDS], [T_IMPLEMENTS], [CT::T_USE_TRAIT], [CT::T_GROUP_IMPORT_BRACE_OPEN]]; context: T_TRY, T_FUNCTION, T_CLASS, T_INTERFACE, T_TRAIT, ]; if (\defined('T_MATCH')) { $blockSignatureFirstTokens[] = T_MATCH; } $blockFirstTokens = ['{', [CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN], [T_EXTENDS], [T_IMPLEMENTS], [CT::T_USE_TRAIT], [CT::T_GROUP_IMPORT_BRACE_OPEN]]; $blockFirstTokens = ['{', [CT::T_DESTRUCTURING_SQUARE_BRACE_OPEN], [T_EXTENDS], [T_IMPLEMENTS], [CT::T_USE_TRAIT], [CT::T_GROUP_IMPORT_BRACE_OPEN]]; if (\defined('T_ATTRIBUTE')) { $blockFirstTokens[] = [T_ATTRIBUTE]; } $endIndex = \count($tokens) - 1; if ($tokens[$endIndex]->isWhitespace()) { --$endIndex; }	type_info: blockSignatureFirstTokens:array blockFirstTokens:array endIndex:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	PHP-CS-Fixer_PHP-CS-Fixer_366dea2fde82aa6dfc4c848282dd8e6a6b5881ac_65_0	buggy: if ($tokens[$endIndex]->equalsAny(['{', ';', [T_DOUBLE_ARROW]])) { context: } if ($token->isGivenKind($blockSignatureFirstTokens)) { for ($endIndex = $index + 1, $max = \count($tokens); $endIndex < $max; ++$endIndex) { if ($tokens[$endIndex]->equals('(')) { $endIndex = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $endIndex); continue; } if ($tokens[$endIndex]->equalsAny(['{', ';', [T_DOUBLE_ARROW]])) { if ($tokens[$endIndex]->equalsAny(['{', ';', [T_DOUBLE_ARROW]])) { break; } if ($tokens[$endIndex]->equals(':')) { if ($token->isGivenKind([T_CASE, T_DEFAULT])) { $caseBlockStarts[$endIndex] = $index; } else { $alternativeBlockStarts[$endIndex] = $index; }	type_info: blockSignatureFirstTokens:array endIndex:unknown alternativeBlockStarts:array caseBlockStarts:array index:unknown max:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	PHP-CS-Fixer_PHP-CS-Fixer_366dea2fde82aa6dfc4c848282dd8e6a6b5881ac_65_0	buggy: 'is_indented_block' => false, context: break; } } $scopes[] = [ 'type' => 'block_signature', 'skip' => false, 'end_index' => $endIndex, 'end_index_inclusive' => true, 'initial_indent' => $this->getLineIndentationWithBracesCompatibility($tokens, $index, $lastIndent), 'is_indented_block' => false, 'is_indented_block' => false, ]; continue; } if ( $token->isWhitespace() || ($index > 0 && $tokens[$index - 1]->isGivenKind(T_OPEN_TAG)) ) {	type_info: endIndex:unknown lastIndent:unknown scopes:array index:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	PHP-CS-Fixer_PHP-CS-Fixer_b81e40fc1b813d3409d75e4384655040fdacafff_66_0	buggy: if ($token->isComment()) { continue; } context: ]; $previousLineInitialIndent = ''; $previousLineNewIndent = ''; $alternativeBlockStarts = []; $caseBlockStarts = []; foreach ($tokens as $index => $token) { $currentScope = \count($scopes) - 1; if ($token->isComment()) { continue; } if ($token->isComment()) { continue; } if ( $token->equalsAny($blockFirstTokens) || ($token->equals('(') && !$tokens[$tokens->getPrevMeaningfulToken($index)]->isGivenKind(T_ARRAY)) || isset($alternativeBlockStarts[$index]) || isset($caseBlockStarts[$index]) ) {	type_info: blockFirstTokens:array scopes:array previousLineInitialIndent:string previousLineNewIndent:string alternativeBlockStarts:array caseBlockStarts:array index:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	PHP-CS-Fixer_PHP-CS-Fixer_b81e40fc1b813d3409d75e4384655040fdacafff_66_0	buggy: $firstMeaningFulTokenIndex = null; context: && $nextToken->isComment() && !$this->isCommentWithFixableIndentation($tokens, $index + 1) ) { continue; } if ('block' === $scopes[$currentScope]['type'] || 'block_signature' === $scopes[$currentScope]['type']) { $indent = false; if ($scopes[$currentScope]['is_indented_block']) { $firstMeaningFulTokenIndex = null; $firstMeaningFulTokenIndex = null; $nextNewlineIndex = null; for ($searchIndex = $index + 1, $max = \count($tokens); $searchIndex < $max; ++$searchIndex) { $searchToken = $tokens[$searchIndex]; if (!$searchToken->isWhitespace() && !$searchToken->isComment()) { if (null === $firstMeaningFulTokenIndex) { $firstMeaningFulTokenIndex = $searchIndex; }	type_info: scopes:array index:unknown nextToken:unknown indent:boolean firstMeaningFulTokenIndex:unknown nextNewlineIndex:unknown searchIndex:unknown searchToken:unknown max:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	PHP-CS-Fixer_PHP-CS-Fixer_b81e40fc1b813d3409d75e4384655040fdacafff_66_0	buggy: if (!$searchToken->isWhitespace() && !$searchToken->isComment()) { if (null === $firstMeaningFulTokenIndex) { $firstMeaningFulTokenIndex = $searchIndex; context: if ('block' === $scopes[$currentScope]['type'] || 'block_signature' === $scopes[$currentScope]['type']) { $indent = false; if ($scopes[$currentScope]['is_indented_block']) { $firstMeaningFulTokenIndex = null; $nextNewlineIndex = null; for ($searchIndex = $index + 1, $max = \count($tokens); $searchIndex < $max; ++$searchIndex) { $searchToken = $tokens[$searchIndex]; if (!$searchToken->isWhitespace() && !$searchToken->isComment()) { if (null === $firstMeaningFulTokenIndex) { $firstMeaningFulTokenIndex = $searchIndex; if (!$searchToken->isWhitespace() && !$searchToken->isComment()) { if (null === $firstMeaningFulTokenIndex) { $firstMeaningFulTokenIndex = $searchIndex; } continue; } if ($searchToken->isWhitespace() && Preg::match('/\R/', $searchToken->getContent())) { $nextNewlineIndex = $searchIndex;	type_info: scopes:array index:unknown indent:boolean firstMeaningFulTokenIndex:unknown nextNewlineIndex:unknown searchIndex:unknown searchToken:unknown max:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	PHP-CS-Fixer_PHP-CS-Fixer_b81e40fc1b813d3409d75e4384655040fdacafff_66_0	buggy: if ($searchToken->isWhitespace() && Preg::match('/\R/', $searchToken->getContent())) { context: $searchToken = $tokens[$searchIndex]; if (!$searchToken->isWhitespace() && !$searchToken->isComment()) { if (null === $firstMeaningFulTokenIndex) { $firstMeaningFulTokenIndex = $searchIndex; } continue; } if ($searchToken->isWhitespace() && Preg::match('/\R/', $searchToken->getContent())) { if ($searchToken->isWhitespace() && Preg::match('/\R/', $searchToken->getContent())) { $nextNewlineIndex = $searchIndex; break; } } if (!$this->isCommentForControlSructureContinuation($tokens, $index + 1)) { $endIndex = $scopes[$currentScope]['end_index'];	type_info: endIndex:unknown scopes:array index:unknown firstMeaningFulTokenIndex:unknown nextNewlineIndex:unknown searchIndex:unknown searchToken:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	PHP-CS-Fixer_PHP-CS-Fixer_b81e40fc1b813d3409d75e4384655040fdacafff_66_0	buggy: (null !== $firstMeaningFulTokenIndex && $firstMeaningFulTokenIndex < $endIndex) context: } if (!$this->isCommentForControlSructureContinuation($tokens, $index + 1)) { $endIndex = $scopes[$currentScope]['end_index']; if (!$scopes[$currentScope]['end_index_inclusive']) { ++$endIndex; } if ( (null !== $firstMeaningFulTokenIndex && $firstMeaningFulTokenIndex < $endIndex) (null !== $firstMeaningFulTokenIndex && $firstMeaningFulTokenIndex < $endIndex) || (null !== $nextNewlineIndex && $nextNewlineIndex < $endIndex) ) { $indent = true; } } } $previousLineInitialIndent = $this->extractIndent($content);	type_info: endIndex:unknown scopes:array previousLineInitialIndent:string index:unknown content:unknown indent:boolean firstMeaningFulTokenIndex:unknown nextNewlineIndex:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	PHP-CS-Fixer_PHP-CS-Fixer_b81e40fc1b813d3409d75e4384655040fdacafff_66_0	buggy: if ($token->equalsAny([';', ',', '}', [T_OPEN_TAG], [T_CLOSE_TAG], [CT::T_ATTRIBUTE_CLOSE]])) { context: while ($index >= $scopes[$currentScope]['end_index']) { array_pop($scopes); if ([] === $scopes) { return; } --$currentScope; } if ($token->equalsAny([';', ',', '}', [T_OPEN_TAG], [T_CLOSE_TAG], [CT::T_ATTRIBUTE_CLOSE]])) { if ($token->equalsAny([';', ',', '}', [T_OPEN_TAG], [T_CLOSE_TAG], [CT::T_ATTRIBUTE_CLOSE]])) { continue; } if ('statement' !== $scopes[$currentScope]['type'] && 'block_signature' !== $scopes[$currentScope]['type']) { $endIndex = $this->findStatementEndIndex($tokens, $index, $scopes[$currentScope]['end_index']); if ($endIndex === $index) { continue; }	type_info: endIndex:unknown scopes:array index:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	PHP-CS-Fixer_PHP-CS-Fixer_b81e40fc1b813d3409d75e4384655040fdacafff_66_0	buggy: return [$tokens->getPrevMeaningfulToken($index), false]; context: $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $index); continue; } if ($tokens[$index]->equalsAny([[T_CASE], [T_DEFAULT]])) { return [$index, true]; } if ($tokens[$index]->equalsAny(['}', [T_ENDSWITCH]])) { return [$tokens->getPrevMeaningfulToken($index), false]; return [$tokens->getPrevMeaningfulToken($index), false]; } } throw new \LogicException('End of case block not found.'); } private function getLineIndentationWithBracesCompatibility(Tokens $tokens, int $index, string $regularIndent): string { if (	type_info: index:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	PHP-CS-Fixer_PHP-CS-Fixer_304ee4dde5e707d0e228b48dd1d44e02f5eb2826_67_0	buggy:  context: $endIndex = \count($tokens) - 1; if ($tokens[$endIndex]->isWhitespace()) { --$endIndex; } $lastIndent = $this->getLineIndentationWithBracesCompatibility( $tokens, 0, $this->extractIndent($this->computeNewLineContent($tokens, 0)), ); $scopes = [ [ 'type' => 'block', 'skip' => false, 'end_index' => $endIndex, 'end_index_inclusive' => true, 'initial_indent' => $lastIndent, 'is_indented_block' => false, ], ];	type_info: endIndex:unknown lastIndent:unknown scopes:array  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	PHP-CS-Fixer_PHP-CS-Fixer_304ee4dde5e707d0e228b48dd1d44e02f5eb2826_67_0	buggy:  context: } $scopes[] = [ 'type' => 'block', 'skip' => $skip, 'end_index' => $endIndex, 'end_index_inclusive' => $endIndexInclusive, 'initial_indent' => $initialIndent, 'is_indented_block' => true, ]; continue; } if ($token->isGivenKind($blockSignatureFirstTokens)) { for ($endIndex = $index + 1, $max = \count($tokens); $endIndex < $max; ++$endIndex) { if ($tokens[$endIndex]->equals('(')) { $endIndex = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $endIndex); continue;	type_info: blockSignatureFirstTokens:array endIndex:unknown scopes:array index:unknown endIndexInclusive:boolean initialIndent:unknown skip:boolean max:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	PHP-CS-Fixer_PHP-CS-Fixer_3b471b43374f8c66b949c8d44290be6a71f37e0e_68_0	buggy: $types[] = '(?P<tag3>'.implode('|', $tagsWithMethodSignatureToAlign).')(\s+(?P<hint3>[^\s(]+)|)\s+(?P<signature>.+\))'; context: } if ([] !== $tagsWithoutNameToAlign) { $types[] = '(?P<tag2>'.implode('|', $tagsWithoutNameToAlign).')\s+(?P<hint2>(?:'.TypeExpression::REGEX_TYPES.')?)'; } if ([] !== $tagsWithMethodSignatureToAlign) { $types[] = '(?P<tag3>'.implode('|', $tagsWithMethodSignatureToAlign).')(\s+(?P<hint3>[^\s(]+)|)\s+(?P<signature>.+\))'; $types[] = '(?P<tag3>'.implode('|', $tagsWithMethodSignatureToAlign).')(\s+(?P<hint3>[^\s(]+)|)\s+(?P<signature>.+\))'; } $desc = '(?:\s+(?P<desc>\V*))'; $this->regex = '/^'.$indent.'\ \*\ @(?J)(?:'.implode('|', $types).')'.$desc.'\s*$/ux'; $this->regexCommentLine = '/^'.$indent.' \*(?! @)(?:\s+(?P<desc>\V+))(?<!\*\/)\r?$/u';	type_info: tagsWithMethodSignatureToAlign:unknown tagsWithoutNameToAlign:unknown types:array indent:string desc:string align:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	PHP-CS-Fixer_PHP-CS-Fixer_3b471b43374f8c66b949c8d44290be6a71f37e0e_68_0	buggy:  context: } $matches = $this->getMatches($docBlock->getLine($i)->getContent(), true); if (null === $matches) { break; } $items[] = $matches; } $tagMax = 0; $hintMax = 0; $varMax = 0; foreach ($items as $item) { if (null === $item['tag']) { continue; } $tagMax = max($tagMax, \strlen($item['tag']));	type_info: docBlock:unknown align:unknown i:unknown items:array matches:unknown tagMax:integer hintMax:integer varMax:integer item:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	PHP-CS-Fixer_PHP-CS-Fixer_3b471b43374f8c66b949c8d44290be6a71f37e0e_68_0	buggy:  context: $tagMax = 0; $hintMax = 0; $varMax = 0; foreach ($items as $item) { if (null === $item['tag']) { continue; } $tagMax = max($tagMax, \strlen($item['tag'])); $hintMax = max($hintMax, \strlen($item['hint'])); $varMax = max($varMax, \strlen($item['var'])); } $currTag = null; foreach ($items as $j => $item) { if (null === $item['tag']) { if ('@' === $item['desc'][0]) {	type_info: align:unknown items:array tagMax:integer hintMax:integer varMax:integer currTag:unknown j:unknown item:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	PHP-CS-Fixer_PHP-CS-Fixer_3b471b43374f8c66b949c8d44290be6a71f37e0e_68_0	buggy:  context: continue; } $extraIndent = 2; if (\in_array($currTag, self::TAGS_WITH_NAME, true) || \in_array($currTag, self::TAGS_WITH_METHOD_SIGNATURE, true)) { $extraIndent = 3; } $line = $item['indent'] .' * ' .$this->getIndent( $tagMax + $hintMax + $varMax + $extraIndent, $this->getLeftAlignedDescriptionIndent($items, $j) ) .$item['desc'] .$lineEnding;	type_info: align:unknown lineEnding:unknown items:array tagMax:integer hintMax:integer varMax:integer currTag:unknown j:unknown extraIndent:integer line:unknown item:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	PHP-CS-Fixer_PHP-CS-Fixer_3b471b43374f8c66b949c8d44290be6a71f37e0e_68_0	buggy: .$this->getIndent( $tagMax - \strlen($item['tag']) + 1, context: continue; } $currTag = $item['tag']; $line = $item['indent'] .' * @' .$item['tag'] .$this->getIndent( $tagMax - \strlen($item['tag']) + 1, .$this->getIndent( $tagMax - \strlen($item['tag']) + 1, $item['hint'] ? 1 : 0 ) .$item['hint'] ; if (!empty($item['var'])) { $line .= $this->getIndent(($hintMax ?: -1) - \strlen($item['hint']) + 1)	type_info: align:unknown tagMax:integer hintMax:integer currTag:unknown line:unknown item:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	PHP-CS-Fixer_PHP-CS-Fixer_3b471b43374f8c66b949c8d44290be6a71f37e0e_68_0	buggy:  context: if (!empty($matches['tag2'])) { $matches['tag'] = $matches['tag2']; $matches['hint'] = $matches['hint2']; $matches['var'] = ''; } if (!empty($matches['tag3'])) { $matches['tag'] = $matches['tag3']; $matches['hint'] = $matches['hint3']; $matches['var'] = $matches['signature']; } if (isset($matches['hint'])) { $matches['hint'] = trim($matches['hint']); } return $matches; } if ($matchCommentOnly && Preg::match($this->regexCommentLine, $line, $matches)) {	type_info: align:unknown matches:unknown line:unknown matchCommentOnly:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	PHP-CS-Fixer_PHP-CS-Fixer_3b471b43374f8c66b949c8d44290be6a71f37e0e_68_0	buggy:  context: if (!empty($matches['tag3'])) { $matches['tag'] = $matches['tag3']; $matches['hint'] = $matches['hint3']; $matches['var'] = $matches['signature']; } if (isset($matches['hint'])) { $matches['hint'] = trim($matches['hint']); } return $matches; } if ($matchCommentOnly && Preg::match($this->regexCommentLine, $line, $matches)) { $matches['tag'] = null; $matches['var'] = ''; $matches['hint'] = ''; return $matches; }	type_info: align:unknown matches:unknown line:unknown matchCommentOnly:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	PHP-CS-Fixer_PHP-CS-Fixer_3b471b43374f8c66b949c8d44290be6a71f37e0e_68_0	buggy:  context: $matches['hint'] = trim($matches['hint']); } return $matches; } if ($matchCommentOnly && Preg::match($this->regexCommentLine, $line, $matches)) { $matches['tag'] = null; $matches['var'] = ''; $matches['hint'] = ''; return $matches; } return null; } private function getIndent(int $verticalAlignIndent, int $leftAlignIndent = 1): string { $indent = self::ALIGN_VERTICAL === $this->align ? $verticalAlignIndent : $leftAlignIndent;	type_info: indent:string align:unknown matches:unknown line:unknown matchCommentOnly:unknown leftAlignIndent:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	PHP-CS-Fixer_PHP-CS-Fixer_3b471b43374f8c66b949c8d44290be6a71f37e0e_68_0	buggy:  context: if (null !== $item['tag']) { break; } } if (null === $item) { return 0; } return $this->getSentenceIndent($item['tag']) + $this->getSentenceIndent($item['hint']) + $this->getSentenceIndent($item['var']); } private function getSentenceIndent(?string $sentence): int { if (null === $sentence) { return 0; }	type_info: align:unknown item:unknown  global_variable: align: unknown function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixDocBlock getMatches getIndent getLeftAlignedDescriptionIndent getSentenceIndent	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	PHP-CS-Fixer_PHP-CS-Fixer_32cf09ef7a707c533c465457306ebbd9dc46f2f6_69_0	buggy: && $tokens[$prevIndex]->equalsAny([']', [T_CLASS], [T_STRING], [T_VARIABLE]]) context: continue; } if (!$tokens[$index]->equals('(')) { continue; } $prevPrevIndex = $tokens->getPrevMeaningfulToken($prevIndex); if ($fixArguments && $tokens[$prevIndex]->equalsAny([']', [T_CLASS], [T_STRING], [T_VARIABLE]]) && $tokens[$prevIndex]->equalsAny([']', [T_CLASS], [T_STRING], [T_VARIABLE]]) && !$tokens[$prevPrevIndex]->isGivenKind(T_FUNCTION) ) { $this->fixBlock($tokens, $index); continue; } if ( $fixParameters	type_info: fixArguments:unknown fixParameters:unknown index:unknown prevIndex:unknown prevPrevIndex:unknown  global_variable:  function_name: getDefinition foo getPriority isCandidate createConfigurationDefinition applyFix fixBlock fixMatch	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	PHP-CS-Fixer_PHP-CS-Fixer_e59005df5efc453c843028cf106bad300a7ceb2b_70_0	buggy: $index = $this->getLastTokenIndexOfFn($tokens, $index); context: && ('=' !== $content || !$this->isEqualPartOfDeclareStatement($tokens, $index)) && $newLineFoundSinceLastPlaceholder ) { $tokens[$index] = new Token(sprintf(self::ALIGN_PLACEHOLDER, $this->currentLevel).$content); $newLineFoundSinceLastPlaceholder = false; continue; } if ($token->isGivenKind(T_FN)) { $index = $this->getLastTokenIndexOfFn($tokens, $index); $index = $this->getLastTokenIndexOfFn($tokens, $index); continue; } if ($token->isGivenKind([T_FUNCTION, T_CLASS])) { $index = $tokens->getNextTokenOfKind($index, ['{', ';', '(']); if ($tokens[$index]->equals('(')) { $index = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $index);	type_info: index:unknown content:unknown newLineFoundSinceLastPlaceholder:boolean token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholdersDefault injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders getLastTokenIndexOfFn	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	PHP-CS-Fixer_PHP-CS-Fixer_e59005df5efc453c843028cf106bad300a7ceb2b_70_0	"buggy: $index = $this->getLastTokenIndexOfFn($tokens, $index); context: for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index]; $content = $token->getContent(); if (str_contains($content, ""\n"")) { $newLineFoundSinceLastPlaceholder = true; } if ($token->isGivenKind(T_FN)) { $index = $this->getLastTokenIndexOfFn($tokens, $index); $index = $this->getLastTokenIndexOfFn($tokens, $index); continue; } if ($token->isGivenKind(T_ARRAY)) { $from = $tokens->getNextMeaningfulToken($index); $until = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $from); $index = $until;"	type_info: index:unknown content:unknown newLineFoundSinceLastPlaceholder:boolean token:unknown until:unknown from:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholdersDefault injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders getLastTokenIndexOfFn	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	PHP-CS-Fixer_PHP-CS-Fixer_e59005df5efc453c843028cf106bad300a7ceb2b_70_0	buggy:  context: $arrayEndIndex = $tokens->findBlockEnd($blockType['type'], $arrayStartIndex); if ($tokens->isPartialCodeMultiline($arrayStartIndex, $arrayEndIndex)) { break; } } ++$index; } } } } private function injectArrayAlignmentPlaceholders(Tokens $tokens, int $from, int $until): void { if ($tokens->isPartialCodeMultiline($from, $until)) { ++$this->deepestLevel; $currentLevel = $this->currentLevel; $this->currentLevel = $this->deepestLevel; $this->injectAlignmentPlaceholdersForArrow($tokens, $from, $until);	type_info: index:unknown until:unknown currentLevel:unknown from:unknown arrayStartIndex:unknown blockType:unknown arrayEndIndex:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholdersDefault injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders getLastTokenIndexOfFn	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	PHP-CS-Fixer_PHP-CS-Fixer_2cbb591bb68a6dfd7162de84f71e07e2349ad621_71_0	buggy:  context: } if ($this->isValidVariable($tokens, $nextIndex)) { return true; } if ($this->isValidLanguageConstruct($tokens, $token, $nextIndex)) { return true; } return false; } public function getCommentBlockIndices(Tokens $tokens, int $index): array { if (!$tokens[$index]->isGivenKind(T_COMMENT)) { throw new \InvalidArgumentException('Given index must point to a comment.'); } $commentType = $this->getCommentType($tokens[$index]->getContent());	type_info: token:unknown nextIndex:unknown commentType:unknown index:unknown  global_variable:  function_name: isHeaderComment isBeforeStructuralElement getCommentBlockIndices isStructuralElement isValidControl isValidLanguageConstruct isValidVariable getCommentType getLineBreakCount	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	PHP-CS-Fixer_PHP-CS-Fixer_ee157265a6f5702de0c4826df25ee35fabb777c6_72_0	buggy: use PhpCsFixer\Tokenizer\CT; context: namespace PhpCsFixer\Fixer\Whitespace; use PhpCsFixer\AbstractFixer; use PhpCsFixer\Fixer\WhitespacesAwareFixerInterface; use PhpCsFixer\FixerDefinition\CodeSample; use PhpCsFixer\FixerDefinition\FixerDefinition; use PhpCsFixer\FixerDefinition\FixerDefinitionInterface; use PhpCsFixer\Preg; use PhpCsFixer\Tokenizer\CT; use PhpCsFixer\Tokenizer\CT; use PhpCsFixer\Tokenizer\Token; use PhpCsFixer\Tokenizer\Tokens; final class MethodChainingIndentationFixer extends AbstractFixer implements WhitespacesAwareFixerInterface { public function getDefinition(): FixerDefinitionInterface { return new FixerDefinition( 'Method chaining MUST be properly indented. Method chaining with different levels of indentation is not supported.',	type_info:  global_variable:  function_name: getDefinition isCandidate applyFix getExpectedIndentAt canBeMovedToNextLine getIndentAt getIndentContentAt currentLineRequiresExtraIndentLevel	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	PHP-CS-Fixer_PHP-CS-Fixer_ee157265a6f5702de0c4826df25ee35fabb777c6_72_0	buggy: if ($tokens[$start + 1]->isObjectOperator()) { return false; } context: private function currentLineRequiresExtraIndentLevel(Tokens $tokens, int $start, int $end): bool { if ($tokens[$start + 1]->isObjectOperator()) { return false; } if ($tokens[$start + 1]->isObjectOperator()) { return false; } if ($tokens[$end]->isGivenKind(CT::T_BRACE_CLASS_INSTANTIATION_CLOSE)) { return true; } return !$tokens[$end]->equals(')') || $tokens->findBlockStart(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $end) >= $start ; }	type_info:  global_variable:  function_name: getDefinition isCandidate applyFix getExpectedIndentAt canBeMovedToNextLine getIndentAt getIndentContentAt currentLineRequiresExtraIndentLevel	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	PHP-CS-Fixer_PHP-CS-Fixer_ee157265a6f5702de0c4826df25ee35fabb777c6_72_0	buggy: if ($tokens[$end]->isGivenKind(CT::T_BRACE_CLASS_INSTANTIATION_CLOSE)) { return true; context: private function currentLineRequiresExtraIndentLevel(Tokens $tokens, int $start, int $end): bool { if ($tokens[$start + 1]->isObjectOperator()) { return false; } if ($tokens[$end]->isGivenKind(CT::T_BRACE_CLASS_INSTANTIATION_CLOSE)) { return true; if ($tokens[$end]->isGivenKind(CT::T_BRACE_CLASS_INSTANTIATION_CLOSE)) { return true; } return !$tokens[$end]->equals(')') || $tokens->findBlockStart(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $end) >= $start ; }	type_info:  global_variable:  function_name: getDefinition isCandidate applyFix getExpectedIndentAt canBeMovedToNextLine getIndentAt getIndentContentAt currentLineRequiresExtraIndentLevel	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
67	PHP-CS-Fixer_PHP-CS-Fixer_10005119bff9471912d97fc4d3aa03c0fd782164_73_0	buggy: $prevIndex = $tokens->getTokenNotOfKindsSibling($index, -1, [T_CALLABLE, T_NS_SEPARATOR, T_STRING, CT::T_ARRAY_TYPEHINT, T_WHITESPACE, T_COMMENT, T_DOC_COMMENT]); context: protected function doProcess(Tokens $tokens, int $index, $originalToken): void { if (!$tokens[$index]->equals($originalToken)) { return; } $prevIndex = $tokens->getTokenNotOfKindsSibling($index, -1, [T_CALLABLE, T_NS_SEPARATOR, T_STRING, CT::T_ARRAY_TYPEHINT, T_WHITESPACE, T_COMMENT, T_DOC_COMMENT]); $prevIndex = $tokens->getTokenNotOfKindsSibling($index, -1, [T_CALLABLE, T_NS_SEPARATOR, T_STRING, CT::T_ARRAY_TYPEHINT, T_WHITESPACE, T_COMMENT, T_DOC_COMMENT]); $prevToken = $tokens[$prevIndex]; if ($prevToken->isGivenKind([ CT::T_TYPE_COLON, CT::T_TYPE_ALTERNATION, CT::T_TYPE_INTERSECTION,	type_info: prevIndex:unknown prevToken:unknown  global_variable:  function_name: doProcess replaceToken	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
68	PHP-CS-Fixer_PHP-CS-Fixer_10005119bff9471912d97fc4d3aa03c0fd782164_73_0	buggy:  context: abstract protected function replaceToken(Tokens $tokens, int $index): void; }	type_info:  global_variable:  function_name: doProcess replaceToken	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
69	PHP-CS-Fixer_PHP-CS-Fixer_10005119bff9471912d97fc4d3aa03c0fd782164_73_1	buggy:  context: public function getPriority(): int { return -15; }	type_info:  global_variable:  function_name: foo getPriority getRequiredPhpVersionId process getCustomTokens replaceToken	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
70	PHP-CS-Fixer_PHP-CS-Fixer_10005119bff9471912d97fc4d3aa03c0fd782164_73_2	buggy:  context: public function getPriority(): int { return -15; }	type_info:  global_variable:  function_name: foo getPriority getRequiredPhpVersionId process getCustomTokens replaceToken	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	PHP-CS-Fixer_PHP-CS-Fixer_92c0600af6929107e20a7119ce63db9ef2a923a3_74_0	buggy: $this->fixWhitespace($tokens, $index - 1); context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { foreach ($tokens as $index => $token) { if (!$token->isGivenKind(T_DOUBLE_ARROW)) { continue; } $this->fixWhitespace($tokens, $index - 1); $this->fixWhitespace($tokens, $index - 1); if (!$tokens[$index + 2]->isComment()) { $this->fixWhitespace($tokens, $index + 1); } } }	type_info: index:unknown token:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix fixWhitespace	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	PHP-CS-Fixer_PHP-CS-Fixer_cc8d27ad98e44367f693558a46cda3856b426931_75_0	buggy: if (Tokens::BLOCK_TYPE_CURLY_BRACE === $blockType['type']) { context: if (!$tokens[$index]->isGivenKind(T_THROW)) { continue; } $endCandidateIndex = $tokens->getNextMeaningfulToken($index); while (!$tokens[$endCandidateIndex]->equalsAny([')', ']', ',', ';'])) { $blockType = Tokens::detectBlockType($tokens[$endCandidateIndex]); if (null !== $blockType) { if (Tokens::BLOCK_TYPE_CURLY_BRACE === $blockType['type']) { if (Tokens::BLOCK_TYPE_CURLY_BRACE === $blockType['type']) { break; } $endCandidateIndex = $tokens->findBlockEnd($blockType['type'], $endCandidateIndex); } $endCandidateIndex = $tokens->getNextMeaningfulToken($endCandidateIndex); }	type_info: index:unknown endCandidateIndex:unknown blockType:unknown tokens:unknown  global_variable:  function_name: getDefinition isCandidate getPriority applyFix trimNewLines isPreviousTokenToClear isNextTokenToClear	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	PHP-CS-Fixer_PHP-CS-Fixer_a09cb9f624acff864438031b90f89575d349da87_76_0	buggy:  context: $isContainingDangerousConstructs = false; for ($paramTokenIndex = $matches[1]; $paramTokenIndex <= $referenceEnd; ++$paramTokenIndex) { if (\in_array($tokens[$paramTokenIndex]->getContent(), ['?', '?:', '=', '??'], true)) { $isContainingDangerousConstructs = true; break; } } $parentLeftToken = $tokens[$tokens->getPrevMeaningfulToken($isNullIndex)]; $parentRightToken = $tokens[$tokens->getNextMeaningfulToken($referenceEnd)]; $parentOperations = [T_IS_EQUAL, T_IS_NOT_EQUAL, T_IS_IDENTICAL, T_IS_NOT_IDENTICAL]; $wrapIntoParentheses = $parentLeftToken->isGivenKind($parentOperations) || $parentRightToken->isGivenKind($parentOperations); $prevIndex = $tokens->getPrevMeaningfulToken($referenceEnd); if ($tokens[$prevIndex]->equals(',')) { $tokens->clearTokenAndMergeSurroundingWhitespace($prevIndex); }	type_info: matches:unknown referenceEnd:unknown isContainingDangerousConstructs:boolean paramTokenIndex:unknown parentLeftToken:unknown parentRightToken:unknown parentOperations:array wrapIntoParentheses:unknown prevIndex:unknown  global_variable:  function_name: getDefinition getPriority isCandidate isRisky applyFix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	PHP-CS-Fixer_PHP-CS-Fixer_a09cb9f624acff864438031b90f89575d349da87_76_0	buggy: $wrapIntoParentheses = $parentLeftToken->isGivenKind($parentOperations) || $parentRightToken->isGivenKind($parentOperations); context: if (\in_array($tokens[$paramTokenIndex]->getContent(), ['?', '?:', '=', '??'], true)) { $isContainingDangerousConstructs = true; break; } } $parentLeftToken = $tokens[$tokens->getPrevMeaningfulToken($isNullIndex)]; $parentRightToken = $tokens[$tokens->getNextMeaningfulToken($referenceEnd)]; $parentOperations = [T_IS_EQUAL, T_IS_NOT_EQUAL, T_IS_IDENTICAL, T_IS_NOT_IDENTICAL]; $wrapIntoParentheses = $parentLeftToken->isGivenKind($parentOperations) || $parentRightToken->isGivenKind($parentOperations); $wrapIntoParentheses = $parentLeftToken->isGivenKind($parentOperations) || $parentRightToken->isGivenKind($parentOperations); $prevIndex = $tokens->getPrevMeaningfulToken($referenceEnd); if ($tokens[$prevIndex]->equals(',')) { $tokens->clearTokenAndMergeSurroundingWhitespace($prevIndex); } if (!$isContainingDangerousConstructs) { $tokens->removeLeadingWhitespace($referenceEnd);	type_info: referenceEnd:unknown isContainingDangerousConstructs:boolean paramTokenIndex:unknown parentLeftToken:unknown parentRightToken:unknown parentOperations:array wrapIntoParentheses:unknown prevIndex:unknown  global_variable:  function_name: getDefinition getPriority isCandidate isRisky applyFix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	PHP-CS-Fixer_PHP-CS-Fixer_bb94db03188b90e144fe91c7f4baaa00dd64ffa4_77_0	"buggy: * Must run before BinaryOperatorSpacesFixer, MethodArgumentSpaceFixer, TrailingCommaInMultilineFixer. context: public function getDefinition(): FixerDefinitionInterface { return new FixerDefinition( 'Operator `=>` should not be surrounded by multi-line whitespaces.', [new CodeSample(""<?php\n\$a = array(1\n\n=> 2);\n"")] ); } * Must run before BinaryOperatorSpacesFixer, MethodArgumentSpaceFixer, TrailingCommaInMultilineFixer. public function getPriority(): int"	type_info: a:unknown  global_variable:  function_name: getDefinition getPriority isCandidate applyFix fixWhitespace	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	PHP-CS-Fixer_PHP-CS-Fixer_bb94db03188b90e144fe91c7f4baaa00dd64ffa4_77_1	"buggy: public function getPriority(): int { return 0; } context: , new VersionSpecification(70300), ['after_heredoc' => true] ), new VersionSpecificCodeSample(""<?php\nfoo(\n 1,\n 2\n);\n"", new VersionSpecification(70300), ['elements' => [self::ELEMENTS_ARGUMENTS]]), new VersionSpecificCodeSample(""<?php\nfunction foo(\n \$x,\n \$y\n)\n{\n}\n"", new VersionSpecification(80000), ['elements' => [self::ELEMENTS_PARAMETERS]]), ] ); } public function getPriority(): int { return 0; } public function getPriority(): int { return 0; } public function isCandidate(Tokens $tokens): bool { return $tokens->isAnyTokenKindsFound([T_ARRAY, CT::T_ARRAY_SQUARE_BRACE_OPEN, '(']); }"	type_info: x:array  global_variable:  function_name: getDefinition foo getPriority isCandidate createConfigurationDefinition applyFix fixBlock fixMatch	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	PHP-CS-Fixer_PHP-CS-Fixer_bb94db03188b90e144fe91c7f4baaa00dd64ffa4_77_1	buggy:  context: $tokensAnalyzer = new TokensAnalyzer($tokens); if (!$tokensAnalyzer->isBlockMultiline($tokens, $startIndex)) { return; } $blockType = Tokens::detectBlockType($tokens[$startIndex]); $endIndex = $tokens->findBlockEnd($blockType['type'], $startIndex); $beforeEndIndex = $tokens->getPrevMeaningfulToken($endIndex); $beforeEndToken = $tokens[$beforeEndIndex]; if ( $startIndex !== $beforeEndIndex && !$beforeEndToken->equals(',') && (true === $this->configuration['after_heredoc'] || !$beforeEndToken->isGivenKind(T_END_HEREDOC)) ) { $tokens->insertAt($beforeEndIndex + 1, new Token(',')); $endToken = $tokens[$endIndex];	type_info: tokensAnalyzer:unknown blockType:unknown endIndex:unknown beforeEndIndex:unknown beforeEndToken:unknown endToken:unknown  global_variable:  function_name: getDefinition foo getPriority isCandidate createConfigurationDefinition applyFix fixBlock fixMatch	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	PHP-CS-Fixer_PHP-CS-Fixer_bb94db03188b90e144fe91c7f4baaa00dd64ffa4_77_1	"buggy:  context: } elseif (!$isMultiline && str_contains($tokens[$closeIndex]->getContent(), ""\n"")) { $isMultiline = true; } } while ($depth > 0); if (!$isMultiline) { return; } $previousIndex = $tokens->getPrevMeaningfulToken($closeIndex); if (!$tokens[$previousIndex]->equals(',')) { $tokens->insertAt($previousIndex + 1, new Token(',')); } } }"	type_info: closeIndex:unknown isMultiline:boolean depth:integer previousIndex:unknown  global_variable:  function_name: getDefinition foo getPriority isCandidate createConfigurationDefinition applyFix fixBlock fixMatch	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	PHP-CS-Fixer_PHP-CS-Fixer_ad0a87e269698a08b0bee4ec5c739790ff23bcff_78_0	buggy: $tokens->setCode($this->replacePlaceholders($tokensClone, $alignStrategy)); context: } else { for ($index = $tokens->count() - 2; $index > 0; --$index) { $content = $tokens[$index]->getContent(); if (strtolower($content) === $tokenContent && $this->tokensAnalyzer->isBinaryOperator($index)) { $this->fixWhiteSpaceBeforeOperator($tokensClone, $index, $alignStrategy); } } } } $tokens->setCode($this->replacePlaceholders($tokensClone, $alignStrategy)); $tokens->setCode($this->replacePlaceholders($tokensClone, $alignStrategy)); } } private function injectAlignmentPlaceholdersDefault(Tokens $tokens, int $startAt, int $endAt, string $tokenContent): void { $newLineFoundSinceLastPlaceholder = true; for ($index = $startAt; $index < $endAt; ++$index) { $token = $tokens[$index];	type_info: index:unknown tokenContent:unknown content:unknown newLineFoundSinceLastPlaceholder:boolean token:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholdersDefault injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders getLastTokenIndexOfFn	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	PHP-CS-Fixer_PHP-CS-Fixer_ad0a87e269698a08b0bee4ec5c739790ff23bcff_78_0	"buggy: private function replacePlaceholders(Tokens $tokens, string $alignStrategy): string context: if (self::ALIGN_SINGLE_SPACE_MINIMAL !== $alignStrategy || $tokens[$tokens->getPrevNonWhitespace($index - 1)]->isComment()) { return; } $content = $tokens[$index - 1]->getContent(); if (' ' !== $content && !str_contains($content, ""\n"")) { $tokens[$index - 1] = new Token([T_WHITESPACE, ' ']); } } private function replacePlaceholders(Tokens $tokens, string $alignStrategy): string private function replacePlaceholders(Tokens $tokens, string $alignStrategy): string { $tmpCode = $tokens->generateCode(); for ($j = 0; $j <= $this->deepestLevel; ++$j) { $placeholder = sprintf(self::ALIGN_PLACEHOLDER, $j); if (!str_contains($tmpCode, $placeholder)) { continue; }"	type_info: index:unknown content:unknown tmpCode:unknown j:integer placeholder:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholdersDefault injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders getLastTokenIndexOfFn	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	PHP-CS-Fixer_PHP-CS-Fixer_ad0a87e269698a08b0bee4ec5c739790ff23bcff_78_0	"buggy: } else { context: } $lines = explode(""\n"", $tmpCode); $groups = []; $groupIndex = 0; $groups[$groupIndex] = []; foreach ($lines as $index => $line) { if (substr_count($line, $placeholder) > 0) { $groups[$groupIndex][] = $index; } else { } else { ++$groupIndex; $groups[$groupIndex] = []; } } foreach ($groups as $group) { if (\count($group) < 1) { continue; }"	type_info: index:unknown tmpCode:unknown placeholder:unknown lines:unknown groups:array groupIndex:integer line:unknown  global_variable:  function_name: configure getDefinition getPriority isCandidate applyFix createConfigurationDefinition fixWhiteSpaceAroundOperator fixWhiteSpaceAroundOperatorToSingleSpace fixWhiteSpaceAroundOperatorToNoSpace isEqualPartOfDeclareStatement resolveOperatorsFromConfig fixAlignment injectAlignmentPlaceholdersDefault injectAlignmentPlaceholders injectAlignmentPlaceholdersForArrow injectArrayAlignmentPlaceholders fixWhiteSpaceBeforeOperator replacePlaceholders getLastTokenIndexOfFn	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	PHP-CS-Fixer_PHP-CS-Fixer_72cf37c332d4893927785efba3c5e61a161fc020_79_0	buggy:  context: $nextIndex = $tokens->getNextMeaningfulToken($index); if ($tokens[$nextIndex]->isGivenKind([T_FUNCTION, T_NS_SEPARATOR, T_PRIVATE, T_PROTECTED, T_PUBLIC, T_STRING, CT::T_NULLABLE_TYPE])) { continue; } if ('static' === $newContent && $tokens[$nextIndex]->isGivenKind(T_VARIABLE)) { continue; } $tokens[$index] = new Token([$token->getId(), $newContent]); } } }	type_info: index:unknown newContent:unknown nextIndex:unknown  global_variable:  function_name: getDefinition baz1 baz2 baz3 baz isCandidate applyFix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	PHP-CS-Fixer_PHP-CS-Fixer_fa9cc9b44bc6272095e4febfd15945bf3739a79c_80_0	buggy: if (1 !== Preg::match('#^0\d+$#', $content)) { context: protected function applyFix(\SplFileInfo $file, Tokens $tokens): void { foreach ($tokens as $index => $token) { if (!$token->isGivenKind(T_LNUMBER)) { continue; } $content = $token->getContent(); if (1 !== Preg::match('#^0\d+$#', $content)) { if (1 !== Preg::match('#^0\d+$#', $content)) { continue; } $tokens[$index] = 1 === Preg::match('#^0+$#', $content) ? new Token([T_LNUMBER, '0']) : new Token([T_LNUMBER, '0o'.substr($content, 1)]) ; } }	type_info: index:unknown content:unknown  global_variable:  function_name: getDefinition isCandidate applyFix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	PHP-CS-Fixer_PHP-CS-Fixer_fa9cc9b44bc6272095e4febfd15945bf3739a79c_80_0	buggy: : new Token([T_LNUMBER, '0o'.substr($content, 1)]) context: } $content = $token->getContent(); if (1 !== Preg::match('#^0\d+$#', $content)) { continue; } $tokens[$index] = 1 === Preg::match('#^0+$#', $content) ? new Token([T_LNUMBER, '0']) : new Token([T_LNUMBER, '0o'.substr($content, 1)]) : new Token([T_LNUMBER, '0o'.substr($content, 1)]) ; } } }	type_info: index:unknown content:unknown  global_variable:  function_name: getDefinition isCandidate applyFix	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	PHP-CS-Fixer_PHP-CS-Fixer_2ed718a9d983fe9627fd6a027b0ae7a262737912_81_0	buggy: return null !== $index && $tokens[$index]->equalsAny([[T_ELSE], [T_ELSEIF], ',']); context: } $index = $tokens->getNextMeaningfulToken($index + 1); if (null === $index || !$tokens[$index]->equals('}')) { return false; } $index = $tokens->getNextMeaningfulToken($index); return null !== $index && $tokens[$index]->equalsAny([[T_ELSE], [T_ELSEIF], ',']); return null !== $index && $tokens[$index]->equalsAny([[T_ELSE], [T_ELSEIF], ',']); } private function isCommentWithFixableIndentation(Tokens $tokens, int $index): bool { if (!$tokens[$index]->isComment()) { return false; } if (str_starts_with($tokens[$index]->getContent(), '/*')) {	type_info: index:unknown  global_variable:  function_name: __construct getDefinition getPriority isCandidate applyFix findStatementEndIndex findCaseBlockEnd getLineIndentationWithBracesCompatibility isCommentForControlSructureContinuation isCommentWithFixableIndentation getSiblingContinuousSingleLineComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	PHP-CS-Fixer_PHP-CS-Fixer_655f3c466d52fb11d527fbb93122cf972b896315_82_0	buggy: } else { context: $delta = $openBraceIndex < $moveBraceToIndex ? 1 : -1; if ($tokens[$openBraceIndex + $delta]->isWhitespace()) { if (-1 === $delta && Preg::match('/\R/', $tokens[$openBraceIndex - 1]->getContent())) { $content = Preg::replace('/^(\h*?\R)?\h*/', '', $tokens[$openBraceIndex + 1]->getContent()); if ('' !== $content) { $tokens[$openBraceIndex + 1] = new Token([T_WHITESPACE, $content]); } else { $tokens->clearAt($openBraceIndex + 1); } } else { } else { $tokens->clearAt($openBraceIndex - 1); } } for (; $openBraceIndex !== $moveBraceToIndex; $openBraceIndex += $delta) { $siblingToken = $tokens[$openBraceIndex + $delta]; $tokens[$openBraceIndex] = $siblingToken; }	type_info: openBraceIndex:unknown moveBraceToIndex:unknown delta:unknown content:unknown siblingToken:unknown  global_variable:  function_name: getDefinition foo foo isCandidate getPriority applyFix createConfigurationDefinition findParenthesisEnd isFollowedByNewLine hasCommentOnSameLine	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	cakephp_cakephp_a8d2db674b68991ffe5f4c8289139e557e75e988_1_0	buggy:  context: if ( $request->getUri()->getScheme() === 'https' || ($this->config['disableOnDebug'] && Configure::read('debug')) ) { return $handler->handle($request); } if ($this->config['redirect'] && $request->getMethod() === 'GET') { $uri = $request->getUri()->withScheme('https'); return new RedirectResponse( $uri, $this->config['statusCode'], $this->config['headers'] ); } throw new BadRequestException( 'Requests to this URL must be made with HTTPS.'	type_info: uri:unknown  global_variable:  function_name: __construct process	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	cakephp_cakephp_1f8c562f830cb80a73dfee0838e0088cba1165dd_2_0	buggy: $params = array_merge($params, $pass); context: $params = $params->getAttribute('params'); $params['?'] = $queryString; } $pass = $params['pass'] ?? []; unset( $params['pass'], $params['_matchedRoute'], $params['_name'] ); $params = array_merge($params, $pass); $params = array_merge($params, $pass); return $params; } public static function reverse($params, $full = false): string { $params = static::reverseToArray($params); return static::url($params, $full);	type_info: _request:unknown _collection:unknown params:array full:boolean _fullBaseUrl:unknown queryString:unknown pass:array  global_variable: _request: unknown _collection: unknown _fullBaseUrl: unknown function_name: defaultRouteClass getNamedExpressions connect parseRequest setRequest getRequest reload resetRoutes addUrlFilter _applyUrlFilters url pathUrl routeExists fullBaseUrl reverseToArray reverse normalize extensions createRouteBuilder scope prefix plugin routes getRouteCollection setRouteCollection unwrapShortString parseRoutePath	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	cakephp_cakephp_5b5d62ffda1a15b9341ba196c8daffa8bc6838b5_3_0	buggy:  context: namespace Cake\Controller\Component; use Cake\Controller\Component; use Cake\Controller\ComponentRegistry; use Cake\Datasource\Exception\PageOutOfBoundsException; use Cake\Datasource\Paginator; use Cake\Datasource\ResultSetInterface; use Cake\Http\Exception\NotFoundException; use InvalidArgumentException; class PaginatorComponent extends Component { protected $_defaultConfig = [ 'page' => 1, 'limit' => 20, 'maxLimit' => 100, 'allowedParameters' => ['limit', 'sort', 'page', 'direction'], ];	type_info: _defaultConfig:array  global_variable:  function_name: __construct implementedEvents paginate mergeOptions setPaginator getPaginator _setPagingParams setConfig getConfig configShallow __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	cakephp_cakephp_5b5d62ffda1a15b9341ba196c8daffa8bc6838b5_3_0	buggy: protected $_defaultConfig = [ 'page' => 1, 'limit' => 20, 'maxLimit' => 100, 'allowedParameters' => ['limit', 'sort', 'page', 'direction'], ]; context: use Cake\Datasource\Paginator; use Cake\Datasource\ResultSetInterface; use Cake\Http\Exception\NotFoundException; use InvalidArgumentException; class PaginatorComponent extends Component { protected $_defaultConfig = [ 'page' => 1, 'limit' => 20, 'maxLimit' => 100, 'allowedParameters' => ['limit', 'sort', 'page', 'direction'], ]; protected $_defaultConfig = [ 'page' => 1, 'limit' => 20, 'maxLimit' => 100, 'allowedParameters' => ['limit', 'sort', 'page', 'direction'], ];	type_info: _defaultConfig:array  global_variable:  function_name: __construct implementedEvents paginate mergeOptions setPaginator getPaginator _setPagingParams setConfig getConfig configShallow __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	cakephp_cakephp_5b5d62ffda1a15b9341ba196c8daffa8bc6838b5_3_0	buggy: parent::__construct($registry, $config); context: if (isset($config['paginator'])) { if (!$config['paginator'] instanceof Paginator) { throw new InvalidArgumentException('Paginator must be an instance of ' . Paginator::class); } $this->_paginator = $config['paginator']; unset($config['paginator']); } else { $this->_paginator = new Paginator(); } parent::__construct($registry, $config); parent::__construct($registry, $config); } public function implementedEvents(): array { return []; } public function paginate(object $object, array $settings = []): ResultSetInterface {	type_info: config:unknown settings:array  global_variable:  function_name: __construct implementedEvents paginate mergeOptions setPaginator getPaginator _setPagingParams setConfig getConfig configShallow __call	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	cakephp_cakephp_f3001eeaf4f12f925d7c52a8fe1485ec84f33799_4_0	buggy:  context: public static function reverseToArray($params): array { if ($params instanceof ServerRequest) { $queryString = $params->getQueryParams(); $params = $params->getAttribute('params'); $params['?'] = $queryString; } $pass = $params['pass'] ?? []; unset( $params['pass'], $params['_matchedRoute'], $params['_name'] ); foreach ($pass as $i => $passedValue) { if (in_array($passedValue, $params, true)) { unset($pass[$i]); } }	type_info: _request:unknown _collection:unknown params:array _fullBaseUrl:unknown queryString:unknown pass:array i:unknown  global_variable: _request: unknown _collection: unknown _fullBaseUrl: unknown function_name: defaultRouteClass getNamedExpressions connect parseRequest setRequest getRequest reload resetRoutes addUrlFilter _applyUrlFilters url pathUrl routeExists fullBaseUrl reverseToArray reverse normalize extensions createRouteBuilder scope prefix plugin routes getRouteCollection setRouteCollection unwrapShortString parseRoutePath	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	cakephp_cakephp_f3001eeaf4f12f925d7c52a8fe1485ec84f33799_4_0	buggy: foreach ($pass as $i => $passedValue) { if (in_array($passedValue, $params, true)) { unset($pass[$i]); context: $params = $params->getAttribute('params'); $params['?'] = $queryString; } $pass = $params['pass'] ?? []; unset( $params['pass'], $params['_matchedRoute'], $params['_name'] ); foreach ($pass as $i => $passedValue) { if (in_array($passedValue, $params, true)) { unset($pass[$i]); foreach ($pass as $i => $passedValue) { if (in_array($passedValue, $params, true)) { unset($pass[$i]); } } $params = array_merge($params, array_values($pass)); return $params; }	type_info: _request:unknown _collection:unknown params:array _fullBaseUrl:unknown queryString:unknown pass:array i:unknown  global_variable: _request: unknown _collection: unknown _fullBaseUrl: unknown function_name: defaultRouteClass getNamedExpressions connect parseRequest setRequest getRequest reload resetRoutes addUrlFilter _applyUrlFilters url pathUrl routeExists fullBaseUrl reverseToArray reverse normalize extensions createRouteBuilder scope prefix plugin routes getRouteCollection setRouteCollection unwrapShortString parseRoutePath	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	cakephp_cakephp_f3001eeaf4f12f925d7c52a8fe1485ec84f33799_4_0	buggy: $params = array_merge($params, array_values($pass)); context: unset( $params['pass'], $params['_matchedRoute'], $params['_name'] ); foreach ($pass as $i => $passedValue) { if (in_array($passedValue, $params, true)) { unset($pass[$i]); } } $params = array_merge($params, array_values($pass)); $params = array_merge($params, array_values($pass)); return $params; } public static function reverse($params, $full = false): string { $params = static::reverseToArray($params); return static::url($params, $full);	type_info: _request:unknown _collection:unknown params:array full:boolean _fullBaseUrl:unknown pass:array i:unknown  global_variable: _request: unknown _collection: unknown _fullBaseUrl: unknown function_name: defaultRouteClass getNamedExpressions connect parseRequest setRequest getRequest reload resetRoutes addUrlFilter _applyUrlFilters url pathUrl routeExists fullBaseUrl reverseToArray reverse normalize extensions createRouteBuilder scope prefix plugin routes getRouteCollection setRouteCollection unwrapShortString parseRoutePath	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	cakephp_cakephp_61e777e757550a3547e89de1452f993a89c52f0b_5_0	"buggy: * and the existing element will be shifted one index greater. * If the index is out of bounds, it will throw an exception. context: array_splice($this->crumbs, 0, 0, $crumbs); return $this; } array_unshift($this->crumbs, compact('title', 'url', 'options')); return $this; } * and the existing element will be shifted one index greater. * If the index is out of bounds, it will throw an exception. public function insertAt(int $index, string $title, $url = null, array $options = []) { if (!isset($this->crumbs[$index])) { throw new LogicException(sprintf(""No crumb could be found at index '%s'"", $index)); } array_splice($this->crumbs, $index, 0, [compact('title', 'url', 'options')]); return $this; }"	type_info: crumbs:array url:array title:unknown options:unknown  global_variable:  function_name: add prepend insertAt insertBefore insertAfter getCrumbs reset render findCrumb	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	cakephp_cakephp_61e777e757550a3547e89de1452f993a89c52f0b_5_0	"buggy: if (!isset($this->crumbs[$index])) { context: public function insertAt(int $index, string $title, $url = null, array $options = []) { if (!isset($this->crumbs[$index])) { if (!isset($this->crumbs[$index])) { throw new LogicException(sprintf(""No crumb could be found at index '%s'"", $index)); } array_splice($this->crumbs, $index, 0, [compact('title', 'url', 'options')]); return $this; }"	type_info: url:array title:unknown options:unknown  global_variable:  function_name: add prepend insertAt insertBefore insertAfter getCrumbs reset render findCrumb	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: * {@inheritDoc} * * @param string $scheme Scheme value. * @return \Psr\Http\Message\UriInterface context: public function getFragment() { return $this->uri->getFragment(); } * {@inheritDoc} * * @param string $scheme Scheme value. * @return \Psr\Http\Message\UriInterface public function withScheme($scheme)	type_info:  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: return $this->uri->withScheme($scheme); context: public function withScheme($scheme) { return $this->uri->withScheme($scheme); return $this->uri->withScheme($scheme); }	type_info:  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: * {@inheritDoc} * * @param string $user User value * @param string|null $password Password value. * @return \Psr\Http\Message\UriInterface context: public function withScheme($scheme) { return $this->uri->withScheme($scheme); } * {@inheritDoc} * * @param string $user User value * @param string|null $password Password value. * @return \Psr\Http\Message\UriInterface public function withUserInfo($user, $password = null)	type_info: password:unknown  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: return $this->uri->withUserInfo($user, $password); context: public function withUserInfo($user, $password = null) { return $this->uri->withUserInfo($user, $password); return $this->uri->withUserInfo($user, $password); }	type_info: password:unknown  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: * {@inheritDoc} * * @param string $host Host value. * @return \Psr\Http\Message\UriInterface context: public function withUserInfo($user, $password = null) { return $this->uri->withUserInfo($user, $password); } * {@inheritDoc} * * @param string $host Host value. * @return \Psr\Http\Message\UriInterface public function withHost($host)	type_info: password:unknown  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: return $this->uri->withHost($host); context: public function withHost($host) { return $this->uri->withHost($host); return $this->uri->withHost($host); }	type_info:  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: * {@inheritDoc} * * @param int $port Port value * @return \Psr\Http\Message\UriInterface context: public function withHost($host) { return $this->uri->withHost($host); } * {@inheritDoc} * * @param int $port Port value * @return \Psr\Http\Message\UriInterface public function withPort($port)	type_info:  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: return $this->uri->withPort($port); context: public function withPort($port) { return $this->uri->withPort($port); return $this->uri->withPort($port); }	type_info:  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: * {@inheritDoc} * * @param string $path Path value * @return \Psr\Http\Message\UriInterface context: public function withPort($port) { return $this->uri->withPort($port); } * {@inheritDoc} * * @param string $path Path value * @return \Psr\Http\Message\UriInterface public function withPath($path)	type_info:  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: return $this->uri->withPath($path); context: public function withPath($path) { return $this->uri->withPath($path); return $this->uri->withPath($path); }	type_info:  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: * {@inheritDoc} * * @param string $query Query value * @return \Psr\Http\Message\UriInterface context: public function withPath($path) { return $this->uri->withPath($path); } * {@inheritDoc} * * @param string $query Query value * @return \Psr\Http\Message\UriInterface public function withQuery($query)	type_info:  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: return $this->uri->withQuery($query); context: public function withQuery($query) { return $this->uri->withQuery($query); return $this->uri->withQuery($query); }	type_info:  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: * {@inheritDoc} * * @param string $fragment Fragment value * @return \Psr\Http\Message\UriInterface context: public function withQuery($query) { return $this->uri->withQuery($query); } * {@inheritDoc} * * @param string $fragment Fragment value * @return \Psr\Http\Message\UriInterface public function withFragment($fragment)	type_info:  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	cakephp_cakephp_285e0ebb941a224f0fdd95af3eb2b9120a925c04_6_0	buggy: return $this->uri->withFragment($fragment); context: public function withFragment($fragment) { return $this->uri->withFragment($fragment); return $this->uri->withFragment($fragment); }	type_info:  global_variable:  function_name: __construct getUri getBase getWebroot getScheme getAuthority getUserInfo getHost getPort getPath getQuery getFragment withScheme withUserInfo withHost withPort withPath withQuery withFragment __toString	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	cakephp_cakephp_404ef1ffc9debb97608b46f50efa41da5cf4c2b7_7_0	buggy: [$sql, $params] = $this->_dialect->listTablesAndViewsSql($this->_connection->config()); context: public function listTables(): array { [$sql, $params] = $this->_dialect->listTablesAndViewsSql($this->_connection->config()); [$sql, $params] = $this->_dialect->listTablesAndViewsSql($this->_connection->config()); $result = []; $statement = $this->_connection->execute($sql, $params); while ($row = $statement->fetch()) { $result[] = $row[0]; } $statement->closeCursor(); return $result; }	type_info: result:array statement:unknown row:unknown  global_variable:  function_name: __construct listTablesWithoutViews listTables describe _reflect	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	cakephp_cakephp_404ef1ffc9debb97608b46f50efa41da5cf4c2b7_7_1	"buggy: . ' WHERE Table_type LIKE ""%TABLE%""' context: public function listTablesWithoutViewsSql(array $config): array { return [ 'SHOW FULL TABLES FROM ' . $this->_driver->quoteIdentifier($config['database']) . ' WHERE Table_type LIKE ""%TABLE%""' . ' WHERE Table_type LIKE ""%TABLE%""' , []]; }"	type_info:  global_variable:  function_name: listTablesSql listTablesWithoutViewsSql describeColumnSql describeIndexSql describeOptionsSql convertOptionsDescription _convertColumn convertColumnDescription convertIndexDescription describeForeignKeySql convertForeignKeyDescription truncateTableSql createTableSql columnSql constraintSql addConstraintSql dropConstraintSql indexSql _keySql	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	cakephp_cakephp_f0ff8c4cab00da3132f34b2fa07b99b641f28a9e_8_0	"buggy: h($error->getLabel()), context: $id = 'cakeErr' . uniqid(); $description = h($error->getMessage()); $path = h($error->getFile()); $line = h($error->getLine()); $trace = h($error->getTraceAsString()); debug($error); $errorMessage = sprintf( '<b>%s</b> (%s)', h($error->getLabel()), h($error->getLabel()), h($error->getCode()) ); $toggle = $this->renderToggle($errorMessage, $id, 'trace'); $codeToggle = $this->renderToggle('Code', $id, 'code'); $excerpt = Debugger::excerpt($error->getFile(), $error->getLine(), 1); $code = implode(""\n"", $excerpt); $html = <<<HTML <pre class=""cake-error"">"	type_info: id:unknown description:unknown path:unknown line:unknown trace:unknown errorMessage:unknown toggle:unknown codeToggle:unknown excerpt:unknown code:unknown html:unknown  global_variable:  function_name: render renderToggle	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	cakephp_cakephp_ba32303ad004b05850afb7b230fa81df34291b0a_9_0	buggy:  context: protected function _prepare(): void { $table = $this->_context['table']; $entity = $this->_context['entity']; if (empty($table)) { if (is_iterable($entity)) { foreach ($entity as $e) { $entity = $e; break; } } $isEntity = $entity instanceof EntityInterface; if ($isEntity) {	type_info: table:unknown entity:unknown isEntity:unknown  global_variable:  function_name: __construct _prepare primaryKey getPrimaryKey isPrimaryKey isCreate val _schemaDefault _extractMultiple entity leafEntity _getProp isRequired getRequiredMessage getMaxLength fieldNames _getValidator _getTable type attributes hasError error	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	cakephp_cakephp_ba32303ad004b05850afb7b230fa81df34291b0a_9_0	buggy: if (is_iterable($entity)) { context: protected function _prepare(): void { $table = $this->_context['table']; $entity = $this->_context['entity']; if (empty($table)) { if (is_iterable($entity)) { if (is_iterable($entity)) { foreach ($entity as $e) { $entity = $e; break; } } $isEntity = $entity instanceof EntityInterface; if ($isEntity) { $table = $entity->getSource(); }	type_info: table:unknown entity:unknown isEntity:unknown  global_variable:  function_name: __construct _prepare primaryKey getPrimaryKey isPrimaryKey isCreate val _schemaDefault _extractMultiple entity leafEntity _getProp isRequired getRequiredMessage getMaxLength fieldNames _getValidator _getTable type attributes hasError error	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	cakephp_cakephp_ba32303ad004b05850afb7b230fa81df34291b0a_9_0	buggy: $this->_isCollection = ( is_array($entity) || $entity instanceof Traversable ); context: } if (is_string($table) && $table !== '') { $table = $this->getTableLocator()->get($table); } if (!($table instanceof Table)) { throw new RuntimeException( 'Unable to find table class for current entity.' ); } $this->_isCollection = ( is_array($entity) || $entity instanceof Traversable ); $this->_isCollection = ( is_array($entity) || $entity instanceof Traversable ); $alias = $this->_rootName = $table->getAlias(); $this->_tables[$alias] = $table; } public function primaryKey(): array	type_info: table:unknown entity:unknown alias:unknown  global_variable:  function_name: __construct _prepare primaryKey getPrimaryKey isPrimaryKey isCreate val _schemaDefault _extractMultiple entity leafEntity _getProp isRequired getRequiredMessage getMaxLength fieldNames _getValidator _getTable type attributes hasError error	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	cakephp_cakephp_273329204b9e091831d7c8502533e8762aff2ce3_10_0	buggy:  context: namespace Cake\Error; use Cake\Core\Configure; use Cake\Core\InstanceConfigTrait; use Cake\Routing\Router; use Psr\Http\Message\ServerRequestInterface; use RuntimeException; use Throwable; abstract class BaseErrorHandler { use InstanceConfigTrait; protected $_defaultConfig = [ 'log' => true, 'trace' => false, 'skipLog' => [], 'errorLogger' => ErrorLogger::class, ];	type_info: _defaultConfig:array logger:unknown  global_variable: logger: unknown function_name: _displayError _displayException register handleError wrapAndHandleException handleException _stop handleFatalError increaseMemoryLimit _logError logException getLogger mapErrorCode	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	cakephp_cakephp_273329204b9e091831d7c8502533e8762aff2ce3_10_0	buggy:  context: public function register(): void { $level = $this->_config['errorLevel'] ?? -1; error_reporting($level); set_error_handler([$this, 'handleError'], $level); set_exception_handler([$this, 'handleException']); register_shutdown_function(function (): void { if ((PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') && $this->_handled) { return; } $megabytes = $this->_config['extraFatalErrorMemory'] ?? 4; if ($megabytes > 0) {	type_info: level:unknown megabytes:unknown logger:unknown  global_variable: logger: unknown function_name: _displayError _displayException register handleError wrapAndHandleException handleException _stop handleFatalError increaseMemoryLimit _logError logException getLogger mapErrorCode	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	cakephp_cakephp_493a201b1226383c86fae7f8af6bab6169889b78_11_0	buggy: if ($this->container->has($type->getName())) { $resolved[] = $this->container->get($type->getName()); context: 'template' => 'unsupported_type', 'parameter' => $parameter->getName(), 'controller' => $this->controller->getName(), 'action' => $this->controller->getRequest()->getParam('action'), 'prefix' => $this->controller->getRequest()->getParam('prefix'), 'plugin' => $this->controller->getRequest()->getParam('plugin'), ]); } if ($type instanceof ReflectionNamedType && !$type->isBuiltin()) { if ($this->container->has($type->getName())) { $resolved[] = $this->container->get($type->getName()); if ($this->container->has($type->getName())) { $resolved[] = $this->container->get($type->getName()); continue; } if ($parameter->isDefaultValueAvailable()) { $resolved[] = $parameter->getDefaultValue(); continue; }	type_info: controller:unknown resolved:array type:unknown  global_variable: controller: unknown function_name: __construct create invoke handle getActionArgs coerceStringToType getControllerClass missingController	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	cakephp_cakephp_a1d3b76ba3411cb8aba3a281a5260bce57e90977_12_0	buggy:  context: } if ($parameter->isDefaultValueAvailable()) { $resolved[] = $parameter->getDefaultValue(); continue; } throw new InvalidParameterException([ 'template' => 'missing_dependency', 'parameter' => $parameter->getName(), 'controller' => $this->controller->getName(), 'action' => $this->controller->getRequest()->getParam('action'), 'prefix' => $this->controller->getRequest()->getParam('prefix'), 'plugin' => $this->controller->getRequest()->getParam('plugin'), ]); } if ($passedParams) { $argument = array_shift($passedParams); if ($type instanceof ReflectionNamedType) {	type_info: controller:unknown resolved:array type:unknown argument:unknown  global_variable: controller: unknown function_name: __construct create invoke handle getActionArgs coerceStringToType getControllerClass missingController	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	cakephp_cakephp_a1d3b76ba3411cb8aba3a281a5260bce57e90977_12_1	"buggy: 'missing_dependency' => 'Failed to inject dependency from service container for `%s` in action %s::%s().', context: namespace Cake\Controller\Exception; use Cake\Core\Exception\CakeException; use Throwable; class InvalidParameterException extends CakeException { protected $templates = [ 'failed_coercion' => 'Unable to coerce ""%s"" to `%s` for `%s` in action %s::%s().', 'missing_dependency' => 'Failed to inject dependency from service container for `%s` in action %s::%s().', 'missing_dependency' => 'Failed to inject dependency from service container for `%s` in action %s::%s().', 'missing_parameter' => 'Missing passed parameter for `%s` in action %s::%s().', 'unsupported_type' => 'Type declaration for `%s` in action %s::%s() is unsupported.', ]; public function __construct($message = '', ?int $code = null, ?Throwable $previous = null) { if (is_array($message)) { $this->_messageTemplate = $this->templates[$message['template']] ?? ''; unset($message['template']);"	type_info: templates:array message:string  global_variable:  function_name: __construct	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	cakephp_cakephp_94de0857f33b20026791e190bb2725a882c88ea4_13_0	buggy: if ($type instanceof ReflectionNamedType) { context: 'type' => $typeName, 'controller' => $this->controller->getName(), 'action' => $this->controller->getRequest()->getParam('action'), 'prefix' => $this->controller->getRequest()->getParam('prefix'), 'plugin' => $this->controller->getRequest()->getParam('plugin'), ]); } if ($passedParams) { $argument = array_shift($passedParams); if ($type instanceof ReflectionNamedType) { if ($type instanceof ReflectionNamedType) { $typedArgument = $this->coerceStringToType($argument, $type); if ($typedArgument === null) { throw new InvalidParameterException([ 'template' => 'failed_coercion', 'passed' => $argument, 'type' => $type->getName(), 'parameter' => $parameter->getName(), 'controller' => $this->controller->getName(),	type_info: controller:unknown type:unknown typeName:unknown argument:unknown typedArgument:unknown  global_variable: controller: unknown function_name: __construct create invoke handle getActionArgs coerceStringToType getControllerClass missingController	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	cakephp_cakephp_4b643ba47e2f2a9910e1163a826abaeb3753ad1b_14_0	buggy: return explode(',', $argument); context: switch ($type->getName()) { case 'string': return $argument; case 'float': return is_numeric($argument) ? (float)$argument : null; case 'int': return ctype_digit($argument) ? (int)$argument : null; case 'bool': return $argument === '0' ? false : ($argument === '1' ? true : null); case 'array': return explode(',', $argument); return explode(',', $argument); } return null; } public function getControllerClass(ServerRequest $request): ?string { $pluginPath = ''; $namespace = 'Controller';	type_info: controller:unknown type:unknown argument:unknown pluginPath:string namespace:string  global_variable: controller: unknown function_name: __construct create invoke handle getActionArgs coerceStringToType getControllerClass missingController	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	cakephp_cakephp_d6a1f00f93a972a852c85402c96a70d431cdbc35_15_0	buggy:  context: <?php declare(strict_types=1); namespace Cake\Error\Renderer; use Cake\Console\ConsoleOutput; use Psr\Http\Message\ServerRequestInterface; use Throwable; class ConsoleExceptionRenderer	type_info:  global_variable:  function_name: __construct render write	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	cakephp_cakephp_d6a1f00f93a972a852c85402c96a70d431cdbc35_15_0	"buggy:  context: use Cake\Console\ConsoleOutput; use Psr\Http\Message\ServerRequestInterface; use Throwable; class ConsoleExceptionRenderer { private $error; private $output; public function __construct(Throwable $error, ?ServerRequestInterface $request, array $config) { $this->error = $error; $this->output = $config['stderr'] ?? new ConsoleOutput('php://stderr'); } public function render() { return sprintf( ""<error>%s : %s</error> on line %s of %s\n<info>Trace:</info>\n%s"","	type_info:  global_variable:  function_name: __construct render write	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	cakephp_cakephp_d6a1f00f93a972a852c85402c96a70d431cdbc35_15_0	buggy:  context: public function __construct(Throwable $error, ?ServerRequestInterface $request, array $config) { $this->error = $error; $this->output = $config['stderr'] ?? new ConsoleOutput('php://stderr'); }	type_info:  global_variable:  function_name: __construct render write	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	cakephp_cakephp_d6a1f00f93a972a852c85402c96a70d431cdbc35_15_0	"buggy: return sprintf( ""<error>%s : %s</error> on line %s of %s\n<info>Trace:</info>\n%s"", $this->error->getCode(), context: public function render() { return sprintf( ""<error>%s : %s</error> on line %s of %s\n<info>Trace:</info>\n%s"", $this->error->getCode(), return sprintf( ""<error>%s : %s</error> on line %s of %s\n<info>Trace:</info>\n%s"", $this->error->getCode(), $this->error->getMessage(), $this->error->getLine(), $this->error->getFile(), $this->error->getTraceAsString(), ); }"	type_info:  global_variable:  function_name: __construct render write	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	cakephp_cakephp_d6a1f00f93a972a852c85402c96a70d431cdbc35_15_0	"buggy: $this->error->getLine(), context: public function render() { return sprintf( ""<error>%s : %s</error> on line %s of %s\n<info>Trace:</info>\n%s"", $this->error->getCode(), $this->error->getMessage(), $this->error->getLine(), $this->error->getLine(), $this->error->getFile(), $this->error->getTraceAsString(), ); }"	type_info:  global_variable:  function_name: __construct render write	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	cakephp_cakephp_d6a1f00f93a972a852c85402c96a70d431cdbc35_15_0	"buggy: $this->error->getTraceAsString(), context: public function render() { return sprintf( ""<error>%s : %s</error> on line %s of %s\n<info>Trace:</info>\n%s"", $this->error->getCode(), $this->error->getMessage(), $this->error->getLine(), $this->error->getFile(), $this->error->getTraceAsString(), $this->error->getTraceAsString(), ); }"	type_info:  global_variable:  function_name: __construct render write	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	cakephp_cakephp_d6a1f00f93a972a852c85402c96a70d431cdbc35_15_0	"buggy:  context: public function render() { return sprintf( ""<error>%s : %s</error> on line %s of %s\n<info>Trace:</info>\n%s"", $this->error->getCode(), $this->error->getMessage(), $this->error->getLine(), $this->error->getFile(), $this->error->getTraceAsString(), ); }"	type_info:  global_variable:  function_name: __construct render write	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	cakephp_cakephp_7435593e35efc653df1ea9a1e11a7bab50573c12_16_0	buggy: * When errors are trapped, errors are logged (if logging is enabled). Then the `Error.handled` event is triggered. context: namespace Cake\Error; use Cake\Core\Configure; use Cake\Core\InstanceConfigTrait; use Cake\Error\Renderer\ConsoleErrorRenderer; use Cake\Error\Renderer\HtmlErrorRenderer; use Cake\Event\EventDispatcherTrait; use Exception; use InvalidArgumentException; * When errors are trapped, errors are logged (if logging is enabled). Then the `Error.handled` event is triggered. class ErrorTrap { use EventDispatcherTrait; use InstanceConfigTrait { getConfig as private _getConfig; } protected $_defaultConfig = [ 'errorLevel' => E_ALL, 'ignoredDeprecationPaths' => [],	type_info: _defaultConfig:array  global_variable:  function_name: __construct chooseErrorRenderer register handleError renderer logger	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
61	cakephp_cakephp_7435593e35efc653df1ea9a1e11a7bab50573c12_16_0	buggy: * This method will dispatch the `Error.handled` event which can be listened context: public function register(): void { $level = $this->_config['errorLevel'] ?? -1; error_reporting($level); set_error_handler([$this, 'handleError'], $level); } * This method will dispatch the `Error.handled` event which can be listened public function handleError(	type_info: level:unknown  global_variable:  function_name: __construct chooseErrorRenderer register handleError renderer logger	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
62	cakephp_cakephp_7435593e35efc653df1ea9a1e11a7bab50573c12_16_0	buggy: $event = $this->dispatchEvent('Error.handled', ['error' => $error]); context: $trace = Debugger::trace(['start' => 1, 'format' => 'points']); $error = new PhpError($code, $description, $file, $line, $trace); $debug = Configure::read('debug'); $renderer = $this->renderer(); $logger = $this->logger(); try { $logger->logMessage($error->getLabel(), $error->getMessage()); $event = $this->dispatchEvent('Error.handled', ['error' => $error]); $event = $this->dispatchEvent('Error.handled', ['error' => $error]); if ($event->isStopped()) { return true; } $renderer->write($renderer->render($error, $debug)); } catch (Exception $e) { $logger->logMessage('error', 'Could not render error. Got: ' . $e->getMessage()); return false; }	type_info: file:unknown code:unknown trace:unknown error:unknown debug:unknown renderer:unknown logger:unknown event:unknown  global_variable:  function_name: __construct chooseErrorRenderer register handleError renderer logger	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
63	cakephp_cakephp_e6af221cb1b8851777ca8b4f242e565942158c0e_17_0	buggy: if (preg_match('/^' . $needle . '/', $item)) { context: protected function findClosestItem($needle, $haystack): ?string { $bestGuess = null; foreach ($haystack as $item) { if (preg_match('/^' . $needle . '/', $item)) { if (preg_match('/^' . $needle . '/', $item)) { return $item; } } $bestScore = 4; foreach ($haystack as $item) { $score = levenshtein($needle, $item); if ($score < $bestScore) { $bestScore = $score;	type_info: bestGuess:unknown bestScore:integer score:unknown  global_variable:  function_name: __construct getFullMessage findClosestItem	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
64	cakephp_cakephp_7d54ba867179c011144efe647e7384c189064f25_18_0	buggy:  context: public function deleteMultiple($keys): bool { $this->ensureValidType($keys); foreach ($keys as $key) { $result = $this->delete($key); if ($result === false) { return false; } } return true; }	type_info: key:unknown result:unknown  global_variable:  function_name: init ensureValidKey ensureValidType getMultiple setMultiple deleteMultiple has get set increment decrement delete clear add clearGroup groups _key warning duration	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
65	cakephp_cakephp_7d54ba867179c011144efe647e7384c189064f25_18_0	buggy: $result = $this->delete($key); if ($result === false) { return false; context: public function deleteMultiple($keys): bool { $this->ensureValidType($keys); foreach ($keys as $key) { $result = $this->delete($key); if ($result === false) { return false; $result = $this->delete($key); if ($result === false) { return false; } } return true; }	type_info: key:unknown result:unknown  global_variable:  function_name: init ensureValidKey ensureValidType getMultiple setMultiple deleteMultiple has get set increment decrement delete clear add clearGroup groups _key warning duration	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
66	cakephp_cakephp_7d54ba867179c011144efe647e7384c189064f25_18_0	buggy: return true; context: { $this->ensureValidType($keys); foreach ($keys as $key) { $result = $this->delete($key); if ($result === false) { return false; } } return true; return true; } public function has($key): bool { return $this->get($key) !== null; } abstract public function get($key, $default = null);	type_info: key:unknown default:unknown result:unknown  global_variable:  function_name: init ensureValidKey ensureValidType getMultiple setMultiple deleteMultiple has get set increment decrement delete clear add clearGroup groups _key warning duration	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
0	cakephp_cakephp_4f5bc03aa251240c55d1e445aa581b06e24f1dc1_19_0	buggy:  context: protected function _schemaFromReflection(): void { $db = ConnectionManager::get($this->connection()); try { $name = Inflector::camelize($this->table); $ormTable = $this->fetchTable($name, ['connection' => $db]); $schema = $ormTable->getSchema(); $this->_schema = $schema; } catch (CakeException $e) { $message = sprintf( 'Cannot describe schema for table `%s` for fixture `%s`. The table does not exist.', $this->table, static::class ); throw new CakeException($message, null, $e); } }	type_info: message:unknown table:unknown name:unknown import:unknown db:unknown ormTable:unknown schema:unknown  global_variable: table: unknown import: unknown function_name: __construct connection sourceName init _tableFromClass _schemaFromFields _schemaFromImport _schemaFromReflection create drop insert createConstraints dropConstraints _getRecords truncate getTableSchema setTableSchema	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
1	cakephp_cakephp_94218bfa2553360887613ef7b3132120ab7ec03f_20_0	buggy:  context: $value ) ); } } } return $node; } public static function getOutputFormat(): string { return Debugger::getInstance()->_outputFormat; } public static function setOutputFormat(string $format): void { $self = Debugger::getInstance(); if (!isset($self->_templates[$format])) {	type_info: self:unknown node:unknown value:unknown  global_variable:  function_name: __construct getInstance configInstance outputMask setOutputMask addEditor setEditor editorUrl dump log trace formatTrace trimPath excerpt _highlight getExportFormatter exportVar exportVarAsPlainText exportVarAsNodes export exportArray exportObject getOutputFormat setOutputFormat addFormat addRenderer outputError getType printVar formatHtmlMessage checkSecurityKeys	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
2	cakephp_cakephp_94218bfa2553360887613ef7b3132120ab7ec03f_20_0	buggy:  context: public static function getOutputFormat(): string { return Debugger::getInstance()->_outputFormat; }	type_info:  global_variable:  function_name: __construct getInstance configInstance outputMask setOutputMask addEditor setEditor editorUrl dump log trace formatTrace trimPath excerpt _highlight getExportFormatter exportVar exportVarAsPlainText exportVarAsNodes export exportArray exportObject getOutputFormat setOutputFormat addFormat addRenderer outputError getType printVar formatHtmlMessage checkSecurityKeys	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
3	cakephp_cakephp_94218bfa2553360887613ef7b3132120ab7ec03f_20_0	buggy:  context: public static function getOutputFormat(): string { return Debugger::getInstance()->_outputFormat; } public static function setOutputFormat(string $format): void	type_info:  global_variable:  function_name: __construct getInstance configInstance outputMask setOutputMask addEditor setEditor editorUrl dump log trace formatTrace trimPath excerpt _highlight getExportFormatter exportVar exportVarAsPlainText exportVarAsNodes export exportArray exportObject getOutputFormat setOutputFormat addFormat addRenderer outputError getType printVar formatHtmlMessage checkSecurityKeys	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
4	cakephp_cakephp_94218bfa2553360887613ef7b3132120ab7ec03f_20_0	buggy:  context: public static function setOutputFormat(string $format): void { $self = Debugger::getInstance(); if (!isset($self->_templates[$format])) { throw new InvalidArgumentException('Invalid Debugger output format.'); } $self->_outputFormat = $format; }	type_info: self:unknown  global_variable:  function_name: __construct getInstance configInstance outputMask setOutputMask addEditor setEditor editorUrl dump log trace formatTrace trimPath excerpt _highlight getExportFormatter exportVar exportVarAsPlainText exportVarAsNodes export exportArray exportObject getOutputFormat setOutputFormat addFormat addRenderer outputError getType printVar formatHtmlMessage checkSecurityKeys	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
5	cakephp_cakephp_94218bfa2553360887613ef7b3132120ab7ec03f_20_0	buggy:  context: public static function setOutputFormat(string $format): void { $self = Debugger::getInstance(); if (!isset($self->_templates[$format])) { throw new InvalidArgumentException('Invalid Debugger output format.'); } $self->_outputFormat = $format; } public static function addFormat(string $format, array $strings): array	type_info: self:unknown  global_variable:  function_name: __construct getInstance configInstance outputMask setOutputMask addEditor setEditor editorUrl dump log trace formatTrace trimPath excerpt _highlight getExportFormatter exportVar exportVarAsPlainText exportVarAsNodes export exportArray exportObject getOutputFormat setOutputFormat addFormat addRenderer outputError getType printVar formatHtmlMessage checkSecurityKeys	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
6	cakephp_cakephp_94218bfa2553360887613ef7b3132120ab7ec03f_20_0	buggy:  context: public static function addFormat(string $format, array $strings): array { $self = Debugger::getInstance(); if (isset($self->_templates[$format])) { if (isset($strings['links'])) { $self->_templates[$format]['links'] = array_merge( $self->_templates[$format]['links'], $strings['links'] ); unset($strings['links']); } $self->_templates[$format] = $strings + $self->_templates[$format];	type_info: self:unknown  global_variable:  function_name: __construct getInstance configInstance outputMask setOutputMask addEditor setEditor editorUrl dump log trace formatTrace trimPath excerpt _highlight getExportFormatter exportVar exportVarAsPlainText exportVarAsNodes export exportArray exportObject getOutputFormat setOutputFormat addFormat addRenderer outputError getType printVar formatHtmlMessage checkSecurityKeys	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
7	cakephp_cakephp_94218bfa2553360887613ef7b3132120ab7ec03f_20_0	buggy:  context: } $self->_templates[$format] = $strings + $self->_templates[$format]; } else { $self->_templates[$format] = $strings; } unset($self->renderers[$format]); return $self->_templates[$format]; } public static function addRenderer(string $name, string $class): void { if (!in_array(ErrorRendererInterface::class, class_implements($class))) { throw new InvalidArgumentException( 'Invalid renderer class. $class must implement ' . ErrorRendererInterface::class ); } $self = Debugger::getInstance(); $self->renderers[$name] = $class; }	type_info: class:array self:unknown  global_variable:  function_name: __construct getInstance configInstance outputMask setOutputMask addEditor setEditor editorUrl dump log trace formatTrace trimPath excerpt _highlight getExportFormatter exportVar exportVarAsPlainText exportVarAsNodes export exportArray exportObject getOutputFormat setOutputFormat addFormat addRenderer outputError getType printVar formatHtmlMessage checkSecurityKeys	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
8	cakephp_cakephp_94218bfa2553360887613ef7b3132120ab7ec03f_20_0	buggy:  context: public static function addRenderer(string $name, string $class): void { if (!in_array(ErrorRendererInterface::class, class_implements($class))) { throw new InvalidArgumentException( 'Invalid renderer class. $class must implement ' . ErrorRendererInterface::class ); } $self = Debugger::getInstance(); $self->renderers[$name] = $class; }	type_info: class:array self:unknown  global_variable:  function_name: __construct getInstance configInstance outputMask setOutputMask addEditor setEditor editorUrl dump log trace formatTrace trimPath excerpt _highlight getExportFormatter exportVar exportVarAsPlainText exportVarAsNodes export exportArray exportObject getOutputFormat setOutputFormat addFormat addRenderer outputError getType printVar formatHtmlMessage checkSecurityKeys	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
9	cakephp_cakephp_94218bfa2553360887613ef7b3132120ab7ec03f_20_0	buggy:  context: { if (!in_array(ErrorRendererInterface::class, class_implements($class))) { throw new InvalidArgumentException( 'Invalid renderer class. $class must implement ' . ErrorRendererInterface::class ); } $self = Debugger::getInstance(); $self->renderers[$name] = $class; } public function outputError(array $data): void { $defaults = [ 'level' => 0, 'error' => 0, 'code' => 0, 'description' => '', 'file' => '', 'line' => 0, 'context' => [],	type_info: class:array self:unknown defaults:array data:unknown  global_variable:  function_name: __construct getInstance configInstance outputMask setOutputMask addEditor setEditor editorUrl dump log trace formatTrace trimPath excerpt _highlight getExportFormatter exportVar exportVarAsPlainText exportVarAsNodes export exportArray exportObject getOutputFormat setOutputFormat addFormat addRenderer outputError getType printVar formatHtmlMessage checkSecurityKeys	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
10	cakephp_cakephp_4ee742dc4af84f4ebc9e4f93032a2c603d6e8188_21_0	buggy:  context: use Countable; use DateTimeImmutable; use DateTimeZone; use Exception; use InvalidArgumentException; use IteratorAggregate; use Psr\Http\Message\RequestInterface; use Psr\Http\Message\ResponseInterface; use Psr\Http\Message\ServerRequestInterface; use Traversable; class CookieCollection implements IteratorAggregate, Countable { protected $cookies = []; public function __construct(array $cookies = []) { $this->checkCookies($cookies); foreach ($cookies as $cookie) { $this->cookies[$cookie->getId()] = $cookie;	type_info: cookies:array  global_variable:  function_name: __construct createFromHeader createFromServerRequest count add get has remove checkCookies getIterator addToRequest findMatchingCookies addFromResponse removeExpiredCookies	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
11	cakephp_cakephp_4ee742dc4af84f4ebc9e4f93032a2c603d6e8188_21_0	buggy: } catch (Exception $e) { context: public static function createFromHeader(array $header, array $defaults = []) { $cookies = []; foreach ($header as $value) { try { $cookies[] = Cookie::createFromHeaderString($value, $defaults); } catch (Exception $e) { } catch (Exception $e) { } } return new static($cookies); } public static function createFromServerRequest(ServerRequestInterface $request) { $data = $request->getCookieParams(); $cookies = [];	type_info: cookies:array defaults:array data:unknown  global_variable:  function_name: __construct createFromHeader createFromServerRequest count add get has remove checkCookies getIterator addToRequest findMatchingCookies addFromResponse removeExpiredCookies	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
12	cakephp_cakephp_eff6d17aebcd6a6d6737eb85dd9428d3d495c83b_22_0	buggy: $extType = $this->response->getMimeType($ext); if (isset($typeMap[$extType])) { return $typeMap[$extType]; context: foreach ($possibleViewClasses as $class) { $viewContentType = $class::contentType(); if ($viewContentType && !isset($typeMap[$viewContentType])) { $typeMap[$viewContentType] = $class; } } $request = $this->getRequest(); $ext = $request->getParam('_ext'); if ($ext) { $extType = $this->response->getMimeType($ext); if (isset($typeMap[$extType])) { return $typeMap[$extType]; $extType = $this->response->getMimeType($ext); if (isset($typeMap[$extType])) { return $typeMap[$extType]; } } $contentType = new ContentTypeNegotiation(); $preferredType = $contentType->preferredType($request, array_keys($typeMap)); if (!$preferredType) { return null;	type_info: request:unknown plugin:unknown class:unknown name:unknown response:unknown possibleViewClasses:unknown typeMap:array viewContentType:unknown ext:unknown extType:unknown contentType:unknown preferredType:unknown  global_variable: request: unknown plugin: unknown name: unknown response: unknown function_name: __construct initialize components loadComponent __get __set getName setName getPlugin setPlugin isAutoRenderEnabled enableAutoRender disableAutoRender getRequest setRequest getResponse setResponse getAction invokeAction middleware getMiddleware implementedEvents startupProcess shutdownProcess redirect setAction render viewClasses chooseViewClass _templatePath referer paginate isAction beforeFilter beforeRender beforeRedirect afterFilter	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
13	cakephp_cakephp_eff6d17aebcd6a6d6737eb85dd9428d3d495c83b_22_1	buggy: $contentType = $response->getMimeType($file->getExtension()) ?: 'application/octet-stream'; context: protected function deliverAsset(ServerRequestInterface $request, SplFileInfo $file): Response { $stream = new Stream(fopen($file->getPathname(), 'rb')); $response = new Response(['stream' => $stream]); $contentType = $response->getMimeType($file->getExtension()) ?: 'application/octet-stream'; $contentType = $response->getMimeType($file->getExtension()) ?: 'application/octet-stream'; $modified = $file->getMTime(); $expire = strtotime($this->cacheTime); $maxAge = $expire - time(); return $response ->withHeader('Content-Type', $contentType) ->withHeader('Cache-Control', 'public,max-age=' . $maxAge) ->withHeader('Date', gmdate(DATE_RFC7231, time())) ->withHeader('Last-Modified', gmdate(DATE_RFC7231, $modified)) ->withHeader('Expires', gmdate(DATE_RFC7231, $expire));	type_info: file:unknown stream:unknown response:unknown contentType:string modified:unknown expire:unknown maxAge:unknown  global_variable:  function_name: __construct process isNotModified _getAssetFile deliverAsset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
14	cakephp_cakephp_eff6d17aebcd6a6d6737eb85dd9428d3d495c83b_22_1	buggy: ->withHeader('Content-Type', $contentType) context: $stream = new Stream(fopen($file->getPathname(), 'rb')); $response = new Response(['stream' => $stream]); $contentType = $response->getMimeType($file->getExtension()) ?: 'application/octet-stream'; $modified = $file->getMTime(); $expire = strtotime($this->cacheTime); $maxAge = $expire - time(); return $response ->withHeader('Content-Type', $contentType) ->withHeader('Content-Type', $contentType) ->withHeader('Cache-Control', 'public,max-age=' . $maxAge) ->withHeader('Date', gmdate(DATE_RFC7231, time())) ->withHeader('Last-Modified', gmdate(DATE_RFC7231, $modified)) ->withHeader('Expires', gmdate(DATE_RFC7231, $expire)); } }	type_info: file:unknown stream:unknown response:unknown contentType:string modified:unknown expire:unknown maxAge:unknown  global_variable:  function_name: __construct process isNotModified _getAssetFile deliverAsset	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
15	cakephp_cakephp_90f65b79d19d4a0ed0781cbf3df8b34d7cdfcb14_23_0	buggy: $trap = $this->getExceptionTrap(); $trap->logException($exception, $request); context: public function handleException(Throwable $exception, ServerRequestInterface $request): ResponseInterface { if ($this->errorHandler === null) { $trap = $this->getExceptionTrap(); $trap->logException($exception, $request); $trap = $this->getExceptionTrap(); $trap->logException($exception, $request); $renderer = $trap->renderer($exception, $request); } else { $errorHandler = $this->getErrorHandler(); $errorHandler->logException($exception, $request); $renderer = $errorHandler->getRenderer($exception, $request); } try {	type_info: errorHandler:unknown trap:unknown renderer:unknown  global_variable:  function_name: __construct process handleException handleRedirect handleInternalError getErrorHandler getExceptionTrap	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
16	cakephp_cakephp_90f65b79d19d4a0ed0781cbf3df8b34d7cdfcb14_23_0	buggy: $renderer = $trap->renderer($exception, $request); context: public function handleException(Throwable $exception, ServerRequestInterface $request): ResponseInterface { if ($this->errorHandler === null) { $trap = $this->getExceptionTrap(); $trap->logException($exception, $request); $renderer = $trap->renderer($exception, $request); $renderer = $trap->renderer($exception, $request); } else { $errorHandler = $this->getErrorHandler(); $errorHandler->logException($exception, $request); $renderer = $errorHandler->getRenderer($exception, $request); } try { $response = $renderer->render(); if (is_string($response)) {	type_info: errorHandler:unknown trap:unknown renderer:unknown response:unknown  global_variable:  function_name: __construct process handleException handleRedirect handleInternalError getErrorHandler getExceptionTrap	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
17	cakephp_cakephp_90f65b79d19d4a0ed0781cbf3df8b34d7cdfcb14_23_0	buggy: $errorHandler = $this->getErrorHandler(); $errorHandler->logException($exception, $request); context: public function handleException(Throwable $exception, ServerRequestInterface $request): ResponseInterface { if ($this->errorHandler === null) { $trap = $this->getExceptionTrap(); $trap->logException($exception, $request); $renderer = $trap->renderer($exception, $request); } else { $errorHandler = $this->getErrorHandler(); $errorHandler->logException($exception, $request); $errorHandler = $this->getErrorHandler(); $errorHandler->logException($exception, $request); $renderer = $errorHandler->getRenderer($exception, $request); } try { $response = $renderer->render(); if (is_string($response)) { return new Response(['body' => $response, 'status' => 500]); }	type_info: errorHandler:unknown trap:unknown renderer:unknown response:unknown  global_variable:  function_name: __construct process handleException handleRedirect handleInternalError getErrorHandler getExceptionTrap	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
18	cakephp_cakephp_90f65b79d19d4a0ed0781cbf3df8b34d7cdfcb14_23_0	buggy: $renderer = $errorHandler->getRenderer($exception, $request); context: { if ($this->errorHandler === null) { $trap = $this->getExceptionTrap(); $trap->logException($exception, $request); $renderer = $trap->renderer($exception, $request); } else { $errorHandler = $this->getErrorHandler(); $errorHandler->logException($exception, $request); $renderer = $errorHandler->getRenderer($exception, $request); $renderer = $errorHandler->getRenderer($exception, $request); } try { $response = $renderer->render(); if (is_string($response)) { return new Response(['body' => $response, 'status' => 500]); } return $response;	type_info: errorHandler:unknown trap:unknown renderer:unknown response:unknown  global_variable:  function_name: __construct process handleException handleRedirect handleInternalError getErrorHandler getExceptionTrap	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
19	cakephp_cakephp_90f65b79d19d4a0ed0781cbf3df8b34d7cdfcb14_23_0	buggy: $errorHandler->logException($internalException, $request); context: } try { $response = $renderer->render(); if (is_string($response)) { return new Response(['body' => $response, 'status' => 500]); } return $response; } catch (Throwable $internalException) { $errorHandler->logException($internalException, $request); $errorHandler->logException($internalException, $request); return $this->handleInternalError(); } } public function handleRedirect(RedirectException $exception): ResponseInterface { return new RedirectResponse( $exception->getMessage(),	type_info: errorHandler:unknown renderer:unknown response:unknown  global_variable:  function_name: __construct process handleException handleRedirect handleInternalError getErrorHandler getExceptionTrap	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
20	cakephp_cakephp_4e2c894a1060560aec891cf86f70358b3fdf7acb_24_0	buggy: $logger->logMessage($error->getLabel(), $error->getMessage()); context: } $trace = Debugger::trace(['start' => 1, 'format' => 'points']); $error = new PhpError($code, $description, $file, $line, $trace); $debug = Configure::read('debug'); $renderer = $this->renderer(); $logger = $this->logger(); try { $logger->logMessage($error->getLabel(), $error->getMessage()); $logger->logMessage($error->getLabel(), $error->getMessage()); $event = $this->dispatchEvent('Error.beforeRender', ['error' => $error]); if ($event->isStopped()) { return true; } $renderer->write($renderer->render($error, $debug)); } catch (Exception $e) { $logger->logMessage('error', 'Could not render error. Got: ' . $e->getMessage()); return false;	type_info: file:unknown code:unknown trace:unknown error:unknown debug:unknown renderer:unknown logger:unknown event:unknown  global_variable:  function_name: __construct chooseErrorRenderer register handleError renderer logger	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
21	cakephp_cakephp_4e2c894a1060560aec891cf86f70358b3fdf7acb_24_0	buggy:  context: $logger = $this->logger(); try { $logger->logMessage($error->getLabel(), $error->getMessage()); $event = $this->dispatchEvent('Error.beforeRender', ['error' => $error]); if ($event->isStopped()) { return true; } $renderer->write($renderer->render($error, $debug)); } catch (Exception $e) { $logger->logMessage('error', 'Could not render error. Got: ' . $e->getMessage()); return false; } return true; } public function renderer(): ErrorRendererInterface {	type_info: error:unknown debug:unknown renderer:unknown logger:unknown event:unknown  global_variable:  function_name: __construct chooseErrorRenderer register handleError renderer logger	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
22	cakephp_cakephp_aad076a701695d0d355ed61f7447186727d5e366_25_0	buggy:  context: <?php declare(strict_types=1); namespace Cake\Error; use Cake\Core\Configure; use Cake\Core\InstanceConfigTrait; use Cake\Error\Renderer\ConsoleErrorRenderer; use Cake\Error\Renderer\HtmlErrorRenderer; use Cake\Event\EventDispatcherTrait; use Exception; use InvalidArgumentException; class ErrorTrap { use EventDispatcherTrait; use InstanceConfigTrait { getConfig as private _getConfig; }	type_info:  global_variable:  function_name: __construct chooseErrorRenderer register handleError renderer logger	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
23	cakephp_cakephp_aad076a701695d0d355ed61f7447186727d5e366_25_0	buggy:  context: throw new FatalErrorException($description, $code, $file, $line); } $trace = Debugger::trace(['start' => 1, 'format' => 'points']); $error = new PhpError($code, $description, $file, $line, $trace); $debug = Configure::read('debug'); $renderer = $this->renderer(); $logger = $this->logger(); try { if ($this->_config['log']) { $logger->logMessage($error->getLabel(), $error->getMessage()); } $event = $this->dispatchEvent('Error.beforeRender', ['error' => $error]); if ($event->isStopped()) { return true; } $renderer->write($renderer->render($error, $debug)); } catch (Exception $e) {	type_info: file:unknown code:unknown trace:unknown error:unknown debug:unknown renderer:unknown logger:unknown event:unknown  global_variable:  function_name: __construct chooseErrorRenderer register handleError renderer logger	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
24	cakephp_cakephp_aad076a701695d0d355ed61f7447186727d5e366_25_0	buggy: $logger->logMessage($error->getLabel(), $error->getMessage()); context: $trace = Debugger::trace(['start' => 1, 'format' => 'points']); $error = new PhpError($code, $description, $file, $line, $trace); $debug = Configure::read('debug'); $renderer = $this->renderer(); $logger = $this->logger(); try { if ($this->_config['log']) { $logger->logMessage($error->getLabel(), $error->getMessage()); $logger->logMessage($error->getLabel(), $error->getMessage()); } $event = $this->dispatchEvent('Error.beforeRender', ['error' => $error]); if ($event->isStopped()) { return true; } $renderer->write($renderer->render($error, $debug)); } catch (Exception $e) { $logger->logMessage('error', 'Could not render error. Got: ' . $e->getMessage());	type_info: file:unknown code:unknown trace:unknown error:unknown debug:unknown renderer:unknown logger:unknown event:unknown  global_variable:  function_name: __construct chooseErrorRenderer register handleError renderer logger	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
25	cakephp_cakephp_a043f52e4046680af3750bbadcc372813e1c5255_26_0	buggy:  context: <?php declare(strict_types=1); namespace Cake\Collection; use ArrayIterator; use IteratorIterator; use Serializable; class Collection extends IteratorIterator implements CollectionInterface, Serializable { use CollectionTrait;	type_info:  global_variable:  function_name: __construct serialize __serialize unserialize __unserialize count countKeys __debugInfo	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
26	cakephp_cakephp_a043f52e4046680af3750bbadcc372813e1c5255_26_0	buggy:  context: public function __debugInfo(): array { return [ 'count' => $this->count(), ]; }	type_info:  global_variable:  function_name: __construct serialize __serialize unserialize __unserialize count countKeys __debugInfo	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
27	cakephp_cakephp_a043f52e4046680af3750bbadcc372813e1c5255_26_0	buggy: 'count' => $this->count(), context: public function __debugInfo(): array { return [ 'count' => $this->count(), 'count' => $this->count(), ]; }	type_info:  global_variable:  function_name: __construct serialize __serialize unserialize __unserialize count countKeys __debugInfo	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
28	cakephp_cakephp_6fbd0af9a494826797ec99c6342d8817ea2a4f69_27_0	"buggy:  context: public function logger(): ErrorLoggerInterface { $class = $this->getConfig('logger', $this->_defaultConfig['logger']); if (!in_array(ErrorLoggerInterface::class, class_implements($class))) { throw new InvalidArgumentException( ""Cannot use {$class} as an error logger. It must implement \Cake\Error\ErrorLoggerInterface."" ); } return new $class($this->_config); }"	type_info: class:unknown  global_variable:  function_name: __construct chooseErrorRenderer register handleError logError renderer logger	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
29	cakephp_cakephp_0c32784d6d6ed44847c8437102488cd39d8afe63_28_0	buggy: return filter_var($argument, FILTER_VALIDATE_INT) ? (int)$argument : null; context: protected function coerceStringToType(string $argument, ReflectionNamedType $type) { switch ($type->getName()) { case 'string': return $argument; case 'float': return is_numeric($argument) ? (float)$argument : null; case 'int': return filter_var($argument, FILTER_VALIDATE_INT) ? (int)$argument : null; return filter_var($argument, FILTER_VALIDATE_INT) ? (int)$argument : null; case 'bool': return $argument === '0' ? false : ($argument === '1' ? true : null); case 'array': return $argument === '' ? [] : explode(',', $argument); } return null; }	type_info: controller:unknown type:unknown argument:unknown  global_variable: controller: unknown function_name: __construct create invoke handle getActionArgs coerceStringToType getControllerClass missingController	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
30	cakephp_cakephp_5773eb80e46a44e02c9e4a7a0cbf5f90c1ac2bda_29_0	buggy:  context: <?php declare(strict_types=1); namespace Cake\Core\TestSuite; use Cake\Core\Configure; use Cake\Core\ContainerInterface; use Cake\Event\EventInterface; use Closure; use LogicException; trait ContainerStubTrait { protected $_appClass; protected $_appArgs; private $containerServices = [];	type_info: containerServices:array  global_variable:  function_name: configApplication createApp mockService removeMockService modifyContainer cleanupContainer	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
31	cakephp_cakephp_5773eb80e46a44e02c9e4a7a0cbf5f90c1ac2bda_29_0	buggy: $container->extend($key)->setConcrete($factory); context: public function modifyContainer(EventInterface $event, ContainerInterface $container): ?ContainerInterface { if (empty($this->containerServices)) { return null; } foreach ($this->containerServices as $key => $factory) { if ($container->has($key)) { $container->extend($key)->setConcrete($factory); $container->extend($key)->setConcrete($factory); } else { $container->add($key, $factory); } } return $container; } public function cleanupContainer(): void {	type_info: key:unknown  global_variable:  function_name: configApplication createApp mockService removeMockService modifyContainer cleanupContainer	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
32	cakephp_cakephp_333b5bb85ed57dc42cf9845fda9d6d2e61663691_30_0	"buggy: $pass = implode('/', array_map('rawurlencode', $pass)); context: protected function _writeUrl(array $params, array $pass = [], array $query = []): string { $pass = implode('/', array_map('rawurlencode', $pass)); $pass = implode('/', array_map('rawurlencode', $pass)); $out = $this->template; $search = $replace = []; foreach ($this->keys as $key) { if (!array_key_exists($key, $params)) { throw new InvalidArgumentException(""Missing required route key `{$key}`""); } $string = $params[$key]; if ($this->braceKeys) { $search[] = ""{{$key}}"";"	type_info: search:array key:unknown pass:array query:array out:string string:unknown  global_variable:  function_name: __construct setExtensions getExtensions setMethods normalizeAndValidateMethods setPatterns setHost setPass setPersist compiled compile _writeRoute getName parseRequest parse hostMatches _parseExtension _parseArgs _persistParams match _matchMethod _writeUrl staticPath setMiddleware getMiddleware __set_state	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
33	cakephp_cakephp_a91a54a72a45c272f7c2a754d4c18768d18e024f_31_0	"buggy: foreach ($var->__debugInfo() as $key => $val) { context: $className = get_class($var); if ($isRef) { return new ReferenceNode($className, $refNum); } $node = new ClassNode($className, $refNum); $remaining = $context->remainingDepth(); if ($remaining > 0) { if (method_exists($var, '__debugInfo')) { try { foreach ($var->__debugInfo() as $key => $val) { foreach ($var->__debugInfo() as $key => $val) { $node->addProperty(new PropertyNode(""'{$key}'"", null, static::export($val, $context))); } return $node; } catch (Exception $e) { return new SpecialNode(""(unable to export object: {$e->getMessage()})""); } }"	type_info: e:string key:unknown context:array node:unknown remaining:unknown isRef:unknown refNum:unknown className:unknown var:unknown  global_variable:  function_name: __construct getInstance configInstance outputMask setOutputMask addEditor setEditor editorUrl dump log trace formatTrace trimPath excerpt _highlight getExportFormatter exportVar exportVarAsPlainText exportVarAsNodes export exportArray exportObject getOutputFormat setOutputFormat addFormat addRenderer outputError getType printVar formatHtmlMessage checkSecurityKeys	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
34	cakephp_cakephp_56033f0ff3f928a9be46eba4ec4706cef11f7620_32_0	buggy:  context: public function multiCheckbox(string $fieldName, iterable $options, array $attributes = []): string { $attributes += [ 'disabled' => null, 'escape' => true, 'hiddenField' => true, 'secure' => true, ]; if (!isset($attributes['id'])) { $attributes['id'] = true; } $attributes = $this->_initInputField($fieldName, $attributes); $attributes['options'] = $options; $attributes['idPrefix'] = $this->_idPrefix; $hidden = ''; if ($attributes['hiddenField']) {	type_info: options:array fieldName:unknown attributes:array hidden:string  global_variable:  function_name: __construct getWidgetLocator setWidgetLocator contextFactory create _formUrl _lastAction _csrfField end secure unlockField createFormProtector getFormProtector isFieldError error label allControls controls fieldset control _groupTemplate _inputContainerTemplate _getInput _parseOptions _inputType _optionsOptions _magicOptions setRequiredAndCustomValidity _getLabel _extractOption _inputLabel checkbox radio __call textarea hidden file button postButton postLink submit select multiCheckbox year month dateTime time date _initInputField _isDisabled addContextProvider context _getContext addWidget widget resetTemplates implementedEvents getValueSources validateValueSources setValueSources getSourceValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
35	cakephp_cakephp_56033f0ff3f928a9be46eba4ec4706cef11f7620_32_0	buggy:  context: { $attributes += [ 'disabled' => null, 'escape' => true, 'hiddenField' => true, 'secure' => true, ]; if (!isset($attributes['id'])) { $attributes['id'] = true; } $attributes = $this->_initInputField($fieldName, $attributes); $attributes['options'] = $options; $attributes['idPrefix'] = $this->_idPrefix; $hidden = ''; if ($attributes['hiddenField']) { $hiddenAttributes = [ 'name' => $attributes['name'],	type_info: options:array fieldName:unknown attributes:array hidden:string hiddenAttributes:array  global_variable:  function_name: __construct getWidgetLocator setWidgetLocator contextFactory create _formUrl _lastAction _csrfField end secure unlockField createFormProtector getFormProtector isFieldError error label allControls controls fieldset control _groupTemplate _inputContainerTemplate _getInput _parseOptions _inputType _optionsOptions _magicOptions setRequiredAndCustomValidity _getLabel _extractOption _inputLabel checkbox radio __call textarea hidden file button postButton postLink submit select multiCheckbox year month dateTime time date _initInputField _isDisabled addContextProvider context _getContext addWidget widget resetTemplates implementedEvents getValueSources validateValueSources setValueSources getSourceValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
36	cakephp_cakephp_56033f0ff3f928a9be46eba4ec4706cef11f7620_32_0	buggy: if (!isset($attributes['type']) && isset($attributes['name'])) { context: 'name' => $attributes['name'], 'value' => '', 'secure' => false, 'disabled' => $attributes['disabled'] === true || $attributes['disabled'] === 'disabled', 'id' => $attributes['id'], ]; $hidden = $this->hidden($fieldName, $hiddenAttributes); } unset($attributes['hiddenField']); if (!isset($attributes['type']) && isset($attributes['name'])) { if (!isset($attributes['type']) && isset($attributes['name'])) { unset($attributes['id']); } return $hidden . $this->widget('multicheckbox', $attributes); } public function year(string $fieldName, array $options = []): string { $options += [	type_info: options:array fieldName:unknown attributes:array hidden:string hiddenAttributes:array  global_variable:  function_name: __construct getWidgetLocator setWidgetLocator contextFactory create _formUrl _lastAction _csrfField end secure unlockField createFormProtector getFormProtector isFieldError error label allControls controls fieldset control _groupTemplate _inputContainerTemplate _getInput _parseOptions _inputType _optionsOptions _magicOptions setRequiredAndCustomValidity _getLabel _extractOption _inputLabel checkbox radio __call textarea hidden file button postButton postLink submit select multiCheckbox year month dateTime time date _initInputField _isDisabled addContextProvider context _getContext addWidget widget resetTemplates implementedEvents getValueSources validateValueSources setValueSources getSourceValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
37	cakephp_cakephp_56033f0ff3f928a9be46eba4ec4706cef11f7620_32_0	buggy:  context: 'value' => '', 'secure' => false, 'disabled' => $attributes['disabled'] === true || $attributes['disabled'] === 'disabled', 'id' => $attributes['id'], ]; $hidden = $this->hidden($fieldName, $hiddenAttributes); } unset($attributes['hiddenField']); if (!isset($attributes['type']) && isset($attributes['name'])) { unset($attributes['id']); } return $hidden . $this->widget('multicheckbox', $attributes); } public function year(string $fieldName, array $options = []): string { $options += [ 'empty' => true,	type_info: options:array fieldName:unknown attributes:array hidden:string hiddenAttributes:array  global_variable:  function_name: __construct getWidgetLocator setWidgetLocator contextFactory create _formUrl _lastAction _csrfField end secure unlockField createFormProtector getFormProtector isFieldError error label allControls controls fieldset control _groupTemplate _inputContainerTemplate _getInput _parseOptions _inputType _optionsOptions _magicOptions setRequiredAndCustomValidity _getLabel _extractOption _inputLabel checkbox radio __call textarea hidden file button postButton postLink submit select multiCheckbox year month dateTime time date _initInputField _isDisabled addContextProvider context _getContext addWidget widget resetTemplates implementedEvents getValueSources validateValueSources setValueSources getSourceValue	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
38	cakephp_cakephp_8e6a6683b35fb458602dae499d93b03dbcead282_33_0	buggy: $new->expiresAt = new DateTimeImmutable('1970-01-01 00:00:01'); context: public function withExpired() { $new = clone $this; $new->expiresAt = new DateTimeImmutable('1970-01-01 00:00:01'); $new->expiresAt = new DateTimeImmutable('1970-01-01 00:00:01'); return $new; }	type_info: expiresAt:unknown new:unknown  global_variable: expiresAt: unknown function_name: __construct setDefaults create dateTimeInstance createFromHeaderString toHeaderValue withName getId getName validateName getValue getStringValue getScalarValue withValue _setValue withPath getPath withDomain getDomain isSecure withSecure withHttpOnly isHttpOnly withExpiry getExpiry getExpiresTimestamp getFormattedExpires isExpired withNeverExpire withExpired getSameSite withSameSite validateSameSiteValue check withAddedValue withoutAddedValue read isExpanded getOptions toArray _flatten _expand	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
39	doctrine_dbal_f0f1961adc3c8d5e1797bbc99381ec52575bdfca_1_0	buggy:  context: if ($constraint instanceof Index) { if ($constraint->isPrimary()) { $query .= ' PRIMARY KEY'; } elseif ($constraint->isUnique()) { $query .= ' UNIQUE'; } else { throw new InvalidArgumentException( 'Can only create primary or unique constraints, no common indexes with getCreateConstraintSQL().' ); } } elseif ($constraint instanceof ForeignKeyConstraint) { $query .= ' FOREIGN KEY'; $referencesClause = ' REFERENCES ' . $constraint->getQuotedForeignTableName($this) . ' (' . implode(', ', $constraint->getQuotedForeignColumns($this)) . ')'; } $query .= ' ' . $columnList . $referencesClause; return $query;	type_info: constraint:unknown query:string columnList:string referencesClause:string  global_variable:  function_name: __construct setEventManager getEventManager getBooleanTypeDeclarationSQL getIntegerTypeDeclarationSQL getBigIntTypeDeclarationSQL getSmallIntTypeDeclarationSQL _getCommonIntegerTypeDeclarationSQL initializeDoctrineTypeMappings initializeAllDoctrineTypeMappings getAsciiStringTypeDeclarationSQL getVarcharTypeDeclarationSQL getBinaryTypeDeclarationSQL getGuidTypeDeclarationSQL getJsonTypeDeclarationSQL getVarcharTypeDeclarationSQLSnippet getBinaryTypeDeclarationSQLSnippet getClobTypeDeclarationSQL getBlobTypeDeclarationSQL getName registerDoctrineTypeMapping getDoctrineTypeMapping hasDoctrineTypeMappingFor initializeCommentedDoctrineTypes isCommentedDoctrineType markDoctrineTypeCommented getDoctrineTypeComment getColumnComment getIdentifierQuoteCharacter getSqlCommentStartString getSqlCommentEndString getCharMaxLength getVarcharMaxLength getVarcharDefaultLength getBinaryMaxLength getBinaryDefaultLength getWildcards getRegexpExpression getAvgExpression getCountExpression getMaxExpression getMinExpression getSumExpression getMd5Expression getLengthExpression getSqrtExpression getRoundExpression getModExpression getTrimExpression getRtrimExpression getLtrimExpression getUpperExpression getLowerExpression getLocateExpression getNowExpression getSubstringExpression getConcatExpression getNotExpression getIsNullExpression getIsNotNullExpression getBetweenExpression getAcosExpression getSinExpression getPiExpression getCosExpression getDateDiffExpression getDateAddSecondsExpression getDateSubSecondsExpression getDateAddMinutesExpression getDateSubMinutesExpression getDateAddHourExpression getDateSubHourExpression getDateAddDaysExpression getDateSubDaysExpression getDateAddWeeksExpression getDateSubWeeksExpression getDateAddMonthExpression getDateSubMonthExpression getDateAddQuartersExpression getDateSubQuartersExpression getDateAddYearsExpression getDateSubYearsExpression getDateArithmeticIntervalExpression getBitAndComparisonExpression getBitOrComparisonExpression getCurrentDatabaseExpression getForUpdateSQL appendLockHint getReadLockSQL getWriteLockSQL getDropDatabaseSQL getDropSchemaSQL getDropTableSQL getDropTemporaryTableSQL getDropIndexSQL getDropConstraintSQL getDropForeignKeySQL getCreateTableSQL getCommentOnTableSQL getCommentOnColumnSQL getInlineColumnCommentSQL _getCreateTableSQL getCreateTemporaryTableSnippetSQL getCreateSequenceSQL getAlterSequenceSQL getCreateConstraintSQL getCreateIndexSQL getPartialIndexSQL getCreateIndexSQLFlags getCreatePrimaryKeySQL getCreateSchemaSQL quoteIdentifier quoteSingleIdentifier getCreateForeignKeySQL getAlterTableSQL onSchemaAlterTableAddColumn onSchemaAlterTableRemoveColumn onSchemaAlterTableChangeColumn onSchemaAlterTableRenameColumn onSchemaAlterTable getPreAlterTableIndexForeignKeySQL getPostAlterTableIndexForeignKeySQL getRenameIndexSQL getColumnDeclarationListSQL getColumnDeclarationSQL getDecimalTypeDeclarationSQL getDefaultValueDeclarationSQL getCheckDeclarationSQL getUniqueConstraintDeclarationSQL getIndexDeclarationSQL getCustomTypeDeclarationSQL getIndexFieldDeclarationListSQL getColumnsFieldDeclarationListSQL getTemporaryTableSQL getTemporaryTableName getForeignKeyDeclarationSQL getAdvancedForeignKeyOptionsSQL getForeignKeyReferentialActionSQL getForeignKeyBaseDeclarationSQL getUniqueFieldDeclarationSQL getColumnCharsetDeclarationSQL getColumnCollationDeclarationSQL prefersIdentityColumns convertBooleans convertFromBoolean convertBooleansToDatabaseValue getCurrentDateSQL getCurrentTimeSQL getCurrentTimestampSQL _getTransactionIsolationLevelSQL getListDatabasesSQL getListNamespacesSQL getListSequencesSQL getListTableConstraintsSQL getListTableColumnsSQL getListTablesSQL getListUsersSQL getListViewsSQL getListTableIndexesSQL getListTableForeignKeysSQL getCreateViewSQL getDropViewSQL getDropSequenceSQL getSequenceNextValSQL getCreateDatabaseSQL getSetTransactionIsolationSQL getDateTimeTypeDeclarationSQL getDateTimeTzTypeDeclarationSQL getDateTypeDeclarationSQL getTimeTypeDeclarationSQL getFloatDeclarationSQL getDefaultTransactionIsolationLevel supportsSequences supportsIdentityColumns usesSequenceEmulatedIdentityColumns getIdentitySequenceName supportsIndexes supportsPartialIndexes supportsColumnLengthIndexes supportsAlterTable supportsTransactions supportsSavepoints supportsReleaseSavepoints supportsPrimaryConstraints supportsForeignKeyConstraints supportsSchemas canEmulateSchemas getDefaultSchemaName supportsCreateDropDatabase supportsGettingAffectedRows supportsInlineColumnComments supportsCommentOnStatement hasNativeGuidType hasNativeJsonType supportsViews supportsColumnCollation getDateTimeFormatString getDateTimeTzFormatString getDateFormatString getTimeFormatString modifyLimitQuery doModifyLimitQuery supportsLimitOffset getMaxIdentifierLength getEmptyIdentityInsertSQL getTruncateTableSQL getDummySelectSQL createSavePoint releaseSavePoint rollbackSavePoint getReservedKeywordsList createReservedKeywordsList getReservedKeywordsClass quoteStringLiteral getStringLiteralQuoteCharacter escapeStringForLike createSQLParser getLikeWildcardCharacters	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
40	doctrine_dbal_c90854b529dfc84201fc0f4e6e2b20fe3845b6eb_2_0	buggy: SELECT ' . $sequenceName . '.NEXTVAL INTO :NEW.' . $quotedName . ' FROM DUAL; context: $sql[] = $this->getCreateSequenceSQL($sequence); $sql[] = 'CREATE TRIGGER ' . $autoincrementIdentifierName . ' BEFORE INSERT ON ' . $quotedTableName . ' FOR EACH ROW DECLARE last_Sequence NUMBER; last_InsertID NUMBER; BEGIN SELECT ' . $sequenceName . '.NEXTVAL INTO :NEW.' . $quotedName . ' FROM DUAL; SELECT ' . $sequenceName . '.NEXTVAL INTO :NEW.' . $quotedName . ' FROM DUAL; IF (:NEW.' . $quotedName . ' IS NULL OR :NEW.' . $quotedName . ' = 0) THEN SELECT ' . $sequenceName . '.NEXTVAL INTO :NEW.' . $quotedName . ' FROM DUAL; ELSE SELECT NVL(Last_Number, 0) INTO last_Sequence FROM User_Sequences WHERE Sequence_Name = \'' . $sequence->getName() . '\'; SELECT :NEW.' . $quotedName . ' INTO last_InsertID FROM DUAL; WHILE (last_InsertID > last_Sequence) LOOP SELECT ' . $sequenceName . '.NEXTVAL INTO last_Sequence FROM DUAL;	type_info: sql:array quotedTableName:unknown quotedName:unknown autoincrementIdentifierName:unknown sequenceName:unknown sequence:unknown  global_variable:  function_name: assertValidIdentifier getSubstringExpression getNowExpression getLocateExpression getDateArithmeticIntervalExpression getDateDiffExpression getBitAndComparisonExpression getCurrentDatabaseExpression getBitOrComparisonExpression getCreateSequenceSQL getAlterSequenceSQL getSequenceCacheSQL getSequenceNextValSQL getSetTransactionIsolationSQL _getTransactionIsolationLevelSQL getBooleanTypeDeclarationSQL getIntegerTypeDeclarationSQL getBigIntTypeDeclarationSQL getSmallIntTypeDeclarationSQL getDateTimeTypeDeclarationSQL getDateTimeTzTypeDeclarationSQL getDateTypeDeclarationSQL getTimeTypeDeclarationSQL _getCommonIntegerTypeDeclarationSQL getVarcharTypeDeclarationSQLSnippet getBinaryTypeDeclarationSQLSnippet getBinaryMaxLength getClobTypeDeclarationSQL getListDatabasesSQL getListSequencesSQL _getCreateTableSQL getListTableIndexesSQL getListTablesSQL getListViewsSQL getCreateViewSQL getDropViewSQL getCreateAutoincrementSql getDropAutoincrementSql normalizeIdentifier addSuffix getAutoincrementIdentifierName getListTableForeignKeysSQL getListTableConstraintsSQL getListTableColumnsSQL getDropSequenceSQL getDropForeignKeySQL getAdvancedForeignKeyOptionsSQL getForeignKeyReferentialActionSQL getDropDatabaseSQL getAlterTableSQL getColumnDeclarationSQL getRenameIndexSQL usesSequenceEmulatedIdentityColumns getIdentitySequenceName supportsCommentOnStatement getName doModifyLimitQuery getCreateTemporaryTableSnippetSQL getDateTimeTzFormatString getDateFormatString getTimeFormatString getMaxIdentifierLength supportsSequences supportsReleaseSavepoints getTruncateTableSQL getDummySelectSQL initializeDoctrineTypeMappings releaseSavePoint getReservedKeywordsClass getBlobTypeDeclarationSQL getListTableCommentsSQL	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
41	doctrine_dbal_c90854b529dfc84201fc0f4e6e2b20fe3845b6eb_2_0	buggy:  context: IF (:NEW.' . $quotedName . ' IS NULL OR :NEW.' . $quotedName . ' = 0) THEN SELECT ' . $sequenceName . '.NEXTVAL INTO :NEW.' . $quotedName . ' FROM DUAL; ELSE SELECT NVL(Last_Number, 0) INTO last_Sequence FROM User_Sequences WHERE Sequence_Name = \'' . $sequence->getName() . '\'; SELECT :NEW.' . $quotedName . ' INTO last_InsertID FROM DUAL; WHILE (last_InsertID > last_Sequence) LOOP SELECT ' . $sequenceName . '.NEXTVAL INTO last_Sequence FROM DUAL; END LOOP; END IF; END;'; return $sql; } public function getDropAutoincrementSql($table) { $table = $this->normalizeIdentifier($table); $autoincrementIdentifierName = $this->getAutoincrementIdentifierName($table);	type_info: sql:array table:unknown quotedName:unknown autoincrementIdentifierName:unknown sequenceName:unknown sequence:unknown  global_variable:  function_name: assertValidIdentifier getSubstringExpression getNowExpression getLocateExpression getDateArithmeticIntervalExpression getDateDiffExpression getBitAndComparisonExpression getCurrentDatabaseExpression getBitOrComparisonExpression getCreateSequenceSQL getAlterSequenceSQL getSequenceCacheSQL getSequenceNextValSQL getSetTransactionIsolationSQL _getTransactionIsolationLevelSQL getBooleanTypeDeclarationSQL getIntegerTypeDeclarationSQL getBigIntTypeDeclarationSQL getSmallIntTypeDeclarationSQL getDateTimeTypeDeclarationSQL getDateTimeTzTypeDeclarationSQL getDateTypeDeclarationSQL getTimeTypeDeclarationSQL _getCommonIntegerTypeDeclarationSQL getVarcharTypeDeclarationSQLSnippet getBinaryTypeDeclarationSQLSnippet getBinaryMaxLength getClobTypeDeclarationSQL getListDatabasesSQL getListSequencesSQL _getCreateTableSQL getListTableIndexesSQL getListTablesSQL getListViewsSQL getCreateViewSQL getDropViewSQL getCreateAutoincrementSql getDropAutoincrementSql normalizeIdentifier addSuffix getAutoincrementIdentifierName getListTableForeignKeysSQL getListTableConstraintsSQL getListTableColumnsSQL getDropSequenceSQL getDropForeignKeySQL getAdvancedForeignKeyOptionsSQL getForeignKeyReferentialActionSQL getDropDatabaseSQL getAlterTableSQL getColumnDeclarationSQL getRenameIndexSQL usesSequenceEmulatedIdentityColumns getIdentitySequenceName supportsCommentOnStatement getName doModifyLimitQuery getCreateTemporaryTableSnippetSQL getDateTimeTzFormatString getDateFormatString getTimeFormatString getMaxIdentifierLength supportsSequences supportsReleaseSavepoints getTruncateTableSQL getDummySelectSQL initializeDoctrineTypeMappings releaseSavePoint getReservedKeywordsClass getBlobTypeDeclarationSQL getListTableCommentsSQL	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
42	doctrine_dbal_3aa0227ec11658508916f7612bf8a1c2dfa89933_3_0	buggy:  context: $tableCreateSql = $this->getCreateTableSQL($name); $comment = $this->parseTableCommentFromSQL($name, $tableCreateSql); if ($comment !== null) { $table->addOption('comment', $comment); } return $table; } }	type_info: comment:unknown name:unknown table:unknown tableCreateSql:unknown  global_variable:  function_name: dropDatabase createDatabase renameTable createForeignKey dropAndCreateForeignKey dropForeignKey listTableForeignKeys _getPortableTableDefinition _getPortableTableIndexesList _getPortableTableColumnList _getPortableTableColumnDefinition _getPortableViewDefinition _getPortableTableForeignKeysList getTableDiffForAlterForeignKey parseColumnCollationFromSQL parseTableCommentFromSQL parseColumnCommentFromSQL getCreateTableSQL listTableDetails	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
43	doctrine_dbal_afd43f0a767cc8425e5467b262495b71a3fae11c_4_0	buggy: $diff->orphanedForeignKeys = array_merge($diff->orphanedForeignKeys, $foreignKeysToTable[$tableName]); context: $foreignKeysToTable[$foreignTable][] = $foreignKey; } } foreach ($diff->removedTables as $tableName => $table) { if (! isset($foreignKeysToTable[$tableName])) { continue; } $diff->orphanedForeignKeys = array_merge($diff->orphanedForeignKeys, $foreignKeysToTable[$tableName]); $diff->orphanedForeignKeys = array_merge($diff->orphanedForeignKeys, $foreignKeysToTable[$tableName]); foreach ($foreignKeysToTable[$tableName] as $foreignKey) { $localTableName = strtolower($foreignKey->getLocalTableName()); if (! isset($diff->changedTables[$localTableName])) { continue; } foreach ($diff->changedTables[$localTableName]->removedForeignKeys as $key => $removedForeignKey) { assert($removedForeignKey instanceof ForeignKeyConstraint);	type_info: platform:unknown diff:unknown foreignKeysToTable:array tableName:unknown table:unknown foreignTable:unknown localTableName:unknown key:unknown  global_variable: platform: unknown function_name: __construct __call __callStatic doCompareSchemas compare isAutoIncrementSequenceInSchema diffSequence diffTable detectColumnRenamings detectIndexRenamings diffForeignKey columnsEqual diffColumn diffIndex	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
44	doctrine_dbal_afd43f0a767cc8425e5467b262495b71a3fae11c_4_1	buggy: foreach ($this->removedTables as $table) { $sql[] = $platform->getDropTableSQL($table); } context: } foreach ($this->newSequences as $sequence) { $sql[] = $platform->getCreateSequenceSQL($sequence); } } $sql = array_merge($sql, $platform->getCreateTablesSQL($this->newTables)); if ($saveMode === false) { foreach ($this->removedTables as $table) { $sql[] = $platform->getDropTableSQL($table); } foreach ($this->removedTables as $table) { $sql[] = $platform->getDropTableSQL($table); } } foreach ($this->changedTables as $tableDiff) { $sql = array_merge($sql, $platform->getAlterTableSQL($tableDiff)); } return $sql;	type_info: saveMode:array sql:unknown  global_variable:  function_name: __construct toSaveSql toSql _toSql	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
45	doctrine_dbal_ba20f85f122e11ab065e9245c65b737ac39a2115_5_0	buggy:  context: protected function doListTables(): array { $database = $this->getDatabase(__METHOD__); $tableColumnsByTable = $this->fetchTableColumnsByTable($database); $indexColumnsByTable = $this->fetchIndexColumnsByTable($database); $foreignKeyColumnsByTable = $this->fetchForeignKeyColumnsByTable($database); $tableOptionsByTable = $this->fetchTableOptionsByTable($database); $tables = []; foreach ($tableColumnsByTable as $tableName => $tableColumns) { $tables[] = new Table( $tableName, $this->_getPortableTableColumnList($tableName, $database, $tableColumns), $this->_getPortableTableIndexesList($indexColumnsByTable[$tableName] ?? [], $tableName), [], $this->_getPortableTableForeignKeysList($foreignKeyColumnsByTable[$tableName] ?? []), $tableOptionsByTable[$tableName] ?? []	type_info: database:unknown tableColumns:unknown tables:array tableColumnsByTable:unknown indexColumnsByTable:unknown foreignKeyColumnsByTable:unknown tableOptionsByTable:unknown tableName:array  global_variable:  function_name: __construct getDatabasePlatform tryMethod listDatabases listNamespaceNames listSchemaNames listSequences listTableColumns doListTableColumns listTableIndexes doListTableIndexes tablesExist listTableNames doListTableNames filterAssetNames listTables doListTables listTableDetails doListTableDetails normalizeName selectTableNames selectTableColumns selectIndexColumns selectForeignKeyColumns fetchTableColumnsByTable fetchIndexColumnsByTable fetchForeignKeyColumnsByTable fetchTableOptionsByTable listViews listTableForeignKeys doListTableForeignKeys dropDatabase dropSchema dropTable dropIndex dropConstraint dropForeignKey dropSequence dropUniqueConstraint dropView createSchemaObjects createDatabase createTable createSequence createConstraint createIndex createForeignKey createUniqueConstraint createView dropSchemaObjects dropAndCreateConstraint dropAndCreateIndex dropAndCreateForeignKey dropAndCreateSequence dropAndCreateTable dropAndCreateDatabase dropAndCreateView alterSchema migrateSchema alterTable renameTable _getPortableDatabasesList getPortableNamespacesList _getPortableDatabaseDefinition getPortableNamespaceDefinition _getPortableSequencesList _getPortableSequenceDefinition _getPortableTableColumnList _getPortableTableColumnDefinition _getPortableTableIndexesList _getPortableTablesList _getPortableTableDefinition _getPortableViewsList _getPortableViewDefinition _getPortableTableForeignKeysList _getPortableTableForeignKeyDefinition _execSql createSchema createSchemaConfig getSchemaSearchPaths extractDoctrineTypeFromComment removeDoctrineTypeFromComment getDatabase createComparator fetchAllAssociativeGrouped	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
46	doctrine_dbal_ba20f85f122e11ab065e9245c65b737ac39a2115_5_0	buggy:  context: $database = $this->getDatabase(__METHOD__); $tableColumnsByTable = $this->fetchTableColumnsByTable($database); $indexColumnsByTable = $this->fetchIndexColumnsByTable($database); $foreignKeyColumnsByTable = $this->fetchForeignKeyColumnsByTable($database); $tableOptionsByTable = $this->fetchTableOptionsByTable($database); $tables = []; foreach ($tableColumnsByTable as $tableName => $tableColumns) { $tables[] = new Table( $tableName, $this->_getPortableTableColumnList($tableName, $database, $tableColumns), $this->_getPortableTableIndexesList($indexColumnsByTable[$tableName] ?? [], $tableName), [], $this->_getPortableTableForeignKeysList($foreignKeyColumnsByTable[$tableName] ?? []), $tableOptionsByTable[$tableName] ?? [] ); }	type_info: database:unknown tableColumns:unknown tables:array tableColumnsByTable:unknown indexColumnsByTable:unknown foreignKeyColumnsByTable:unknown tableOptionsByTable:unknown tableName:array  global_variable:  function_name: __construct getDatabasePlatform tryMethod listDatabases listNamespaceNames listSchemaNames listSequences listTableColumns doListTableColumns listTableIndexes doListTableIndexes tablesExist listTableNames doListTableNames filterAssetNames listTables doListTables listTableDetails doListTableDetails normalizeName selectTableNames selectTableColumns selectIndexColumns selectForeignKeyColumns fetchTableColumnsByTable fetchIndexColumnsByTable fetchForeignKeyColumnsByTable fetchTableOptionsByTable listViews listTableForeignKeys doListTableForeignKeys dropDatabase dropSchema dropTable dropIndex dropConstraint dropForeignKey dropSequence dropUniqueConstraint dropView createSchemaObjects createDatabase createTable createSequence createConstraint createIndex createForeignKey createUniqueConstraint createView dropSchemaObjects dropAndCreateConstraint dropAndCreateIndex dropAndCreateForeignKey dropAndCreateSequence dropAndCreateTable dropAndCreateDatabase dropAndCreateView alterSchema migrateSchema alterTable renameTable _getPortableDatabasesList getPortableNamespacesList _getPortableDatabaseDefinition getPortableNamespaceDefinition _getPortableSequencesList _getPortableSequenceDefinition _getPortableTableColumnList _getPortableTableColumnDefinition _getPortableTableIndexesList _getPortableTablesList _getPortableTableDefinition _getPortableViewsList _getPortableViewDefinition _getPortableTableForeignKeysList _getPortableTableForeignKeyDefinition _execSql createSchema createSchemaConfig getSchemaSearchPaths extractDoctrineTypeFromComment removeDoctrineTypeFromComment getDatabase createComparator fetchAllAssociativeGrouped	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
47	doctrine_dbal_440db041a37b45bab0e14aaffa4874cf4c64f141_6_0	buggy: if (! $diff->fromTable instanceof Table) { throw new Exception( 'Sqlite platform requires for alter table the table diff with reference to original table schema' ); } $sql = []; foreach ($diff->fromTable->getIndexes() as $index) { if ($index->isPrimary()) { continue; } $sql[] = $this->getDropIndexSQL($index->getQuotedName($this), $diff->name); } return $sql; context: protected function getPreAlterTableIndexForeignKeySQL(TableDiff $diff) { if (! $diff->fromTable instanceof Table) { throw new Exception( 'Sqlite platform requires for alter table the table diff with reference to original table schema' ); } $sql = []; foreach ($diff->fromTable->getIndexes() as $index) { if ($index->isPrimary()) { continue; } $sql[] = $this->getDropIndexSQL($index->getQuotedName($this), $diff->name); } return $sql; if (! $diff->fromTable instanceof Table) { throw new Exception( 'Sqlite platform requires for alter table the table diff with reference to original table schema' ); } $sql = []; foreach ($diff->fromTable->getIndexes() as $index) { if ($index->isPrimary()) { continue; } $sql[] = $this->getDropIndexSQL($index->getQuotedName($this), $diff->name); } return $sql; }	type_info: sql:array index:unknown  global_variable:  function_name: getRegexpExpression getNowExpression getTrimExpression getSubstringExpression getLocateExpression getDateArithmeticIntervalExpression getDateDiffExpression getCurrentDatabaseExpression _getTransactionIsolationLevelSQL getSetTransactionIsolationSQL prefersIdentityColumns getBooleanTypeDeclarationSQL getIntegerTypeDeclarationSQL getBigIntTypeDeclarationSQL getTinyIntTypeDeclarationSQL getSmallIntTypeDeclarationSQL getMediumIntTypeDeclarationSQL getDateTimeTypeDeclarationSQL getDateTypeDeclarationSQL getTimeTypeDeclarationSQL _getCommonIntegerTypeDeclarationSQL disableSchemaEmulation emulateSchemaNamespacing getForeignKeyDeclarationSQL _getCreateTableSQL getNonAutoincrementPrimaryKeyDefinition getVarcharTypeDeclarationSQLSnippet getBinaryTypeDeclarationSQLSnippet getBinaryMaxLength getBinaryDefaultLength getClobTypeDeclarationSQL getListTableConstraintsSQL getListTableColumnsSQL getListTableIndexesSQL getListTablesSQL getListViewsSQL getAdvancedForeignKeyOptionsSQL supportsCreateDropDatabase supportsIdentityColumns supportsColumnCollation supportsInlineColumnComments getName getTruncateTableSQL udfSqrt udfMod udfLocate getForUpdateSQL getInlineColumnCommentSQL getInlineTableCommentSQL initializeDoctrineTypeMappings getReservedKeywordsClass getPreAlterTableIndexForeignKeySQL getPostAlterTableIndexForeignKeySQL doModifyLimitQuery getBlobTypeDeclarationSQL getTemporaryTableName canEmulateSchemas getCreateTablesSQL getDropTablesSQL getCreatePrimaryKeySQL getCreateForeignKeySQL getDropForeignKeySQL getCreateConstraintSQL getCreateTableSQL getListTableForeignKeysSQL getAlterTableSQL replaceColumn getSimpleAlterTableSQL getColumnNamesInAlteredTable getIndexesInAlteredTable getForeignKeysInAlteredTable getPrimaryIndexInAlteredTable createSchemaManager	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
48	doctrine_dbal_f62eeba14f2cf5b4aee9495d36e44ee94914b86b_7_0	buggy: REFERENCES\s+\S+\s+(?:\([^)]+\))? context: private function getForeignKeyDetails($table) { $createSql = $this->getCreateTableSQL($table); if ( preg_match_all( '# (?:CONSTRAINT\s+(\S+)\s+)? (?:FOREIGN\s+KEY[^)]+\)\s*)? REFERENCES\s+\S+\s+(?:\([^)]+\))? REFERENCES\s+\S+\s+(?:\([^)]+\))? (?: [^,]*? (NOT\s+DEFERRABLE|DEFERRABLE) (?:\s+INITIALLY\s+(DEFERRED|IMMEDIATE))? )?#isx', $createSql, $match ) === 0 ) { return [];	type_info: table:unknown createSql:unknown  global_variable:  function_name: listTableNames listTables listTableDetails listTableColumns listTableIndexes fetchForeignKeyColumnsByTable dropDatabase createDatabase renameTable createForeignKey dropAndCreateForeignKey dropForeignKey listTableForeignKeys _getPortableTableDefinition _getPortableTableIndexesList _getPortableTableColumnList _getPortableTableColumnDefinition _getPortableViewDefinition _getPortableTableForeignKeysList _getPortableTableForeignKeyDefinition getTableDiffForAlterForeignKey parseColumnCollationFromSQL parseTableCommentFromSQL parseColumnCommentFromSQL getCreateTableSQL addDetailsToTableForeignKeyColumns getForeignKeyDetails createComparator getSchemaSearchPaths selectTableNames selectTableColumns selectIndexColumns selectForeignKeyColumns fetchTableOptionsByTable	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
49	doctrine_dbal_2f1405a108463a877478e79def0005c076ae0e59_8_0	"buggy: * The SQLite platform doesn't support the concept of a database, therefore, it always returns an empty string context: public function getDateDiffExpression($date1, $date2) { return sprintf(""JULIANDAY(%s, 'start of day') - JULIANDAY(%s, 'start of day')"", $date1, $date2); } * The SQLite platform doesn't support the concept of a database, therefore, it always returns an empty string public function getCurrentDatabaseExpression(): string"	type_info:  global_variable:  function_name: getRegexpExpression getNowExpression getTrimExpression getSubstringExpression getLocateExpression getDateArithmeticIntervalExpression getDateDiffExpression getCurrentDatabaseExpression _getTransactionIsolationLevelSQL getSetTransactionIsolationSQL prefersIdentityColumns getBooleanTypeDeclarationSQL getIntegerTypeDeclarationSQL getBigIntTypeDeclarationSQL getTinyIntTypeDeclarationSQL getSmallIntTypeDeclarationSQL getMediumIntTypeDeclarationSQL getDateTimeTypeDeclarationSQL getDateTypeDeclarationSQL getTimeTypeDeclarationSQL _getCommonIntegerTypeDeclarationSQL disableSchemaEmulation emulateSchemaNamespacing getForeignKeyDeclarationSQL _getCreateTableSQL getNonAutoincrementPrimaryKeyDefinition getVarcharTypeDeclarationSQLSnippet getBinaryTypeDeclarationSQLSnippet getBinaryMaxLength getBinaryDefaultLength getClobTypeDeclarationSQL getListTableConstraintsSQL getListTableColumnsSQL getListTableIndexesSQL getListTablesSQL getListViewsSQL getAdvancedForeignKeyOptionsSQL supportsCreateDropDatabase supportsIdentityColumns supportsColumnCollation supportsInlineColumnComments getName getTruncateTableSQL udfSqrt udfMod udfLocate getForUpdateSQL getInlineColumnCommentSQL getInlineTableCommentSQL initializeDoctrineTypeMappings getReservedKeywordsClass getPreAlterTableIndexForeignKeySQL getPostAlterTableIndexForeignKeySQL doModifyLimitQuery getBlobTypeDeclarationSQL getTemporaryTableName canEmulateSchemas getCreateTablesSQL getDropTablesSQL getCreatePrimaryKeySQL getCreateForeignKeySQL getDropForeignKeySQL getCreateConstraintSQL getCreateTableSQL getListTableForeignKeysSQL getAlterTableSQL replaceColumn getSimpleAlterTableSQL getColumnNamesInAlteredTable getIndexesInAlteredTable getForeignKeysInAlteredTable getPrimaryIndexInAlteredTable createSchemaManager	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
50	doctrine_dbal_2f1405a108463a877478e79def0005c076ae0e59_8_0	"buggy: * @see \Doctrine\DBAL\Connection::getDatabase() context: public function getDateDiffExpression($date1, $date2) { return sprintf(""JULIANDAY(%s, 'start of day') - JULIANDAY(%s, 'start of day')"", $date1, $date2); } * @see \Doctrine\DBAL\Connection::getDatabase() public function getCurrentDatabaseExpression(): string"	type_info:  global_variable:  function_name: getRegexpExpression getNowExpression getTrimExpression getSubstringExpression getLocateExpression getDateArithmeticIntervalExpression getDateDiffExpression getCurrentDatabaseExpression _getTransactionIsolationLevelSQL getSetTransactionIsolationSQL prefersIdentityColumns getBooleanTypeDeclarationSQL getIntegerTypeDeclarationSQL getBigIntTypeDeclarationSQL getTinyIntTypeDeclarationSQL getSmallIntTypeDeclarationSQL getMediumIntTypeDeclarationSQL getDateTimeTypeDeclarationSQL getDateTypeDeclarationSQL getTimeTypeDeclarationSQL _getCommonIntegerTypeDeclarationSQL disableSchemaEmulation emulateSchemaNamespacing getForeignKeyDeclarationSQL _getCreateTableSQL getNonAutoincrementPrimaryKeyDefinition getVarcharTypeDeclarationSQLSnippet getBinaryTypeDeclarationSQLSnippet getBinaryMaxLength getBinaryDefaultLength getClobTypeDeclarationSQL getListTableConstraintsSQL getListTableColumnsSQL getListTableIndexesSQL getListTablesSQL getListViewsSQL getAdvancedForeignKeyOptionsSQL supportsCreateDropDatabase supportsIdentityColumns supportsColumnCollation supportsInlineColumnComments getName getTruncateTableSQL udfSqrt udfMod udfLocate getForUpdateSQL getInlineColumnCommentSQL getInlineTableCommentSQL initializeDoctrineTypeMappings getReservedKeywordsClass getPreAlterTableIndexForeignKeySQL getPostAlterTableIndexForeignKeySQL doModifyLimitQuery getBlobTypeDeclarationSQL getTemporaryTableName canEmulateSchemas getCreateTablesSQL getDropTablesSQL getCreatePrimaryKeySQL getCreateForeignKeySQL getDropForeignKeySQL getCreateConstraintSQL getCreateTableSQL getListTableForeignKeysSQL getAlterTableSQL replaceColumn getSimpleAlterTableSQL getColumnNamesInAlteredTable getIndexesInAlteredTable getForeignKeysInAlteredTable getPrimaryIndexInAlteredTable createSchemaManager	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
51	doctrine_dbal_2f1405a108463a877478e79def0005c076ae0e59_8_0	"buggy: return ""''""; context: public function getCurrentDatabaseExpression(): string { return ""''""; return ""''""; }"	type_info:  global_variable:  function_name: getRegexpExpression getNowExpression getTrimExpression getSubstringExpression getLocateExpression getDateArithmeticIntervalExpression getDateDiffExpression getCurrentDatabaseExpression _getTransactionIsolationLevelSQL getSetTransactionIsolationSQL prefersIdentityColumns getBooleanTypeDeclarationSQL getIntegerTypeDeclarationSQL getBigIntTypeDeclarationSQL getTinyIntTypeDeclarationSQL getSmallIntTypeDeclarationSQL getMediumIntTypeDeclarationSQL getDateTimeTypeDeclarationSQL getDateTypeDeclarationSQL getTimeTypeDeclarationSQL _getCommonIntegerTypeDeclarationSQL disableSchemaEmulation emulateSchemaNamespacing getForeignKeyDeclarationSQL _getCreateTableSQL getNonAutoincrementPrimaryKeyDefinition getVarcharTypeDeclarationSQLSnippet getBinaryTypeDeclarationSQLSnippet getBinaryMaxLength getBinaryDefaultLength getClobTypeDeclarationSQL getListTableConstraintsSQL getListTableColumnsSQL getListTableIndexesSQL getListTablesSQL getListViewsSQL getAdvancedForeignKeyOptionsSQL supportsCreateDropDatabase supportsIdentityColumns supportsColumnCollation supportsInlineColumnComments getName getTruncateTableSQL udfSqrt udfMod udfLocate getForUpdateSQL getInlineColumnCommentSQL getInlineTableCommentSQL initializeDoctrineTypeMappings getReservedKeywordsClass getPreAlterTableIndexForeignKeySQL getPostAlterTableIndexForeignKeySQL doModifyLimitQuery getBlobTypeDeclarationSQL getTemporaryTableName canEmulateSchemas getCreateTablesSQL getDropTablesSQL getCreatePrimaryKeySQL getCreateForeignKeySQL getDropForeignKeySQL getCreateConstraintSQL getCreateTableSQL getListTableForeignKeysSQL getAlterTableSQL replaceColumn getSimpleAlterTableSQL getColumnNamesInAlteredTable getIndexesInAlteredTable getForeignKeysInAlteredTable getPrimaryIndexInAlteredTable createSchemaManager	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
52	doctrine_dbal_12a328fc3872d969d500f32beb7fa70ad1ba10ff_9_0	buggy: return ! ($index1->isFullfilledBy($index2) && $index2->isFullfilledBy($index1)); context: public function diffIndex(Index $index1, Index $index2) { return ! ($index1->isFullfilledBy($index2) && $index2->isFullfilledBy($index1)); return ! ($index1->isFullfilledBy($index2) && $index2->isFullfilledBy($index1)); }	type_info:  global_variable:  function_name: __construct __call __callStatic doCompareSchemas compare isAutoIncrementSequenceInSchema diffSequence diffTable detectColumnRenamings detectIndexRenamings diffForeignKey columnsEqual diffColumn diffIndex	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
53	doctrine_dbal_12a328fc3872d969d500f32beb7fa70ad1ba10ff_9_1	buggy: * Checks if the other index already fulfills all the indexing and constraint needs of the current one. context: ) { continue; } $sameColumns = false; } return $sameColumns; } * Checks if the other index already fulfills all the indexing and constraint needs of the current one. public function isFullfilledBy(Index $other) { if (count($other->getColumns()) !== count($this->getColumns())) { return false; } $sameColumns = $this->spansColumns($other->getColumns()); if ($sameColumns) { if (! $this->samePartialIndex($other)) {	type_info: sameColumns:boolean  global_variable:  function_name: __construct _addColumn getColumns getQuotedColumns getUnquotedColumns isSimpleIndex isUnique isPrimary hasColumnAtPosition spansColumns isFullfilledBy overrules getFlags addFlag hasFlag removeFlag hasOption getOption getOptions samePartialIndex hasSameColumnLengths	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
54	doctrine_dbal_12a328fc3872d969d500f32beb7fa70ad1ba10ff_9_1	buggy:  context: public function isFullfilledBy(Index $other) { if (count($other->getColumns()) !== count($this->getColumns())) { return false; } $sameColumns = $this->spansColumns($other->getColumns()); if ($sameColumns) { if (! $this->samePartialIndex($other)) { return false;	type_info: sameColumns:boolean  global_variable:  function_name: __construct _addColumn getColumns getQuotedColumns getUnquotedColumns isSimpleIndex isUnique isPrimary hasColumnAtPosition spansColumns isFullfilledBy overrules getFlags addFlag hasFlag removeFlag hasOption getOption getOptions samePartialIndex hasSameColumnLengths	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
55	doctrine_dbal_12a328fc3872d969d500f32beb7fa70ad1ba10ff_9_2	buggy: if (! $implicitIndex->isFullfilledBy($indexCandidate) || ! isset($this->_indexes[$name])) { context: protected function _addIndex(Index $indexCandidate) { $indexName = $indexCandidate->getName(); $indexName = $this->normalizeIdentifier($indexName); $replacedImplicitIndexes = []; foreach ($this->implicitIndexes as $name => $implicitIndex) { if (! $implicitIndex->isFullfilledBy($indexCandidate) || ! isset($this->_indexes[$name])) { if (! $implicitIndex->isFullfilledBy($indexCandidate) || ! isset($this->_indexes[$name])) { continue; } $replacedImplicitIndexes[] = $name; } if ( (isset($this->_indexes[$indexName]) && ! in_array($indexName, $replacedImplicitIndexes, true)) || ($this->_primaryKeyName !== null && $indexCandidate->isPrimary()) ) {	type_info: indexName:unknown name:unknown replacedImplicitIndexes:array indexCandidate:unknown  global_variable:  function_name: __construct setSchemaConfig _getMaxIdentifierLength setPrimaryKey addIndex addUniqueConstraint dropPrimaryKey dropIndex addUniqueIndex renameIndex columnsAreIndexed _createIndex addColumn changeColumn dropColumn addForeignKeyConstraint addOption _addColumn _addIndex _addUniqueConstraint _addForeignKeyConstraint hasForeignKey getForeignKey removeForeignKey hasUniqueConstraint getUniqueConstraint removeUniqueConstraint getColumns getForeignKeyColumns filterColumns hasColumn getColumn getPrimaryKey getPrimaryKeyColumns hasPrimaryKey hasIndex getIndex getIndexes getUniqueConstraints getForeignKeys hasOption getOption getOptions visit __clone _createUniqueConstraint normalizeIdentifier setComment getComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
56	doctrine_dbal_12a328fc3872d969d500f32beb7fa70ad1ba10ff_9_2	buggy: if ($indexCandidate->isFullfilledBy($existingIndex)) { context: $name = $this->normalizeIdentifier($name); $this->uniqueConstraints[$name] = $constraint; $indexName = $this->_generateIdentifierName($mergedNames, 'idx', $this->_getMaxIdentifierLength()); $indexCandidate = $this->_createIndex($constraint->getColumns(), $indexName, true, false); foreach ($this->_indexes as $existingIndex) { if ($indexCandidate->isFullfilledBy($existingIndex)) { if ($indexCandidate->isFullfilledBy($existingIndex)) { return $this; } } $this->implicitIndexes[$this->normalizeIdentifier($indexName)] = $indexCandidate; return $this; }	type_info: indexName:unknown name:unknown constraint:unknown mergedNames:unknown indexCandidate:unknown  global_variable:  function_name: __construct setSchemaConfig _getMaxIdentifierLength setPrimaryKey addIndex addUniqueConstraint dropPrimaryKey dropIndex addUniqueIndex renameIndex columnsAreIndexed _createIndex addColumn changeColumn dropColumn addForeignKeyConstraint addOption _addColumn _addIndex _addUniqueConstraint _addForeignKeyConstraint hasForeignKey getForeignKey removeForeignKey hasUniqueConstraint getUniqueConstraint removeUniqueConstraint getColumns getForeignKeyColumns filterColumns hasColumn getColumn getPrimaryKey getPrimaryKeyColumns hasPrimaryKey hasIndex getIndex getIndexes getUniqueConstraints getForeignKeys hasOption getOption getOptions visit __clone _createUniqueConstraint normalizeIdentifier setComment getComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
57	doctrine_dbal_12a328fc3872d969d500f32beb7fa70ad1ba10ff_9_2	buggy: if ($indexCandidate->isFullfilledBy($existingIndex)) { context: columns). */ $indexName = $this->_generateIdentifierName( array_merge([$this->getName()], $constraint->getColumns()), 'idx', $this->_getMaxIdentifierLength(), ); $indexCandidate = $this->_createIndex($constraint->getColumns(), $indexName, false, false); foreach ($this->_indexes as $existingIndex) { if ($indexCandidate->isFullfilledBy($existingIndex)) { if ($indexCandidate->isFullfilledBy($existingIndex)) { return $this; } } $this->_addIndex($indexCandidate); $this->implicitIndexes[$this->normalizeIdentifier($indexName)] = $indexCandidate; return $this; }	type_info: indexName:unknown constraint:unknown indexCandidate:unknown  global_variable:  function_name: __construct setSchemaConfig _getMaxIdentifierLength setPrimaryKey addIndex addUniqueConstraint dropPrimaryKey dropIndex addUniqueIndex renameIndex columnsAreIndexed _createIndex addColumn changeColumn dropColumn addForeignKeyConstraint addOption _addColumn _addIndex _addUniqueConstraint _addForeignKeyConstraint hasForeignKey getForeignKey removeForeignKey hasUniqueConstraint getUniqueConstraint removeUniqueConstraint getColumns getForeignKeyColumns filterColumns hasColumn getColumn getPrimaryKey getPrimaryKeyColumns hasPrimaryKey hasIndex getIndex getIndexes getUniqueConstraints getForeignKeys hasOption getOption getOptions visit __clone _createUniqueConstraint normalizeIdentifier setComment getComment	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
58	googleapis_google-api-php-client_e96471b6264ec8b0d22ceeaf12271f568aeb81b1_1_0	buggy:  context: } elseif (isset($this->token['id_token'])) { $idToken = $this->token['id_token']; if (substr_count($idToken, '.') == 2) { $parts = explode('.', $idToken); $payload = json_decode(base64_decode($parts[1]), true); if ($payload && isset($payload['iat'])) { $created = $payload['iat']; } } } return ($created + ($this->token['expires_in'] - 30)) < time(); } public function getAuth() { throw new BadMethodCallException( 'This function no longer exists. See UPGRADING.md for more information' ); }	type_info: config:unknown auth:unknown credentials:unknown http:unknown token:unknown created:integer idToken:unknown parts:unknown payload:unknown logger:unknown  global_variable: config: unknown auth: unknown credentials: unknown http: unknown token: unknown logger: unknown function_name: __construct getLibraryVersion authenticate fetchAccessTokenWithAuthCode refreshTokenWithAssertion fetchAccessTokenWithAssertion refreshToken fetchAccessTokenWithRefreshToken createAuthUrl authorize useApplicationDefaultCredentials isUsingApplicationDefaultCredentials setAccessToken getAccessToken getRefreshToken isAccessTokenExpired getAuth setAuth setClientId getClientId setClientSecret getClientSecret setRedirectUri getRedirectUri setState setAccessType setApprovalPrompt setLoginHint setApplicationName setRequestVisibleActions setDeveloperKey setHostedDomain setPrompt setOpenidRealm setIncludeGrantedScopes setTokenCallback revokeToken verifyIdToken setScopes addScope getScopes prepareScopes execute setUseBatch isAppEngine setConfig getConfig setAuthConfigFile setAuthConfig setSubject setDefer shouldDefer getOAuth2Service createOAuth2Service setCache getCache setCacheConfig setLogger getLogger createDefaultLogger createDefaultCache setHttpClient getHttpClient setApiFormatV2 createDefaultHttpClient createApplicationDefaultCredentials getAuthHandler createUserRefreshCredentials	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
59	googleapis_google-api-php-client_a69131b6488735d112a529a278cfc8b875e18647_2_0	buggy:  context: : var_export($this->config['include_granted_scopes'], true); $params = array_filter([ 'access_type' => $this->config['access_type'], 'approval_prompt' => $approvalPrompt, 'hd' => $this->config['hd'], 'include_granted_scopes' => $includeGrantedScopes, 'login_hint' => $this->config['login_hint'], 'openid.realm' => $this->config['openid.realm'], 'prompt' => $this->config['prompt'], 'response_type' => 'code', 'scope' => $scope, 'state' => $this->config['state'], ]); $rva = $this->config['request_visible_actions']; if (strlen($rva) > 0 && false !== strpos($scope, 'plus.login')) { $params['request_visible_actions'] = $rva; }	type_info: config:unknown auth:unknown credentials:unknown scope:unknown approvalPrompt:unknown includeGrantedScopes:unknown params:unknown rva:unknown http:unknown token:array logger:unknown  global_variable: config: unknown auth: unknown credentials: unknown http: unknown token: array logger: unknown function_name: __construct getLibraryVersion authenticate fetchAccessTokenWithAuthCode refreshTokenWithAssertion fetchAccessTokenWithAssertion refreshToken fetchAccessTokenWithRefreshToken createAuthUrl authorize useApplicationDefaultCredentials isUsingApplicationDefaultCredentials setAccessToken getAccessToken getRefreshToken isAccessTokenExpired getAuth setAuth setClientId getClientId setClientSecret getClientSecret setRedirectUri getRedirectUri setState setAccessType setApprovalPrompt setLoginHint setApplicationName setRequestVisibleActions setDeveloperKey setHostedDomain setPrompt setOpenidRealm setIncludeGrantedScopes setTokenCallback revokeToken verifyIdToken setScopes addScope getScopes prepareScopes execute setUseBatch isAppEngine setConfig getConfig setAuthConfigFile setAuthConfig setSubject setDefer shouldDefer getOAuth2Service createOAuth2Service setCache getCache setCacheConfig setLogger getLogger createDefaultLogger createDefaultCache setHttpClient getHttpClient setApiFormatV2 createDefaultHttpClient createApplicationDefaultCredentials getAuthHandler createUserRefreshCredentials	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
60	googleapis_google-api-php-client_654c0e29ab78aba8bfef52fd3d06a3b2b39c4e0d_3_0	buggy: ['content-type' => 'application/json'], context: 'method' => $name, 'arguments' => $parameters, ] ); $url = $this->createRequestUri($method['path'], $parameters); $request = new Request( $method['httpMethod'], $url, ['content-type' => 'application/json'], ['content-type' => 'application/json'], $postBody ? json_encode($postBody) : '' ); if (isset($parameters['data'])) { $mimeType = isset($parameters['mimeType']) ? $parameters['mimeType']['value'] : 'application/octet-stream'; $data = $parameters['data']['value']; $upload = new MediaFileUpload($this->client, $request, $mimeType, $data);	type_info: resourceName:unknown method:unknown parameters:unknown postBody:unknown url:unknown request:unknown mimeType:string data:unknown upload:unknown  global_variable: resourceName: unknown function_name: __construct call convertToArrayAndStripNulls createRequestUri	} else { // v2 全部为 xml 请求 if (!empty($options['xml'])) { if (\is_array($options['xml'])) { $options['xml'] = Xml::build($this->attachLegacySignature($options['xml'])); }  if (!\is_string($options['xml'])) { throw new \InvalidArgumentException('The `xml` option must be a string or array.'); }  $options['body'] = $options['xml']; unset($options['xml']); }  if (!empty($options['body']) && \is_array($options['body'])) { $options['body'] = Xml::build($this->attachLegacySignature($options['body'])); }  $options['headers']['Content-Type'] = 'text/xml';
