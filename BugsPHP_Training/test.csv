bugid	bug	buggy	additional_info	patch
0	guzzle_guzzle_da94ef2e433d77af516d69c0f7d3c1b8ecd566dc_1_0_0	buggy: $hostParts = \explode($host, ':', 2); context: public static function isHostInNoProxy(string $host, array $noProxyArray): bool { if (\strlen($host) === 0) { throw new InvalidArgumentException('Empty host provided'); } if (\strpos($host, ':')) { $hostParts = \explode($host, ':', 2); $hostParts = \explode($host, ':', 2); $host = $hostParts[0]; } foreach ($noProxyArray as $area) { if ($area === '*') { return true; } elseif (empty($area)) { continue; } elseif ($area === $host) { return true;	type_info: hostParts:unknown host:unknown area:unknown  global_variable:  function_name: describeType headersFromLines debugResource chooseHandler defaultUserAgent defaultCaBundle normalizeHeaderKeys isHostInNoProxy jsonDecode jsonEncode currentTime idnUriConvert getenv idnToAsci	$hostParts = \explode(':', $host, 2);
1	deployphp_deployer_743e951082e7a7a0e939e89ef7d7fa878198fb2c_1_0_0	"buggy: warning(""Please, make sure your server can connect to $host to clone repo.""); context: $port = $url['port'] ?? '22'; } else if (preg_match('/(?:@|\/\/)([^\/:]+)(?:\:(\d{1,5}))?/', $repository, $matches)) { $host = $matches[1]; $port = $matches[2] ?? '22'; } else { warning(""Can't parse repository url ($repository)""); } if (isset($host) && isset($port)) { run(""ssh-keygen -F $host:$port || ssh-keyscan -p $port -H $host >> ~/.ssh/known_hosts""); } else { warning(""Please, make sure your server can connect to $host to clone repo.""); warning(""Please, make sure your server can connect to $host to clone repo.""); } } $bare = parse('{{deploy_path}}/.dep/repo'); start: run(""[ -d $bare ] || mkdir -p $bare""); run(""[ -f $bare/HEAD ] || $git clone --mirror $repository $bare 2>&1"");"	type_info: repository:unknown git:unknown url:unknown host:unknown port:unknown bare:unknown  global_variable:  function_name: 	"warning(""Please, make sure your server can clone the repo."");"
2	deployphp_deployer_1f488ac612b5105b352188f30cb5cf6a7116651c_2_0_0	"buggy: if (Context::has()) { if (count($hostname) !== 1) { throw new \InvalidArgumentException(""Can return only one host.""); } return Deployer::get()->hosts->get($hostname[0]); } $deployer = Deployer::get(); context: use function Deployer\Support\str_contains; function host(string ...$hostname) { if (Context::has()) { if (count($hostname) !== 1) { throw new \InvalidArgumentException(""Can return only one host.""); } return Deployer::get()->hosts->get($hostname[0]); } $deployer = Deployer::get(); if (Context::has()) { if (count($hostname) !== 1) { throw new \InvalidArgumentException(""Can return only one host.""); } return Deployer::get()->hosts->get($hostname[0]); } $deployer = Deployer::get(); $aliases = Range::expand($hostname); foreach ($aliases as $alias) { if ($deployer->hosts->has($alias)) { $host = $deployer->hosts->get($alias); throw new \InvalidArgumentException(""Host \""$host\"" already exists.""); } } if (count($aliases) === 1) {"	type_info: deployer:unknown aliases:unknown host:unknown  global_variable:  function_name: host localhost currentHost select selectedHosts import desc task before after fail option cd within run runLocally test testLocally on invoke upload download info warning writeln parse set add get has ask askChoice askConfirmation askHiddenResponse input output commandExist commandSupportsOption which remoteEnv error timestamp fetch	$deployer = Deployer::get(); if (count($hostname) === 1 && $deployer->hosts->has($hostname[0])) { return $deployer->hosts->get($hostname[0]); }
3	mockery_mockery_1ace7b2e271e83129cc468346702a9ebaa6e037e_1_0_0	buggy: $this->_countValidatorClass = 'Mockery\CountValidator\Exact'; context: public function times($limit = null) { if (is_null($limit)) { return $this; } if (!is_int($limit)) { throw new \InvalidArgumentException('The passed Times limit should be an integer value'); } $this->_countValidators[$this->_countValidatorClass] = new $this->_countValidatorClass($this, $limit); $this->_countValidatorClass = 'Mockery\CountValidator\Exact'; $this->_countValidatorClass = 'Mockery\CountValidator\Exact'; return $this; }	type_info: limit:unknown  global_variable:  function_name: __construct __toString verifyCall throwAsNecessary _setValues _getReturnValue isEligible isCallCountConstrained validateOrder verify isArgumentListMatcher isAndAnyOtherArgumentsMatcher matchArgs _matchArgs _matchArg with withArgsInArray withArgsMatchedByClosure withArgs withNoArgs withAnyArgs withSomeOfArgs andReturn andReturns andReturnSelf andReturnValues andReturnUsing andReturnArg andReturnUndefined andReturnNull andReturnFalse andReturnTrue andThrow andThrows andThrowExceptions andSet andYield set zeroOrMoreTimes times never once twice atLeast atMost between because ordered globally _defineOrdered getOrderNumber byDefault getMock passthru __clone getName getExceptionMessage	if('Mockery\CountValidator\Exact' !== $this->_countValidatorClass){ $this->_countValidatorClass = 'Mockery\CountValidator\Exact'; unset($this->_countValidators[$this->_countValidatorClass]); }
4	vlucas_phpdotenv_1350cc310bf9138426d5f8949e1cdf3b5daa71f6_1_0_0	buggy: private function process(array $entries) context: })->mapError(static function (string $error) { throw new InvalidFileException(\sprintf('Failed to parse dotenv file. %s', $error)); })->success()->get(); } private function process(array $entries) private function process(array $entries)	type_info:  global_variable:  function_name: parse process	private static function process(array $entries)
5	slimphp_Slim_2b8774e9011a1afbf7992984a31d7f234989ab6f_1_0_0	buggy:  context: private function resolveSlimNotation(string $toResolve): array { preg_match(CallableResolver::$callablePattern, $toResolve, $matches); [$class, $method] = $matches ? [$matches[1], $matches[2]] : [$toResolve, null]; if ($this->container && $this->container->has($class)) { $instance = $this->container->get($class); } else { if (!class_exists($class)) { throw new RuntimeException(sprintf('Callable %s does not exist', $class)); } $instance = new $class($this->container); } return [$instance, $method]; } private function assertCallable($resolved, $toResolve): callable { if (!is_callable($resolved)) {	type_info: callablePattern:string container:unknown toResolve:unknown resolved:array method:unknown instance:unknown class:unknown  global_variable: container: unknown function_name: __construct resolve resolveRoute resolveMiddleware resolveByPredicate isRoute isMiddleware resolveSlimNotation assertCallable bindToContainer prepareToResolve	if ($method) { $class .= '::' . $method . '()'; }
6	slimphp_Slim_740d7fee930c8ba80c92e197d36529539f33af18_2_0_0	buggy: $this->emitStatusLine($response); $this->emitHeaders($response); context: public function emit(ResponseInterface $response): void { $isEmpty = $this->isResponseEmpty($response); if (headers_sent() === false) { $this->emitStatusLine($response); $this->emitHeaders($response); $this->emitStatusLine($response); $this->emitHeaders($response); } if (!$isEmpty) { $this->emitBody($response); } }	type_info: responseChunkSize:unknown isEmpty:unknown  global_variable: responseChunkSize: unknown function_name: __construct emit emitHeaders emitStatusLine emitBody isResponseEmpty	"$this->emitHeaders($response);  // Set the status _after_ the headers, because of PHP's ""helpful"" behavior with location headers. // See https://github.com/slimphp/Slim/issues/1730  $this->emitStatusLine($response);"
7	ramsey_uuid_0b4be8392a80e9a06a100255e32ad88d1a3c5b9b_1_0_0	buggy: $this->timeGenerator = $this->buildTimeGenerator($this->timeProvider); context: public function setCalculator(CalculatorInterface $calculator): void { $this->calculator = $calculator; $this->numberConverter = $this->buildNumberConverter($calculator); $this->timeConverter = $this->buildTimeConverter($calculator); $this->timeGenerator = $this->buildTimeGenerator($this->timeProvider); $this->timeGenerator = $this->buildTimeGenerator($this->timeProvider); }	type_info:  global_variable:  function_name: __construct getBuilder getCalculator getCodec getDceSecurityGenerator getNameGenerator getNodeProvider getNumberConverter getRandomGenerator getTimeConverter getTimeGenerator getValidator setCalculator setDceSecurityProvider setNodeProvider setTimeProvider setValidator buildCodec buildDceSecurityGenerator buildNodeProvider buildNumberConverter buildRandomGenerator buildTimeGenerator buildNameGenerator buildTimeConverter buildUuidBuilder is64BitSystem	/** @psalm-suppress RedundantPropertyInitializationCheck */ if (isset($this->timeProvider)) { $this->timeGenerator = $this->buildTimeGenerator($this->timeProvider); }
8	twigphp_Twig_567b1e2a0639a1d6b414c6b40a074de38b7c992e_3_0_0	buggy:  context: foreach ($array as $k => $v) { $r[$k] = $arrow($v, $k); } return $r; } function twig_array_reduce($array, $arrow, $initial = null) { if (!\is_array($array)) { $array = iterator_to_array($array); } return array_reduce($array, $arrow, $initial); } }	type_info: r:array array:unknown k:unknown initial:unknown  global_variable:  function_name: setEscaper getEscapers setDateFormat getDateFormat setTimezone getTimezone setNumberFormat getNumberFormat getTokenParsers getFilters getFunctions getTests getOperators getName twig_cycle twig_random twig_date_format_filter twig_date_modify_filter twig_date_converter twig_replace_filter twig_round twig_number_format_filter twig_urlencode_filter twig_jsonencode_filter _twig_markup2string twig_array_merge twig_slice twig_first twig_last twig_join_filter twig_split_filter _twig_default_filter twig_get_array_keys_filter twig_reverse_filter twig_sort_filter twig_in_filter twig_trim_filter twig_spaceless twig_escape_filter twig_escape_filter_is_safe twig_convert_encoding twig_convert_encoding twig_convert_encoding twig_ord twig_ord _twig_escape_js_callback _twig_escape_css_callback _twig_escape_html_attr_callback twig_length_filter twig_upper_filter twig_lower_filter twig_title_string_filter twig_capitalize_string_filter twig_length_filter twig_title_string_filter twig_capitalize_string_filter twig_ensure_traversable twig_to_array twig_test_empty twig_test_iterable twig_include twig_source twig_constant twig_constant_is_defined twig_array_batch twig_array_filter twig_array_map twig_array_reduce	"if (!$array instanceof \Traversable) { throw new RuntimeError(sprintf('The ""reduce"" filter only works with arrays or ""Traversable"", got ""%s"" as first argument.', \gettype($array))); }"
9	twigphp_Twig_3a67fc7dc577515dda3ee0887d71d542e82fc0b8_4_0_0	"buggy:  context: protected function validateName($name) { if (false !== strpos($name, ""\0"")) { throw new LoaderError('A template name cannot contain NUL bytes.'); } $name = ltrim($name, '/'); $parts = explode('/', $name); $level = 0; foreach ($parts as $part) { if ('..' === $part) { --$level; } elseif ('.' !== $part) { ++$level; }"	type_info: name:unknown parts:unknown level:integer  global_variable:  function_name: __construct getPaths getNamespaces setPaths addPath prependPath getSource getSourceContext getCacheKey exists isFresh findTemplate parseName normalizeName validateName isAbsolutePath	if ($this->isAbsolutePath($name)) { throw new LoaderError(sprintf('A template name cannot be an absolute path (%s).', $name));
10	twigphp_Twig_e333ccc9f6b0ce3417b1148652215d44e8d4e5ef_6_0_0	buggy: $r = new \ReflectionFunction(\Closure::fromCallable($callable)); context: $callable = [substr($callable, 0, $pos), substr($callable, 2 + $pos)]; } if (\is_array($callable) && method_exists($callable[0], $callable[1])) { $r = new \ReflectionMethod($callable[0], $callable[1]); return $this->reflector = [$r, $callable, $r->class.'::'.$r->name]; } $checkVisibility = $callable instanceof \Closure; $r = new \ReflectionFunction(\Closure::fromCallable($callable)); $r = new \ReflectionFunction(\Closure::fromCallable($callable)); if (false !== strpos($r->name, '{closure}')) { return $this->reflector = [$r, $callable, 'Closure']; } if ($object = $r->getClosureThis()) { $callable = [$object, $r->name]; $callableName = (\function_exists('get_debug_type') ? get_debug_type($object) : \get_class($object)).'::'.$r->name; } elseif ($class = $r->getClosureScopeClass()) {	type_info: callable:unknown class:unknown pos:integer r:unknown checkVisibility:unknown object:unknown callableName:unknown  global_variable:  function_name: compileCallable compileArguments getArguments normalizeName getCallableParameters reflectCallable	"try { $closure = \Closure::fromCallable($callable); } catch (\TypeError $e) { throw new \LogicException(sprintf('Callback for %s ""%s"" is not callable in the current scope.', $this->getAttribute('type'), $this->getAttribute('name')), 0, $e); } $r = new \ReflectionFunction($closure);"
11	twigphp_Twig_f8009347c438bef22ef0603ab3d3ccb44bb10bed_7_0_0	buggy: $this->validateName($name); list($namespace, $shortname) = $this->parseName($name); context: if (isset($this->errorCache[$name])) { if (!$throw) { return false; } throw new LoaderError($this->errorCache[$name]); } try { $this->validateName($name); list($namespace, $shortname) = $this->parseName($name); $this->validateName($name); list($namespace, $shortname) = $this->parseName($name); } catch (LoaderError $e) { if (!$throw) { return false; } throw $e; }	type_info: namespace:array name:unknown throw:boolean shortname:unknown  global_variable:  function_name: __construct getPaths getNamespaces setPaths addPath prependPath getSource getSourceContext getCacheKey exists isFresh findTemplate parseName normalizeName validateName isAbsolutePath	list($namespace, $shortname) = $this->parseName($name);  $this->validateName($shortname);
12	kanboard_kanboard_427abb99611925add8cc79d757ff0e5b48a31a41_1_0_0	buggy: throw new SQLException('SQL Error: '.$e->getMessage()); context: public function handleSqlError(PDOException $e) { $this->cleanup(); $this->db->cancelTransaction(); $this->db->setLogMessage($e->getMessage()); if ($this->db->getDriver()->isDuplicateKeyError($e->getCode())) { return false; } throw new SQLException('SQL Error: '.$e->getMessage()); throw new SQLException('SQL Error: '.$e->getMessage()); }	type_info:  global_variable:  function_name: __construct withLogging withStopWatch withExplain withSql withPositionalParams withNamedParams withLobParam getNbQueries execute bindParams beforeExecute afterExecute cleanup handleSqlError	throw new SQLException('SQL Error['.$e->getCode().']: '.$e->getMessage());
13	predis_predis_619890f7154ccb6aca758fe23fd4a5fd2f728caa_1_0_0	buggy: $parameters['password'] = null; context: return $parameters; } if (is_string($parameters)) { $parameters = Parameters::parse($parameters); } if (is_array($parameters)) { $parameters['database'] = null; $parameters['username'] = null; $parameters['password'] = null; $parameters['password'] = null; if (!isset($parameters['timeout'])) { $parameters['timeout'] = $this->sentinelTimeout; } } return $this->connectionFactory->create($parameters); }	type_info: strategy:unknown parameters:unknown  global_variable: strategy: unknown function_name: __construct setSentinelTimeout setRetryLimit setRetryWait setUpdateSentinels reset wipeServerList add remove createSentinelConnection getSentinelConnection updateSentinels querySentinel handleSentinelErrorResponse querySentinelForMaster querySentinelForSlaves getCurrent getMaster getSlaves pickSlave getConnectionInternal assertConnectionRole getConnectionByCommand getConnectionById getConnectionByRole switchTo switchToMaster switchToSlave isConnected connect disconnect retryCommandOnFailure writeRequest readResponse executeCommand getReplicationStrategy __sleep	 
14	predis_predis_836ab07d407c82aba0135ba2e652f4799aad77db_3_0_0	buggy:  context: public function setArguments(array $arguments) { $this->setAggregate($arguments); $arguments = $this->getArguments(); $this->setWeights($arguments); $arguments = $this->getArguments(); $this->setKeys($arguments); }	type_info: arguments:unknown  global_variable:  function_name: getId setArguments	if (! isset($arguments[3]) && (isset($arguments[2]['weights']) || isset($arguments[2]['aggregate']))) { $options = array_pop($arguments); array_push($arguments, $options['weights'] ?? []); array_push($arguments, $options['aggregate'] ?? 'sum'); }
15	barryvdh_laravel-ide-helper_2fc239623bf62503e81a2d6f8ec1b64537adb25a_3_0_0	buggy: $writingToExternalFile = !$this->write; context: protected function getClassNameInDestinationFile(object $model, string $className): string { $reflection = $model instanceof ReflectionClass ? $model : new ReflectionObject($model) ; $className = trim($className, '\\'); $writingToExternalFile = !$this->write; $writingToExternalFile = !$this->write; $classIsNotInExternalFile = $reflection->getName() !== $className; $forceFQCN = $this->laravel['config']->get('ide-helper.force_fqn', false); if (($writingToExternalFile && $classIsNotInExternalFile) || $forceFQCN) { return '\\' . $className; } $usedClassNames = $this->getUsedClassNames($reflection); return $usedClassNames[$className] ?? ('\\' . $className); }	type_info: model:unknown reflection:unknown className:unknown writingToExternalFile:unknown classIsNotInExternalFile:unknown forceFQCN:unknown usedClassNames:unknown  global_variable:  function_name: __construct handle getArguments getOptions generateDocs loadModels castPropertiesType getTypeOverride getPropertiesFromTable getPropertiesFromMethods isRelationNullable setProperty setMethod unsetMethod getMethodType createPhpDocs getParameters getCollectionClass getRelationTypes hasCamelCaseModelProperties getReturnType getCommentFromDocBlock getReturnTypeFromDocBlock getReturnTypeFromReflection getSoftDeleteMethods getFactoryMethods getCollectionMethods getClassKeyword checkForCustomLaravelCasts getTypeInModel getClassNameInDestinationFile getUsedClassNames writeModelExternalBuilderMethods getParamType extractReflectionTypes getReflectionNamedType runModelHooks	$writingToExternalFile = !$this->write || $this->write_mixin;
16	guzzle_psr7_04896ddeb63173888238ff1e8bad58df650a9d90_3_0_0	"buggy: if (substr($uri, 0, 6) !== 'php://') { context: foreach (['contents', 'name'] as $key) { if (!array_key_exists($key, $element)) { throw new \InvalidArgumentException(""A '{$key}' key is required""); } } $element['contents'] = Utils::streamFor($element['contents']); if (empty($element['filename'])) { $uri = $element['contents']->getMetadata('uri'); if (substr($uri, 0, 6) !== 'php://') { if (substr($uri, 0, 6) !== 'php://') { $element['filename'] = $uri; } } [$body, $headers] = $this->createElement( $element['name'], $element['contents'], $element['filename'] ?? null, $element['headers'] ?? []"	type_info: key:unknown uri:unknown  global_variable:  function_name: __construct getBoundary isWritable getHeaders createStream addElement createElement getHeader	if ($uri && \is_string($uri) && \substr($uri, 0, 6) !== 'php://') {
17	guzzle_psr7_43573616adc604dcae8b4fe4762160f8e75b755a_4_0_0	buggy: if (!isset($result[$key])) { context: $decoder = function ($str) { return $str; }; } foreach (explode('&', $str) as $kvp) { $parts = explode('=', $kvp, 2); $key = $decoder($parts[0]); $value = isset($parts[1]) ? $decoder($parts[1]) : null; if (!isset($result[$key])) { if (!isset($result[$key])) { $result[$key] = $value; } else { if (!is_array($result[$key])) { $result[$key] = [$result[$key]]; } $result[$key][] = $value; } } return $result;	type_info: str:unknown decoder:unknown parts:unknown key:unknown value:unknown  global_variable:  function_name: parse build	if (!array_key_exists($key, $result)) {
